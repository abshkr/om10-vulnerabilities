import React from 'react';
import { Component } from 'react';


class ContentsArea extends Component
{
	constructor(props)
	{
		super(props);

		this.state = {
			from: this.props.from,
			action: this.props.action,
			message: this.props.message,
			content_fomat: this.props.content_format,
			content: ''
		};


		this.viewContents = this.viewContents.bind(this);
		this.updateContents = this.updateContents.bind(this);
		this.getData = this.getData.bind(this);
		this.getData2 = this.getData2.bind(this);

		this.getData2();
	}

	// This allows state change in parent component to initiate state change in child component

	static getDerivedStateFromProps(nextProps, prevState)
	{
		var res = {};
		if (nextProps.from !== prevState.from)
		{
			res['from'] = nextProps.from;  
		}

		if (nextProps.action !== prevState.action)
		{
			res['action'] = nextProps.action;  
		}

		if (nextProps.message !== prevState.message)
		{
			res['message'] = nextProps.message;  
		}

		if (nextProps.content_format !== prevState.content_format)
		{
			res['content_format'] = nextProps.content_format;  
		}

		if (nextProps.content !== prevState.content)
		{
			res['content'] = nextProps.content;  
		}

		return res;
	}

	getData()
	{
		var url;
		if (this.state.from === 'host')
		{
			url = process.env.REACT_APP_API_URL + '/hmi/read_file';
		}
		else if (this.state.from === 'omega')
		{
			//url = "http://10.2.20.53:6443/hmi/parse/omega_message/";
			url = process.env.REACT_APP_API_URL + '/hmi/read_file';
		}

		var act = this.state.action;
		var viewFn = this.viewContents;

		// BEWARE: when using post method with body data, must:
		// 1. on client side, set text content type in header, AND
		// 2. on server side, specify urlencoded body in second arg in the route
		fetch(url, {
			method: 'POST',
			headers: {
				'Accept': 'application/text',
				'Content-Type': 'application/json'
			},
			credentials: 'include',
			body: JSON.stringify({rec_id: this.state.message.REC_ID, content_format: this.state.content_format})
		}).then(response => {
			response.text().then(function (text) {
				//console.log('resp:'+ JSON.stringify(body, null, '\t'));
				if (response.ok)
				{
					if (act === 'view')
					{
						viewFn(text);
					}
					else
					{
						var err = 'Cannot edit text version of message';
						console.error('ERROR:' + err);
						// TODO: clear content area
						alert(err);
					}
				}
				else
				{
					console.error('ERROR:' + text);
					// TODO: clear content area
					viewFn('ERROR: ' + text);
				}
			});
		});
	}


	updateContents(contents)
	{
		this.setState({ content: contents });  
	}

	getData2()
	{
		var url;
		if (this.state.from === 'host')
		{
			url = process.env.REACT_APP_API_URL + '/hmi/read_file';
		}
		else if (this.state.from === 'omega')
		{
			//url = "http://10.2.20.53:6443/hmi/parse/omega_message/";
			url = process.env.REACT_APP_API_URL + '/hmi/read_file';
		}

		var act = this.state.action;
		var updateFn = this.updateContents;

		// BEWARE: when using post method with body data, must:
		// 1. on client side, set text content type in header, AND
		// 2. on server side, specify urlencoded body in second arg in the route
		fetch(url, {
			method: 'POST',
			headers: {
				'Accept': 'application/text',
				'Content-Type': 'application/json'
			},
			credentials: 'include',
			body: JSON.stringify({rec_id: this.state.message.REC_ID, content_format: this.state.content_format})
		}).then(response => {
			response.text().then(function (text) {
				//console.log('resp:'+ JSON.stringify(body, null, '\t'));
				if (response.ok)
				{
					if (act === 'view')
					{
						updateFn(text);
					}
					else
					{
						var err = 'Cannot edit text version of message';
						console.error('ERROR:' + err);
						// TODO: clear content area
						alert(err);
					}
				}
				else
				{
					console.error('ERROR:' + text);
					// TODO: clear content area
				}
			});
		});
	}

	viewContents(contents)
	{
		console.log('from:'+ this.state.from + ', action:'+this.state.action + ', message:'+JSON.stringify(this.state.message,null,'\t'));
		console.log('contents:'+ contents);

		var elem = document.getElementById("contentsArea");
		if (elem == null)
		{
			// TODO: Write error to status bar
			//console.log('no element id by "contentsArea"');
		}
		else
		{
			while (elem.firstChild)
			{
				elem.removeChild(elem.firstChild);
			}

			var newContents = document.createElement('pre');
			newContents.setAttribute("class", "contentsAreaPre");
			//newContents.innerHTML = contents;
			newContents.innerHTML = JSON.stringify(contents,null,'\t');
			elem.appendChild(newContents);

			if (this.state.from === 'host')
			{
				elem.setAttribute("class", "contentsAreaFilledByHostMsg");
			}
			else if (this.state.from === 'omega')
			{
				elem.setAttribute("class", "contentsAreaFilledByOmMsg");
			}
		}
	}

	render()
	{
		console.log('content'+JSON.stringify(this.state.content,null,'\t'));
		return (
			<div>
				<div id="contentsArea" className="contentsArea">
					<pre>{this.state.content}</pre>
				</div>

			</div>
		);
	}

}


export default ContentsArea;
