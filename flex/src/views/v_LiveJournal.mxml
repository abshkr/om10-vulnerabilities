<?xml version="1.0" encoding="utf-8"?>
<s:Group xmlns:fx="http://ns.adobe.com/mxml/2009"
		 xmlns:s="library://ns.adobe.com/flex/spark"
		 xmlns:mx="library://ns.adobe.com/flex/mx"
		 xmlns:components="components.*" 
		 currentState="normal"
		 creationComplete="creationCompleteHandler(event)"
		 removedFromStage="group1_removedFromStageHandler(event)"
		 width="100%" height="100%" >
	
	<s:states>
		<s:State name="normal"/>
		<s:State name="widget"/>
		<s:State name="search" enterState="state1_enterStateHandler(event)"/>
	</s:states>
	
	<fx:Script>
		<![CDATA[
			import components.BusyIndicator;
			import components.JournalFilters;
			import components.JournalToCsv;
			import components.MessageDialog;
			
			import dialogs.CSVJournalReport;
			
			import flash.globalization.LocaleID;
			
			import mx.collections.ArrayCollection;
			import mx.core.FlexGlobals;
			import mx.events.CloseEvent;
			import mx.events.CollectionEvent;
			import mx.events.FlexEvent;
			import mx.events.ItemClickEvent;
			import mx.managers.BrowserManager;
			import mx.managers.PopUpManager;
			import mx.rpc.CallResponder;
			import mx.rpc.events.ResultEvent;
			import mx.rpc.remoting.RemoteObject;
			import mx.utils.ArrayUtil;
			import mx.utils.ObjectUtil;
			
			import spark.collections.Sort;
			import spark.collections.SortField;
			import spark.components.VScrollBar;
			import spark.core.NavigationUnit;
			import spark.events.DropDownEvent;
			import spark.events.GridSelectionEvent;
			import spark.events.IndexChangeEvent;
			import spark.layouts.VerticalLayout;
			
			[Bindable] public var readOnly:Boolean = false;
			[Bindable] public var canUpdate:Boolean = false;
			[Bindable] public var canCreate:Boolean = false;
			[Bindable] public var canDelete:Boolean = false;
			[Bindable] public var hasPassword:Boolean = false;
			
			// to interface with progressBar
			[Bindable] public  var bytesTotal:Number  = 1000000;
			[Bindable] public  var bytesLoaded:Number = 0;
			[Bindable] public  var totalCount:Number  = 0;
			[Bindable] private var totalRecs:int=0;
			[Bindable] private var searchRecs:int=0;
			
			[Bindable] private var currentPage:Number 		= 1;
			[Bindable] private var finishedAllPages:Boolean =  true;
			[Bindable] private var interruptor:Boolean 		=  false;
			
			[Bindable] public var currView:ArrayCollection = new ArrayCollection(["live","search"]);
			
			private var fltrs:String='';
			private var srchStr:String='';
			private var currItem:int = 0;
			
			private var sDate:String;
			private var eDate:String;
			
			private var csvDialog:CSVJournalReport = new CSVJournalReport();
			
			[Bindable] public var filterArr:ArrayCollection = new ArrayCollection();
			
			[Bindable] private var sTime:Date=new Date();
			[Bindable] private var eTime:Date=new Date();
			
			private var busy:BusyIndicator = new BusyIndicator();
			
			private var filterDlg:JournalFilters = new JournalFilters();
			private var dayToCsv:JournalToCsv;
			
			private var f:FileReference = new FileReference();
			private var nc:NetConnection = new NetConnection();
			private var searchJournal:RemoteObject;
			
			private var getJournalTypes:Responder = new Responder(getJournalTypes_resultHandler);
			private var getJournalSearch:Responder = new Responder(getSearch_resultHandler);
			private var getJournalLive:Responder = new Responder(getLive_resultHandler);
			private var getLastSequence:Responder = new Responder(getLastSeq_ResultHandler);
			private var getDrillDown:Responder = new Responder(getDrillDown_resultHandler);

			private var journalPrintArr:ArrayCollection = new ArrayCollection();
			private var journalPrint:String = "";
			private var compVal:Number=0;
			
			[Bindable] private var journalLive:ArrayCollection=new ArrayCollection();
			[Bindable] private var journalArr:ArrayCollection = new ArrayCollection();
			[Bindable] private var tempArr:ArrayCollection = new ArrayCollection();
			[Bindable] private var csvOptions:ArrayCollection = new ArrayCollection(['Selected Range','Upper Screen','Lower Screen']);
			
			private var startSEQ:Number=0;
			private var endSEQ:Number=0;
			
			private var arrSort:Sort = new Sort();
			
			private var connUrl:String;
			
			
			private var lastSeqNum:String;
			private var seqPrep:int=50;
			private var defaultDateRange:String="";
			private var loadClock:Date=new Date();
			
			
			protected function creationCompleteHandler(event:FlexEvent):void
			{
				currView[0] = resourceManager.getString('default','LIVE');
				currView[1] = resourceManager.getString('default','SEARCH');
				busy.verticalCenter = busy.horizontalCenter = 0;
				busy.width = busy.height = 80;
				nccall('LiveJournal.getJournalTypes',getJournalTypes,global.LanguageCode);
				nccall('LiveJournal.getLastSequenceNumber',getLastSequence);
				nccall('LiveJournal.getJournalTypes',getJournalTypes);
				journalArr.filterFunction = journal_filterFunc;
				dg_live.dataProvider.addEventListener(CollectionEvent.COLLECTION_CHANGE,onCollectionChange);
				//getLiveJournals();
				global.gTimer.attachFunction(getLiveJournals,1, 0);
				trace ("..............................attach getLiveJournals............creationCompleteHandler..................................");
			}
			
			private function nccall(...params):void
			{	
				var nc:NetConnection = new NetConnection();
				nc.objectEncoding = ObjectEncoding.AMF3;
				//nc.connect("/amfservices/gateway/amf2/index.php");
				nc.connect(global.gatewayURL);
				nc.call.apply(nc,params);
			}
			
			private function onCollectionChange(event:CollectionEvent):void
			{
				if (global.journalSort == "Y")
				{
					callLater(autoScrollDataGrid);
				}
				else
				{		
					dg_live.scroller.verticalScrollBar.value=0;
				}	
			}
			
			private function autoScrollDataGrid():void {
				if (dg_live) 
				{
					dg_live.validateNow();
					dg_live.scroller.verticalScrollBar.value= dg_live.scroller.verticalScrollBar.maximum;
				}
			}
			private function getLastSeq_ResultHandler(obj:Object):void
			{
				//var seq:int =Number(obj as String);
				var seq:int =Number( String(obj) );
				trace( "in getLastSeq_ResultHandler...........................", seq, seqPrep, lastSeqNum );
				
				if ( lastSeqNum == null )
				{
					lastSeqNum = String( seq-seqPrep );
				}
				//seq = seq-seqPrep;
				//seqPrep=0;
				if(lastSeqNum!=String(seq)){
					trace(lastSeqNum, String(seq));
					nccall('LiveJournal.getLiveFeed',getJournalLive,lastSeqNum, String(seq), global.LanguageCode);
					lastSeqNum = String(seq);	
				}
			}
			private function getLastSeq_ResultHandler2(obj:Object):void
			{
				//var seq:int =Number(obj as String);
				var seq:int =Number( String(obj) );
				trace( "in getLastSeq_ResultHandler...........................", seq, seqPrep, lastSeqNum );
				seq = seq-seqPrep;
				seqPrep=0;
				if(lastSeqNum!=String(seq)){
					trace(lastSeqNum, String(seq));
					nccall('LiveJournal.getLiveFeed',getJournalLive,lastSeqNum,global.LanguageCode);
					lastSeqNum = String(seq);	
				}
			}
			
			private function getLiveJournals(): void
			{
				nccall('LiveJournal.getLastSequenceNumber',getLastSequence);
			}
			
			private function getLive_resultHandler(obj:Object):void
			{
				if (obj != null)
				{	
					for(var i:int=0; i < obj.length;i++)
					{
						if (global.journalSort == "Y")
						{
							journalLive.addItem(obj[i]);
						}
						else
						{	
							journalLive.addItemAt(obj[i],0);
						}
						// handled by mc on main app
						//if (obj[i].MSG_EVENT=='ALARM') 
						//{
						//	global.messageList.addItem(obj[i]);
						//}
					}
					
				}
			}
			
			protected function journal_filterFunc(item:Object):Boolean
			{
				
				if (global.srchText.length > 0)
				{	
					var recShown:String = resourceManager.getString('default','JOURNAL.LABEL.RECORDS_SHOWN');
					var recLoaded:String = resourceManager.getString('default','JOURNAL.LABEL.RECORDS_LOADED');
					var recFound:String = resourceManager.getString('default','JOURNAL.LABEL.RECORDS_FOUND');
					
					//pb.label=String(journalArr.length)+" records shown from "+String(totalRecs)+" loaded out of "+String(totalCount)+" found";
					pb.label= recShown + String(journalArr.length) +"      " + recLoaded + String(totalRecs) + "      " + recFound + String(totalCount);
					if ( journalArr.length == 0 )
					{
						pb.label = this.progressBarLabel + pb.label;
					}
					
					//var tmpStr: String = (item.MESSAGE as String).toLowerCase();
					var tmpStr: String = String(item.MESSAGE).toLowerCase();
					if (tmpStr.indexOf(global.srchText) > -1)
						return true	
					else
						return false;
				}
				else
				{
					return true;
					/*
					if ( fltrs.length==0 )
					{
						return true;
					}
					else
					{
						if (fltrs.indexOf(item.MSG_EVENT) > -1)
							return true	
						else
							return false;
						
					}
					*/
				}
			}
			
			protected function drillDown_filterFunc(item:Object):Boolean
			{
				compVal = Number(item.SEQ);
				if (compVal > startSEQ && compVal < endSEQ) return true else return false;
			}
			
			private function getSearch_resultHandler(obj:Object):void
			{
				totalCount = Number(obj.count);
				totalRecs = 0;
				bytesLoaded = 0;
				if(interruptor)
				{
					totalCount = journalArr.length;
					interruptor = false;
				}
				else
				{
					// uncompress
					if ( obj.hasOwnProperty('zip_on') && obj.zip_on == 1 )
					{
						var mthd:String="zlib";
						if ( obj.hasOwnProperty('zip_mthd') )
						{
							mthd = obj.zip_mthd;
						}
						obj.data = global.uncompressText( obj.data, mthd );
					}
					//var myobj:Object = JSON.parse(obj.data,null);
					var myobj:Object;
					if ( obj.hasOwnProperty('json_on') && obj.json_on == 1 )
					{
						myobj = JSON.parse( obj.data,null );
					}
					else
					{
						myobj = obj.data;
					}
					
					trace( "before populating...totalRecs = journalArr.list.length", journalArr.length, journalArr.list.length, journalArr.source.length);
					//for each(var s:Object in obj.data)
					for each(var s:Object in myobj)
					{
						journalArr.source[s.RN-1] = s;
					}
					trace( "after populating...totalRecs = journalArr.list.length", journalArr.length, journalArr.list.length, journalArr.source.length);
					journalArr.refresh();
					pb.setProgress(journalArr.list.length,obj.count);
					totalRecs = journalArr.list.length;
					searchRecs = journalArr.length;
				}
				// if not finished
				if(journalArr.list.length < totalCount)
				{
					var t1:Number = loadClock.time;
					loadClock = new Date();
					var t2:Number = loadClock.time;
					trace("....................loading pages..............", currentPage, (t2-t1));
					nccall("LiveJournal.getJournalSearch",getJournalSearch ,fltrs,srchStr,sDate,eDate, global.journalSort,global.LanguageCode, ++currentPage);
				}
				else
				{
					finishedAllPages = true;
					pb.setProgress(journalArr.list.length,totalCount);
				}
			}
			
			protected function getJournalTypes_resultHandler(obj:Object):void
			{
				filterArr.removeAll();
				filterArr.refresh();
				for (var i:int=0;i < obj.length;i++)
				{	
					var tmp:Object = Object(
						{
							checked: false,
							caption: obj[i].MESSAGE
						}
					);
					filterArr.addItem(tmp);
				}
			}		
			
			protected function btn_exportCSV_clickHandler(event:MouseEvent):void
			{
				if(journalArr.length > 0)
				{
					var tempStr:String='GEN_DATE,MSG_EVENT,MESSAGE,SEQ\n';
					
					for (var i:int=0; i<(journalArr.length);i++)
					{
						tempStr += '"'+journalArr[i].GEN_DATE+'",';
						tempStr += '"'+journalArr[i].MSG_EVENT+'",';
						tempStr += '"'+journalArr[i].MESSAGE+'",';
						tempStr += '"'+journalArr[i].SEQ+'",';
						tempStr += "\n";
					}
					
					var myDate:String = df2.format(dteRange.sDate);
					f.save(tempStr,'JRNL_'+myDate+'.csv');
				}
				else
				{
					global.msgWarning( resourceManager.getString('default','JOURNAL.MESSAGE.NO_RECORDS_IN_DATERANGE') );
				}
			}
			
			protected function btn_exportCSV2_clickHandler(event:MouseEvent):void
			{
				if(tempArr.length > 0)
				{
					var tempStr:String='GEN_DATE,MSG_EVENT,MESSAGE,SEQ\n';
					
					for (var i:int=0; i<(tempArr.length);i++)
					{
						tempStr += '"'+tempArr[i].GEN_DATE+'",';
						tempStr += '"'+tempArr[i].MSG_EVENT+'",';
						tempStr += '"'+tempArr[i].MESSAGE+'",';
						tempStr += '"'+tempArr[i].SEQ+'",';
						tempStr += "\n";
					}
					
					var myDate:String = df2.format(dteRange.sDate);
					f.save(tempStr,'DRILL_'+myDate+'.csv');
				}
				else
				{
					global.msgWarning( resourceManager.getString('default','JOURNAL.MESSAGE.NO_RECORDS_IN_DATERANGE') );
				}
			}
			
			protected function btn_daytoCSV_clickHandler(event:MouseEvent):void
			{
				dayToCsv = new JournalToCsv();
				dayToCsv.filterArr = filterArr;
				FlexGlobals.topLevelApplication.addEventListener("generateDayCsv", exportcsv_generate);
				PopUpManager.addPopUp(dayToCsv,this,true);
				PopUpManager.centerPopUp(dayToCsv);
			}
			
			protected function exportcsv_generate(event:Event):void
			{
				fltrs = "";
				for (var i:int=0;i < filterArr.length; i++)
				{
					if (filterArr[i].checked == true)
					{
						if (fltrs.length > 0) fltrs +=":";	
						fltrs += filterArr[i].caption;
					}
				}				
				sDate = dateformat.format(dayToCsv.csvDate.selectedDate)+" 12:00:00 AM";
				dayToCsv.csvDate.selectedDate.date = dayToCsv.csvDate.selectedDate.date+1;
				eDate = dateformat.format(dayToCsv.csvDate.selectedDate)+" 12:00:00 AM";
				//getCSVRecords.token=journalService.getCSVJournalEntries(fltrs, sDateStr, eDateStr);
			}	
			
			protected function getCSVRecords_resultHandler(event:ResultEvent):void
			{
				if(event.result!=null)
				{
					var tempResult:ArrayCollection = event.result as ArrayCollection;
					var tempStr:String='GEN_DATE,MSG_EVENT,MSG_CLASS,MESSAGE,COMPANY_CODE,REGION_CODE,SEQ\n';
					
					for (var i:int=0; i<(tempResult.length);i++)
					{
						var tempDate:String = tempResult[i].gen_date;
						tempDate = tempDate.replace(".000000","");
						tempStr += '"'+tempDate+'",';
						tempStr += '"'+tempResult[i].msg_event+'",';
						tempStr += '"'+tempResult[i].msg_class+'",';
						tempStr += '"'+tempResult[i].message+'",';
						tempStr += '"'+tempResult[i].company_code+'",';
						tempStr += '"'+tempResult[i].region_code+'",';
						tempStr += '"'+tempResult[i].seq+'",';
						tempStr += "\n";
					}
					
					var CurrentDateTime:Date = new Date();
					var myDate:String = dateformat.format(CurrentDateTime);
					dayToCsv.btn_save.enabled=true;
					dayToCsv.csvString=tempStr;
					dayToCsv.fileName='journal_day_'+myDate+'.csv';
				}
				else
				{
					dayToCsv.csvDate.selectedDate = new Date();
					global.msgWarning( resourceManager.getString('default','JOURNAL.MESSAGE.NO_RECORDS_IN_DAY') );
				}
			}
			
			protected function ti_keyUpHandler(event:KeyboardEvent):void
			{
				if (event.keyCode==13)
				{	
					global.srchText = ti.text.toLowerCase();
					journalArr.refresh();
					//var msg:String = "journal key="+global.srchText+"; fltrs="+fltrs+"; totalRecs="+totalRecs+"; totalCount="+totalCount+"; jnlArrLen="+journalArr.length;
					//global.msgWarning( msg );
					//var errorBox:MessageDialog = new MessageDialog( msg );
					
				}	
			}
			
			protected function btn_setFilters_clickHandler(event:MouseEvent):void
			{
				filterDlg.filterArr = filterArr;
				filterDlg.addEventListener(CloseEvent.CLOSE, filter_close);
				PopUpManager.addPopUp(filterDlg,this,true);
				PopUpManager.centerPopUp(filterDlg);
			}
			
			protected function filter_close(event:Event):void
			{
				fltrs = "";
				for (var i:int=0;i < filterArr.length; i++)
				{
					if (filterArr[i].checked == true)
					{
						if (fltrs.length > 0) fltrs +=":";	
						fltrs += filterArr[i].caption;
					}
				}
				PopUpManager.removePopUp(filterDlg);
				filterDlg.removeEventListener(CloseEvent.CLOSE, filter_close);
				btn_applyFilters_clickHandler(false);
			}
			
			protected function btn_applyFilters_clickHandler(value:Boolean):void
			{
				tempArr.removeAll();
				totalCount=0;
				if (value==true) dteRange.refreshEndDate();
				sDate = dateformat.format(dteRange.sDate);
				eDate = dateformat.format(dteRange.eDate);
				if(finishedAllPages)
				{
					finishedAllPages = false;
					
					journalArr.source=new Array();
					//journalArr.removeAll();
					trace( "INIT populating...totalRecs = journalArr.list.length", journalArr.length, journalArr.list.length, journalArr.source.length);
					
					journalArr.filterFunction = journal_filterFunc;
					journalArr.refresh();
					trace( "INIT populating...totalRecs = journalArr.list.length", journalArr.length, journalArr.list.length, journalArr.source.length);
					currentPage = 1;
					this.interruptor = false;
					nccall("LiveJournal.getJournalSearch",getJournalSearch ,fltrs,srchStr,sDate,eDate, global.journalSort,global.LanguageCode, currentPage);
				}
				else
				{
					finishedAllPages = false;
					interruptor = true;
				}
			}
			
			protected function changeView(event:ItemClickEvent):void
			{
				switch(event.index)
				{
					case 0: currentState="normal";
						finishedAllPages=true;
						break;
					case 1: 
						currentState="search";
				}
			}
			
			private function checkDateRange(): void
			{
				btn_applyFilters_clickHandler(false);
			}
			
			protected function dg_search_selectionChangeHandler(event:GridSelectionEvent):void
			{
				startSEQ = Number(journalArr[dg_search.selectedIndex].SEQ)-200;
				endSEQ = Number(journalArr[dg_search.selectedIndex].SEQ)+200;
				nccall("LiveJournal.getDrillDown",getDrillDown ,startSEQ,endSEQ,global.LanguageCode);
			}
			
			protected function dg_search_creationCompleteHandler(event:FlexEvent):void
			{
				//nc.objectEncoding = ObjectEncoding.AMF3;
				//nc.connect("/amfservices/gateway/amf2/index.php");
				//nc.call("LiveJournal.getJournalSearch",getJournalSearch ,fltrs,srchStr,sDate,eDate);
			}
			
			private function getDrillDown_resultHandler(obj:Object):void
			{
				tempArr.removeAll();
				tempArr.source = obj as Array;
				//tempArr.refresh();
				var i:int=0;
				var selInd:int=0;
				while (i < tempArr.length)
				{
					if (tempArr[i].SEQ == journalArr[dg_search.selectedIndex].SEQ)
					{
						dg_drill.selectedIndex = i;
						selInd = i;
						//if (selInd > 10) selInd += 5; 
					}
					
					i+=1;
				}
				dg_drill.ensureCellIsVisible(selInd);
			}
			
			protected function state1_enterStateHandler(event:FlexEvent):void
			{
				var value:String = global.getValueFromSiteConfigSettings( "SITE_AUTO_FILTER_WHEN_OPEN_SCREEN" );
				if ( value == 'Y' )
				{
					this.btn_clearFilters_clickHandler( true );
				}
				else
				{
					this.btn_clearFilters_clickHandler( false );
				}
				
			}
			
			protected function btn_clearFilters_clickHandler(value:Boolean):void
			{
				killBtn.setStyle("chromeColor","0xff0000");
				
				//dteRange.getInitFilter();
				global.resetDateRangeComponent( "SITE_DEFAULT_DATERANGE_JOURNAL", this.dteRange );
				journalArr.source=null;
				tempArr.removeAll();
				ti.text= "";
				global.srchText="";
				
				// clean event dialog
				for (var i:int=0; i < filterArr.length;i++) filterArr[i].checked = false;
				fltrs = "";
				filterDlg.filterArr = filterArr;
				if ( filterDlg.jnlEventsList != null )
				{
					var temp:*;
					temp = filterDlg.jnlEventsList.itemRenderer;
					filterDlg.jnlEventsList.itemRenderer=null;
					filterDlg.jnlEventsList.itemRenderer = temp;
				}
				
				
				if ( value == true )
				{
					totalCount = 0;
					bytesTotal = 1000000;
					bytesLoaded = 0;
					currentPage = 1;
					sDate = dateformat.format(dteRange.sDate);
					eDate = dateformat.format(dteRange.eDate);
					finishedAllPages =  false;//true;
					interruptor =  false;
					nccall("LiveJournal.getJournalSearch",getJournalSearch ,fltrs,srchStr,sDate,eDate, global.journalSort,global.LanguageCode, currentPage);
				}
				
			}
			
			protected function killBtn_clickHandler(event:MouseEvent):void
			{
				interruptor=true;
				trace("WTF >>>>>>>>>>");
			}
			
			/* private function getSearch_resultHandler(obj:Object):void
			{
				journalArr.source = obj as Array;
			} */
			
			protected function group1_removedFromStageHandler(event:Event):void
			{
				// TODO Auto-generated method stub
				global.gTimer.removeFunction(getLiveJournals,1);
				trace ("..............................remove getLiveJournals..............................................");
				
			}
			
			protected function get progressBarLabel():String
			{
				var lbl:String="";
				if ( journalArr.length == 0 )
				{
					lbl = resourceManager.getString('default','SEARCH__NO_RESULTS') + "!      "; 
				}
				
				return lbl;
			}
			
		]]>
	</fx:Script>
	<fx:Declarations>
		<s:DateTimeFormatter id="dateformat" dateTimePattern="yyyy-MM-dd HH:mm"/>
		<s:DateTimeFormatter id="df2" dateTimePattern="yyyyMMdd"/>
	</fx:Declarations>
	<s:Panel width="100%" height="100%" skinClass="skins.WidgetPanelSkin"  skinClass.widget="skins.NullSkin" title="Search Filter">
		<s:layout>
			<s:VerticalLayout gap="2"/>
		</s:layout>
		<s:VGroup id="toolbar" width="100%" gap="0" excludeFrom="widget">
			<s:HGroup width="100%" gap="0">
				<s:HGroup includeIn="search" gap="0">
					<components:DKI_ValidatorInput id="ti" width="170" keyUp="ti_keyUpHandler(event)" 
												   enabled="{finishedAllPages}" prompt="{resourceManager.getString('default','global.prompts.searchkey')}"/>		
					<mx:VRule width="10" height="20" strokeWidth="2"/>
					<components:DKI_Button id="btn_setFilters" label="{resourceManager.getString('default','EVENTS')}" click="btn_setFilters_clickHandler(event)" 
										   enabled="{finishedAllPages}" toolTip="{resourceManager.getString('default','JOURNAL.LABEL.CHANGE_EVENT_FILTER')}"/>		
					<mx:VRule width="10" height="20" strokeWidth="2"/>
					<s:Label height="100%" fontWeight="bold" text="{resourceManager.getString('default','DATERANGE')}" verticalAlign="middle"/>
					<components:DKI_DateRange id="dteRange" width="270" timeEnabled="true"
											  enabled="{finishedAllPages}" dateChange="checkDateRange" defaultDays="1"/>
					<s:Spacer width="5"/>
					<components:DKI_Button id="btnRefresh" label="{resourceManager.getString('default','REFRESH')}" type="filteron" 
										   enabled="{finishedAllPages}" click="btn_applyFilters_clickHandler(true)"/>
					<components:DKI_Button id="btnClear" label="{resourceManager.getString('default','RESET')}" type="filteroff" 
										   enabled="{finishedAllPages}" click="btn_clearFilters_clickHandler(true)"/>
					<s:Spacer width="10"/>
					<components:DKI_Button id="btn_exportCSV" type="report" label="{resourceManager.getString('default','CSV')}"
										   enabled="{finishedAllPages}" click="btn_exportCSV_clickHandler(event)" toolTip="{resourceManager.getString('default','JOURNAL.LABEL.CREATE_CSV_FILE')}"/>
				</s:HGroup>
				<s:HGroup width="100%" includeIn="normal,search">
					<s:Spacer width="100%"/>
					<mx:ToggleButtonBar dataProvider="{currView}" selectedIndex="0" itemClick="changeView(event)" enabled="{this.finishedAllPages}"/>
				</s:HGroup>
			</s:HGroup>	
		</s:VGroup>
		
		<s:DataGrid id="dg_live" width="100%" height="100%" dataProvider="{journalLive}" alternatingRowColors="[0xFFFFFF,0xEEEEEE]" 
					excludeFrom="search" rowHeight="23" sortableColumns="false">
			<s:columns>
				<s:ArrayList>
					<s:source>
						<s:GridColumn dataField="GEN_DATE" headerText="{resourceManager.getString('default','TIMESTAMP')}" width="130"/>
						<s:GridColumn dataField="MSG_EVENT" headerText="{resourceManager.getString('default','EVENT')}" width="70"/>
						<s:GridColumn dataField="MESSAGE" headerText="{resourceManager.getString('default','DETAILS')}"/>
					</s:source>
				</s:ArrayList>
			</s:columns>
		</s:DataGrid>
		
		<mx:VDividedBox width="100%" height="100%" includeIn="search">
			<s:VGroup width="100%" height="100%">
				<s:DataGrid id="dg_search" width="100%" height="100%" dataProvider="{journalArr}" selectionChange="dg_search_selectionChangeHandler(event)" 
							alternatingRowColors="[0xFFFFFF,0xEEEEEE]" includeIn="search" creationComplete="dg_search_creationCompleteHandler(event)" rowHeight="23">
					<s:columns>
						<s:ArrayList>
							<s:source>
								<s:GridColumn dataField="GEN_DATE" headerText="{resourceManager.getString('default','TIMESTAMP')}" width="130"/>
								<s:GridColumn dataField="MSG_EVENT" headerText="{resourceManager.getString('default','EVENT')}" width="70"/>
								<s:GridColumn dataField="MESSAGE" headerText="{resourceManager.getString('default','DETAILS')}"/>
							</s:source>
						</s:ArrayList>
					</s:columns>
				</s:DataGrid>
				<s:HGroup width="100%">
					<!--components:Downloader id="pb" width="100%" height="18"/-->
					<mx:ProgressBar id="pb" width="100%" height="22"  mode="manual" source="{this}" 
									label="{progressBarLabel}{resourceManager.getString('default','JOURNAL.LABEL.RECORDS_SHOWN')}{journalArr.length}      {resourceManager.getString('default','JOURNAL.LABEL.RECORDS_LOADED')}{journalArr.list.length}      {resourceManager.getString('default','JOURNAL.LABEL.RECORDS_FOUND')}{totalCount}" 
									labelPlacement="center" includeIn="search"/>
					<s:Button id="killBtn" width="18" height="18" label="" cornerRadius="12" enabled="{!finishedAllPages}" visible="{!finishedAllPages}" includeInLayout="{!finishedAllPages}"
							  click="killBtn_clickHandler(event)"/>
				</s:HGroup>
				
				
			</s:VGroup>
			<s:VGroup width="100%" height="100%">
				<s:HGroup width="100%">
					<s:Spacer width="100%"/>
					<components:DKI_Button id="btn_exportCSV2" type="report" label="{resourceManager.getString('default','CSV')}" click="btn_exportCSV2_clickHandler(event)" toolTip="{resourceManager.getString('default','JOURNAL.LABEL.CREATE_CSV_FILE')}"/>
				</s:HGroup>
				<s:DataGrid id="dg_drill" width="100%" height="100%" alternatingRowColors="[0xFFFFFF,0xEEEEEE]" dataProvider="{tempArr}" rowHeight="23">
					<s:columns>
						<s:ArrayList>
							<s:source>
								<s:GridColumn dataField="GEN_DATE" headerText="{resourceManager.getString('default','TIMESTAMP')}" width="130"/>
								<s:GridColumn dataField="MSG_EVENT" headerText="{resourceManager.getString('default','EVENT')}" width="70"/>
								<s:GridColumn dataField="MESSAGE" headerText="{resourceManager.getString('default','DETAILS')}"/>
							</s:source>
						</s:ArrayList>
					</s:columns>
				</s:DataGrid>
			</s:VGroup>
		</mx:VDividedBox>		
	</s:Panel>
</s:Group>

