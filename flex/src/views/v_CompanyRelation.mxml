<?xml version="1.0" encoding="utf-8"?>
<s:VGroup xmlns:fx="http://ns.adobe.com/mxml/2009"
		  xmlns:s="library://ns.adobe.com/flex/spark"
		  xmlns:mx="library://ns.adobe.com/flex/mx"
		  xmlns:components="components.*"
		  creationComplete="creationCompleteHandler(event)"
		  gap="2" width="100%" height="100%">
	
	<s:states>
		<s:State name="normal" enterState="this.toolbar.enabled=true"/>
		<s:State name="widget" enterState="this.toolbar.enabled=true"/>
		<s:State name="edit" enterState="callLater(function():void{dataGrid.ensureCellIsVisible(idx);});this.toolbar.enabled=false"/>
		<s:State name="create" enterState="this.toolbar.enabled=false"/>
		<s:State name="detail" enterState="view_detailsHandler(event);this.toolbar.enabled=false"/>
	</s:states>
	
	<fx:Script>
		<![CDATA[
			import com.adobe.fiber.runtime.lib.DateTimeFunc;
			
			import components.ActionDialog;
			import components.ConfirmDialog;
			import components.DeleteDialog;
			import components.ExportData;
			import components.MessageDialog;
			import components.TransactionsDlg;
			import components.ViewPopupDlg;
			
			import dm.remoteBulkListService;
			import dm.remoteDataService;
			import dm.remoteListService;
			import dm.utils.tools;
			
			import flash.events.KeyboardEvent;
			import flash.globalization.LocaleID;
			
			import flashx.textLayout.container.ScrollPolicy;
			
			import mx.collections.ArrayCollection;
			import mx.controls.Alert;
			import mx.controls.DateField;
			import mx.events.FlexEvent;
			import mx.rpc.events.ResultEvent;
			import mx.utils.ObjectUtil;
			import mx.utils.StringUtil;
			
			import renderers.DKI_HeaderColumn_Renderer;
			
			import spark.components.ToggleButton;
			import spark.components.VScrollBar;
			import spark.components.gridClasses.IGridItemRenderer;
			import spark.events.GridEvent;
			import spark.events.GridSelectionEvent;
			import spark.events.IndexChangeEvent;
			
			import views.v_AllocationPeriod;
			import views.v_LoadSchedules;
			
			public static const MAIN_WINDOW_WIDTH:int = 1500;
			
			[Bindable] public var readOnly:Boolean = false;
			[Bindable] public var canUpdate:Boolean = false;
			[Bindable] public var canCreate:Boolean = false;
			[Bindable] public var canDelete:Boolean = false;
			[Bindable] public var hasPassword:Boolean = false;
			
			[Bindable] public var labelWidth:uint = 120;
			[Bindable] public var labelHeight:uint = 26;
			[Bindable] public var fieldWidth:uint = 300;
			[Bindable] public var fieldHeight:uint = 26;
			[Bindable] public var spaceWidth:uint = 15;
			[Bindable] public var spaceHeight:uint = 2;
			
			private var idx:int=-1;
			
			private var currentFilter:String=null;
			private var currentOrder:String='partner_code';
			private var currentDirection:String="ASC";
			
			private var currentOffset:int=0;
			private var currentPageSize:int=1000;
			[Bindable] private var totalLength:int=0;
			[Bindable] private var currentLength:int=0;
			
			private var currentFields:Object=new Object();
			private var currentTypes:Object=new Object();
			private var currentSorts:Object=new Object();
			private var currentOrders:Object=new Object();
			//private var currentSorts:Object={dh_cmpt_no:'ASC'};
			//private var currentOrders:Object={dh_cmpt_no:1};
			private var currentSortSeq:int=0;
			
			private var  originalItems:ArrayCollection;
			
			
			private var confirmReport:ActionDialog;
			
			//private var exportContents:String="";
			private var f:FileReference = new FileReference();
			
			
			[Bindable] private var pagedRecords:remoteListService;
			
			private var deleteAction:remoteDataService = new remoteDataService( "CompanyRelationService.delete", null, deleteData_resultHandler, 1 );
			private var createAction:remoteDataService = new remoteDataService( "CompanyRelationService.create", null, createData_resultHandler, 1 );
			private var updateAction:remoteDataService = new remoteDataService( "CompanyRelationService.update", null, updateData_resultHandler, 1 );
			
			private var companyRelationChecker:remoteDataService = new remoteDataService( "CompanyRelationService.isCompanyRelationExisted", null, companyRelationChecker_resultHandler, 2 );
			
			private var gridColumnSequenceMaker:remoteDataService = new remoteDataService( "ScreenGridColumnService.lookupGridColumnSequence", null, gridColumnSequenceMaker_resultHandler, 1 );
			private var _gridColumnSequenceString:String="";
			
			//[Bindable] private var parentCompanyList:remoteDataService = new remoteDataService( "ListLibraryService.lookupCompany", null, lookupParentCompany_resultHandler );
			[Bindable] private var parentCompanyList:remoteDataService = new remoteDataService( "ListLibraryService.lookupCompany", null, lookupParentCompany_resultHandler );
			[Bindable] private var childCompanyList:remoteDataService = new remoteDataService( "ListLibraryService.lookupCompany", null, lookupChildCompany_resultHandler );
			
			[Bindable] private var companyTypeList:remoteDataService = new remoteDataService( "ListLibraryService.lookupCompanyTypes", null, lookupCompanyType_resultHandler );
			[Bindable] private var parentRoleList:remoteDataService = new remoteDataService( "CompanyRelationService.lookupParentCompanyRoles", null, lookupParentRole_resultHandler );
			[Bindable] private var childRoleList:remoteDataService = new remoteDataService( "CompanyRelationService.lookupChildCompanyRoles", null, lookupChildRole_resultHandler );
			
			
			//private var genData:ExportData = new ExportData();
			
			public var parentParams:Object = new Object();
			public var mainListSelection:int = -1;
			private var _saveButtonClicked:Boolean=false;
			
			public var isPopupWindow:Boolean=false;
			
			[Embed (source="/assets/Indicator.png" )] private var ico_indicator:Class;		
			[Embed (source="/assets/Error.png" )] private var ico_error:Class;	
			
			[Bindable] private var disp_ico:Class=ico_indicator;
			
			
			protected function creationCompleteHandler(event:FlexEvent):void
			{
				pagedRecords = new remoteListService( this.dataGrid, "CompanyRelationService.getPaged", null, getPageData_resultHandler );
				trace ("-------------start creationCompleteHandler");
				this.gridColumnSequenceMaker.service( "COMPANY_RELATION" );
				trace ("------------End creationCompleteHandler");
			}
			
			protected function gridColumnSequenceMaker_resultHandler():void
			{
				this._gridColumnSequenceString =  gridColumnSequenceMaker.dataString;
				
				if ( _gridColumnSequenceString.length > 0 )
				{
					global.adjustGridColumnSequence( _gridColumnSequenceString.substr(1), dataGrid );
				}
				
				this.startTheWindow();
			}
			
			protected function startTheWindow():void
			{
				trace ("-------------start startTheWindow");
				//pagedRecords = new remoteListService( this.dataGrid, "CompanyRelationService.getPaged", null, getPageData_resultHandler );
				//resourceManager.localeChain = ['zh_CN'];
				//global.LanguageCode="CHN";
				
				var value:String = global.getValueFromSiteConfigSettings( "SITE_AUTO_FILTER_WHEN_OPEN_SCREEN" );
				if ( value == 'Y' )
				{
					if ( this.isPopupWindow == false )
					{
						this.startFiltering();
					}
				}
				else
				{
					;
				}
				
				this.companyTypeList.service();
				this.parentRoleList.service(  );
				this.childRoleList.service(  );
				this.parentCompanyList.service( 9 );
				this.childCompanyList.service( 9 );
				
				
				trace ("------------End startTheWindow");
				
				
				//trace("this.grid.scroller1111", this.dataGrid.scroller);
				//trace("this.grid.scroller.verticalScrollBar.value", this.dataGrid.scroller.verticalScrollBar.value);
				this.dataGrid.scroller.verticalScrollBar.addEventListener(Event.CHANGE, verticalScrollBarChanged);
				this.dataGrid.addEventListener(KeyboardEvent.KEY_UP, reportKeyUp);
				this.dataGrid.columnHeaderGroup.addEventListener(GridEvent.GRID_CLICK, headerClickListener);
				
			}
			
			
			
			protected function startLoadingPages():void
			{
				killBtn.setStyle("chromeColor","0xff0000");
				this.killBtn.includeInLayout=true;
				this.killBtn.visible = true;
				this.killBtn.enabled = true;
				
				resumeBtn.setStyle("chromeColor","0x00ff00");
				this.resumeBtn.includeInLayout=true;
				this.resumeBtn.visible = true;
				this.resumeBtn.enabled = false;
				
				//this.btn_create.enabled = false
				this.btn_export.enabled = false;
				this.dataGrid.enabled = false;
				this.toolbar.enabled = false;
				//this.panel.enabled = false;
				
				currentLength=0;
				currentOffset = 0;
				
				//this.exportContents = this.genData.prepExportHeader( dataGrid );
				
				//currentPage=1;
				pagedRecords.currentPage=1;
				pagedRecords.removeAll();
				pagedRecords.refresh();
				this.pb.values(0, 0);
				//this.pagedRecords.service( currentFields, currentTypes, currentSorts, currentOrders, currentPage, currentPageSize );
				this.pagedRecords.listService( currentFields, currentTypes, currentSorts, currentOrders );
			}
			
			protected function endLoadingPages():void
			{
//				this.btn_create.enabled = this.canCreate;
				this.btn_export.enabled = true;
				this.dataGrid.enabled = true;
				this.toolbar.enabled = true;
				//this.panel.enabled = true;
				//this.pb.values(totalCount, totalCount);
				this.pb.values(pagedRecords.totalCount, pagedRecords.totalCount, true);
				
				this.killBtn.includeInLayout=true;
				this.killBtn.visible = true;
				this.killBtn.enabled = false;
				
				this.resumeBtn.includeInLayout=true;
				this.resumeBtn.visible = true;
				//if ( totalLength > totalCount )
				if ( pagedRecords.totalLength > pagedRecords.totalCount )
				{
					this.resumeBtn.enabled = true;
				}
				else
				{
					this.resumeBtn.enabled = false;
				}
			}
			
			protected function exportCsvHandler(event:MouseEvent):void
			{
				this.confirmReport = new ActionDialog( doExport, cancelExport, resourceManager.getString('default','CONFIRM_REPORT_CSV') );
				
				//this.startLoadingPages();
			}
			
			private function getPageData_resultHandler():void
			{
				// if not finished
				if(pagedRecords.length < pagedRecords.totalCount)
				{
					pb.values(pagedRecords.length,pagedRecords.totalCount)
				}
				else
				{
					pb.values(pagedRecords.length,pagedRecords.totalCount)
					
					this.endLoadingPages();
					
					this.dataGrid.selectedIndex = this.mainListSelection;
					if ( this.mainListSelection >= 0)
					{
						this.dataGrid_selectionChangeHandler(null);
					}
					this.mainListSelection = -1;
				}
				
			}
			
			
			public function doExport():void
			{
				//genData.prepOther(dataGrid,'allocationlist.csv', this.pagedRecords);
				
				//f.save( this.exportContents, "allocationlist.csv" );
				f.save( pagedRecords.exportContents, "companyRelationlist.csv" );
				
				this.endLoadingPages();
			}
			
			
			public function cancelExport():void
			{
				this.endLoadingPages();
				
				//trace( this.exportContents );
			}
			
			public function doNothing():void
			{
			}
			
			
			
			
			
			protected function lookupCompanyType_resultHandler( ):void
			{
				global.gCompanyTypes = this.companyTypeList;
			}
			
			
			protected function lookupParentRole_resultHandler():void
			{
				trace ("--------------Start lookupParentRole_resultHandler");
				if ( currentFields.hasOwnProperty( "parent_cmpy_role" ) )
				{
					this.fltr_parent_role.selectedIndex = tools.getItemIndexFromCode( currentFields["parent_cmpy_role"], parentRoleList, "cmpy_role_id");
				}
				trace ("----------------End lookupParentRole_resultHandler");
				if (currentState == "edit" || currentState == "detail")
				{
					var idInForm:int=-1;
					idInForm = tools.getItemIndexFromCode( dataGrid.selectedItem.parent_cmpy_role, parentRoleList, "cmpy_role_id");
					this.parent_cmpy_role.selectedIndex = idInForm;
				}
			}
			
			protected function lookupParentCompany_resultHandler():void
			{
				trace ("--------------Start lookupParentCompany_resultHandler");
				if ( currentFields.hasOwnProperty( "parent_cmpy_code" ) )
				{
					this.fltr_parent_company.selectedIndex = tools.getItemIndexFromCode( currentFields["parent_cmpy_code"], parentCompanyList, "cmpy_code");
				}
				trace ("----------------End lookupParentCompany_resultHandler");
				if (currentState == "edit" || currentState == "detail")
				{
					var idInForm:int=-1;
					idInForm = tools.getItemIndexFromCode( dataGrid.selectedItem.parent_cmpy_code, parentCompanyList, "cmpy_code");
					this.parent_cmpy_code.selectedIndex = idInForm;
				}
			}
			
			protected function lookupChildRole_resultHandler():void
			{
				trace ("--------------Start lookupChildRole_resultHandler");
				if ( currentFields.hasOwnProperty( "child_cmpy_role" ) )
				{
					this.fltr_child_role.selectedIndex = tools.getItemIndexFromCode( currentFields["child_cmpy_role"], childRoleList, "cmpy_role_id");
				}
				trace ("----------------End lookupChildRole_resultHandler");
				if (currentState == "edit" || currentState == "detail")
				{
					var idInForm:int=-1;
					idInForm = tools.getItemIndexFromCode( dataGrid.selectedItem.child_cmpy_role, childRoleList, "cmpy_role_id");
					this.child_cmpy_role.selectedIndex = idInForm;
				}
			}
			
			protected function lookupChildCompany_resultHandler():void
			{
				for ( var i:int=childCompanyList.length-1; i>=0; i-- )
				{
					var o:Object = childCompanyList.getItemAt(i);
					if ( (o['cmpy_type'] & 0x02) > 0 )
					{
						childCompanyList.removeItemAt(i);
					}
				}
				
				if ( currentFields.hasOwnProperty( "child_cmpy_code" ) )
				{
					this.fltr_child_company.selectedIndex = tools.getItemIndexFromCode( currentFields["child_cmpy_code"], childCompanyList, "cmpy_code");
				}
				if (currentState == "edit" || currentState == "detail")
				{
					var idInForm:int=-1;
					idInForm = tools.getItemIndexFromCode( dataGrid.selectedItem.child_cmpy_code, childCompanyList, "cmpy_code");
					this.child_cmpy_code.selectedIndex = idInForm;
				}
			}
			
			
			private function verticalScrollBarChanged(event:Event):void
			{
				if ( this.dataGrid.scroller != null)
				{
					var vs:VScrollBar;
					vs = this.dataGrid.scroller.verticalScrollBar;
					//trace("this.grid.scroller.verticalScrollBar.value", vs.value, vs.maximum, vs.minimum, vs.stepSize, vs.pageSize, vs.	snapInterval);
				}
				else
				{
					trace("grid is changed");
				}
			}
			
			private function reportKeyUp(event:KeyboardEvent):void
			{
				if ( this.dataGrid.scroller != null)
				{
					var vs:VScrollBar;
					vs = this.dataGrid.scroller.verticalScrollBar;
					//trace("this.grid.scroller.verticalScrollBar.value", vs.value, vs.maximum, vs.minimum, vs.stepSize, vs.pageSize, vs.	snapInterval);
				}
				else
				{
					trace("grid is changed");
				}
			}
			
			private function headerClickListener(event:GridEvent):void
			{
				if(event.column.dataField!='NA')
				{
					var currentRenderer:IGridItemRenderer;
					var dir:String;
					
					if ( global.sortingBySingleColumn == true )
					{	// sorted by single column only
						for (var i:int=0; i < dataGrid.columns.length; i++)
						{
							currentRenderer = dataGrid.columnHeaderGroup.getHeaderRendererAt(i);
							if ( currentRenderer != null)
							{
								(currentRenderer as DKI_HeaderColumn_Renderer).setImage('');
							}
							//(currentRenderer as DKI_HeaderColumn_Renderer).setImage(''); 
						}
					}
					else
					{	// sorted by multiple columns
						;
					}
					currentRenderer = dataGrid.columnHeaderGroup.getHeaderRendererAt(event.columnIndex);
					
					if( currentSorts.hasOwnProperty(event.column.dataField ) )
					{
						dir = currentSorts[event.column.dataField];
						if( dir=="ASC" )
						{
							dir = "DESC";
						}
						else if ( dir == "DESC" )
						{
							dir = "";
						}
						else if ( dir == "" )
						{
							dir = "ASC";
						}
						else 
						{
							dir = "ASC";
						}
						
						if ( dir != "" )
						{
							currentSorts[event.column.dataField] = dir;	
						}
						else
						{
							delete currentSorts[event.column.dataField];
							delete currentOrders[event.column.dataField];
						}
					}
					else
					{
						if ( global.sortingBySingleColumn == true )
						{	// sorted by single column only
							currentSorts = new Object();
							currentOrders = new Object();
							currentSortSeq = 0;
						}
						else
						{	// sorted by multiple columns
							;
						}
						currentSorts[event.column.dataField] = "ASC";	
						dir = currentSorts[event.column.dataField];
						currentSortSeq += 1;
						currentOrders[event.column.dataField] = currentSortSeq;	
					}
					(currentRenderer as DKI_HeaderColumn_Renderer).setImage(dir);
					this.startFiltering();
				}
			}
			
			
			protected function dataGrid_selectionChangeHandler(event:GridSelectionEvent):void
			{
				if(currentState != 'widget')
				{
					if ( dataGrid.selectedIndex < 0 )
					{
						return;
					}
					
					idx=dataGrid.selectedIndex;
					//dataGrid.ensureCellIsVisible(idx+11);
					dataGrid.ensureCellIsVisible(idx);

					currentState = "edit";					
					this.btn_save.enabled = this.canUpdate;
					this.ms_switch.selected = false;
					this.ms_switch_changeHandler( null );
					
					this.child_cmpy_code.selectedIndex = tools.getItemIndexFromCode( dataGrid.selectedItem.child_cmpy_code, childCompanyList, "cmpy_code");
					
					// get selectedIndex for company list
					parent_cmpy_code.selectedIndex = tools.getItemIndexFromCode( this.dataGrid.selectedItem.parent_cmpy_code, this.parentCompanyList, "cmpy_code");
				}
			}
			
			private function checkCompanyRelationKey():void
			{
				var pcmpy_code:String="";
				var pcmpy_role:int=-1;
				var ccmpy_code:String="";
				var ccmpy_role:int=-1;
				
				if ( this.parent_cmpy_role.selectedIndex>=0)
				{
					pcmpy_role = this.parentRoleList[parent_cmpy_role.selectedIndex].cmpy_role_id;
				}
				else
				{
					pcmpy_role = -1;
				}
				
				if ( this.parent_cmpy_code.selectedIndex>=0)
				{
					pcmpy_code = parentCompanyList[parent_cmpy_code.selectedIndex].cmpy_code;
				}
				else
				{
					pcmpy_code = "";
				}
				
				if ( this.child_cmpy_role.selectedIndex>=0)
				{
					ccmpy_role = this.childRoleList[child_cmpy_role.selectedIndex].cmpy_role_id;
				}
				else
				{
					ccmpy_role = -1;
				}
				
				if ( this.child_cmpy_code.selectedIndex>=0)
				{
					ccmpy_code = childCompanyList[child_cmpy_code.selectedIndex].cmpy_code;
				}
				else
				{
					ccmpy_code = "";
				}
				
				companyRelationChecker.service( pcmpy_code, pcmpy_role, ccmpy_code, ccmpy_role );
			}
			
			protected function companyRelationChecker_resultHandler( ):void
			{
				trace ("companyRelationChecker", companyRelationChecker.dataInteger);
				
				// need check if the child company is re-selected
				var childChanged:Boolean=true;
				if ( currentState == "edit" )
				{
					var ccmpy_code:String="";
					if ( this.child_cmpy_code.selectedIndex>=0)
					{
						ccmpy_code = childCompanyList[child_cmpy_code.selectedIndex].cmpy_code;
					}
					if ( dataGrid.selectedIndex>=0 && ccmpy_code == dataGrid.selectedItem.child_cmpy_code )
					{
						childChanged = false;
					}
				}
				
				//if ( companyRelationChecker.dataInteger > 0 )
				if ( companyRelationChecker.dataInteger > 0 && this.child_cmpy_code.selectedItems.length == 1 && childChanged )
				{
					global.msgWarning( resourceManager.getString('default','ALERT__COMPANY_RELATION_EXIST') );
					this.btn_save.enabled = this.canCreate;
				}
				else
				{
					if ( this._saveButtonClicked == true )
					{
						//this.createRecord();
						if (currentState == "create")
						{
							createRecord();
						}
						if (currentState == "edit")
						{
							editRecord();
						}
					}
				}
				
				this._saveButtonClicked = false;
			}
			
			
			
			protected function cancel_clickHandler():void
			{
				clearDetail();
				if ( currentState== "create" )
				{
					dataGrid.enabled=true;
				}
				currentState="normal";
				dataGrid.selectedIndex = -1;
			}			
			
			
			
			protected function fltr_parent_role_changeHandler():void
			{
				//if (currentState == "edit") clearDetail();
				//startFiltering();
				
				if ( this.fltr_parent_role.selectedIndex < 0 )
				{
					this.parentCompanyList.service(9);
				}
				else
				{
					var role:int = this.fltr_parent_role.selectedItem.cmpy_role_id;
					this.parentCompanyList.service( role );
				}
				
			}
			
			protected function fltr_parent_company_changeHandler():void
			{
				//if (currentState == "edit") clearDetail();
				//startFiltering();
			}
			
			protected function fltr_child_role_changeHandler():void
			{
				//if (currentState == "edit") clearDetail();
				//startFiltering();
				
				if ( this.fltr_child_role.selectedIndex < 0 )
				{
					this.childCompanyList.service(9);
				}
				else
				{
					var role:int = this.fltr_child_role.selectedItem.cmpy_role_id;
					this.childCompanyList.service( role );
				}
				
			}
			
			protected function fltr_child_company_changeHandler():void
			{
				if (currentState == "edit") clearDetail();
				startFiltering();
			}
			
			private function startFiltering():void
			{
				var fields:Object;
				var types:Object;
				
				//interruptor=false;
				pagedRecords.interruptor=false;
				
				fields = new Object();
				types = new Object();
				
				if (fltr_parent_role.selectedIndex > -1) 
				{
					fields["parent_cmpy_role"] = parentRoleList[fltr_parent_role.selectedIndex].cmpy_role_id;
				}
				else
				{
					if ( global.setComboBoxNoSelection == true )
					{
						fltr_parent_role.selectedIndex = -1;
					}
					fields["parent_cmpy_role"] = "";
				}
				types["parent_cmpy_role"] = "NUMBER";
				
				if (fltr_parent_company.selectedIndex > -1) 
				{
					fields["parent_cmpy_code"] = parentCompanyList[fltr_parent_company.selectedIndex].cmpy_code;
				}
				else
				{
					if ( global.setComboBoxNoSelection == true )
					{
						fltr_parent_company.selectedIndex = -1;
					}
					fields["parent_cmpy_code"] = "";
				}
				types["parent_cmpy_code"] = "EXACT_STRING";
				
				if (fltr_child_role.selectedIndex > -1) 
				{
					fields["child_cmpy_role"] = childRoleList[fltr_child_role.selectedIndex].cmpy_role_id;
				}
				else
				{
					if ( global.setComboBoxNoSelection == true )
					{
						fltr_child_role.selectedIndex = -1;
					}
					fields["child_cmpy_role"] = "";
				}
				types["child_cmpy_role"] = "NUMBER";
				
				if (fltr_child_company.selectedIndex > -1) 
				{
					fields["child_cmpy_code"] = childCompanyList[fltr_child_company.selectedIndex].cmpy_code;
				}
				else
				{
					if ( global.setComboBoxNoSelection == true )
					{
						fltr_child_company.selectedIndex = -1;
					}
					fields["child_cmpy_code"] = "";
				}
				types["child_cmpy_code"] = "EXACT_STRING";
				
				
				currentFields = fields;
				currentTypes = types;
				
				this.startLoadingPages();
				
				trace("this.grid.scroller3333", this.dataGrid.scroller);
				trace("this.grid.scroller.verticalScrollBar.value", this.dataGrid.scroller.verticalScrollBar.value);
			}
			
			private function findByPrimaryKey(pcmpy:String, prole:Number, ccmpy:String, crole:Number):void
			{
				var fields:Object;
				var types:Object;
				
				fields = new Object();
				types = new Object();
				
				fields["parent_cmpy_code"] = pcmpy;
				types["parent_cmpy_code"] = "EXACT_STRING";
				fields["parent_cmpy_role"] = prole;
				types["parent_cmpy_role"] = "NUMBER";
				fields["child_cmpy_code"] = ccmpy;
				types["child_cmpy_code"] = "EXACT_STRING";
				fields["child_cmpy_role"] = crole;
				types["child_cmpy_role"] = "NUMBER";
				
				//currentPage=1;
				pagedRecords.currentPage=1;
				pagedRecords.removeAll();
				pagedRecords.refresh();
				//this.pagedRecords.service( fields, types, currentSorts, currentOrders, currentPage, currentPageSize );
				this.pagedRecords.listService( fields, types, currentSorts, currentOrders );
			}
			
			protected function resetRecords(event:MouseEvent):void
			{
				this.setFilters( this.parentParams );
				return;
			}
			
			protected function filterRecords(event:MouseEvent):void
			{
				if (currentState == "edit") clearDetail();
				this.startFiltering();
			}
			
			protected function refreshRecords(event:MouseEvent):void
			{
				if ( currentState != "widget" )
				{
					currentState = 'normal';
					dataGrid.enabled=true;
				}
				clearDetail();
				
				fltr_parent_role.selectedIndex = -1;
				fltr_parent_company.selectedIndex = -1;
				fltr_child_role.selectedIndex = -1;
				fltr_child_company.selectedIndex = -1;
				
				dataGrid.selectedIndex = -1;
				currentFilter = null;
				currentOrder = null;
				currentFields = new Object();
				currentTypes = new Object();
				
				currentSorts = new Object();
				currentOrders = new Object();
				var currentRenderer:IGridItemRenderer;
				for (var i:int=0; i < dataGrid.columns.length; i++)
				{
					currentRenderer = dataGrid.columnHeaderGroup.getHeaderRendererAt(i);
					if ( currentRenderer != null)
					{
						(currentRenderer as DKI_HeaderColumn_Renderer).setImage('');
					}
					//(currentRenderer as DKI_HeaderColumn_Renderer).setImage(''); 
				}
				this.startFiltering();
				//this.startLoadingPages();
				trace("this.grid.scroller2222", this.dataGrid.scroller);
				trace("this.grid.scroller.verticalScrollBar.value", this.dataGrid.scroller.verticalScrollBar.value);
			}
			
			protected function clearDetail(): void
			{
				if (currentState != 'widget')
				{
				}
			}			
			
			private function editRecord():void
			{
				
				if ( this.checkFields() > 0 )
				{
					this.btn_save.enabled = this.canUpdate;
					return;
				}
				
				// get the old values
				var objO:Object = new Object();
				objO.parent_cmpy_role = dataGrid.selectedItem.parent_cmpy_role;
				objO.parent_cmpy_code = dataGrid.selectedItem.parent_cmpy_code;
				objO.child_cmpy_role = dataGrid.selectedItem.child_cmpy_role;
				objO.child_cmpy_code = dataGrid.selectedItem.child_cmpy_code;
				
				objO.parent_cmpy_name = dataGrid.selectedItem.parent_cmpy_name;
				objO.parent_cmpy_type = dataGrid.selectedItem.parent_cmpy_type;
				objO.parent_cmpy_rolename = dataGrid.selectedItem.parent_cmpy_rolename;
				objO.child_cmpy_name = dataGrid.selectedItem.child_cmpy_name;
				objO.child_cmpy_type = dataGrid.selectedItem.child_cmpy_type;
				objO.child_cmpy_rolename = dataGrid.selectedItem.child_cmpy_rolename;
				objO.relation_status = dataGrid.selectedItem.relation_status;
				objO.relation_comments = dataGrid.selectedItem.relation_comments;
				
				// get the new values
				var obj:Object = new Object();
				
				if (parent_cmpy_role.selectedIndex>=0)
				{
					obj.parent_cmpy_role = parentRoleList[parent_cmpy_role.selectedIndex].cmpy_role_id;
					obj.parent_cmpy_rolename = parentRoleList[parent_cmpy_role.selectedIndex].cmpy_role_name;
				}
				else
				{
					obj.parent_cmpy_role = ""; //dataGrid.selectedItem.parent_cmpy_role;
					obj.parent_cmpy_rolename = ""; //dataGrid.selectedItem.parent_cmpy_rolename;
				}
				
				if (parent_cmpy_code.selectedIndex>=0)
				{
					obj.parent_cmpy_code = parentCompanyList[parent_cmpy_code.selectedIndex].cmpy_code;
					obj.parent_cmpy_name = parentCompanyList[parent_cmpy_code.selectedIndex].cmpy_name;
					obj.parent_cmpy_type = parentCompanyList[parent_cmpy_code.selectedIndex].cmpy_type;
				}
				else
				{
					obj.parent_cmpy_code = ""; //dataGrid.selectedItem.parent_cmpy_code;
					obj.parent_cmpy_name = ""; //dataGrid.selectedItem.parent_cmpy_name;
					obj.parent_cmpy_type = 0; //dataGrid.selectedItem.parent_cmpy_type;
				}
				
				if (child_cmpy_role.selectedIndex>=0)
				{
					obj.child_cmpy_role = childRoleList[child_cmpy_role.selectedIndex].cmpy_role_id;
					obj.child_cmpy_rolename = childRoleList[child_cmpy_role.selectedIndex].cmpy_role_name;
				}
				else
				{
					obj.child_cmpy_role = ""; //dataGrid.selectedItem.child_cmpy_role;
					obj.child_cmpy_rolename = ""; //dataGrid.selectedItem.child_cmpy_rolename;
				}
				
				if (child_cmpy_code.selectedIndex>=0)
				{
					obj.child_cmpy_code = childCompanyList[child_cmpy_code.selectedIndex].cmpy_code;
					obj.child_cmpy_name = childCompanyList[child_cmpy_code.selectedIndex].cmpy_name;
					obj.child_cmpy_type = childCompanyList[child_cmpy_code.selectedIndex].cmpy_type;
				}
				else
				{
					obj.child_cmpy_code = dataGrid.selectedItem.child_cmpy_code;
					obj.child_cmpy_name = dataGrid.selectedItem.child_cmpy_name;
					obj.child_cmpy_type = dataGrid.selectedItem.child_cmpy_type;
				}

				obj.relation_status = (this.relation_status.selected==true?1:0);
				obj.relation_comments = this.relation_comments.text;
				
				var objs:Object = new Object();
				objs['oldobj'] = objO;
				objs['newobj'] = obj;
				
				updateAction.service( objs );
			}
			
			protected function updateData_resultHandler( ):void
			{
				clearDetail();
				if ( this.updateAction.dataString == "OK" )
				{
					global.msgSuccess(resourceManager.getString('default','MSG_UPDATE__SUCCESS'));
				}
				else
				{
					global.msgFail(resourceManager.getString('default','ERROR_UPDATE__FAILURE'));
				}
				
				var pcmpy:String="";
				var prole:int=-1;
				var ccmpy:String="";
				var crole:int=-1;
				if ( this.parent_cmpy_code.selectedIndex>=0)
				{
					pcmpy = this.parentCompanyList[parent_cmpy_code.selectedIndex].cmpy_code;
				}
				if ( this.parent_cmpy_role.selectedIndex>=0)
				{
					prole = this.parentRoleList[parent_cmpy_role.selectedIndex].cmpy_role_id;
				}
				if ( this.child_cmpy_code.selectedIndex>=0)
				{
					ccmpy = this.childCompanyList[child_cmpy_code.selectedIndex].cmpy_code;
				}
				if ( this.child_cmpy_role.selectedIndex>=0)
				{
					crole = this.childRoleList[child_cmpy_role.selectedIndex].cmpy_role_id;
				}
				
				currentState="normal";
				findByPrimaryKey( pcmpy, prole, ccmpy, crole );
				
				dataGrid.selectedIndex = -1;
				dataGrid.enabled=true;
			}
			
			private function doDelete(): void
			{
				var errors:String="";
				var index:int=0;

				if ( index > 0 )
				{
					var errorBox:MessageDialog = new MessageDialog( errors );
				}
				else
				{
					var canDelete:DeleteDialog = new DeleteDialog(deleteRecord, hasPassword);
				}
			}
			
			private function deleteRecord():void
			{
				
				var obj:Object = new Object();
				
				if (parent_cmpy_role.selectedIndex>=0)
				{
					obj.parent_cmpy_role = parentRoleList[parent_cmpy_role.selectedIndex].cmpy_role_id;
					obj.parent_cmpy_rolename = parentRoleList[parent_cmpy_role.selectedIndex].cmpy_role_name;
				}
				else
				{
					obj.parent_cmpy_role = ""; //dataGrid.selectedItem.parent_cmpy_role;
					obj.parent_cmpy_rolename = ""; //dataGrid.selectedItem.parent_cmpy_rolename;
				}
				
				if (parent_cmpy_code.selectedIndex>=0)
				{
					obj.parent_cmpy_code = parentCompanyList[parent_cmpy_code.selectedIndex].cmpy_code;
					obj.parent_cmpy_name = parentCompanyList[parent_cmpy_code.selectedIndex].cmpy_name;
					obj.parent_cmpy_type = parentCompanyList[parent_cmpy_code.selectedIndex].cmpy_type;
				}
				else
				{
					obj.parent_cmpy_code = ""; //dataGrid.selectedItem.parent_cmpy_code;
					obj.parent_cmpy_name = ""; //dataGrid.selectedItem.parent_cmpy_name;
					obj.parent_cmpy_type = 0; //dataGrid.selectedItem.parent_cmpy_type;
				}
				
				if (child_cmpy_role.selectedIndex>=0)
				{
					obj.child_cmpy_role = childRoleList[child_cmpy_role.selectedIndex].cmpy_role_id;
					obj.child_cmpy_rolename = childRoleList[child_cmpy_role.selectedIndex].cmpy_role_name;
				}
				else
				{
					obj.child_cmpy_role = ""; //dataGrid.selectedItem.child_cmpy_role;
					obj.child_cmpy_rolename = ""; //dataGrid.selectedItem.child_cmpy_rolename;
				}
				
				
				if ( child_cmpy_code.selectedItems.length > 1 )
				{
					//tools.pr(this.child_cmpy_code.selectedItems);
					var items:Array=new Array();
					for each( var row:Object in this.child_cmpy_code.selectedItems )
					{
						//trace("...............................................................................................");
						//tools.pr(row);
						var item:Object = new Object();
						
						item.parent_cmpy_role = obj.parent_cmpy_role;
						item.parent_cmpy_rolename = obj.parent_cmpy_rolename;

						item.parent_cmpy_code = obj.parent_cmpy_code;
						item.parent_cmpy_name = obj.parent_cmpy_name;
						item.parent_cmpy_type = obj.parent_cmpy_type;
						
						item.child_cmpy_role = obj.child_cmpy_role;
						item.child_cmpy_rolename = obj.child_cmpy_rolename;
						
						item.child_cmpy_code = row.cmpy_code;
						item.child_cmpy_name = row.cmpy_name;
						item.child_cmpy_type = row.cmpy_type;
						
						items.push( item );
					}
					
					deleteAction.service( items );
				}
				else
				{
					if (child_cmpy_code.selectedIndex>=0)
					{
						obj.child_cmpy_code = childCompanyList[child_cmpy_code.selectedIndex].cmpy_code;
						obj.child_cmpy_name = childCompanyList[child_cmpy_code.selectedIndex].cmpy_name;
						obj.child_cmpy_type = childCompanyList[child_cmpy_code.selectedIndex].cmpy_type;
					}
					else
					{
						obj.child_cmpy_code = dataGrid.selectedItem.child_cmpy_code;
						obj.child_cmpy_name = dataGrid.selectedItem.child_cmpy_name;
						obj.child_cmpy_type = dataGrid.selectedItem.child_cmpy_type;
					}
					
					deleteAction.service( obj );
				}
				
			}
			
			protected function deleteData_resultHandler( ):void
			{
				clearDetail();
				if ( this.deleteAction.dataString == "OK" )
				{
					global.msgSuccess(resourceManager.getString('default','MSG_DELETE__SUCCESS'));
				}
				else
				{
					global.msgFail(resourceManager.getString('default','ERROR_DELETE__FAILURE'));
				}
				
				
				currentState="normal";
				this.startFiltering();
				dataGrid.selectedIndex = -1;
				dataGrid.enabled=true;
			}
			
			private function checkFields():int
			{
				var errors:String="";
				var index:int=0;
				
				if ( index > 0 )
				{
					var errorBox:MessageDialog = new MessageDialog( errors );
				}
				
				return index;
			}
			
			private function createRecord():void
			{
				if ( this.checkFields() > 0 )
				{
					this.btn_save.enabled = this.canCreate;
					return;
				}
				
				var obj:Object = new Object();
				
				if (parent_cmpy_role.selectedIndex>=0)
				{
					obj.parent_cmpy_role = parentRoleList[parent_cmpy_role.selectedIndex].cmpy_role_id;
					obj.parent_cmpy_rolename = parentRoleList[parent_cmpy_role.selectedIndex].cmpy_role_name;
				}
				else
				{
					obj.parent_cmpy_role = ""; //dataGrid.selectedItem.parent_cmpy_role;
					obj.parent_cmpy_rolename = ""; //dataGrid.selectedItem.parent_cmpy_rolename;
				}
				
				if (parent_cmpy_code.selectedIndex>=0)
				{
					obj.parent_cmpy_code = parentCompanyList[parent_cmpy_code.selectedIndex].cmpy_code;
					obj.parent_cmpy_name = parentCompanyList[parent_cmpy_code.selectedIndex].cmpy_name;
					obj.parent_cmpy_type = parentCompanyList[parent_cmpy_code.selectedIndex].cmpy_type;
				}
				else
				{
					obj.parent_cmpy_code = ""; //dataGrid.selectedItem.parent_cmpy_code;
					obj.parent_cmpy_name = ""; //dataGrid.selectedItem.parent_cmpy_name;
					obj.parent_cmpy_type = 0; //dataGrid.selectedItem.parent_cmpy_type;
				}
				
				if (child_cmpy_role.selectedIndex>=0)
				{
					obj.child_cmpy_role = childRoleList[child_cmpy_role.selectedIndex].cmpy_role_id;
					obj.child_cmpy_rolename = childRoleList[child_cmpy_role.selectedIndex].cmpy_role_name;
				}
				else
				{
					obj.child_cmpy_role = ""; //dataGrid.selectedItem.child_cmpy_role;
					obj.child_cmpy_rolename = ""; //dataGrid.selectedItem.child_cmpy_rolename;
				}
				
				obj.relation_status = (this.relation_status.selected==true?1:0);
				obj.relation_comments = this.relation_comments.text;
				
				
				if ( child_cmpy_code.selectedItems.length > 1 )
				{
					var items:Array=new Array();
					for each( var row:Object in this.child_cmpy_code.selectedItems )
					{
						var item:Object = new Object();
						
						item.parent_cmpy_role = obj.parent_cmpy_role;
						item.parent_cmpy_rolename = obj.parent_cmpy_rolename;
						
						item.parent_cmpy_code = obj.parent_cmpy_code;
						item.parent_cmpy_name = obj.parent_cmpy_name;
						item.parent_cmpy_type = obj.parent_cmpy_type;
						
						item.child_cmpy_role = obj.child_cmpy_role;
						item.child_cmpy_rolename = obj.child_cmpy_rolename;
						
						item.relation_status = obj.relation_status;
						item.relation_comments = obj.relation_comments;
						
						item.child_cmpy_code = row.cmpy_code;
						item.child_cmpy_name = row.cmpy_name;
						item.child_cmpy_type = row.cmpy_type;
						
						items.push( item );
					}
					
					createAction.service( items );
				}
				else
				{
					if (child_cmpy_code.selectedIndex>=0)
					{
						obj.child_cmpy_code = childCompanyList[child_cmpy_code.selectedIndex].cmpy_code;
						obj.child_cmpy_name = childCompanyList[child_cmpy_code.selectedIndex].cmpy_name;
						obj.child_cmpy_type = childCompanyList[child_cmpy_code.selectedIndex].cmpy_type;
					}
					else
					{
						obj.child_cmpy_code = dataGrid.selectedItem.child_cmpy_code;
						obj.child_cmpy_name = dataGrid.selectedItem.child_cmpy_name;
						obj.child_cmpy_type = dataGrid.selectedItem.child_cmpy_type;
					}
					
					createAction.service( obj );
				}
				
			}
			
			protected function createData_resultHandler( ):void
			{
				clearDetail();
				if ( this.createAction.dataString == "OK" )
				{
					global.msgSuccess(resourceManager.getString('default','MSG_CREATE__SUCCESS'));
				}
				else
				{
					global.msgFail(resourceManager.getString('default','ERROR_CREATE__FAILURE'));
				}
				
				var pcmpy:String="";
				var prole:int=-1;
				var ccmpy:String="";
				var crole:int=-1;
				if ( this.parent_cmpy_code.selectedIndex>=0)
				{
					pcmpy = this.parentCompanyList[parent_cmpy_code.selectedIndex].cmpy_code;
				}
				if ( this.parent_cmpy_role.selectedIndex>=0)
				{
					prole = this.parentRoleList[parent_cmpy_role.selectedIndex].cmpy_role_id;
				}
				if ( this.child_cmpy_code.selectedIndex>=0)
				{
					ccmpy = this.childCompanyList[child_cmpy_code.selectedIndex].cmpy_code;
				}
				if ( this.child_cmpy_role.selectedIndex>=0)
				{
					crole = this.childRoleList[child_cmpy_role.selectedIndex].cmpy_role_id;
				}
				
				currentState="normal";
				findByPrimaryKey( pcmpy, prole, ccmpy, crole );
				
				dataGrid.selectedIndex = -1;
				dataGrid.enabled=true;
			}
			
			protected function createNewRecord(event:MouseEvent):void
			{	
				idx=dataGrid.selectedIndex;
				dataGrid.ensureCellIsVisible(idx);
				currentState="create";
				
				//this.btn_save.enabled = this.canCreate;
				this.parent_cmpy_code.selectedIndex = 0;
				this.child_cmpy_code.selectedIndex = -1;
				this.child_cmpy_role.selectedIndex = 0;
				this.btn_save.enabled = false;
				dataGrid.enabled=false;
				//this.parent_cmpy_code.selectedIndex = tools.getItemIndexFromCode( global.company, parentCompanyList, "cmpy_code");
			}
			
			
			protected function companyTypeLabelFunction(item:Object, column:GridColumn):String
			{
				var ret:String = "";
				for each(var obj:Object in this.companyTypeList)
				{
					var bitval:int = Math.pow(2, obj["cmpy_type_id"]);
					if ( (item [column.dataField] & bitval ) > 0 )
					{
						if ( ret.length > 0 )
						{
							ret += ",";
						}
						ret += obj["cmpy_type_name"]
					}
				}
				return ret;
			}
			
			protected function view_detailsHandler(event:FlexEvent):void
			{
			}
			
			protected function save_clickHandler():void
			{
				this.btn_save.enabled = false;
				doSave();
				//this.confirmSave = new ActionDialog( doSave, doNothing, resourceManager.getString('default','CONFIRM_SAVE_RATIOS') );
				
				//this.startLoadingPages();
			}
			
			protected function doSave():void
			{
				if (currentState == "create")
				{
					//createRecord();
					this._saveButtonClicked = true;
					checkCompanyRelationKey();
					//checkBaseProductKeyBeforeCreate();
				}
				if (currentState == "edit")
				{
					//editRecord();
					this._saveButtonClicked = true;
					checkCompanyRelationKey();
				}
				if (currentState == "detail")
				{
					editRecord();
				}
			}
			
			
			
			protected function killBtn_clickHandler(event:MouseEvent):void
			{
				//interruptor=true;
				pagedRecords.interruptor=true;
				trace("WTF >>>>>>>>>>");
			}
			
			protected function resumeBtn_clickHandler(event:MouseEvent):void
			{
				//interruptor=false;
				pagedRecords.interruptor=false;
				
				this.resumeLoadingPages();
				trace("RESUME >>>>>>>>>>");
			}
			
			protected function resumeLoadingPages():void
			{
				killBtn.setStyle("chromeColor","0xff0000");
				this.killBtn.includeInLayout=true;
				this.killBtn.visible = true;
				this.killBtn.enabled = true;
				
				resumeBtn.setStyle("chromeColor","0x00ff00");
				this.resumeBtn.includeInLayout=true;
				this.resumeBtn.visible = true;
				this.resumeBtn.enabled = false;
				
//				this.btn_create.enabled = false
				this.btn_export.enabled = false;
				this.dataGrid.enabled = false;
				this.toolbar.enabled = false;
				
				//pb.values(pagedRecords.length,totalLength);
				pb.values(pagedRecords.length,pagedRecords.totalLength);
				//currentPage = int(this.pagedRecords.length/currentPageSize) + 1;
				//this.pagedRecords.service( currentFields, currentTypes, currentSorts, currentOrders, currentPage, currentPageSize );
				this.pagedRecords.listService( currentFields, currentTypes, currentSorts, currentOrders );
			}
			
			public function setFilters( params:*=false ): void
			{
				if ( params == false )
				{
					return;
				}
				
				this.parentParams = params;
				
				currentState = "normal";
				
				trace ("...............................in setFilters");
				tools.pr( params);
				
				var po:Object=new Object();
				
				po["parent_cmpy_role"] = tools.getObjAttribute( params, "parent_cmpy_role", -1 );
				po["parent_cmpy_code"] = tools.getObjAttribute( params, "parent_cmpy_code", "" );
				po["child_cmpy_role"] = tools.getObjAttribute( params, "child_cmpy_role", -1 );
				po["child_cmpy_code"] = tools.getObjAttribute( params, "child_cmpy_code", "" );
				
				var fields:Object;
				var types:Object;
				
				//interruptor=false;
				pagedRecords.interruptor=false;
				
				fields = new Object();
				types = new Object();
				
				fields["parent_cmpy_role"] = po["parent_cmpy_role"];
				types["parent_cmpy_role"] = "NUMBER";
				fields["parent_cmpy_code"] = po["parent_cmpy_code"];
				types["parent_cmpy_code"] = "EXACT_STRING";
				fields["child_cmpy_role"] = po["child_cmpy_role"];
				types["child_cmpy_role"] = "NUMBER";
				fields["child_cmpy_code"] = po["child_cmpy_code"];
				types["child_cmpy_code"] = "EXACT_STRING";
				
				currentFields = fields;
				currentTypes = types;
				this.startLoadingPages();
				
				if ( po.hasOwnProperty( "parent_cmpy_role" ) )
				{
					this.fltr_parent_role.selectedIndex = tools.getItemIndexFromCode( po["parent_cmpy_role"], parentRoleList, "cmpy_role_id");
				}
				
				if ( po.hasOwnProperty( "parent_cmpy_code" ) )
				{
					this.fltr_parent_company.selectedIndex = tools.getItemIndexFromCode( po["parent_cmpy_code"], parentCompanyList, "cmpy_code");
				}
				
				if ( po.hasOwnProperty( "child_cmpy_role" ) )
				{
					this.fltr_child_role.selectedIndex = tools.getItemIndexFromCode( po["child_cmpy_role"], childRoleList, "cmpy_role_id");
				}
				
				if ( po.hasOwnProperty( "child_cmpy_code" ) )
				{
					this.fltr_child_company.selectedIndex = tools.getItemIndexFromCode( po["child_cmpy_code"], childCompanyList, "cmpy_code");
				}
				
				
				pb.values(pagedRecords.length,pagedRecords.length)
			}
			
			protected function child_cmpy_code_changeHandler(event:IndexChangeEvent):void
			{
				// TODO Auto-generated method stub
				if ( this.child_cmpy_code.selectedItems.length > 0 )
				{
					if ( currentState == "create" )
					{
						this.btn_save.enabled = this.canCreate;
					}
					else
					{
						//this.btn_save.enabled = this.canUpdate;
						if ( this.ms_switch.selected == false )
						{
							this.btn_save.enabled = this.canUpdate;
						}
						else
						{
							this.btn_save.enabled = false;
							if ( this.child_cmpy_code.selectedItems.length == 1 )
							{
								this.btn_save.enabled = this.canUpdate;
							}
						}
					}
					this.disp_ico = this.ico_indicator;
				}
				else
				{
					this.btn_save.enabled = false;
					this.disp_ico = this.ico_error;
				}
			}
			
			protected function ms_switch_changeHandler(event:Event):void
			{
				// TODO Auto-generated method stub
				if ( this.ms_switch.selected == false )
				{
					this.child_cmpy_code.allowMultipleSelection = false;
					this.btn_save.enabled = this.canUpdate;
					this.child_cmpy_code.selectedIndex = -1;
					this.child_cmpy_code.selectedIndex = tools.getItemIndexFromCode( dataGrid.selectedItem.child_cmpy_code, childCompanyList, "child_cmpy_code");
				}
				else
				{
					this.child_cmpy_code.allowMultipleSelection = true;
					this.btn_save.enabled = false;
					if ( this.child_cmpy_code.selectedItems.length == 1 )
					{
						this.btn_save.enabled = this.canUpdate;
					}
				}
			}
			
			protected function parent_cmpy_role_changeHandler():void
			{
				// TODO Auto-generated method stub
				if ( this.parent_cmpy_role.selectedIndex < 0 )
				{
					this.parentCompanyList.service(9);
				}
				else
				{
					var role:int = this.parent_cmpy_role.selectedItem.cmpy_role_id;
					this.parentCompanyList.service( role );
				}
			}
			
			protected function child_cmpy_role_changeHandler():void
			{
				// TODO Auto-generated method stub
				if ( this.child_cmpy_role.selectedIndex < 0 )
				{
					this.childCompanyList.service(9);
				}
				else
				{
					var role:int = this.child_cmpy_role.selectedItem.cmpy_role_id;
					this.childCompanyList.service( role );
				}
			}
			
		]]>
	</fx:Script>
	<fx:Declarations>
		<components:ValidationGroup id="vg" action="{save_clickHandler}" defaultButton="{btn_save}" parentScreen="{this}" isProtected="{hasPassword}"/>
	</fx:Declarations>
	<s:Panel id="panel" width="100%" height="100%"
			 skinClass="skins.WidgetPanelSkin"
			 skinClass.widget="skins.NullSkin">
		<s:layout>
			<s:VerticalLayout/>
		</s:layout>
		<s:VGroup width="100%" id="toolbar"  >
			<s:HGroup gap="5" paddingBottom="2" paddingTop="2" width="100%">
				<components:DKI_ComboBox id="fltr_parent_role" width="180" height="100%" enabled="true"
										 change="fltr_parent_role_changeHandler()" valueCommit="fltr_parent_role_changeHandler()" cornerRadius="10"
										 labelField="cmpy_role_name" prompt="{resourceManager.getString('default','CHILD_CMPY_ROLE')+resourceManager.getString('default','FILTER')}"
										 dataProvider="{parentRoleList}"/>
				
				<components:DKI_ComboBox id="fltr_parent_company" width="180" height="100%" enabled="true"
										 change="fltr_parent_company_changeHandler()" cornerRadius="10"
										 labelField="cmpy_desc" prompt="{resourceManager.getString('default','PARENT_CMPY_DESC')+resourceManager.getString('default','FILTER')}"
										 dataProvider="{parentCompanyList}"/>
				
				<components:DKI_ComboBox id="fltr_child_role" width="180" height="100%" enabled="true"
										 change="fltr_child_role_changeHandler()" valueCommit="fltr_child_role_changeHandler()" cornerRadius="10"
										 labelField="cmpy_role_name" prompt="{resourceManager.getString('default','CHILD_CMPY_ROLE')+resourceManager.getString('default','FILTER')}"
										 dataProvider="{childRoleList}"/>
				
				<components:DKI_ComboBox id="fltr_child_company" width="180" height="100%" enabled="true"
										 change="fltr_child_company_changeHandler()" cornerRadius="10"
										 labelField="cmpy_desc" prompt="{resourceManager.getString('default','CHILD_CMPY_DESC')+resourceManager.getString('default','FILTER')}"
										 dataProvider="{childCompanyList}"/>
				
				
				<!--/s:HGroup>
				<s:HGroup gap="5" paddingBottom="2" paddingTop="2" width="100%"-->
				<s:Spacer width="100%"/>
				<components:DKI_Button id="filterBtn" height="24" noLabel="false" click="filterRecords(event)"
									   type="filteron"/>
				<components:DKI_Button id="resetBtn" height="24" noLabel="false" click="refreshRecords(event)"
									   type="filteroff"/>
				<!--components:DKI_Button height="100%" label="{resourceManager.getString('default','RESET')+resourceManager.getString('default','FILTER')}" click="resetRecords(event)"
									   width.widget="100%" type="refresh"/-->
				<components:DKI_Button id="btn_export" label="{resourceManager.getString('default','EXPORTDATA')}" type="report" click="exportCsvHandler(event)" includeIn="normal"/>
				<components:DKI_Button id="btn_create" label="{resourceManager.getString('default','CREATE')}" height="24" click="createNewRecord(event)" includeIn="normal" enabled="{this.canCreate}" type="create"/>	
			</s:HGroup>
		</s:VGroup>
		
		
		<s:DataGrid id="dataGrid" width="100%" height="100%" requestedRowCount="4"
					selectionChange="dataGrid_selectionChangeHandler(event)"
					skinClass="skins.DKI_DataGrid_Skin"
					height.widget="100%">
			<s:columns>
				<s:ArrayList>
					<s:source>
						<s:GridColumn dataField="parent_cmpy_code" headerText="{resourceManager.getString('default','PARENT_CMPY_CODE')}" visible="true" width="100"></s:GridColumn>
						<s:GridColumn dataField="parent_cmpy_name" headerText="{resourceManager.getString('default','PARENT_CMPY_NAME')}" visible="true" width="140"></s:GridColumn>
						<s:GridColumn dataField="parent_cmpy_type" headerText="{resourceManager.getString('default','PARENT_CMPY_TYPE')}" visible="true" width="200" labelFunction="companyTypeLabelFunction"></s:GridColumn>
						<s:GridColumn dataField="parent_cmpy_role" headerText="{resourceManager.getString('default','PARENT_CMPY_ROLE')}" visible="false"></s:GridColumn>
						<s:GridColumn dataField="parent_cmpy_rolename" headerText="{resourceManager.getString('default','PARENT_CMPY_ROLE')}" width="100" visible="true"></s:GridColumn>
						<s:GridColumn dataField="child_cmpy_code" headerText="{resourceManager.getString('default','CHILD_CMPY_CODE')}" visible="true"></s:GridColumn>
						<s:GridColumn dataField="child_cmpy_name" headerText="{resourceManager.getString('default','CHILD_CMPY_NAME')}" visible="true"></s:GridColumn>
						<s:GridColumn dataField="child_cmpy_type" headerText="{resourceManager.getString('default','CHILD_CMPY_TYPE')}" visible="true" labelFunction="companyTypeLabelFunction"></s:GridColumn>
						<s:GridColumn dataField="child_cmpy_role" headerText="{resourceManager.getString('default','CHILD_CMPY_ROLE')}" visible="false"></s:GridColumn>
						<s:GridColumn dataField="child_cmpy_rolename" headerText="{resourceManager.getString('default','CHILD_CMPY_ROLE')}" visible="true"></s:GridColumn>
						<s:GridColumn dataField="relation_status" headerText="{resourceManager.getString('default','RELATION_STATUS')}" visible="true" itemRenderer="renderers.GridCheckRender"></s:GridColumn>
						<s:GridColumn dataField="relation_created" headerText="{resourceManager.getString('default','RELATION_CREATED')}" visible="true" itemRenderer="renderers.DateTimeRenderer"></s:GridColumn>
						<s:GridColumn dataField="relation_comments" headerText="{resourceManager.getString('default','RELATION_COMMENTS')}" visible="true"></s:GridColumn>
					</s:source>
				</s:ArrayList>
			</s:columns>
			<s:dataProvider>
				<!--s:AsyncListView id="pgList" list="{getPagedResult.lastResult}"/-->
				<s:AsyncListView id="pgList" list="{pagedRecords}"/>
			</s:dataProvider>
		</s:DataGrid>
		<s:HGroup width="100%">
			<components:Downloader id="pb" width="100%" height="18"/>
			<!--mx:ProgressBar id="pb" width="100%" height="22" visible="false" includeInLayout="false"  mode="manual" source="{this.pgList}" label="{this.currentLength} records shown from {this.currentLength} loaded out of {this.totalLength} found." labelPlacement="center"/-->
			<s:Button id="killBtn" width="18" height="18" label="" cornerRadius="12" visible="false" includeInLayout="false"
					  click="killBtn_clickHandler(event)"/>
			<s:Button id="resumeBtn" width="18" height="18" label="" cornerRadius="12" visible="false" includeInLayout="false"
					  click="resumeBtn_clickHandler(event)"/>
		</s:HGroup>
	</s:Panel>
	
	<s:Panel id="details" includeIn="edit,create,detail" width="100%" height="330"
			 itemCreationPolicy="immediate" skinClass="skins.WidgetPanelSkin">
		<s:layout>
			<s:VerticalLayout/>
			<!--s:TileLayout/-->
		</s:layout>
		
		<s:Spacer height="5"/>
		<s:VGroup>
			<s:HGroup>
				
				<s:HGroup>
					<s:Label width="{labelWidth}" height="{labelHeight}" text="{resourceManager.getString('default','PARENT_CMPY_ROLE')}" verticalAlign="middle"/>
					<components:DKI_ValidatorComboBox id="parent_cmpy_role" 
													  dataProvider="{parentRoleList}" 
													  labelField="cmpy_role_name" 
													  selectedItem="{dataGrid.selectedItem.parent_cmpy_rolename}" enabled="false" enabled.edit="true"
													  selectedItem.create="" selectedIndex.create="0" enabled.create="true" 
													  width="{fieldWidth}" height="{fieldHeight}" 
													  change="parent_cmpy_role_changeHandler()" valueCommit="parent_cmpy_role_changeHandler()"
													  prompt="{resourceManager.getString('default','SELECT')+resourceManager.getString('default','PARENT_CMPY_ROLE')}"
													  required="true" validationGroup="{vg}" automationName="{resourceManager.getString('default','PARENT_CMPY_ROLE')}" 
													  />
				</s:HGroup>
				
				<s:Spacer width="{spaceWidth}" />
				
				<s:HGroup width="{labelWidth+fieldWidth+5}">
					<s:Label width="{labelWidth}" height="{labelHeight}" text="{resourceManager.getString('default','CHILD_CMPY_ROLE')}" verticalAlign="middle"/>
					<components:DKI_ValidatorComboBox id="child_cmpy_role" 
													  dataProvider="{childRoleList}" 
													  labelField="cmpy_role_name" 
													  selectedItem="{dataGrid.selectedItem.child_cmpy_rolename}" enabled="false" enabled.edit="true"
													  selectedItem.create="" selectedIndex.create="0" enabled.create="true" 
													  width="{fieldWidth}" height="{fieldHeight}" 
													  change="child_cmpy_role_changeHandler()" valueCommit="child_cmpy_role_changeHandler()" 
													  prompt="{resourceManager.getString('default','SELECT')+resourceManager.getString('default','CHILD_CMPY_ROLE')}"
													  required="true" validationGroup="{vg}" automationName="{resourceManager.getString('default','CHILD_CMPY_ROLE')}" 
													  />
				</s:HGroup>
				
				<s:Spacer width="{spaceWidth}" />
				
				<s:HGroup>
					<s:Label width="{labelWidth}" height="{labelHeight}" text="" verticalAlign="middle"/>
					<s:CheckBox id="relation_status" label="{resourceManager.getString('default','RELATION_STATUS')}" 
								selected="true" selected.edit="{dataGrid.selectedItem.relation_status>0?true:false}" visible="true" enabled="false" enabled.edit="true" enabled.create="true" />
				</s:HGroup>
				
			</s:HGroup>
			
			<s:HGroup>
				<s:HGroup>
					<s:Label width="{labelWidth}" height="{labelHeight}" text="{resourceManager.getString('default','PARENT_CMPY_DESC')}" verticalAlign="middle"/>
					<components:DKI_ValidatorComboBox id="parent_cmpy_code" 
													  dataProvider="{parentCompanyList}" 
													  labelField="cmpy_desc" 
													  selectedItem="" enabled="false" enabled.edit="true"
													  selectedItem.create="" selectedIndex.create="-1" enabled.create="true" 
													  width="{fieldWidth}" height="{fieldHeight}" 
													  prompt="{resourceManager.getString('default','SELECT')+resourceManager.getString('default','PARENT_CMPY_DESC')}"
													  required="true" validationGroup="{vg}" automationName="{resourceManager.getString('default','PARENT_CMPY_DESC')}" 
													  />
				</s:HGroup>
				
				<s:Spacer width="{spaceWidth}" />
				
				<s:HGroup width="{labelWidth+fieldWidth+5}">
					<s:Label width="{labelWidth}" height="{labelHeight}" text="{resourceManager.getString('default','CHILD_CMPY_DESC')}" verticalAlign="middle"/>
					<!--components:DKI_ValidatorComboBox id="child_cmpy_code" 
					dataProvider="{childCompanyList}" 
					labelField="cmpy_desc" 
					selectedItem="{String(dataGrid.selectedItem.child_cmpy_code)+' - '+dataGrid.selectedItem.partner_code+' - '+dataGrid.selectedItem.partner_name1}" 
					selectedItem.create="" selectedIndex.create="-1" enabled.create="true" 
					enabled="false" enabled.edit="true"
					width="{fieldWidth}" height="{fieldHeight}" 
					prompt="{resourceManager.getString('default','SELECT')+resourceManager.getString('default','CHILD_CMPY_DESC')}"
					required="true" validationGroup="{vg}" automationName="{resourceManager.getString('default','CHILD_CMPY_DESC')}" 
					/-->
					<components:DKI_List id="child_cmpy_code" 
										 width="{fieldWidth-5}" height="200"  
										 dataProvider="{childCompanyList}" 
										 labelField="cmpy_desc" 
										 selectedItem.create="" selectedIndex.create="-1" 
										 enabled="false" enabled.edit="true" enabled.create="true"
										 visible="true" allowMultipleSelection="false" allowMultipleSelection.create="true"
										 change="child_cmpy_code_changeHandler(event)"
										 />
					<s:Spacer width="-10" />
					<s:Image id="img" width="{fieldHeight}" height="{fieldHeight}" 
							 source="{this.disp_ico}" scaleMode="stretch" visible="true"/>
				</s:HGroup>
				
				<s:Spacer width="{spaceWidth}" />
				
				<s:HGroup>
					<s:Label width="{labelWidth}" height="{labelHeight}" text="{resourceManager.getString('default','RELATION_COMMENTS')}" verticalAlign="middle"/>
					<s:TextArea id="relation_comments" width="{fieldWidth}" text="{dataGrid.selectedItem.relation_comments}" text.create="" height="200" maxChars="256"/>	
				</s:HGroup>
				
			</s:HGroup>
			
			<s:HGroup>
				<s:HGroup>
					<s:Label width="{labelWidth}" height="{labelHeight}" text=" " verticalAlign="middle"/>
					<s:Label width="{fieldWidth}" height="{fieldHeight}" text=" " verticalAlign="middle"/>
				</s:HGroup>
				
				<s:Spacer width="{spaceWidth}" />
				
				<s:HGroup width="{labelWidth+fieldWidth+5}">
					<s:Label width="{labelWidth}" height="{labelHeight}" text="" verticalAlign="middle"/>
					<s:CheckBox id="ms_switch" label="{resourceManager.getString('default','RELATION_MULTI_MODE')}" selected="false" visible="false" visible.edit="true" change="ms_switch_changeHandler(event)" />
				</s:HGroup>
				
			</s:HGroup>
			
		</s:VGroup>
		
		<s:Spacer height="10" />
		
		<s:HGroup width="100%" paddingBottom="4" paddingTop="0" gap="5">
			<s:Spacer width="100%"/>
			<components:DKI_Button id="btn_delete" label="{resourceManager.getString('default','DELETE')}" height="100%" click="doDelete()" includeIn="edit" enabled="{this.canDelete}" type="delete"/>
			<components:DKI_Button id="btn_save" label.create="{resourceManager.getString('default','SAVE')}" label="{resourceManager.getString('default','UPDATE')}" height="100%" includeIn="edit,create" enabled.create="{this.canCreate}" enabled="{this.canUpdate}" type.create="create" type="edit"/>
			<components:DKI_Button id="btn_cancel" label="{resourceManager.getString('default','CANCEL')}" height="100%" click="cancel_clickHandler()" enabled="true" type="cancel"/>
		</s:HGroup>
	</s:Panel>
	
</s:VGroup>
