<?xml version="1.0" encoding="utf-8"?>
<s:VGroup xmlns:fx="http://ns.adobe.com/mxml/2009"
		  xmlns:s="library://ns.adobe.com/flex/spark"
		  xmlns:mx="library://ns.adobe.com/flex/mx"
		  xmlns:components="components.*"
		  creationComplete="creationCompleteHandler(event)"
		  gap="2" width="100%" height="100%">
	
	<s:states>
		<s:State name="normal" enterState="this.toolbar.enabled=true"/>
		<s:State name="widget" enterState="this.toolbar.enabled=true"/>
		<s:State name="edit" enterState="callLater(function():void{dataGrid.ensureCellIsVisible(idx);});this.toolbar.enabled=false"/>
		<s:State name="create" enterState="this.toolbar.enabled=false"/>
		<s:State name="detail" enterState="view_detailsHandler(event);this.toolbar.enabled=false"/>
	</s:states>
	
	<fx:Script>
		<![CDATA[
			import com.adobe.fiber.runtime.lib.DateTimeFunc;
			
			import components.ActionDialog;
			import components.DKI_AlertBox;
			import components.DeleteDialog;
			import components.ExportData;
			import components.MessageDialog;
			
			import dm.remoteDataService;
			import dm.remoteListService;
			import dm.utils.tools;
			
			import flash.events.KeyboardEvent;
			import flash.globalization.LocaleID;
			
			import flashx.textLayout.container.ScrollPolicy;
			
			import mx.collections.ArrayCollection;
			import mx.controls.Alert;
			import mx.controls.DateField;
			import mx.events.FlexEvent;
			import mx.rpc.events.ResultEvent;
			import mx.utils.ObjectUtil;
			import mx.utils.StringUtil;
			
			import renderers.DKI_HeaderColumn_Renderer;
			
			import spark.components.ToggleButton;
			import spark.components.VScrollBar;
			import spark.components.gridClasses.IGridItemRenderer;
			import spark.events.GridEvent;
			import spark.events.GridSelectionEvent;
			import spark.events.IndexChangeEvent;
			
			public static const MAIN_WINDOW_WIDTH:int = 1500;
			
			[Bindable] public var readOnly:Boolean = false;
			[Bindable] public var canUpdate:Boolean = false;
			[Bindable] public var canCreate:Boolean = false;
			[Bindable] public var canDelete:Boolean = false;
			[Bindable] public var hasPassword:Boolean = false;
			
			[Bindable] public var canEditAudits:Boolean = false;
			
			[Bindable] public var labelWidth:uint = 100;
			[Bindable] public var labelHeight:uint = 26;
			[Bindable] public var fieldWidth:uint = 300;
			[Bindable] public var fieldHeight:uint = 26;
			[Bindable] public var spaceWidth:uint = 15;
			[Bindable] public var spaceHeight:uint = 0;
			
			private var idx:int=-1;
			
			private var currentFilter:String=null;
			private var currentOrder:String='audit_record_key';
			private var currentDirection:String="ASC";
			
			private var currentOffset:int=0;
			private var currentPageSize:int=1000;
			[Bindable] private var totalLength:int=0;
			[Bindable] private var currentLength:int=0;
			
			private var currentFields:Object=new Object();
			private var currentTypes:Object=new Object();
			//private var currentSorts:Object=new Object();
			//private var currentOrders:Object=new Object();
			private var currentSorts:Object={audit_record_key:'DESC'};
			private var currentOrders:Object={audit_record_key:1};
			private var currentSortSeq:int=0;
			
			private var confirmDelete:DKI_AlertBox;
			
			private var  originalItems:ArrayCollection;
			
			
			private var confirmReport:ActionDialog;
			
			//private var exportContents:String="";
			private var f:FileReference = new FileReference();
			
			
			//private var getData:Responder = new Responder(getData_resultHandler);
			
			//private var pagedRecords:ArrayCollection=new ArrayCollection();
			//private var pagedRecords:remoteDataService = new remoteDataService( "AuditingService.getPaged", getData, null );
			[Bindable] private var pagedRecords:remoteListService;
			
			private var deleteAction:remoteDataService = new remoteDataService( "AuditingService.delete", null, deleteData_resultHandler, 1 );
			private var createAction:remoteDataService = new remoteDataService( "AuditingService.create", null, createData_resultHandler, 1 );
			private var updateAction:remoteDataService = new remoteDataService( "AuditingService.update", null, updateData_resultHandler, 1 );
			
			private var auditRecordKeyChecker:remoteDataService = new remoteDataService( "AuditingService.isAuditRecordKeyUsed", null, auditRecordKeyChecker_resultHandler, 2 );
			private var auditRecordKeyMaker:remoteDataService = new remoteDataService( "AuditingService.getNextAuditRecordKey", null, auditRecordKeyMaker_resultHandler, 1 );
			
			private var gridColumnSequenceMaker:remoteDataService = new remoteDataService( "ScreenGridColumnService.lookupGridColumnSequence", null, gridColumnSequenceMaker_resultHandler, 1 );
			private var _gridColumnSequenceString:String="";
			private var formColumnSettingsMaker:remoteDataService = new remoteDataService( "ScreenFormColumnService.lookupFormColumnSettings", null, formColumnSettingsMaker_resultHandler, 1 );
			private var _formColumnSettingsString:String="";
			
			
			[Bindable] private var auditActionList:remoteDataService = new remoteDataService( "AuditingService.lookupAuditActionList", null, lookupAuditActionList_resultHandler );
			[Bindable] private var auditCategoryList:remoteDataService = new remoteDataService( "AuditingService.lookupAuditCategoryList", null, lookupAuditCategoryList_resultHandler );
			[Bindable] private var auditCompanyList:remoteDataService = new remoteDataService( "ListLibraryService.lookupCompany", null, lookupAuditCompanyList_resultHandler );
			[Bindable] private var auditUserList:remoteDataService = new remoteDataService( "AuditingService.lookupAuditPersonnel", null, lookupAuditUserList_resultHandler );
			
			public var mainListSelection:int = -1;
			
			
			
			
			protected function creationCompleteHandler(event:FlexEvent):void
			{
				
				this.formColumnSettingsMaker.service( "AUDITING" );
				
				pagedRecords = new remoteListService( this.dataGrid, "AuditingService.getPaged", null, getPageData_resultHandler );
				trace ("-------------start creationCompleteHandler");
				this.gridColumnSequenceMaker.service( "AUDITING" );
				trace ("------------End creationCompleteHandler");
			}
			
			protected function formColumnSettingsMaker_resultHandler():void
			{
				this._formColumnSettingsString =  formColumnSettingsMaker.dataString;
			}
			
			protected function gridColumnSequenceMaker_resultHandler():void
			{
				this._gridColumnSequenceString =  gridColumnSequenceMaker.dataString;
				
				if ( _gridColumnSequenceString.length > 0 )
				{
					global.adjustGridColumnSequence( _gridColumnSequenceString.substr(1), dataGrid );
				}
				
				this.startTheWindow();
			}
			
			public function updateSecurityFlags():void
			{
				this.canUpdate = (this.canUpdate && this.canEditAudits);
				this.canCreate = (this.canCreate && this.canEditAudits);
				this.canDelete = (this.canDelete && this.canEditAudits);
				this.hasPassword = (this.hasPassword && this.canEditAudits);
			}
			
			protected function startTheWindow():void
			{
				trace ("-------------start startTheWindow");
				
				if ( global.getValueFromSiteConfigSettings("SITE_CLEAR_FILTER_BLANK") == 'Y' )
				{
					this.fltr_daterange.dateText.text = "";
				}
				else
				{
					global.resetDateRangeComponent( "SITE_DEFAULT_DATERANGE_AUDIT", this.fltr_daterange );
				}
				
				var value:String = global.getValueFromSiteConfigSettings( "SITE_AUTO_FILTER_WHEN_OPEN_SCREEN" );
				if ( value == 'Y' )
				{
					this.startFiltering();
				}
				else
				{
					;
				}
				
				this.auditCompanyList.service( 6 );
				
				this.auditActionList.service( );
				this.auditCategoryList.service( );
				
				this.auditUserList.service( "-1", -1 );
				
				trace ("------------End startTheWindow");
				
				
				//trace("this.grid.scroller1111", this.dataGrid.scroller);
				//trace("this.grid.scroller.verticalScrollBar.value", this.dataGrid.scroller.verticalScrollBar.value);
				this.dataGrid.scroller.verticalScrollBar.addEventListener(Event.CHANGE, verticalScrollBarChanged);
				this.dataGrid.addEventListener(KeyboardEvent.KEY_UP, reportKeyUp);
				this.dataGrid.columnHeaderGroup.addEventListener(GridEvent.GRID_CLICK, headerClickListener);
				
			}
			
			
			
			protected function startLoadingPages():void
			{
				killBtn.setStyle("chromeColor","0xff0000");
				this.killBtn.includeInLayout=true;
				this.killBtn.visible = true;
				this.killBtn.enabled = true;
				
				resumeBtn.setStyle("chromeColor","0x00ff00");
				this.resumeBtn.includeInLayout=true;
				this.resumeBtn.visible = true;
				this.resumeBtn.enabled = false;
				
				this.btn_create.enabled = false
				this.btn_export.enabled = false;
				this.dataGrid.enabled = false;
				this.toolbar.enabled = false;
				//this.panel.enabled = false;
				
				currentLength=0;
				currentOffset = 0;
				
				//this.exportContents = this.genData.prepExportHeader( dataGrid );
				
				//currentPage=1;
				pagedRecords.currentPage=1;
				pagedRecords.removeAll();
				pagedRecords.refresh();
				this.pb.values(0, 0);
				//this.pagedRecords.service( currentFields, currentTypes, currentSorts, currentOrders, currentPage, currentPageSize );
				this.pagedRecords.listService( currentFields, currentTypes, currentSorts, currentOrders );
			}
			
			protected function endLoadingPages():void
			{
				this.btn_create.enabled = this.canCreate;
				this.btn_export.enabled = true;
				this.dataGrid.enabled = true;
				this.toolbar.enabled = true;
				//this.panel.enabled = true;
				//this.pb.values(totalCount, totalCount);
				this.pb.values(pagedRecords.totalCount, pagedRecords.totalCount, true);
				
				this.killBtn.includeInLayout=true;
				this.killBtn.visible = true;
				this.killBtn.enabled = false;
				
				this.resumeBtn.includeInLayout=true;
				this.resumeBtn.visible = true;
				//if ( totalLength > totalCount )
				if ( pagedRecords.totalLength > pagedRecords.totalCount )
				{
					this.resumeBtn.enabled = true;
				}
				else
				{
					this.resumeBtn.enabled = false;
				}
			}
			
			protected function exportCsvHandler(event:MouseEvent):void
			{
				this.confirmReport = new ActionDialog( doExport, cancelExport, resourceManager.getString('default','CONFIRM_REPORT_CSV') );
				
				//this.startLoadingPages();
			}
			
			private function getPageData_resultHandler():void
			{
				// if not finished
				if(pagedRecords.length < pagedRecords.totalCount)
				{
					pb.values(pagedRecords.length,pagedRecords.totalCount)
				}
				else
				{
					pb.values(pagedRecords.length,pagedRecords.totalCount)
					
					this.endLoadingPages();
					
					this.dataGrid.selectedIndex = this.mainListSelection;
					if ( this.mainListSelection >= 0)
					{
						this.dataGrid_selectionChangeHandler(null);
					}
					this.mainListSelection = -1;
					
				}
				
			}
			
			
			public function doExport():void
			{
				//genData.prepOther(dataGrid,'orderlist.csv', this.pagedRecords);
				
				//f.save( this.exportContents, "orderlist.csv" );
				f.save( pagedRecords.exportContents, "auditing_list.csv" );
				
				this.endLoadingPages();
			}
			
			
			public function cancelExport():void
			{
				this.endLoadingPages();
				
				//trace( this.exportContents );
			}
			
			
			
			
			protected function getPagedResult_resultHandler(event:ResultEvent):void
			{
				this.dataGrid.selectedIndex = this.mainListSelection;
				if ( this.mainListSelection >= 0)
				{
					this.dataGrid_selectionChangeHandler(null);
				}
				this.mainListSelection = -1;
			}
			
			
			private function lookupAuditCompanyList_resultHandler():void
			{
				if ( currentFields.hasOwnProperty( "audit_cmpy_code" ) )
				{
					this.fltr_company.selectedIndex = tools.getItemIndexFromCode( currentFields["audit_cmpy_code"], this.auditCompanyList, "cmpy_code");
				}
				
				if (currentState == "edit" || currentState == "detail")
				{
					this.audit_cmpy_code.selectedItem = dataGrid.selectedItem.audit_cmpy_name;
				}
			}
			
			private function lookupAuditActionList_resultHandler():void
			{
				if ( currentFields.hasOwnProperty( "audit_action_id" ) )
				{
					this.fltr_action.selectedIndex = tools.getItemIndexFromCode( currentFields["audit_action_id"], this.auditActionList, "audit_action_id");
				}
				
				if (currentState == "edit" || currentState == "detail")
				{
					this.audit_action_id.selectedItem = dataGrid.selectedItem.audit_action_name;
				}
			}
			
			private function lookupAuditCategoryList_resultHandler():void
			{
				if ( currentFields.hasOwnProperty( "audit_category_id" ) )
				{
					this.fltr_category.selectedIndex = tools.getItemIndexFromCode( currentFields["audit_category_id"], auditCategoryList, "audit_category_id");
				}
				
				if (currentState == "edit" || currentState == "detail")
				{
					this.audit_category_id.selectedItem = dataGrid.selectedItem.audit_category_name;
				}
			}
			
			
			protected function lookupAuditUserList_resultHandler():void
			{
				if ( currentFields.hasOwnProperty( "audit_user_code" ) )
				{
					this.fltr_user.selectedIndex = tools.getItemIndexFromCode( currentFields["audit_user_code"], this.auditUserList, "per_code");
				}
				
				if (currentState == "edit" || currentState == "detail")
				{
					this.audit_user_code.selectedItem = dataGrid.selectedItem.audit_user_name;
				}
			}
			
			
			private function verticalScrollBarChanged(event:Event):void
			{
				if ( this.dataGrid.scroller != null)
				{
					var vs:VScrollBar;
					vs = this.dataGrid.scroller.verticalScrollBar;
					//trace("this.grid.scroller.verticalScrollBar.value", vs.value, vs.maximum, vs.minimum, vs.stepSize, vs.pageSize, vs.	snapInterval);
				}
				else
				{
					trace("grid is changed");
				}
			}
			
			private function reportKeyUp(event:KeyboardEvent):void
			{
				if ( this.dataGrid.scroller != null)
				{
					var vs:VScrollBar;
					vs = this.dataGrid.scroller.verticalScrollBar;
					//trace("this.grid.scroller.verticalScrollBar.value", vs.value, vs.maximum, vs.minimum, vs.stepSize, vs.pageSize, vs.	snapInterval);
				}
				else
				{
					trace("grid is changed");
				}
			}
			
			private function headerClickListener(event:GridEvent):void
			{
				if(event.column.dataField!='order_items')
				{
					var currentRenderer:IGridItemRenderer;
					var dir:String;
					
					if ( global.sortingBySingleColumn == true )
					{	// sorted by single column only
						for (var i:int=0; i < dataGrid.columns.length; i++)
						{
							currentRenderer = dataGrid.columnHeaderGroup.getHeaderRendererAt(i);
							if ( currentRenderer != null)
							{
								(currentRenderer as DKI_HeaderColumn_Renderer).setImage('');
							}
							//(currentRenderer as DKI_HeaderColumn_Renderer).setImage(''); 
						}
					}
					else
					{	// sorted by multiple columns
						;
					}
					currentRenderer = dataGrid.columnHeaderGroup.getHeaderRendererAt(event.columnIndex);
					
					if( currentSorts.hasOwnProperty(event.column.dataField ) )
					{
						dir = currentSorts[event.column.dataField];
						if( dir=="ASC" )
						{
							dir = "DESC";
						}
						else if ( dir == "DESC" )
						{
							dir = "";
						}
						else if ( dir == "" )
						{
							dir = "ASC";
						}
						else 
						{
							dir = "ASC";
						}
						
						if ( dir != "" )
						{
							currentSorts[event.column.dataField] = dir;	
						}
						else
						{
							delete currentSorts[event.column.dataField];
							delete currentOrders[event.column.dataField];
						}
					}
					else
					{
						if ( global.sortingBySingleColumn == true )
						{	// sorted by single column only
							currentSorts = new Object();
							currentOrders = new Object();
							currentSortSeq = 0;
						}
						else
						{	// sorted by multiple columns
							;
						}
						currentSorts[event.column.dataField] = "ASC";	
						dir = currentSorts[event.column.dataField];
						currentSortSeq += 1;
						currentOrders[event.column.dataField] = currentSortSeq;	
					}
					(currentRenderer as DKI_HeaderColumn_Renderer).setImage(dir);
					this.startFiltering();
				}
			}
			
			
			protected function dataGrid_selectionChangeHandler(event:GridSelectionEvent):void
			{
				if(currentState != 'widget')
				{
					idx=dataGrid.selectedIndex;
					//dataGrid.ensureCellIsVisible(idx+11);
					dataGrid.ensureCellIsVisible(idx);
					
					currentState = "edit";					
					
					if ( canEditAudits == true )
					{
						currentState = "edit";
					}
					else
					{
						currentState = "detail";
					}
					
					this.btn_save.enabled = this.canUpdate;
					
					if ( _formColumnSettingsString.length > 0 )
					{
						global.adjustFormFieldSettings( _formColumnSettingsString.substr(1), this );
					}
					
					// get selectedIndex for company list
					if ( this.dataGrid.selectedIndex>=0 )
					{
						audit_cmpy_code.selectedIndex = tools.getItemIndexFromCode( this.dataGrid.selectedItem.audit_cmpy_code, this.auditCompanyList, "cmpy_code");
					}

				}
			}
			
			protected function cancel_clickHandler():void
			{
				clearDetail();
				if ( currentState== "create" )
				{
					dataGrid.enabled=true;
				}
				currentState="normal";
				dataGrid.selectedIndex = -1;
			}			
			
			protected function auditRecordKeyMaker_resultHandler():void
			{
				//audit_record_key.enabled = true;
				if ( auditRecordKeyMaker.dataString == "ERROR" )
				{
					audit_record_key.text = "";
				}
				else
				{
					audit_record_key.text = auditRecordKeyMaker.dataString;
				}
			}
			
			
			protected function fltr_source_keyUpHandler(event:KeyboardEvent):void
			{
				var keyCode:uint = 0;
				if (event == null)
				{
					keyCode=0;
				}
				else
				{
					keyCode=event.keyCode;
				}
				
				if ( keyCode == 13 )
				{
					if (currentState == "edit") clearDetail();
					startFiltering();
				}
			}
			
			protected function fltr_column_keyUpHandler(event:KeyboardEvent):void
			{
				var keyCode:uint = 0;
				if (event == null)
				{
					keyCode=0;
				}
				else
				{
					keyCode=event.keyCode;
				}
				
				if ( keyCode == 13 )
				{
					if (currentState == "edit") clearDetail();
					startFiltering();
				}
			}
			
			protected function fltr_pkeys_keyUpHandler(event:KeyboardEvent):void
			{
				var keyCode:uint = 0;
				if (event == null)
				{
					keyCode=0;
				}
				else
				{
					keyCode=event.keyCode;
				}
				
				if ( keyCode == 13 )
				{
					if (currentState == "edit") clearDetail();
					startFiltering();
				}
			}
			
			protected function fltr_description_keyUpHandler(event:KeyboardEvent):void
			{
				var keyCode:uint = 0;
				if (event == null)
				{
					keyCode=0;
				}
				else
				{
					keyCode=event.keyCode;
				}
				
				if ( keyCode == 13 )
				{
					if (currentState == "edit") clearDetail();
					startFiltering();
				}
			}
			
			protected function fltr_company_changeHandler(event:IndexChangeEvent):void
			{
				//if (currentState == "edit") clearDetail();
				//startFiltering();
			}
			
			protected function fltr_user_changeHandler(event:IndexChangeEvent):void
			{
				//if (currentState == "edit") clearDetail();
				//startFiltering();
			}
			
			protected function fltr_action_changeHandler(event:IndexChangeEvent):void
			{
				//if (currentState == "edit") clearDetail();
				//startFiltering();
			}
			
			protected function fltr_category_changeHandler(event:IndexChangeEvent):void
			{
				//if (currentState == "edit") clearDetail();
				//startFiltering();
			}
			
			private function fltr_daterange_changeHandler():void
			{
				if (currentState == "edit") clearDetail();
				startFiltering();
			}						
			
			private function startFiltering():void
			{
				var fields:Object;
				var types:Object;
				
				//interruptor=false;
				pagedRecords.interruptor=false;
				
				fields = new Object();
				types = new Object();
				
				if (fltr_company.selectedIndex > -1) 
				{
					fields["audit_cmpy_code"] = auditCompanyList[fltr_company.selectedIndex].cmpy_code;
					if ( fields["audit_cmpy_code"] == "ANY" )
					{
						fields["audit_cmpy_code"] = "";
					}
				}
				else
				{
					if ( global.setComboBoxNoSelection == true )
					{
						fltr_company.selectedIndex = -1;
					}
					fields["audit_cmpy_code"] = "";
				}
				types["audit_cmpy_code"] = "EXACT_STRING";
				
				if (fltr_user.selectedIndex > -1) 
				{
					fields["audit_user_code"] = auditUserList[fltr_user.selectedIndex].psnl_code;
					if ( fields["audit_user_code"] == "ANY" )
					{
						fields["audit_user_code"] = "";
					}
				}
				else
				{
					if ( global.setComboBoxNoSelection == true )
					{
						fltr_user.selectedIndex = -1;
					}
					fields["audit_user_code"] = "";
				}
				types["audit_user_code"] = "EXACT_STRING";
				
				if ( this.fltr_daterange.dateText.text.length > 0 )
				{
					if(this.fltr_daterange.sDate != null) 
					{
						fields["audit_datetime"]=dateConvertLong.format(fltr_daterange.sDate) + "~~" + dateConvertLong.format(fltr_daterange.eDate);
						types["audit_datetime"]="DATETIME";
					}
				}
				
				
				if ( this.currentState != "widget" )
				{
					if (fltr_action.selectedIndex > -1) 
					{
						fields["audit_action_id"] = auditActionList[fltr_action.selectedIndex].audit_action_id;
					}
					else
					{
						if ( global.setComboBoxNoSelection == true )
						{
							fltr_action.selectedIndex = -1;
						}
						fields["audit_action_id"] = "";
					}
					types["audit_action_id"] = "NUMBER";
					
					if (fltr_category.selectedIndex > -1) 
					{
						fields["audit_category_id"] = auditCategoryList[fltr_category.selectedIndex].audit_category_id;
					}
					else
					{
						if ( global.setComboBoxNoSelection == true )
						{
							fltr_category.selectedIndex = -1;
						}
						fields["audit_category_id"] = "";
					}
					types["audit_category_id"] = "NUMBER";
					
					if(fltr_source.text!='')
					{					
						fields["audit_table"] = fltr_source.text;
					}
					else
					{
						fields["audit_table"] = "";
					}
					types["audit_table"] = "STRING";
					
					if(fltr_column.text!='')
					{					
						fields["audit_column"] = fltr_column.text;
					}
					else
					{
						fields["audit_column"] = "";
					}
					types["audit_column"] = "STRING";
					
					if(fltr_pkeys.text!='')
					{					
						fields["audit_pkeys"] = fltr_pkeys.text;
					}
					else
					{
						fields["audit_pkeys"] = "";
					}
					types["audit_pkeys"] = "STRING";
					
					if(fltr_description.text!='')
					{					
						fields["audit_description"] = fltr_description.text;
					}
					else
					{
						fields["audit_description"] = "";
					}
					types["audit_description"] = "STRING";
					
				}
				
				currentFields = fields;
				currentTypes = types;
				
				
				this.startLoadingPages();
				
				trace("this.grid.scroller3333", this.dataGrid.scroller);
				trace("this.grid.scroller.verticalScrollBar.value", this.dataGrid.scroller.verticalScrollBar.value);
			}
			
			private function findByID(id:String):void
			{
				var fields:Object;
				var types:Object;
				
				fields = new Object();
				types = new Object();
				
				fields["audit_record_key"] = id;
				types["audit_record_key"] = "NUMBER";
				
				//currentPage=1;
				pagedRecords.currentPage=1;
				pagedRecords.removeAll();
				pagedRecords.refresh();
				//this.pagedRecords.service( fields, types, currentSorts, currentOrders, currentPage, currentPageSize );
				this.pagedRecords.listService( fields, types, currentSorts, currentOrders );
			}
			
			protected function filterRecords(event:MouseEvent):void
			{
				if (currentState == "edit") clearDetail();
				this.startFiltering();
			}
			
			protected function refreshRecords(event:MouseEvent):void
			{
				if ( currentState != "widget" )
				{
					currentState = 'normal';
					dataGrid.enabled=true;
				}
				clearDetail();
				fltr_company.selectedIndex = -1;
				fltr_user.selectedIndex = -1;
				if ( currentState != "widget" )
				{
					fltr_action.selectedIndex = -1;
					fltr_category.selectedIndex = -1;
					fltr_column.text = '';
					fltr_source.text = '';
				}
				
				if ( global.getValueFromSiteConfigSettings("SITE_CLEAR_FILTER_BLANK") == 'Y' )
				{
					this.fltr_daterange.dateText.text = "";
				}
				else
				{
					global.resetDateRangeComponent( "SITE_DEFAULT_DATERANGE_AUDIT", this.fltr_daterange );
				}
				
				
				dataGrid.selectedIndex = -1;
				currentFilter = null;
				currentOrder = null;
				currentFields = new Object();
				currentTypes = new Object();
				
				currentSorts = new Object();
				currentOrders = new Object();
				var currentRenderer:IGridItemRenderer;
				for (var i:int=0; i < dataGrid.columns.length; i++)
				{
					currentRenderer = dataGrid.columnHeaderGroup.getHeaderRendererAt(i);
					if ( currentRenderer != null)
					{
						(currentRenderer as DKI_HeaderColumn_Renderer).setImage('');
					}
					//(currentRenderer as DKI_HeaderColumn_Renderer).setImage(''); 
				}
				this.startFiltering();
				//this.startLoadingPages();
				trace("this.grid.scroller2222", this.dataGrid.scroller);
				trace("this.grid.scroller.verticalScrollBar.value", this.dataGrid.scroller.verticalScrollBar.value);
			}
			
			protected function clearDetail(): void
			{
				if (currentState != 'widget')
				{
				}
			}			
			
			private function editRecord():void
			{
				
				if ( this.checkFields() > 0 )
				{
					this.btn_save.enabled = this.canUpdate;
					return;
				}
				
				var obj:Object = new Object();
				
				obj.audit_record_key = audit_record_key.text;
				
				obj.audit_batch_key = audit_batch_key.text;
				obj.audit_pkeys = audit_pkeys.text;
				obj.audit_description = audit_description.text;
				obj.audit_value_before = audit_value_before.text;
				obj.audit_value_after = audit_value_after.text;
				
				obj.audit_ip = audit_ip.text;
				obj.audit_table = audit_table.text;
				obj.audit_column = audit_column.text;
				
				//obj.audit_datetime = dateConvertLong.format(audit_datetime.selectedDate);
				obj.audit_datetime = global.convertDateTimeToIsoString( audit_datetime.selectedDate, audit_datetime.timeEnabled, "" );
				
				if (audit_action_id.selectedIndex>=0)
				{
					obj.audit_action_id = auditActionList[audit_action_id.selectedIndex].audit_action_id;
				}
				else
				{
					obj.audit_action_id = dataGrid.selectedItem.audit_action_id;
				}

				if (audit_category_id.selectedIndex>=0)
				{
					obj.audit_category_id = auditCategoryList[audit_category_id.selectedIndex].audit_category_id;
				}
				else
				{
					obj.audit_category_id = dataGrid.selectedItem.audit_category_id;
				}
				
				if (audit_cmpy_code.selectedIndex>=0)
				{
					obj.audit_cmpy_code = auditCompanyList[audit_cmpy_code.selectedIndex].cmpy_code;
				}
				else
				{
					obj.audit_cmpy_code = dataGrid.selectedItem.audit_cmpy_code;
				}
				
				if (audit_user_code.selectedIndex>=0)
				{
					obj.audit_user_code = auditUserList[audit_user_code.selectedIndex].psnl_code;
				}
				else
				{
					obj.audit_user_code = dataGrid.selectedItem.audit_user_code;
				}
				
				updateAction.service( obj );
			}
			
			protected function updateData_resultHandler( ):void
			{
				clearDetail();
				if ( this.updateAction.dataString == "OK" )
				{
					global.msgSuccess(resourceManager.getString('default','MSG_UPDATE__SUCCESS'));
				}
				else
				{
					global.msgFail(resourceManager.getString('default','ERROR_UPDATE__FAILURE'));
				}
				
				var txt:String;
				txt = this.audit_record_key.text;
				
				currentState="normal";
				this.findByID( txt );
				dataGrid.selectedIndex = -1;
				dataGrid.enabled=true;
			}
			
			private function doDelete(): void
			{
				var errors:String="";
				var index:int=0;

				if ( index > 0 )
				{
					var errorBox:MessageDialog = new MessageDialog( errors );
				}
				else
				{
					var canDelete:DeleteDialog = new DeleteDialog(deleteRecord, hasPassword);
				}
			}
			
			private function deleteRecord():void
			{
				var obj:Object = new Object();
				
				obj.audit_record_key = dataGrid.selectedItem.audit_record_key;
				obj.audit_action_id = dataGrid.selectedItem.audit_action_id;
				obj.audit_datetime = dataGrid.selectedItem.audit_datetime;
				obj.audit_category_id = dataGrid.selectedItem.audit_category_id;
				obj.audit_batch_key = dataGrid.selectedItem.audit_batch_key;
				obj.audit_pkeys = dataGrid.selectedItem.audit_pkeys;
				obj.audit_description = dataGrid.selectedItem.audit_description;
				obj.audit_value_before = dataGrid.selectedItem.audit_value_before;
				obj.audit_value_after = dataGrid.selectedItem.audit_value_after;
				obj.audit_cmpy_code = dataGrid.selectedItem.audit_cmpy_code;
				obj.audit_user_code = dataGrid.selectedItem.audit_user_code;
				obj.audit_ip = dataGrid.selectedItem.audit_ip;
				obj.audit_table = dataGrid.selectedItem.audit_table;
				obj.audit_column = dataGrid.selectedItem.audit_column;
				
				deleteAction.service( obj );
			}
			
			protected function deleteData_resultHandler( ):void
			{
				clearDetail();
				if ( this.deleteAction.dataString == "OK" )
				{
					global.msgSuccess(resourceManager.getString('default','MSG_DELETE__SUCCESS'));
				}
				else
				{
					global.msgFail(resourceManager.getString('default','ERROR_DELETE__FAILURE'));
				}
				
				currentState="normal";
				this.startFiltering();
				dataGrid.selectedIndex = -1;
			}
			
			private function checkauditRecordKey():void
			{
				auditRecordKeyChecker.service( int(audit_record_key.text) );
			}
			
			protected function auditRecordKeyChecker_resultHandler( ):void
			{
				if ( auditRecordKeyChecker.dataInteger > 0 )
				{
					//var errorBox:MessageDialog = new MessageDialog( resourceManager.getString('default','ALERT__ORDER_CUSTNO_EXIST') );
					audit_record_key.errorString = resourceManager.getString('default','ALERT__AUDIT_RECORD_KEY_EXIST');
					this.btn_save.enabled = this.canCreate;
				}
				else
				{
					audit_record_key.errorString = "";
				}
			}
			
			private function checkFields():int
			{
				var errors:String="";
				var index:int=0;
				
				
				if ( index > 0 )
				{
					var errorBox:MessageDialog = new MessageDialog( errors );
				}
				
				return index;
			}
			
			private function createRecord():void
			{
				/* var order_num:int;
				
				order_num = auditRecordKeyChecker.dataInteger;
				if ( order_num > 0 )
				{
					var errorBox:MessageDialog = new MessageDialog( resourceManager.getString('default','ALERT__AUDIT_RECORD_KEY_EXIST') );
					this.btn_save.enabled = this.canCreate;
					return;
				} */
				
				if ( this.checkFields() > 0 )
				{
					this.btn_save.enabled = this.canCreate;
					return;
				}
				
				var obj:Object = new Object();
				
				obj.audit_record_key = audit_record_key.text;
				
				obj.audit_batch_key = audit_batch_key.text;
				obj.audit_pkeys = audit_pkeys.text;
				obj.audit_description = audit_description.text;
				obj.audit_value_before = audit_value_before.text;
				obj.audit_value_after = audit_value_after.text;
				
				obj.audit_ip = audit_ip.text;
				obj.audit_table = audit_table.text;
				obj.audit_column = audit_column.text;
				
				//obj.audit_datetime = dateConvertLong.format(audit_datetime.selectedDate);
				obj.audit_datetime = global.convertDateTimeToIsoString( audit_datetime.selectedDate, audit_datetime.timeEnabled, "" );
				
				if (audit_action_id.selectedIndex>=0)
				{
					obj.audit_action_id = auditActionList[audit_action_id.selectedIndex].audit_action_id;
				}
				else
				{
					obj.audit_action_id = "";
				}
				
				if (audit_category_id.selectedIndex>=0)
				{
					obj.audit_category_id = auditCategoryList[audit_category_id.selectedIndex].audit_category_id;
				}
				else
				{
					obj.audit_category_id = "";
				}
				
				if (audit_cmpy_code.selectedIndex>=0)
				{
					obj.audit_cmpy_code = auditCompanyList[audit_cmpy_code.selectedIndex].cmpy_code;
				}
				else
				{
					obj.audit_cmpy_code = "";
				}
				
				if (audit_user_code.selectedIndex>=0)
				{
					obj.audit_user_code = auditUserList[audit_user_code.selectedIndex].psnl_code;
				}
				else
				{
					obj.audit_user_code = "";
				}
				
				
				createAction.service( obj );
			}
			
			protected function createData_resultHandler( ):void
			{
				clearDetail();
				if ( this.createAction.dataString == "OK" )
				{
					global.msgSuccess(resourceManager.getString('default','MSG_CREATE__SUCCESS'));
				}
				else
				{
					global.msgFail(resourceManager.getString('default','ERROR_CREATE__FAILURE'));
				}
				
				
				var txt:String;
				txt = this.audit_record_key.text;
				
				currentState="normal";
				this.findByID( txt );
				dataGrid.selectedIndex = -1;
				dataGrid.enabled=true;
			}
			
			protected function createNewRecord(event:MouseEvent):void
			{	
				idx=dataGrid.selectedIndex;
				dataGrid.ensureCellIsVisible(idx);
				currentState="create";
				this.btn_save.enabled = this.canCreate;
				dataGrid.enabled=false;
				
				if ( _formColumnSettingsString.length > 0 )
				{
					global.adjustFormFieldSettings( _formColumnSettingsString.substr(1), this );
				}
			}
			
			
			public function getArrayCollection(obj:Object):ArrayCollection
			{
				var temp:ArrayCollection = new ArrayCollection;
				temp.addItem( obj );
				return temp;
			}
			
			public function convertDateToLocaleString(dt:String):String
			{
				var dt_string:String;
				var dt_date:Date = new Date();
				
				dt_string = ""; 
				if ((dt!=null) && (dt!='null') && (dt!=''))
				{
					dt_date = DateField.stringToDate(dt,"YYYY-MM-DD");
					dt_string = dateFormatter.format( dt_date);
				}
				//trace ("convertDateToLocale", dt, dt_date, dt_string);
				return dt_string;
			}
			
			public function convertDateToLocale(dt:String):Date
			{
				var dt_date:Date = new Date();
				
				if ((dt!=null) && (dt!='null') && (dt!=''))
				{
					dt_date = DateField.stringToDate(dt,"YYYY-MM-DD");
				}
				//trace ("convertDateToLocale", dt, dt_date, dt_string);
				return dt_date;
			}
			
			public function convertDateToLocaleLong(dt:String):Date
			{
				var dt_date:Date = new Date();
				
				if ((dt!=null) && (dt!='null') && (dt!=''))
				{
					//dt_date = DateField.stringToDate(dt,"YYYY-MM-DD HH:NN:SS");
					dt_date = DateTimeFunc.createDate(
						int(dt.substr(0, 4))
						, int(dt.substr(5, 2))
						, int(dt.substr(8, 2))
						, int(dt.substr(11, 2))
						, int(dt.substr(14, 2))
						, int(dt.substr(17, 2))
					);
				}
				//trace ("convertDateToLocale", dt, dt_date, dt_string);
				return dt_date;
			}
			
			public function getDefaultDate():Date
			{
				var now_date:Date;
				var def_date:Date;
				
				now_date = new Date();
				def_date = DateTimeFunc.dateAdd( "yyyy", 1, now_date );
				
				//trace ("getDefaultDate", now_date, def_date);
				
				return def_date;
			}
			
			protected function view_detailsHandler(event:FlexEvent):void
			{
			}
			
			protected function save_clickHandler():void
			{
				this.btn_save.enabled = false;
				if (currentState == "create")
				{
					createRecord();
				}
				if (currentState == "edit")
				{
					editRecord();
				}
				if (currentState == "detail")
				{
					editRecord();
				}
			}
			
			protected function killBtn_clickHandler(event:MouseEvent):void
			{
				//interruptor=true;
				pagedRecords.interruptor=true;
				trace("WTF >>>>>>>>>>");
			}
			
			protected function resumeBtn_clickHandler(event:MouseEvent):void
			{
				//interruptor=false;
				pagedRecords.interruptor=false;
				
				this.resumeLoadingPages();
				trace("RESUME >>>>>>>>>>");
			}
			
			protected function resumeLoadingPages():void
			{
				killBtn.setStyle("chromeColor","0xff0000");
				this.killBtn.includeInLayout=true;
				this.killBtn.visible = true;
				this.killBtn.enabled = true;
				
				resumeBtn.setStyle("chromeColor","0x00ff00");
				this.resumeBtn.includeInLayout=true;
				this.resumeBtn.visible = true;
				this.resumeBtn.enabled = false;
				
				this.btn_create.enabled = false
				this.btn_export.enabled = false;
				this.dataGrid.enabled = false;
				this.toolbar.enabled = false;
				
				//pb.values(pagedRecords.length,totalLength);
				pb.values(pagedRecords.length,pagedRecords.totalLength);
				//currentPage = int(this.pagedRecords.length/currentPageSize) + 1;
				//this.pagedRecords.service( currentFields, currentTypes, currentSorts, currentOrders, currentPage, currentPageSize );
				this.pagedRecords.listService( currentFields, currentTypes, currentSorts, currentOrders );
			}
			
		]]>
	</fx:Script>
	<fx:Declarations>
		<s:DateTimeFormatter id="dateFormatter" locale="{LocaleID.DEFAULT}" dateStyle="short" timeStyle="none"/>
		<s:DateTimeFormatter id="dateConvert" dateTimePattern="yyyy-MM-dd"/>
		<s:DateTimeFormatter id="dateConvertLong" dateTimePattern="yyyy-MM-dd HH:mm:ss"/>
		<components:ValidationGroup id="vg" action="{save_clickHandler}" defaultButton="{btn_save}" isProtected="{hasPassword}"/>
	</fx:Declarations>
	<s:Panel id="panel" width="100%" height="100%"
			 skinClass="skins.WidgetPanelSkin"
			 skinClass.widget="skins.NullSkin">
		<s:layout>
			<s:VerticalLayout/>
		</s:layout>
		<s:VGroup width="100%" id="toolbar"  >
			<s:HGroup gap="5" paddingBottom="2" paddingTop="2" width="100%">
				<s:VGroup>
					<components:SearchCombo id="fltr_company" width="170" height="100%"
												 change="fltr_company_changeHandler(event)" cornerRadius="10"
												 labelField="cmpy_desc" prompt="{resourceManager.getString('default','AUDIT_CMPY_NAME')+resourceManager.getString('default','FILTER')}"
												 width.edit="180" width.widget="160" dataProvider="{this.auditCompanyList}"/>
					<components:SearchCombo id="fltr_user" width="170" height="100%"
												 change="fltr_user_changeHandler(event)" cornerRadius="10"
												 labelField="psnl_name" prompt="{resourceManager.getString('default','AUDIT_USER_NAME')+resourceManager.getString('default','FILTER')}"
												 width.edit="180" width.widget="160" dataProvider="{this.auditUserList}"/>
				</s:VGroup>
				
				<s:VGroup>
					<components:DKI_DropDownList id="fltr_action" width="170" height="100%"
												 change="fltr_action_changeHandler(event)" cornerRadius="10"
												 labelField="audit_action_name" prompt="{resourceManager.getString('default','AUDIT_ACTION_NAME')+resourceManager.getString('default','FILTER')}"
												 width.edit="180" width.widget="160" visible.widget="false" excludeFrom="widget" dataProvider="{auditActionList}"/>
					<components:DKI_DropDownList id="fltr_category" width="170" height="100%"
												 change="fltr_category_changeHandler(event)" cornerRadius="10"
												 labelField="audit_category_name" prompt="{resourceManager.getString('default','AUDIT_CATEGORY_NAME')+resourceManager.getString('default','FILTER')}"
												 width.edit="180" width.widget="160" visible.widget="false" excludeFrom="widget" dataProvider="{auditCategoryList}"/>
				</s:VGroup>
				
				<s:VGroup>
					<components:DKI_ValidatorInput id="fltr_description" validationType="search" minWidth="180" height="{labelHeight}" width="100%"
												   keyUp="fltr_description_keyUpHandler(event)"  restrict="A-Za-z0-9 \-_"
												   excludeFrom="widget" width.widget="140" 
												   prompt="{resourceManager.getString('default','AUDIT_DESCRIPTION')+resourceManager.getString('default','FILTER')}"/>
					
					<components:DKI_ValidatorInput id="fltr_column" validationType="search" minWidth="180" height="{labelHeight}"  width="100%"
												   keyUp="fltr_column_keyUpHandler(event)"  restrict="A-Za-z0-9 \-_"
												   excludeFrom="widget" width.widget="140" 
												   prompt="{resourceManager.getString('default','AUDIT_COLUMN')+resourceManager.getString('default','FILTER')}"/>
				</s:VGroup>
				
				<s:VGroup visible="false" includeInLayout="false">
					<components:DKI_ValidatorInput id="fltr_source" validationType="search" minWidth="180" height="{labelHeight}" width="100%"
												   keyUp="fltr_source_keyUpHandler(event)"  restrict="A-Za-z0-9 \-_"
												   excludeFrom="widget" width.widget="180" 
												   prompt="{resourceManager.getString('default','AUDIT_TABLE')+resourceManager.getString('default','FILTER')}"/>
					
					<components:DKI_ValidatorInput id="fltr_pkeys" validationType="search" minWidth="180" height="{labelHeight}" width="100%"
												   keyUp="fltr_pkeys_keyUpHandler(event)"  restrict="A-Za-z0-9 \-_"
												   excludeFrom="widget" width.widget="140" 
												   prompt="{resourceManager.getString('default','AUDIT_PKEYS')+resourceManager.getString('default','FILTER')}"/>
				</s:VGroup>
				
				<s:VGroup>
					<components:DKI_DateRange id="fltr_daterange" minWidth="220"  height="{labelHeight}" width="300"
											  dateChange="fltr_daterange_changeHandler" defaultDays="1"
											  timeEnabled="true"/>					
				</s:VGroup>
				
				<s:VGroup width="100%">
					<s:Spacer height="26"/>
					<s:HGroup gap="5" paddingBottom="2" paddingTop="2" width="100%">
						<s:Spacer width="100%"/>
						<components:DKI_Button id="filterBtn" height="24" noLabel="false" click="filterRecords(event)"
											   type="filteron"/>
						<components:DKI_Button id="resetBtn" height="24" noLabel="false" click="refreshRecords(event)"
											   type="filteroff"/>
						<components:DKI_Button id="btn_export" label="{resourceManager.getString('default','EXPORTDATA')}" type="report" click="exportCsvHandler(event)" includeIn="normal"/>
						<components:DKI_Button id="btn_create" label="{resourceManager.getString('default','CREATE')}" height="24" click="createNewRecord(event)" 
											   includeIn="normal" enabled="{this.canCreate}" visible="{this.canEditAudits}" includeInLayout="{this.canEditAudits}" type="create"/>	
					</s:HGroup>
				</s:VGroup>
				
			</s:HGroup>
		</s:VGroup>
			
		
		<s:DataGrid id="dataGrid" width="100%" height="100%" requestedRowCount="4"
					selectionChange="dataGrid_selectionChangeHandler(event)"
					skinClass="skins.DKI_DataGrid_Skin"
					height.widget="100%">
			<s:columns>
				<s:ArrayList>
					<s:source>
						<s:GridColumn dataField="audit_datetime" headerText="{resourceManager.getString('default','AUDIT_DATETIME')}" itemRenderer="renderers.DateTimeRenderer" width="130"></s:GridColumn>
						<s:GridColumn dataField="audit_record_key" headerText="{resourceManager.getString('default','AUDIT_RECORD_KEY')}" width="100" visible="true" visible.widget="false"></s:GridColumn>
						<s:GridColumn dataField="audit_action_id" headerText="{resourceManager.getString('default','AUDIT_ACTION_ID')}" width="60" visible="false" visible.widget="false"></s:GridColumn>
						<s:GridColumn dataField="audit_action_name" headerText="{resourceManager.getString('default','AUDIT_ACTION_NAME')}" width="80"></s:GridColumn>
						<s:GridColumn dataField="audit_category_id" headerText="{resourceManager.getString('default','AUDIT_CATEGORY_ID')}" width="60" visible="false" visible.widget="false"></s:GridColumn>
						<s:GridColumn dataField="audit_category_name" headerText="{resourceManager.getString('default','AUDIT_CATEGORY_NAME')}" width="180"></s:GridColumn>
						<s:GridColumn dataField="audit_batch_key" headerText="{resourceManager.getString('default','AUDIT_BATCH_KEY')}" width="120" visible="false" visible.widget="false"></s:GridColumn>
						<s:GridColumn dataField="audit_table_acc_seq" headerText="{resourceManager.getString('default','AUDIT_TABLE_ACC_SEQ')}" width="120" visible="true" visible.widget="false"></s:GridColumn>
						<s:GridColumn dataField="audit_table_acc_time" headerText="{resourceManager.getString('default','AUDIT_TABLE_ACC_TIME')}" itemRenderer="renderers.DateTimeRenderer" width="130" visible="true"></s:GridColumn>
						<s:GridColumn dataField="audit_table" headerText="{resourceManager.getString('default','AUDIT_TABLE')}" width="50" visible="true"></s:GridColumn>
						<s:GridColumn dataField="audit_column" headerText="{resourceManager.getString('default','AUDIT_COLUMN')}" width="120" visible="true"></s:GridColumn>
						<s:GridColumn dataField="audit_pkeys" headerText="{resourceManager.getString('default','AUDIT_PKEYS')}" width="90" visible="true" visible.widget="false"></s:GridColumn>
						<s:GridColumn dataField="audit_description" headerText="{resourceManager.getString('default','AUDIT_DESCRIPTION')}" width="240" visible="true" visible.widget="false"></s:GridColumn>
						<s:GridColumn dataField="audit_value_before" headerText="{resourceManager.getString('default','AUDIT_VALUE_BEFORE')}" width="120"></s:GridColumn>
						<s:GridColumn dataField="audit_value_after" headerText="{resourceManager.getString('default','AUDIT_VALUE_AFTER')}" width="120"></s:GridColumn>
						<s:GridColumn dataField="audit_user_code" headerText="{resourceManager.getString('default','AUDIT_USER_CODE')}" width="80"></s:GridColumn>
						<s:GridColumn dataField="audit_user_name" headerText="{resourceManager.getString('default','AUDIT_USER_NAME')}" width="120"></s:GridColumn>
						<s:GridColumn dataField="audit_cmpy_code" headerText="{resourceManager.getString('default','AUDIT_CMPY_CODE')}" width="110" visible="true"></s:GridColumn>
						<s:GridColumn dataField="audit_cmpy_name" headerText="{resourceManager.getString('default','AUDIT_CMPY_NAME')}" width="150" visible="true" visible.widget="false"></s:GridColumn>
						<s:GridColumn dataField="audit_ip" headerText="{resourceManager.getString('default','AUDIT_IP')}" width="100"></s:GridColumn>
						<s:GridColumn dataField="audit_session_id" headerText="{resourceManager.getString('default','AUDIT_SESSION_ID')}" width="120" visible="true" visible.widget="false"></s:GridColumn>
						<s:GridColumn dataField="audit_osuser" headerText="{resourceManager.getString('default','AUDIT_OSUSER')}" width="120" visible="true" visible.widget="false"></s:GridColumn>
						<s:GridColumn dataField="audit_machine" headerText="{resourceManager.getString('default','AUDIT_MACHINE')}" width="120" visible="true" visible.widget="false"></s:GridColumn>
						<s:GridColumn dataField="audit_program" headerText="{resourceManager.getString('default','AUDIT_PROGRAM')}" width="120" visible="true" visible.widget="false"></s:GridColumn>
					</s:source>
				</s:ArrayList>
			</s:columns>
			<s:dataProvider>
				<!--s:AsyncListView id="pgList" list="{getPagedResult.lastResult}"/-->
				<s:AsyncListView id="pgList" list="{pagedRecords}"/>
			</s:dataProvider>
		</s:DataGrid>
		<s:HGroup width="100%">
			<components:Downloader id="pb" width="100%" height="18"/>
			<!--mx:ProgressBar id="pb" width="100%" height="22" visible="false" includeInLayout="false"  mode="manual" source="{this.pgList}" label="{this.currentLength} records shown from {this.currentLength} loaded out of {this.totalLength} found." labelPlacement="center"/-->
			<s:Button id="killBtn" width="18" height="18" label="" cornerRadius="12" visible="false" includeInLayout="false"
					  click="killBtn_clickHandler(event)"/>
			<s:Button id="resumeBtn" width="18" height="18" label="" cornerRadius="12" visible="false" includeInLayout="false"
					  click="resumeBtn_clickHandler(event)"/>
		</s:HGroup>
	</s:Panel>
	
	<s:Panel id="details" includeIn="edit,create,detail" width="100%" height="420"
			 itemCreationPolicy="immediate" skinClass="skins.WidgetPanelSkin">
		<s:layout>
			<s:VerticalLayout/>
			<!--s:TileLayout/-->
		</s:layout>
		
		<s:Spacer height="5"/>
		<s:VGroup>
			<s:HGroup>
				<s:HGroup>
					<s:Label width="{labelWidth}" height="{labelHeight}" text="{resourceManager.getString('default','AUDIT_RECORD_KEY')}" verticalAlign="middle"/>
					<components:DKI_ValidatorInput id="audit_record_key" 
												   width="{fieldWidth}" height="{fieldHeight}" 
												   text="{dataGrid.selectedItem.audit_record_key}" editable="false" enabled="true"
												   text.create="" editable.create="true" editable.edit="true" 
												   required="false" validationType="integer" validationGroup="{vg}" automationName="{resourceManager.getString('default','AUDIT_RECORD_KEY')}" 
												   />
				</s:HGroup>
				<s:Spacer width="{spaceWidth}" />
				<s:HGroup>
					<s:Label width="{labelWidth}" height="{labelHeight}" text="{resourceManager.getString('default','AUDIT_DATETIME')}" verticalAlign="middle"/>
					<components:DKI_DateTime id="audit_datetime" 
											 selectedDate="{convertDateToLocaleLong(dataGrid.selectedItem.audit_datetime)}" enabled="false" 
											 selectedDate.create="{new Date()}" enabled.create="true" 
											 width="{fieldWidth}" height="{fieldHeight}" timeEnabled="false"
											 />
				</s:HGroup>
				<s:Spacer width="{spaceWidth}" />
				<s:HGroup>
					<s:Label width="{labelWidth}" height="{labelHeight}" text="{resourceManager.getString('default','AUDIT_ACTION_NAME')}" verticalAlign="middle"/>
					<components:DKI_ValidatorComboBox id="audit_action_id" 
													  dataProvider="{auditActionList}" 
													  labelField="audit_action_name" 
													  selectedItem="{dataGrid.selectedItem.audit_action_name}" enabled="false" enabled.edit="true"
													  selectedItem.create="" selectedIndex.create="0" enabled.create="true" 
													  width="{fieldWidth}" height="{fieldHeight}" 
													  prompt="{resourceManager.getString('default','SELECT')+resourceManager.getString('default','AUDIT_ACTION_NAME')}"
													  required="false" validationGroup="{vg}" automationName="{resourceManager.getString('default','AUDIT_ACTION_NAME')}" 
													  />
				</s:HGroup>
			</s:HGroup>
			
			<s:Spacer height="{spaceHeight}"/>
			
			<s:HGroup>
				<s:HGroup visible="false" includeInLayout="false">
					<s:Label width="{labelWidth}" height="{labelHeight}" text="{resourceManager.getString('default','AUDIT_BATCH_KEY')}" verticalAlign="middle"/>
					<components:DKI_ValidatorInput id="audit_batch_key" 
												   width="{fieldWidth}" height="{fieldHeight}" 
												   text="{dataGrid.selectedItem.audit_batch_key}" editable="false" enabled="true"
												   text.create="" editable.create="true" editable.edit="true" 
												   required="false" validationType="alphanumeric" validationGroup="{vg}" automationName="{resourceManager.getString('default','AUDIT_BATCH_KEY')}"
												   />
				</s:HGroup>
				
				<s:HGroup visible="false" includeInLayout="false">
					<s:Label width="{labelWidth}" height="{labelHeight}" text="{resourceManager.getString('default','AUDIT_TABLE_ACC_SEQ')}" verticalAlign="middle"/>
					<components:DKI_ValidatorInput id="audit_table_acc_seq" 
												   width="{fieldWidth}" height="{fieldHeight}" 
												   text="{dataGrid.selectedItem.audit_table_acc_seq}" editable="false" enabled="true"
												   text.create="" editable.create="true" editable.edit="true" 
												   required="false" validationType="integer" validationGroup="{vg}" automationName="{resourceManager.getString('default','AUDIT_TABLE_ACC_SEQ')}"
												   />
				</s:HGroup>
				
				<s:HGroup visible="false" includeInLayout="false">
					<s:Label width="{labelWidth}" height="{labelHeight}" text="{resourceManager.getString('default','AUDIT_TABLE_ACC_TIME')}" verticalAlign="middle"/>
					<components:DKI_DateTime id="audit_table_acc_time" 
											 selectedDate="{convertDateToLocaleLong(dataGrid.selectedItem.audit_table_acc_time)}" enabled="false" 
											 selectedDate.create="{new Date()}" enabled.create="true" 
											 width="{fieldWidth}" height="{fieldHeight}" timeEnabled="false"
											 />
				</s:HGroup>
				
				<s:HGroup>
					<s:Label width="{labelWidth}" height="{labelHeight}" text="{resourceManager.getString('default','AUDIT_CATEGORY_NAME')}" verticalAlign="middle"/>
					<components:DKI_ValidatorComboBox id="audit_category_id" 
													  dataProvider="{auditCategoryList}" 
													  labelField="audit_category_name" 
													  selectedItem="{dataGrid.selectedItem.audit_category_name}" enabled="false" enabled.edit="true" 
													  selectedItem.create="" selectedIndex.create="0" enabled.create="true" 
													  width="{fieldWidth}" height="{fieldHeight}" 
													  prompt="{resourceManager.getString('default','SELECT')+resourceManager.getString('default','AUDIT_CATEGORY_NAME')}"
													  required="false" validationGroup="{vg}" automationName="{resourceManager.getString('default','AUDIT_CATEGORY_NAME')}" 
													  />
				</s:HGroup>
				<s:Spacer width="{spaceWidth}" />
				
				<s:HGroup>
					<s:Label width="{labelWidth}" height="{labelHeight}" text="{resourceManager.getString('default','AUDIT_TABLE')}" verticalAlign="middle"/>
					<components:DKI_ValidatorInput id="audit_table" 
												   width="{fieldWidth}" height="{fieldHeight}" 
												   text="{dataGrid.selectedItem.audit_table}" editable="false" enabled="true"
												   text.create="" editable.create="true" editable.edit="true" 
												   required="false" validationType="alphanumeric" validationGroup="{vg}" automationName="{resourceManager.getString('default','AUDIT_TABLE')}" 
												   />
				</s:HGroup>
				<s:Spacer width="{spaceWidth}" />
				<s:HGroup>
					<s:Label width="{labelWidth}" height="{labelHeight}" text="{resourceManager.getString('default','AUDIT_COLUMN')}" verticalAlign="middle"/>
					<components:DKI_ValidatorInput id="audit_column" 
												   width="{fieldWidth}" height="{fieldHeight}" 
												   text="{dataGrid.selectedItem.audit_column}" editable="false" enabled="true" 
												   text.create="" editable.create="true" editable.edit="true"  
												   required="false" validationType="alphanumeric" validationGroup="{vg}" automationName="{resourceManager.getString('default','AUDIT_COLUMN')}" 
												   />
				</s:HGroup>
			</s:HGroup>
			
			<s:Spacer height="{spaceHeight}"/>
			
			<s:HGroup>
				<s:HGroup>
					<s:Label width="{labelWidth}" height="{labelHeight}" text="{resourceManager.getString('default','AUDIT_PKEYS')}" verticalAlign="middle"/>
					<components:DKI_ValidatorInput id="audit_pkeys" 
												   width="{fieldWidth*4}" height="{fieldHeight}" 
												   text="{dataGrid.selectedItem.audit_pkeys}" editable="false" enabled="true" 
												   text.create="" editable.create="true" editable.edit="true"  
												   required="false" validationType="document" validationGroup="{vg}" automationName="{resourceManager.getString('default','AUDIT_PKEYS')}" 
												   />
				</s:HGroup>
			</s:HGroup>
			
			<s:Spacer height="{spaceHeight}"/>
			
			<s:HGroup>
				<s:HGroup>
					<s:Label width="{labelWidth}" height="{labelHeight}" text="{resourceManager.getString('default','AUDIT_DESCRIPTION')}" verticalAlign="middle"/>
					<components:DKI_ValidatorInput id="audit_description" 
												   width="{fieldWidth*4}" height="{fieldHeight}" 
												   text="{dataGrid.selectedItem.audit_description}" editable="false" enabled="true" 
												   text.create="" editable.create="true" editable.edit="true"  
												   required="false" validationType="document" validationGroup="{vg}" automationName="{resourceManager.getString('default','AUDIT_DESCRIPTION')}" 
												   />
					<!--<s:TextArea id="audit_description" 
												   width="{fieldWidth*4}" height="{fieldHeight*3}" 
												   text="{dataGrid.selectedItem.audit_description}" editable="false" enabled="true" 
												   text.create="" editable.create="true" editable.edit="true"  
												   />-->
				</s:HGroup>
			</s:HGroup>
			
			<s:Spacer height="{spaceHeight}"/>
			
			<s:HGroup>
				<s:HGroup>
					<s:Label width="{labelWidth}" height="{labelHeight}" text="{resourceManager.getString('default','AUDIT_VALUE_BEFORE')}" verticalAlign="middle"/>
					<!--<components:DKI_ValidatorInput id="audit_value_before" 
												   width="{fieldWidth*4}" height="{fieldHeight}" 
												   text="{dataGrid.selectedItem.audit_value_before}" editable="false" enabled="true" 
												   text.create="" editable.create="true" editable.edit="true"  
												   required="false" validationType="document" validationGroup="{vg}" automationName="{resourceManager.getString('default','AUDIT_VALUE_BEFORE')}" 
												   />-->
					<s:TextArea id="audit_value_before" 
												   width="{fieldWidth*4}" height="{fieldHeight*2.8}" 
												   text="{dataGrid.selectedItem.audit_value_before}" editable="false" enabled="true" 
												   text.create="" editable.create="true" editable.edit="true"  
												   />
				</s:HGroup>
			</s:HGroup>
			
			<s:Spacer height="{spaceHeight}"/>
			
			<s:HGroup>
				<s:HGroup>
					<s:Label width="{labelWidth}" height="{labelHeight}" text="{resourceManager.getString('default','AUDIT_VALUE_AFTER')}" verticalAlign="middle"/>
					<!--<components:DKI_ValidatorInput id="audit_value_after" 
												   width="{fieldWidth*4}" height="{fieldHeight}" 
												   text="{dataGrid.selectedItem.audit_value_after}" editable="false" enabled="true" 
												   text.create="" editable.create="true" editable.edit="true"  
												   required="false" validationType="document" validationGroup="{vg}" automationName="{resourceManager.getString('default','AUDIT_VALUE_AFTER')}" 
												   />-->
					<s:TextArea id="audit_value_after" 
												   width="{fieldWidth*4}" height="{fieldHeight*2.8}" 
												   text="{dataGrid.selectedItem.audit_value_after}" editable="false" enabled="true" 
												   text.create="" editable.create="true" editable.edit="true"  
												   />
				</s:HGroup>
			</s:HGroup>
			
			<s:Spacer height="{spaceHeight}"/>
			
			<s:HGroup>
				<s:HGroup>
					<s:Label width="{labelWidth}" height="{labelHeight}" text="{resourceManager.getString('default','AUDIT_CMPY_NAME')}" verticalAlign="middle"/>
					<components:DKI_ValidatorComboBox id="audit_cmpy_code" 
													  dataProvider="{auditCompanyList}" 
													  labelField="cmpy_desc" 
													  selectedItem="" enabled="false" enabled.edit="true" 
													  selectedItem.create="" selectedIndex.create="-1" enabled.create="true" 
													  width="{fieldWidth}" height="{fieldHeight}" 
													  prompt="{resourceManager.getString('default','SELECT')+resourceManager.getString('default','AUDIT_CMPY_NAME')}"  
													  required="false" validationGroup="{vg}" automationName="{resourceManager.getString('default','AUDIT_CMPY_NAME')}" 
													  />
				</s:HGroup>
				<s:Spacer width="{spaceWidth}" />
				<s:HGroup>
					<s:Label width="{labelWidth}" height="{labelHeight}" text="{resourceManager.getString('default','AUDIT_USER_NAME')}" verticalAlign="middle"/>
					<components:DKI_ValidatorComboBox id="audit_user_code" 
													  dataProvider="{auditUserList}" 
													  labelField="psnl_name" 
													  selectedItem="{dataGrid.selectedItem.audit_user_name}" enabled="false" enabled.edit="true" 
													  selectedItem.create="" selectedIndex.create="-1" enabled.create="true" 
													  width="{fieldWidth}" height="{fieldHeight}" requireSelection="false" 
													  prompt="{resourceManager.getString('default','SELECT')+resourceManager.getString('default','AUDIT_USER_NAME')}"
													  required="false" validationGroup="{vg}" automationName="{resourceManager.getString('default','AUDIT_USER_NAME')}" 
													  />
				</s:HGroup>
				<s:Spacer width="{spaceWidth}" />
				<s:HGroup>
					<s:Label width="{labelWidth}" height="{labelHeight}" text="{resourceManager.getString('default','AUDIT_IP')}" verticalAlign="middle"/>
					<components:DKI_ValidatorInput id="audit_ip" 
												   width="{fieldWidth}" height="{fieldHeight}" 
												   text="{dataGrid.selectedItem.audit_ip}" editable="false" enabled="true" 
												   text.create="" editable.create="true" editable.edit="true"  
												   required="false" validationType="alphanumeric" validationGroup="{vg}" automationName="{resourceManager.getString('default','AUDIT_IP')}" 
												   />
				</s:HGroup>
				<s:Spacer width="{spaceWidth}" />
				<s:HGroup visible="false" includeInLayout="false">
					<s:Label width="{labelWidth}" height="{labelHeight}" text="{resourceManager.getString('default','AUDIT_SESSION_ID')}" verticalAlign="middle"/>
					<components:DKI_ValidatorInput id="audit_session_id" 
												   width="{fieldWidth}" height="{fieldHeight}" 
												   text="{dataGrid.selectedItem.audit_session_id}" editable="false" enabled="true"
												   text.create="" editable.create="true" editable.edit="true" 
												   required="false" validationType="numeric" validationGroup="{vg}" automationName="{resourceManager.getString('default','AUDIT_SESSION_ID')}"
												   />
				</s:HGroup>
				
			</s:HGroup>
			
			<s:HGroup visible="false" includeInLayout="false">
				<s:HGroup>
					<s:Label width="{labelWidth}" height="{labelHeight}" text="{resourceManager.getString('default','AUDIT_OSUSER')}" verticalAlign="middle"/>
					<components:DKI_ValidatorInput id="audit_osuser" 
												   width="{fieldWidth}" height="{fieldHeight}" 
												   text="{dataGrid.selectedItem.audit_osuser}" editable="false" enabled="true"
												   text.create="" editable.create="true" editable.edit="true" 
												   required="false" validationType="alphanumeric" validationGroup="{vg}" automationName="{resourceManager.getString('default','AUDIT_OSUSER')}" 
												   />
				</s:HGroup>
				<s:Spacer width="{spaceWidth}" />
				
				<s:HGroup>
					<s:Label width="{labelWidth}" height="{labelHeight}" text="{resourceManager.getString('default','AUDIT_MACHINE')}" verticalAlign="middle"/>
					<components:DKI_ValidatorInput id="audit_machine" 
												   width="{fieldWidth}" height="{fieldHeight}" 
												   text="{dataGrid.selectedItem.audit_machine}" editable="false" enabled="true"
												   text.create="" editable.create="true" editable.edit="true" 
												   required="false" validationType="alphanumeric" validationGroup="{vg}" automationName="{resourceManager.getString('default','AUDIT_MACHINE')}" 
												   />
				</s:HGroup>
				<s:Spacer width="{spaceWidth}" />
				<s:HGroup>
					<s:Label width="{labelWidth}" height="{labelHeight}" text="{resourceManager.getString('default','AUDIT_PROGRAM')}" verticalAlign="middle"/>
					<components:DKI_ValidatorInput id="audit_program" 
												   width="{fieldWidth*2+labelWidth+30}" height="{fieldHeight}" 
												   text="{dataGrid.selectedItem.audit_program}" editable="false" enabled="true"
												   text.create="" editable.create="true" editable.edit="true"  
												   required="false" validationType="alphanumeric" validationGroup="{vg}" automationName="{resourceManager.getString('default','AUDIT_PROGRAM')}" 
												   />
				</s:HGroup>
			</s:HGroup>
			<s:Spacer height="5" />
			
		</s:VGroup>
		
		<s:Spacer height="0" />
		
		<s:HGroup width="100%" paddingBottom="4" paddingTop="0" gap="5">
			
			<s:Spacer width="100%"/>
			<components:DKI_Button id="btn_delete" label="{resourceManager.getString('default','DELETE')}" height="100%" click="doDelete()" 
								   includeIn="edit" enabled="{this.canDelete}" visible="{this.canEditAudits}" includeInLayout="{this.canEditAudits}" type="delete"/>
			<components:DKI_Button id="btn_save" label.create="{resourceManager.getString('default','SAVE')}" label="{resourceManager.getString('default','UPDATE')}" height="100%" 
								   includeIn="edit,create,detail" enabled.create="{this.canCreate}" enabled="{this.canUpdate}" visible.create="{this.canEditAudits}" visible="{this.canEditAudits}" 
								   includeInLayout="{this.canEditAudits}" type.create="create" type="edit"/>
			<components:DKI_Button id="btn_cancel" label="{resourceManager.getString('default','CANCEL')}" height="100%" click="cancel_clickHandler()" enabled="true" type="cancel"/>
		</s:HGroup>
	</s:Panel>
	
</s:VGroup>
