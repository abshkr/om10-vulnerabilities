<?xml version="1.0" encoding="utf-8"?>
<s:VGroup xmlns:fx="http://ns.adobe.com/mxml/2009"
		  xmlns:s="library://ns.adobe.com/flex/spark"
		  xmlns:mx="library://ns.adobe.com/flex/mx"
		  xmlns:components="components.*"
		  creationComplete="creationCompleteHandler(event)"
		  gap="2" width="100%" height="100%">
	
	
	<fx:Script>
		<![CDATA[
			
			import components.ViewPopupDlg;
			
			import dm.remoteDataService;
			import dm.remoteListService;
			import dm.utils.tools;
			
			import flash.events.KeyboardEvent;
			import flash.globalization.LocaleID;
			
			import flashx.textLayout.container.ScrollPolicy;
			
			import mx.collections.ArrayCollection;
			import mx.events.CloseEvent;
			import mx.events.FlexEvent;
			import mx.rpc.events.ResultEvent;
			import mx.utils.ObjectUtil;
			import mx.utils.StringUtil;
			
			import renderers.DKI_HeaderColumn_Renderer;
			
			import spark.components.VScrollBar;
			import spark.components.gridClasses.IGridItemRenderer;
			import spark.events.GridEvent;
			import spark.events.GridSelectionEvent;
			import spark.events.IndexChangeEvent;
			
			public static const MAIN_WINDOW_WIDTH:int = 1500;
			
			[Bindable] public var readOnly:Boolean = false;
			[Bindable] public var canUpdate:Boolean = false;
			[Bindable] public var canCreate:Boolean = false;
			[Bindable] public var canDelete:Boolean = false;
			[Bindable] public var hasPassword:Boolean = false;
			
			[Bindable] public var labelWidth:uint = 120;
			[Bindable] public var labelHeight:uint = 26;
			[Bindable] public var fieldWidth:uint = 200;
			[Bindable] public var fieldHeight:uint = 26;
			[Bindable] public var spaceWidth:uint = 15;
			[Bindable] public var spaceHeight:uint = 2;
			
			private var idx:int=-1;
			
			private var currentFields:Object=new Object();
			private var currentTypes:Object=new Object();
			private var currentSorts:Object=new Object();
			private var currentOrders:Object=new Object();
			//private var currentSorts:Object={dh_cmpt_no:'ASC'};
			//private var currentOrders:Object={dh_cmpt_no:1};
			private var currentSortSeq:int=0;
			
			
			[Bindable] private var pagedRecords:remoteListService;
			
			public var parentParams:Object = new Object();
			
			public var isPopupWindow:Boolean=false;
			public var partnerSelected:Object=new Object();
			
			
			
			protected function creationCompleteHandler(event:FlexEvent):void
			{
				pagedRecords = new remoteListService( this.dataGrid, "PartnershipService.getPaged", null, getPageData_resultHandler );
				trace ("-------------start creationCompleteHandler");
				this.startTheWindow();
				trace ("------------End creationCompleteHandler");
			}
			
			protected function startTheWindow():void
			{
				trace ("-------------start startTheWindow");
				//pagedRecords = new remoteListService( this.dataGrid, "PartnerService.getPaged", null, getPageData_resultHandler );
				//resourceManager.localeChain = ['zh_CN'];
				//global.LanguageCode="CHN";
				if ( this.isPopupWindow == false )
				{
					this.startFiltering();
				}
				
				trace ("------------End startTheWindow");
				
				
				//trace("this.grid.scroller1111", this.dataGrid.scroller);
				//trace("this.grid.scroller.verticalScrollBar.value", this.dataGrid.scroller.verticalScrollBar.value);
				this.dataGrid.scroller.verticalScrollBar.addEventListener(Event.CHANGE, verticalScrollBarChanged);
				this.dataGrid.addEventListener(KeyboardEvent.KEY_UP, reportKeyUp);
				this.dataGrid.columnHeaderGroup.addEventListener(GridEvent.GRID_CLICK, headerClickListener);
				
			}
			
			
			
			protected function startLoadingPages():void
			{
				killBtn.setStyle("chromeColor","0xff0000");
				this.killBtn.includeInLayout=true;
				this.killBtn.visible = true;
				this.killBtn.enabled = true;
				
				resumeBtn.setStyle("chromeColor","0x00ff00");
				this.resumeBtn.includeInLayout=true;
				this.resumeBtn.visible = true;
				this.resumeBtn.enabled = false;
				
				//this.btn_create.enabled = false
				this.dataGrid.enabled = false;
				this.toolbar.enabled = false;
				//this.panel.enabled = false;
				
				
				//currentPage=1;
				pagedRecords.currentPage=1;
				pagedRecords.removeAll();
				pagedRecords.refresh();
				this.pb.values(0, 0);
				this.pagedRecords.listService( currentFields, currentTypes, currentSorts, currentOrders );
			}
			
			protected function endLoadingPages():void
			{
//				this.btn_create.enabled = this.canCreate;
				this.dataGrid.enabled = true;
				this.toolbar.enabled = true;
				//this.panel.enabled = true;
				//this.pb.values(totalCount, totalCount);
				this.pb.values(pagedRecords.totalCount, pagedRecords.totalCount, true);
				
				this.killBtn.includeInLayout=true;
				this.killBtn.visible = true;
				this.killBtn.enabled = false;
				
				this.resumeBtn.includeInLayout=true;
				this.resumeBtn.visible = true;
				if ( pagedRecords.totalLength > pagedRecords.totalCount )
				{
					this.resumeBtn.enabled = true;
				}
				else
				{
					this.resumeBtn.enabled = false;
				}
			}
			
			private function getPageData_resultHandler():void
			{
				// if not finished
				if(pagedRecords.length < pagedRecords.totalCount)
				{
					pb.values(pagedRecords.length,pagedRecords.totalCount)
				}
				else
				{
					pb.values(pagedRecords.length,pagedRecords.totalCount)
					
					this.endLoadingPages();
					
					this.dataGrid.selectedIndex = -1;
				}
				
			}
			
			
			
			private function verticalScrollBarChanged(event:Event):void
			{
				if ( this.dataGrid.scroller != null)
				{
					var vs:VScrollBar;
					vs = this.dataGrid.scroller.verticalScrollBar;
					//trace("this.grid.scroller.verticalScrollBar.value", vs.value, vs.maximum, vs.minimum, vs.stepSize, vs.pageSize, vs.	snapInterval);
				}
				else
				{
					trace("grid is changed");
				}
			}
			
			private function reportKeyUp(event:KeyboardEvent):void
			{
				if ( this.dataGrid.scroller != null)
				{
					var vs:VScrollBar;
					vs = this.dataGrid.scroller.verticalScrollBar;
					//trace("this.grid.scroller.verticalScrollBar.value", vs.value, vs.maximum, vs.minimum, vs.stepSize, vs.pageSize, vs.	snapInterval);
				}
				else
				{
					trace("grid is changed");
				}
			}
			
			private function headerClickListener(event:GridEvent):void
			{
				if(event.column.dataField!='NA')
				{
					var currentRenderer:IGridItemRenderer;
					var dir:String;
					
					if ( global.sortingBySingleColumn == true )
					{	// sorted by single column only
						for (var i:int=0; i < dataGrid.columns.length; i++)
						{
							currentRenderer = dataGrid.columnHeaderGroup.getHeaderRendererAt(i);
							if ( currentRenderer != null)
							{
								(currentRenderer as DKI_HeaderColumn_Renderer).setImage('');
							}
							//(currentRenderer as DKI_HeaderColumn_Renderer).setImage(''); 
						}
					}
					else
					{	// sorted by multiple columns
						;
					}
					currentRenderer = dataGrid.columnHeaderGroup.getHeaderRendererAt(event.columnIndex);
					
					if( currentSorts.hasOwnProperty(event.column.dataField ) )
					{
						dir = currentSorts[event.column.dataField];
						if( dir=="ASC" )
						{
							dir = "DESC";
						}
						else if ( dir == "DESC" )
						{
							dir = "";
						}
						else if ( dir == "" )
						{
							dir = "ASC";
						}
						else 
						{
							dir = "ASC";
						}
						
						if ( dir != "" )
						{
							currentSorts[event.column.dataField] = dir;	
						}
						else
						{
							delete currentSorts[event.column.dataField];
							delete currentOrders[event.column.dataField];
						}
					}
					else
					{
						if ( global.sortingBySingleColumn == true )
						{	// sorted by single column only
							currentSorts = new Object();
							currentOrders = new Object();
							currentSortSeq = 0;
						}
						else
						{	// sorted by multiple columns
							;
						}
						currentSorts[event.column.dataField] = "ASC";	
						dir = currentSorts[event.column.dataField];
						currentSortSeq += 1;
						currentOrders[event.column.dataField] = currentSortSeq;	
					}
					(currentRenderer as DKI_HeaderColumn_Renderer).setImage(dir);
					this.startFiltering();
				}
			}
			
			
			protected function dataGrid_selectionChangeHandler(event:GridSelectionEvent):void
			{
				this.partnerSelected = new Object();
				this.partnerSelected["ACTION"] = "NA";
				if ( dataGrid.selectedIndex < 0 )
				{
					this.partnerSelected[tools.getObjAttribute( this.parentParams, "partner_type", "" )] = "";
					return;
				}
				else
				{
					this.partnerSelected[dataGrid.selectedItem.partner_type] = dataGrid.selectedItem.partner_code;
				}
				
				idx=dataGrid.selectedIndex;
				//dataGrid.ensureCellIsVisible(idx+11);
				dataGrid.ensureCellIsVisible(idx);
			}
			
			
			protected function ok_clickHandler():void
			{
				this.partnerSelected = new Object();
				this.partnerSelected["ACTION"] = "OK";
				if ( dataGrid.selectedIndex < 0 )
				{
					this.partnerSelected[tools.getObjAttribute( this.parentParams, "partner_type", "" )] = "";
				}
				else
				{
					this.partnerSelected[dataGrid.selectedItem.partner_type] = dataGrid.selectedItem.partner_code;
				}
				
				this.dispatchEvent(new CloseEvent(CloseEvent.CLOSE,true, false));
			}			
			
			protected function cancel_clickHandler():void
			{
				this.partnerSelected = new Object();
				this.partnerSelected["ACTION"] = "CANCEL";
				
				this.dispatchEvent(new CloseEvent(CloseEvent.CLOSE,true, false));
			}			
			
			
			protected function fltr_partner_keyUpHandler(event:KeyboardEvent):void
			{
				var keyCode:uint = 0;
				if (event == null)
				{
					keyCode=0;
				}
				else
				{
					keyCode=event.keyCode;
				}
				
				if ( keyCode == 13 )
				{
					startFiltering();
				}
			}
			
			private function startFiltering():void
			{
				var fields:Object;
				var types:Object;
				
				//interruptor=false;
				pagedRecords.interruptor=false;
				
				fields = new Object();
				types = new Object();
				
				if(fltr_partner.text!='')
				{					
					var encodedTxt:String = fltr_partner.text;
					fields["partner_code||partner_name1||partner_name2||partner_name3||partner_name4||partner_name5"] = encodedTxt+"||"+encodedTxt+"||"+encodedTxt+"||"+encodedTxt+"||"+encodedTxt+"||"+encodedTxt;
				}
				else
				{
					fields["partner_code||partner_name1||partner_name2||partner_name3||partner_name4||partner_name5"] = "";
				}
				types["partner_code||partner_name1||partner_name2||partner_name3||partner_name4||partner_name5"] = "STRING||STRING||STRING||STRING||STRING||STRING";
				
				fields["partner_type"] = tools.getObjAttribute( this.parentParams, "partner_type", "" );
				types["partner_type"] = "EXACT_STRING";
				fields["partner_cmpy_code"] = tools.getObjAttribute( this.parentParams, "partner_cmpy_code", "" );
				types["partner_cmpy_code"] = "EXACT_STRING";
				fields["partner_cust_acct"] = tools.getObjAttribute( this.parentParams, "partner_cust_acct", "" );
				types["partner_cust_acct"] = "EXACT_STRING";
				
				
				
				currentFields = fields;
				currentTypes = types;
				
				this.startLoadingPages();
				
				trace("this.grid.scroller3333", this.dataGrid.scroller);
				trace("this.grid.scroller.verticalScrollBar.value", this.dataGrid.scroller.verticalScrollBar.value);
			}
			
			protected function filterRecords(event:MouseEvent):void
			{
				this.startFiltering();
			}
			
			protected function refreshRecords(event:MouseEvent):void
			{
				clearDetail();
				
				fltr_partner.text = "";
				
				dataGrid.selectedIndex = -1;
				currentFields = new Object();
				currentTypes = new Object();
				
				currentSorts = new Object();
				currentOrders = new Object();
				var currentRenderer:IGridItemRenderer;
				for (var i:int=0; i < dataGrid.columns.length; i++)
				{
					currentRenderer = dataGrid.columnHeaderGroup.getHeaderRendererAt(i);
					if ( currentRenderer != null)
					{
						(currentRenderer as DKI_HeaderColumn_Renderer).setImage('');
					}
					//(currentRenderer as DKI_HeaderColumn_Renderer).setImage(''); 
				}
				this.startFiltering();
				//this.startLoadingPages();
				trace("this.grid.scroller2222", this.dataGrid.scroller);
				trace("this.grid.scroller.verticalScrollBar.value", this.dataGrid.scroller.verticalScrollBar.value);
			}
			
			protected function clearDetail(): void
			{
			}			
			
			
			
			
			protected function killBtn_clickHandler(event:MouseEvent):void
			{
				//interruptor=true;
				pagedRecords.interruptor=true;
				trace("WTF >>>>>>>>>>");
			}
			
			protected function resumeBtn_clickHandler(event:MouseEvent):void
			{
				//interruptor=false;
				pagedRecords.interruptor=false;
				
				this.resumeLoadingPages();
				trace("RESUME >>>>>>>>>>");
			}
			
			protected function resumeLoadingPages():void
			{
				killBtn.setStyle("chromeColor","0xff0000");
				this.killBtn.includeInLayout=true;
				this.killBtn.visible = true;
				this.killBtn.enabled = true;
				
				resumeBtn.setStyle("chromeColor","0x00ff00");
				this.resumeBtn.includeInLayout=true;
				this.resumeBtn.visible = true;
				this.resumeBtn.enabled = false;
				
//				this.btn_create.enabled = false
				this.dataGrid.enabled = false;
				this.toolbar.enabled = false;
				
				pb.values(pagedRecords.length,pagedRecords.totalLength);
				this.pagedRecords.listService( currentFields, currentTypes, currentSorts, currentOrders );
			}
			
			public function setFilters( params:*=false ): void
			{
				if ( params == false )
				{
					return;
				}
				
				this.parentParams = params;
				
				trace ("...............................in setFilters");
				tools.pr( params);
				
				var po:Object=new Object();
				
				po["partner_code"] = tools.getObjAttribute( params, "partner_code", "" );
				po["partner_type"] = tools.getObjAttribute( params, "partner_type", "" );
				po["partner_cmpy_code"] = tools.getObjAttribute( params, "partner_cmpy_code", "" );
				po["partner_cust_acct"] = tools.getObjAttribute( params, "partner_cust_acct", "" );
				
				var fields:Object;
				var types:Object;
				
				//interruptor=false;
				pagedRecords.interruptor=false;
				
				fields = new Object();
				types = new Object();
				
				fields["partner_code"] = po["partner_code"];
				types["partner_code"] = "EXACT_STRING";
				fields["partner_type"] = po["partner_type"];
				types["partner_type"] = "EXACT_STRING";
				fields["partner_cmpy_code"] = po["partner_cmpy_code"];
				types["partner_cmpy_code"] = "EXACT_STRING";
				fields["partner_cust_acct"] = po["partner_cust_acct"];
				types["partner_cust_acct"] = "EXACT_STRING";
				
				currentFields = fields;
				currentTypes = types;
				this.startLoadingPages();
				
				this.fltr_partner.text = po["partner_code"];
				
				
				pb.values(pagedRecords.length,pagedRecords.length)
			}
		]]>
	</fx:Script>
	<s:Panel id="panel" width="100%" height="100%"
			 skinClass="skins.WidgetPanelSkin"
			 >
		<s:layout>
			<s:VerticalLayout/>
		</s:layout>
		<s:VGroup width="100%" id="toolbar"  >
			<s:HGroup gap="5" paddingBottom="2" paddingTop="2" width="100%">
				<components:DKI_ValidatorInput id="fltr_partner" validationType="search" minWidth="180" height="{labelHeight}" width="100%"
											   keyUp="fltr_partner_keyUpHandler(event)" restrict="A-Za-z0-9 \-" 
											   prompt="{resourceManager.getString('default','PARTNER_CODE')+resourceManager.getString('default','FILTER')}"/>
				
				<!--/s:HGroup>
				<s:HGroup gap="5" paddingBottom="2" paddingTop="2" width="100%"-->
				<s:Spacer width="100%"/>
				<components:DKI_Button id="filterBtn" height="24" noLabel="false" click="filterRecords(event)"
									   type="filteron"/>
				<components:DKI_Button id="resetBtn" height="24" noLabel="false" click="refreshRecords(event)"
									   type="filteroff"/>
			</s:HGroup>
		</s:VGroup>
		
		
		<s:DataGrid id="dataGrid" width="100%" height="100%" requestedRowCount="4"
					selectionChange="dataGrid_selectionChangeHandler(event)"
					skinClass="skins.DKI_DataGrid_Skin"
					>
			<s:columns>
				<s:ArrayList>
					<s:source>
						<s:GridColumn dataField="partner_cmpy_code" headerText="{resourceManager.getString('default','PARTNER_CMPY_CODE')}" visible="false"></s:GridColumn>
						<s:GridColumn dataField="partner_cmpy_name" headerText="{resourceManager.getString('default','PARTNER_CMPY_NAME')}" visible="true"></s:GridColumn>
						<s:GridColumn dataField="partner_cust_acct" headerText="{resourceManager.getString('default','PARTNER_CUST_ACCT')}" visible="false"></s:GridColumn>
						<s:GridColumn dataField="partner_cust_name" headerText="{resourceManager.getString('default','PARTNER_CUST_NAME')}" visible="true"></s:GridColumn>
						
						<s:GridColumn dataField="partner_seq" headerText="{resourceManager.getString('default','PARTNER_SEQ')}" visible="true"></s:GridColumn>
						<s:GridColumn dataField="partner_code" headerText="{resourceManager.getString('default','PARTNER_CODE')}" visible="true"></s:GridColumn>
						<s:GridColumn dataField="partner_name1" headerText="{resourceManager.getString('default','PARTNER_NAME1')}" visible="true"></s:GridColumn>
						<s:GridColumn dataField="partner_name2" headerText="{resourceManager.getString('default','PARTNER_NAME2')}" visible="false"></s:GridColumn>
						<s:GridColumn dataField="partner_name3" headerText="{resourceManager.getString('default','PARTNER_NAME3')}" visible="false"></s:GridColumn>
						<s:GridColumn dataField="partner_name4" headerText="{resourceManager.getString('default','PARTNER_NAME4')}" visible="false"></s:GridColumn>
						<s:GridColumn dataField="partner_name5" headerText="{resourceManager.getString('default','PARTNER_NAME5')}" visible="false"></s:GridColumn>
						<s:GridColumn dataField="partner_type" headerText="{resourceManager.getString('default','PARTNER_TYPE')}" visible="false"></s:GridColumn>
						<s:GridColumn dataField="partner_type_name" headerText="{resourceManager.getString('default','PARTNER_TYPE_NAME')}" visible="false"></s:GridColumn>
						<s:GridColumn dataField="partner_addr_code" headerText="{resourceManager.getString('default','PARTNER_ADDR_CODE')}" visible="false"></s:GridColumn>
						<s:GridColumn dataField="partner_addr_text" headerText="{resourceManager.getString('default','PARTNER_ADDR_TEXT')}" visible="false"></s:GridColumn>
					</s:source>
				</s:ArrayList>
			</s:columns>
			<s:dataProvider>
				<!--s:AsyncListView id="pgList" list="{getPagedResult.lastResult}"/-->
				<s:AsyncListView id="pgList" list="{pagedRecords}"/>
			</s:dataProvider>
		</s:DataGrid>
		<s:HGroup width="100%">
			<components:Downloader id="pb" width="100%" height="18"/>
			<s:Button id="killBtn" width="18" height="18" label="" cornerRadius="12" visible="false" includeInLayout="false"
					  click="killBtn_clickHandler(event)"/>
			<s:Button id="resumeBtn" width="18" height="18" label="" cornerRadius="12" visible="false" includeInLayout="false"
					  click="resumeBtn_clickHandler(event)"/>
		</s:HGroup>
		
		<s:Spacer height="20" />
		
		<s:HGroup width="100%" paddingBottom="4" paddingTop="0" gap="5">
			<s:Spacer width="100%"/>
			<components:DKI_Button id="btn_ok" label="{resourceManager.getString('default','OK')}" type="save" click="ok_clickHandler()"/>
			<components:DKI_Button id="btn_cancel" label="{resourceManager.getString('default','CANCEL')}" height="100%" click="cancel_clickHandler()" enabled="true" type="cancel"/>
		</s:HGroup>
	</s:Panel>
	
</s:VGroup>
