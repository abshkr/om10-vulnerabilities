<?xml version="1.0" encoding="utf-8"?>
<!--

ADOBE SYSTEMS INCORPORATED
Copyright 2008 Adobe Systems Incorporated
All Rights Reserved.

NOTICE: Adobe permits you to use, modify, and distribute this file
in accordance with the terms of the license agreement accompanying it.

-->
<!--- The default skin class for the textInput of a Spark ComboBox component.  

@see spark.components.ComboBox

@langversion 3.0
@playerversion Flash 10
@playerversion AIR 1.5
@productversion Flex 4
-->
<s:SparkSkin xmlns:fx="http://ns.adobe.com/mxml/2009" xmlns:s="library://ns.adobe.com/flex/spark"
			 xmlns:fb="http://ns.adobe.com/flashbuilder/2009" 
			 blendMode="normal">
	
	<fx:Metadata>
		<![CDATA[ 
		/** 
		* @copy spark.skins.spark.ApplicationSkin#hostComponent
		*/
		[HostComponent("spark.components.TextInput")]
		]]>
	</fx:Metadata> 
	
	<fx:Script fb:purpose="styling">
		
		private var paddingChanged:Boolean;
		private var cornerRadius:Number = 0;
		
		/* Define the skin elements that should not be colorized. */
		static private const exclusions:Array = ["background", "textDisplay", "promptDisplay"];
		
		/**
		 * @private
		 */   
		override public function get colorizeExclusions():Array {return exclusions;}
		
		/* Define the content fill items that should be colored by the "contentBackgroundColor" style. */
		static private const contentFill:Array = ["bgFill"];
		
		/**
		 *  @private
		 */
		override public function get contentItems():Array {return contentFill};
		
		/**
		 *  @private
		 */
		override protected function commitProperties():void
		{
			super.commitProperties();
			
			if (paddingChanged)
			{
				updatePadding();
				paddingChanged = false;
			}
		}
		
		/**
		 * @private
		 */
		override protected function initializationComplete():void
		{
			useChromeColor = true;
			super.initializationComplete();
		}
		
		/**
		 *  @private
		 */
		override protected function updateDisplayList(unscaledWidth:Number, unscaledHeight:Number):void
		{
			if (getStyle("borderVisible") == true)
			{
				border.visible = true;
				shadow.visible = true;
				background.left = background.top = background.right = background.bottom = 1;
				textDisplay.left = textDisplay.right = 1;
				if (promptDisplay)
				{
					promptDisplay.setLayoutBoundsSize(unscaledWidth - 2, unscaledHeight - 2);
					promptDisplay.setLayoutBoundsPosition(1, 1);
				}
			}
			else
			{
				border.visible = false;
				shadow.visible = false;
				background.left = background.top = background.right = background.bottom = 0;
				textDisplay.left = textDisplay.right = 0;
				if (promptDisplay)
				{
					promptDisplay.setLayoutBoundsSize(unscaledWidth, unscaledHeight);
					promptDisplay.setLayoutBoundsPosition(0, 0);
				}
			}
			
			borderStroke.color = getStyle("borderColor");
			borderStroke.alpha = getStyle("borderAlpha");
			
			/* var cr:Number = getStyle("cornerRadius");
			
			if (cornerRadius != cr)
			{
			cornerRadius = cr;
			shadow.bottomLeftRadiusX = shadow.topLeftRadiusX = cornerRadius;
			border.bottomLeftRadiusX = border.topLeftRadiusX = cornerRadius;
			background.bottomLeftRadiusX = background.topLeftRadiusX = cornerRadius;
			} */
			
			super.updateDisplayList(unscaledWidth, unscaledHeight);
		}
		
		/**
		 *  @private
		 */
		private function updatePadding():void
		{
			if (!textDisplay)
				return;
			
			// Push padding styles into the textDisplay
			var padding:Number;
			
			padding = getStyle("paddingLeft");
			if (textDisplay.getStyle("paddingLeft") != padding)
				textDisplay.setStyle("paddingLeft", padding);
			
			padding = getStyle("paddingTop");
			if (textDisplay.getStyle("paddingTop") != padding)
				textDisplay.setStyle("paddingTop", padding);
			
			padding = getStyle("paddingRight");
			if (textDisplay.getStyle("paddingRight") != padding)
				textDisplay.setStyle("paddingRight", padding);
			
			padding = getStyle("paddingBottom");
			if (textDisplay.getStyle("paddingBottom") != padding)
				textDisplay.setStyle("paddingBottom", padding);
			
			if (!promptDisplay)
				return;
			
			padding = getStyle("paddingLeft");
			if (promptDisplay.getStyle("paddingLeft") != padding)
				promptDisplay.setStyle("paddingLeft", padding);
			
			padding = getStyle("paddingTop");
			if (promptDisplay.getStyle("paddingTop") != padding)
				promptDisplay.setStyle("paddingTop", padding);
			
			padding = getStyle("paddingRight");
			if (promptDisplay.getStyle("paddingRight") != padding)
				promptDisplay.setStyle("paddingRight", padding);
			
			padding = getStyle("paddingBottom");
			if (promptDisplay.getStyle("paddingBottom") != padding)
				promptDisplay.setStyle("paddingBottom", padding);
		}
		
		/**
		 *  @private
		 */
		override public function styleChanged(styleProp:String):void
		{
			var allStyles:Boolean = !styleProp || styleProp == "styleName";
			
			super.styleChanged(styleProp);
			
			if (allStyles || styleProp.indexOf("padding") == 0)
			{
				paddingChanged = true;
				invalidateProperties();
			}
		}
	</fx:Script>
	
	<fx:Script>
		<![CDATA[
			import flashx.textLayout.elements.InlineGraphicElement;
			import flashx.textLayout.elements.ParagraphElement;
			import flashx.textLayout.elements.TextFlow;
			
			/** 
			 * @private 
			 */     
			private static const focusExclusions:Array = ["textDisplay"];
			
			/**
			 *  @private
			 */
			override public function get focusSkinExclusions():Array { return focusExclusions;};
			
			public function getTheIcon(type:String):String
			{
				trace ( "-------------------------------in getTheIcon", "###"+type+"###" );
				var img:String;
				
				if ( type == "+" )
				{
					img = "assets/icons/create.png";
				}
				else if ( type == "*" )
				{
					img = "assets/icons/edit1.png";
				}
				else if ( type == "-" )
				{
					img = "assets/icons/delete.png";
				}
				else if ( type == " " )
				{
					img = "assets/icons/blank.png";
				}
				else
				{
					img = type;
				}
				
				if ( img == null || img == "" )
				{
					img = "assets/icons/blank.png";
				}
				
				//setTextFlow( img );
				
				return img;
			}
			
			public function setTextFlow(icn:String):void
			{
				var tf:TextFlow;
				var p:ParagraphElement;
				var img:InlineGraphicElement;
				
				tf = new TextFlow();
				p = new ParagraphElement();
				img = new InlineGraphicElement();
				
				img.source = icn;
				img.height = 16;
				img.width = 16;
				p.paddingTop=-2;
				//p.backgroundColor="0x000000";
				//p.setStyle( "border", "1");
				p.addChild(img);
				tf.addChild(p);
				
				this.textDisplay.text="";
				this.textDisplay.textFlow = tf;
				this.textDisplay.textFlow.paragraphSpaceBefore=0;
			}
		]]>
	</fx:Script>
	
	<s:states>
		<s:State name="normal"/>
		<s:State name="disabled" stateGroups="disabledStates"/>
		<s:State name="normalWithPrompt"/>
		<s:State name="disabledWithPrompt" stateGroups="disabledStates"/>
	</s:states>
	
	<!-- border --> 
	<!--- @private -->
	<s:Rect left="0" right="0" top="0" bottom="0" id="border">
		<s:stroke>     
			<!--- @private -->
			<s:SolidColorStroke id="borderStroke" weight="1" />
		</s:stroke>
	</s:Rect>
	
	<!-- fill -->
	<!--- Defines the appearance of the TextInput component's background. -->
	<s:Rect id="background" left="1" right="1" top="1" bottom="1">
		<s:fill>
			<!--- Defines the background fill color. -->
			<s:SolidColor id="bgFill" color="0xFFFFFF" />
		</s:fill>
	</s:Rect>
	
	<!-- shadow -->
	<!--- @private -->
	<s:Rect left="1" top="1" right="1" height="1" id="shadow">
		<s:fill>
			<s:SolidColor color="0x000000" alpha="0.12" />
		</s:fill>
	</s:Rect>
	
	<!-- text -->
	<!--- @copy spark.components.supportClasses.SkinnableTextBase#textDisplay -->
	<s:Image visible="true" left="10" top="3" bottom="3" id="textDisplay1" source="{this.getTheIcon(hostComponent.text)}" width="16" scaleMode="letterbox"/>
	<s:RichEditableText id="textDisplay" visible="false" paddingTop="0"
						lineBreak="explicit" editable="true" 
						widthInChars="10" verticalCenter="-2">
	</s:RichEditableText>
	
	
	<!--- Defines the Label that is used for prompt text. The includeInLayout property is false so the prompt text does not affect measurement. -->
	<s:Label id="promptDisplay" maxDisplayedLines="1"
			 verticalAlign="middle"
			 mouseEnabled="false" mouseChildren="false"
			 includeIn="normalWithPrompt,disabledWithPrompt" 
			 includeInLayout="false"
			 />
	
</s:SparkSkin>
