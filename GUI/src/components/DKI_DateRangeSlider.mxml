<?xml version="1.0" encoding="utf-8"?>
<s:VGroup xmlns:fx="http://ns.adobe.com/mxml/2009"
		  xmlns:s="library://ns.adobe.com/flex/spark"
		  xmlns:mx="library://ns.adobe.com/flex/mx" width="100%"
		  gap="5" creationComplete="init(event)" xmlns:components="components.*">
	
	<fx:Script>
		<![CDATA[
			import flash.globalization.DateTimeFormatter;
			import flash.globalization.LocaleID;
			
			import mx.events.FlexEvent;
			import mx.formatters.DateFormatter;
			
			import spark.components.PopUpAnchor;
			
			[Bindable] private var df:DateTimeFormatter = new DateTimeFormatter(LocaleID.DEFAULT, "short", "short");
			
			private var _startRange:Date        = new Date(2013,5,12,0,0,0,0);
			private var _endRange:Date          = new Date(2013,5,15,0,0,0,0);
			private var _selectedStartDate:Date = _startRange;
			private var _selectedEndDate:Date   = _endRange;
			
			[Bindable ("dataUpdate")] public function get startRange():Date{        return _startRange;}
			[Bindable ("dataUpdate")] public function get endRange():Date{          return _endRange;}
			[Bindable ("dataUpdate")] public function get selectedStartDate():Date{ return _selectedStartDate;}
			[Bindable ("dataUpdate")] public function get selectedEndDate():Date{   return _selectedEndDate;} 
			
			public function set startRange(d:Date):void{
				if(!d)d=new Date();
				_startRange = d;
				selectedStartDate = d;
				dispatchEvent(new Event("dataUpdate"));updateDates();
			}
			public function set endRange(d:Date):void{
				if(!d)d=new Date();
				_endRange = d;
				selectedEndDate = d;
				dispatchEvent(new Event("dataUpdate"));updateDates();
			}
			public function set selectedStartDate(d:Date):void{
				if(!d)d=new Date();
				_selectedStartDate = d;
				dispatchEvent(new Event("dataUpdate"));
			}
			public function set selectedEndDate(d:Date):void{
				if(!d)d=new Date();
				_selectedEndDate = d;
				dispatchEvent(new Event("dataUpdate"));
			}
			
			[Bindable ("dataUpdate")] public function get span():int{
				return (endRange.time-startRange.time)/(1000*60*60*24);
			}
			
			public function friendlyDate(n:Number):String{
				var d:Date = new Date(startRange);
				d.date+=n;
				return df.format(d).split(" ")[0];
			}
			
			public function justNumber(n:Number):String{
				if(n<10)return "0"+n;
				return ""+n;
			}
			
			protected function updateDates():void{
				
				var d:Date = new Date(startRange);
				d.date   += fromDay.value;
				d.hours   = fromHour.value;
				d.minutes = fromMinute.value;
				
				selectedStartDate = d;
				
				d = new Date(startRange);
				d.date   += toDay.value;
				d.hours   = toHour.value;
				d.minutes = toMinute.value;
				
				
				selectedEndDate = d;
				
			}
			
			protected function fromDayChange(event:Event):void{
				if(fromDay.value>toDay.value){
					toDay.value   = fromDay.value;
				}
				updateDates();
			}
			
			protected function toDayChange(event:Event):void{
				if(fromDay.value>toDay.value){
					fromDay.value = toDay.value;
				}
				updateDates();
			}
			
			protected function init(event:FlexEvent):void
			{
				// TODO Auto-generated method stub
				if(!selectedStartDate)selectedStartDate = startRange;
				if(!selectedEndDate)selectedEndDate     = endRange;
			}
			
		]]>
	</fx:Script>
	
	<fx:Declarations>
		<!-- Place non-visual elements (e.g., services, value objects) here -->
	</fx:Declarations>

	<s:HGroup width="100%" gap="0">
		<components:DKI_ValidatorInput width="100%"  editable="false" selectable="false" text="{df.format(selectedStartDate)} - {df.format(selectedEndDate)}"  click="control.displayPopUp = true;updateDates();"/>
		<s:Button width="25" click="control.displayPopUp = true;updateDates();"/>	
	</s:HGroup>
	
	<s:PopUpAnchor id="control" popUpPosition="below">
		<s:BorderContainer dropShadowVisible="true" cornerRadius="5" mouseDownOutside="{control.displayPopUp = false;}" backgroundAlpha="0.85" >
			<s:VGroup width="100%" verticalAlign="middle" horizontalAlign="center" paddingBottom="10" paddingLeft="10" paddingTop="10" paddingRight="10">
				<s:HGroup>
					<s:Spacer width="50"/>
					<s:Label id="title" text="Time Range" fontWeight="bold" textAlign="center" width="100%" fontSize="16"/>
						
				</s:HGroup>
				<!--
				<s:HGroup width="100%">
					<s:Spacer width="50"/>
					<s:VGroup width="100%">
						<s:Label text="From:" fontWeight="bold"/>
						<s:TextInput width="130" text="{df.format(selectedStartDate)}" selectable="false" editable="false"/>
					</s:VGroup>
					<s:VGroup width="100%">
						<s:Label text="To:"  fontWeight="bold"/>
						<s:TextInput width="130" text="{df.format(selectedEndDate)}" selectable="false" editable="false"/>						
					</s:VGroup>
				</s:HGroup>
				-->
				<s:HGroup>
					<s:Spacer width="50"/>
					<s:Label  text="{df.format(selectedStartDate)}" fontWeight="bold" textAlign="center" width="120" fontSize="12"/>
					<s:Label  text=" - " fontWeight="bold" textAlign="center" fontSize="12"/>
					<s:Label  text="{df.format(selectedEndDate)}"   fontWeight="bold" textAlign="center" width="120" fontSize="12"/>
					
				</s:HGroup>
				
				<s:HGroup width="100%">
					<s:Label text="Date:"    textAlign="right" width="50" fontWeight="bold"/>
					<s:HSlider id="fromDay"  width="100%" minimum="0" maximum="{span}" dataTipPrecision="0" dataTipFormatFunction="friendlyDate" change="fromDayChange(event)" enabled="{span}"/>
					<s:HSlider id="toDay"    width="100%" minimum="0" maximum="{span}" dataTipPrecision="0" dataTipFormatFunction="friendlyDate" change="toDayChange(event)"   enabled="{span}"/>
				</s:HGroup>
				
				<s:HGroup width="100%">
					<s:Label text="Hour:"    textAlign="right" width="50" fontWeight="bold"/>
					<s:HSlider id="fromHour" width="100%" minimum="0" maximum="23" dataTipFormatFunction="justNumber" value="{_startRange.hours}" change="updateDates();"/>
					<s:HSlider id="toHour"   width="100%" minimum="0" maximum="23" dataTipFormatFunction="justNumber" value="{_endRange.hours}"   change="updateDates();"/>
				</s:HGroup>
				
				<s:HGroup width="100%">
					<s:Label text="Minute:"    textAlign="right" width="50" fontWeight="bold"/>
					<s:HSlider id="fromMinute" width="100%" minimum="0" maximum="59" dataTipFormatFunction="justNumber" value="{_startRange.minutes}" change="updateDates();"/>
					<s:HSlider id="toMinute"   width="100%" minimum="0" maximum="59" dataTipFormatFunction="justNumber" value="{_endRange.minutes}"   change="updateDates();"/>
				</s:HGroup>
				
				
			</s:VGroup>
		</s:BorderContainer>
	</s:PopUpAnchor>


</s:VGroup>
