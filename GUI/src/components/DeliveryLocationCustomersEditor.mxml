<?xml version="1.0" encoding="utf-8"?>
<s:VGroup xmlns:fx="http://ns.adobe.com/mxml/2009"
		  xmlns:s="library://ns.adobe.com/flex/spark"
		  xmlns:mx="library://ns.adobe.com/flex/mx"
		  xmlns:components="components.*"
		  creationComplete="creationCompleteHandler(event)"
		  gap="2" width="100%" height="100%">
	
	<fx:Script>
		<![CDATA[
			
			import dm.remoteDataService;
			import dm.utils.tools;
			
			import flash.events.KeyboardEvent;
			import flash.globalization.LocaleID;
			
			import flashx.textLayout.container.ScrollPolicy;
			
			import mx.collections.ArrayCollection;
			import mx.controls.Alert;
			import mx.controls.DateField;
			import mx.events.CloseEvent;
			import mx.events.FlexEvent;
			import mx.managers.PopUpManager;
			import mx.rpc.events.ResultEvent;
			import mx.utils.ObjectUtil;
			import mx.utils.StringUtil;
			import mx.validators.RegExpValidator;
			
			import renderers.DKI_HeaderColumn_Renderer;
			
			import spark.components.ToggleButton;
			import spark.components.VScrollBar;
			import spark.components.gridClasses.IGridItemRenderer;
			import spark.events.GridEvent;
			import spark.events.GridItemEditorEvent;
			import spark.events.GridSelectionEvent;
			import spark.events.IndexChangeEvent;
			
			
			public static const MAIN_WINDOW_WIDTH:int = 1500;
			
			[Bindable] public var readOnly:Boolean = false;
			[Bindable] public var canUpdate:Boolean = false;
			[Bindable] public var canCreate:Boolean = false;
			[Bindable] public var canDelete:Boolean = false;
			[Bindable] public var hasPassword:Boolean = false;
			
			[Bindable] public var labelWidth:uint = 120;
			[Bindable] public var labelHeight:uint = 26;
			[Bindable] public var fieldWidth:uint = 240;
			[Bindable] public var fieldHeight:uint = 26;
			[Bindable] public var spaceWidth:uint = 15;
			[Bindable] public var spaceHeight:uint = 2;
			
			[Bindable] public var currentCategory:String="";
			[Bindable] public var currentSupplier:String="";
			[Bindable] public var currentDelvCode:String="";
			[Bindable] public var currentDelvName:String="";
			
			
			[Bindable] public var delvlocCustomerList:remoteDataService = new remoteDataService( "DeliveryLocationService.lookupCustomerHaveDelvloc", null, delvlocCustomerList_resultHandler );
			[Bindable] private var availableCustomerList:remoteDataService = new remoteDataService( "DeliveryLocationService.lookupCustomerHavenoDelvloc", null, availableCustomerList_resultHandler );
			
			private var deleteAction:remoteDataService = new remoteDataService( "DeliveryLocationService.deleteLinks", null, deleteData_resultHandler, 1 );
			private var createAction:remoteDataService = new remoteDataService( "DeliveryLocationService.createLinks", null, createData_resultHandler, 1 );
			
			[Bindable] private var customerCategoryList:remoteDataService = new remoteDataService( "ListLibraryService.lookupCustomerCategory", null, lookupCustomerCategory_resultHandler );
			[Bindable] private var customerSupplierList:remoteDataService = new remoteDataService( "ListLibraryService.lookupCompany", null, lookupCustomerSupplier_resultHandler );
			
			
			public var parentParams:Object = new Object();
			
			public var isPopupWindow:Boolean=false;

			
			protected function creationCompleteHandler(event:FlexEvent):void
			{
				trace ("-------------start creationCompleteHandler");
				
				this.customerSupplierList.service(1);
				this.customerCategoryList.service();
				
				this.availableCustomerList.service(currentDelvCode, currentSupplier, currentCategory);
				this.delvlocCustomerList.service(currentDelvCode, currentSupplier, currentCategory);
				
				trace ("------------End creationCompleteHandler");
					
			}
			
			
			protected function availableCustomerList_resultHandler():void
			{
				this.availableCustomerGrid.dataProvider = null;
				this.availableCustomerGrid.dataProvider = availableCustomerList;
				
				this.btn_createLine.enabled = false;
				this.btn_deleteLine.enabled = false;
			}
			
			
			public function doNothing():void
			{
			}
			
			
			protected function lookupCustomerCategory_resultHandler():void
			{
				
			}
			
			protected function lookupCustomerSupplier_resultHandler():void
			{
				
			}
			
			
			protected function delvlocCustomerList_resultHandler():void
			{
				this.delvlocCustomerGrid.dataProvider = null;
				this.delvlocCustomerGrid.dataProvider = delvlocCustomerList;
				
				this.btn_createLine.enabled = false;
				this.btn_deleteLine.enabled = false;
			}
			
			protected function adjustCreateLineButton():void
			{
				if ( this.availableCustomerGrid.selectedItems!=null && this.availableCustomerGrid.selectedItems.length > 0 )
				{
					this.btn_createLine.enabled = this.canCreate;
				}
				else
				{
					this.btn_createLine.enabled = false;
				}
			}
			
			protected function adjustDeleteLineButton():void
			{
				if ( this.delvlocCustomerGrid.selectedItems!=null && this.delvlocCustomerGrid.selectedItems.length > 0 )
				{
					this.btn_deleteLine.enabled = this.canDelete;
				}
				else
				{
					this.btn_deleteLine.enabled = false;
				}
			}
			
			protected function availableCustomerGrid_selectionChangeHandler(event:GridSelectionEvent):void
			{
				this.adjustCreateLineButton();
				this.adjustDeleteLineButton();
			}
			
			protected function delvlocCustomerGrid_selectionChangeHandler(event:GridSelectionEvent):void
			{
				this.adjustCreateLineButton();
				this.adjustDeleteLineButton();
			}
			
			protected function cancel_clickHandler():void
			{
				clearDetail();
				this.dispatchEvent(new CloseEvent(CloseEvent.CLOSE,true, false));
				
			}			

			
			protected function clearDetail(): void
			{
			}			
			
			
			protected function refreshGrids():void
			{
				var delv_code:String="";
				var catg_code:String="-1";
				var cmpy_code:String="-1";
				
				delv_code = this.delv_code.text;
				if (delv_cust_catgcode.selectedIndex>=0)
				{
					catg_code = this.customerCategoryList[delv_cust_catgcode.selectedIndex].category_code;
				}
				if (delv_cust_suppcode.selectedIndex>=0)
				{
					cmpy_code = this.customerSupplierList[delv_cust_suppcode.selectedIndex].cmpy_code;
				}
				
				this.availableCustomerList.service(delv_code, cmpy_code, catg_code);
				this.delvlocCustomerList.service(delv_code, cmpy_code, catg_code);
			}
			
			
			protected function deleteData_resultHandler( ):void
			{
				clearDetail();
				if ( this.deleteAction.dataString == "OK" )
				{
					global.msgSuccess(resourceManager.getString('default','MSG_DELETE__SUCCESS'));
				}
				else
				{
					global.msgFail(resourceManager.getString('default','ERROR_DELETE__FAILURE'));
				}
				
				this.refreshGrids();
			}
			
			protected function createData_resultHandler( ):void
			{
				clearDetail();
				if ( this.createAction.dataString == "OK" )
				{
					global.msgSuccess(resourceManager.getString('default','MSG_CREATE__SUCCESS'));
				}
				else
				{
					global.msgFail(resourceManager.getString('default','ERROR_CREATE__FAILURE'));
				}
				
				this.refreshGrids();
			}
			
			
			protected function existcustomer_line_delHandler():void
			{
				this.btn_createLine.enabled = false;
				this.btn_deleteLine.enabled = false;
				
				if ( this.delvlocCustomerGrid.selectedItems!=null && this.delvlocCustomerGrid.selectedItems.length > 0 )
				{
					var x:Object;
					var y:Object;
					
					var obj:Object = new Object();
					
					obj.delv_code = this.delv_code.text;
					obj.delv_name = this.delv_name.text;
					obj.cust_items = new Array();
					
					for each ( y in this.delvlocCustomerGrid.selectedItems )
					{
						x = new Object();
						
						x.cust_acnt 				= y.cust_acnt;
						x.cust_desc 				= y.cust_desc;
						x.cust_cmpy_code    		= y.cust_cmpy_code;
						x.cust_cmpy_name 			= y.cust_cmpy_name;
						x.cust_supp_code 			= y.cust_supp_code;
						x.cust_supp_name    		= y.cust_supp_name;
						x.cust_ctgr_code 			= y.cust_ctgr_code;
						x.cust_ctgr_text    		= y.cust_ctgr_text;
						
						obj.cust_items.push(x);
					}
					
					this.deleteAction.service( obj );
				}
			}
			
			
			protected function availcustomer_line_addHandler():void
			{
				this.btn_createLine.enabled = false;
				this.btn_deleteLine.enabled = false;
				
				if ( this.availableCustomerGrid.selectedItems!=null && this.availableCustomerGrid.selectedItems.length > 0 )
				{
					var x:Object;
					var y:Object;
					
					var obj:Object = new Object();
					
					obj.delv_code = this.delv_code.text;
					obj.delv_name = this.delv_name.text;
					obj.cust_items = new Array();
					
					for each ( y in this.availableCustomerGrid.selectedItems )
					{
						x = new Object();
						
						x.cust_acnt 				= y.cust_acnt;
						x.cust_desc 				= y.cust_desc;
						x.cust_cmpy_code    		= y.cust_cmpy_code;
						x.cust_cmpy_name 			= y.cust_cmpy_name;
						x.cust_supp_code 			= y.cust_supp_code;
						x.cust_supp_name    		= y.cust_supp_name;
						x.cust_ctgr_code 			= y.cust_ctgr_code;
						x.cust_ctgr_text    		= y.cust_ctgr_text;
						
						obj.cust_items.push(x);
					}
					
					this.createAction.service( obj );
				}
			}
			
			public function setFilters( params:*=false ): void
			{
				if ( params == false )
				{
					return;
				}
				
				this.parentParams = params;
				
				trace ("...............................in setFilters");
				tools.pr( params);
				
				var po:Object=new Object();
				
				po["delv_code"] = tools.getObjAttribute( params, "delv_code", "" );
				po["delv_name"] = tools.getObjAttribute( params, "delv_name", "" );
				
				this.currentDelvCode = po["delv_code"];
				this.currentDelvName = po["delv_name"];
				this.currentCategory = "-1";
				this.currentSupplier = "-1";
				
				this.availableCustomerList.service(currentDelvCode, currentSupplier, currentCategory);
				this.delvlocCustomerList.service(currentDelvCode, currentSupplier, currentCategory);
				
				this.btn_createLine.enabled = false;
				this.btn_deleteLine.enabled = false;
				this.delv_code.text = this.currentDelvCode;
				this.delv_name.text = this.currentDelvName;
				this.delv_cust_catgcode.selectedIndex=-1;
				this.delv_cust_suppcode.selectedIndex=-1;
			}
			
			protected function delv_cust_catgcode_changeHandler(event:IndexChangeEvent):void
			{
				this.refreshGrids();
				/* if (delv_cust_catgcode.selectedIndex>=0)
				{
					this.currentCategory = customerCategoryList[delv_cust_catgcode.selectedIndex].category_code;
				}
				else
				{
					this.currentCategory = "-1";
				}
				
				this.availableCustomerList.service(currentDelvCode, currentSupplier, currentCategory);
				this.delvlocCustomerList.service(currentDelvCode, currentSupplier, currentCategory); */
			}
			
			protected function delv_cust_suppcode_changeHandler(event:IndexChangeEvent):void
			{
				this.refreshGrids();
				/* if (delv_cust_suppcode.selectedIndex>=0)
				{
					this.currentSupplier = customerSupplierList[delv_cust_suppcode.selectedIndex].cmpy_code;
				}
				else
				{
					this.currentSupplier = '-1';
				}
				
				this.availableCustomerList.service(currentDelvCode, currentSupplier, currentCategory);
				this.delvlocCustomerList.service(currentDelvCode, currentSupplier, currentCategory); */
			}
			
		]]>
	</fx:Script>
	
	<s:Panel id="details" width="100%" height="570" skinClass="skins.WidgetPanelSkin">
		<s:layout>
			<s:VerticalLayout/>
			<!--s:TileLayout/-->
		</s:layout>
		
		<s:Spacer height="5"/>
		<s:VGroup width="100%">
			<s:HGroup width="100%">
				<s:HGroup>
					<s:Label width="{labelWidth}" height="{labelHeight}" text="{resourceManager.getString('default','DELVLOC.LABEL.DELV_LOCATION')}" verticalAlign="middle"/>
					<components:DKI_ValidatorInput id="delv_code" maxChars="40" 
												   width="{fieldWidth}" height="{fieldHeight}" 
												   text="" editable="false" enabled="true" 
												   required="true" validationType="document" automationName="{resourceManager.getString('default','DELVLOC.LABEL.DELV_LOCATION')}" 
												   />
					<components:DKI_ValidatorInput id="delv_name" maxChars="100" 
												   width="{fieldWidth}" height="{fieldHeight}" 
												   text="" editable="false" enabled="true" 
												   required="true" validationType="document" automationName="{resourceManager.getString('default','DELVLOC.LABEL.DELV_LOCATION')}" 
												   />
				</s:HGroup>
				
				<s:Spacer width="{spaceWidth}" />
				
				<s:HGroup>
					<s:Label width="{labelWidth}" height="{labelHeight}" text="{resourceManager.getString('default','DELVLOC.LABEL.DELV_CUST_SUPPLIER')}" verticalAlign="middle"/>
					<components:DKI_ValidatorComboBox id="delv_cust_suppcode" 
													  dataProvider="{customerSupplierList}" 
													  labelField="cmpy_desc" 
													  selectedItem="" enabled="true"  
													  width="{fieldWidth}" height="{fieldHeight}" change="delv_cust_suppcode_changeHandler(event)" 
													  prompt="{resourceManager.getString('default','SELECT')+resourceManager.getString('default','DELVLOC.LABEL.DELV_CUST_SUPPLIER')}"
													  required="false"  automationName="{resourceManager.getString('default','DELVLOC.LABEL.DELV_CUST_SUPPLIER')}" 
													  />
				</s:HGroup>
				
				<s:Spacer width="{spaceWidth}" />
				
				<s:HGroup>
					<s:Label width="{labelWidth}" height="{labelHeight}" text="{resourceManager.getString('default','DELVLOC.LABEL.DELV_CUST_CATEGORY')}" verticalAlign="middle"/>
					<components:DKI_ValidatorComboBox id="delv_cust_catgcode" 
													  dataProvider="{customerCategoryList}" 
													  labelField="category_name" 
													  selectedItem="" enabled="true" 
													  width="{fieldWidth}" height="{fieldHeight}" change="delv_cust_catgcode_changeHandler(event)" 
													  prompt="{resourceManager.getString('default','SELECT')+resourceManager.getString('default','DELVLOC.LABEL.DELV_CUST_CATEGORY')}"
													  required="false" automationName="{resourceManager.getString('default','DELVLOC.LABEL.DELV_CUST_CATEGORY')}" 
													  />
				</s:HGroup>
				
			</s:HGroup>
			
			
			<s:Spacer height="5" />
			
			<mx:HRule width="100%"/>
			

			<s:HGroup width="100%" verticalAlign="middle">
				
				<s:VGroup>
					<s:Label width="100%" height="{labelHeight}" text="{resourceManager.getString('default','DELVCUST.LABEL.AVAIL_CUSTOMER')}" verticalAlign="middle"/>
					<s:DataGrid id="availableCustomerGrid" width="100%" height="400" requestedRowCount="10"
								selectionChange="availableCustomerGrid_selectionChangeHandler(event)"
								skinClass="skins.DKI_DataGrid_Skin" visible="true" enabled="{this.availableCustomerGrid.dataProvider.length>0}" selectionMode="multipleRows"
								editable="false" 
								>
						<s:columns>
							<s:ArrayList>
								<s:source>
									<s:GridColumn dataField="cust_acnt" headerText="{resourceManager.getString('default','DELVLOC.LABEL.DELV_CUST_ACCT')}" visible="false" width="130"></s:GridColumn>
									<s:GridColumn dataField="cust_desc" headerText="{resourceManager.getString('default','DELVLOC.LABEL.DELV_CUST_ACCT')}" visible="true" width="250"></s:GridColumn>
									<s:GridColumn dataField="cust_cmpy_code" headerText="{resourceManager.getString('default','DELVLOC.LABEL.DELV_CUST_CMPYCODE')}" visible="false" width="160"></s:GridColumn>
									<s:GridColumn dataField="cust_cmpy_name" headerText="{resourceManager.getString('default','DELVLOC.LABEL.DELV_CUST_CMPYNAME')}" visible="false" width="240"></s:GridColumn>
									<s:GridColumn dataField="cust_supp_code" headerText="{resourceManager.getString('default','DELVLOC.LABEL.DELV_CUST_SUPPCODE')}" visible="true" width="160"></s:GridColumn>
									<s:GridColumn dataField="cust_supp_name" headerText="{resourceManager.getString('default','DELVLOC.LABEL.DELV_CUST_SUPPNAME')}" visible="true" width="240"></s:GridColumn>
									<s:GridColumn dataField="cust_ctgr_code" headerText="{resourceManager.getString('default','DELVLOC.LABEL.DELV_CUST_CATGCODE')}" visible="false"></s:GridColumn>
									<s:GridColumn dataField="cust_ctgr_text" headerText="{resourceManager.getString('default','DELVLOC.LABEL.DELV_CUST_CATEGORY')}" visible="true" width="130"></s:GridColumn>
								</s:source>
							</s:ArrayList>
						</s:columns>
					</s:DataGrid>
				</s:VGroup>
				
				<s:VGroup>
					<components:DKI_Button id="btn_createLine" cornerRadius="0" label="{resourceManager.getString('default','BUTTON__ADD_LINE_DLVCUST')}" width="32" height="100%" click="availcustomer_line_addHandler()" enabled="false" type="create"/>
					<components:DKI_Button id="btn_deleteLine" cornerRadius="0" label="{resourceManager.getString('default','BUTTON__DEL_LINE_DLVCUST')}" width="32" height="100%" click="existcustomer_line_delHandler()" enabled="false" type="delete"/>
				</s:VGroup>
				
				<s:VGroup width="100%">
					<s:Label width="100%" height="{labelHeight}" text="{resourceManager.getString('default','DELVCUST.LABEL.LINKED_CUSTOMER')}" verticalAlign="middle"/>
					<s:DataGrid id="delvlocCustomerGrid" width="100%" height="400" requestedRowCount="10"
								selectionChange="delvlocCustomerGrid_selectionChangeHandler(event)"
								skinClass="skins.DKI_DataGrid_Skin" visible="true" enabled="{this.delvlocCustomerGrid.dataProvider.length>0}" selectionMode="multipleRows"
								editable="false"
								>
						<s:columns>
							<s:ArrayList>
								<s:source>
									<s:GridColumn dataField="cust_acnt" headerText="{resourceManager.getString('default','DELVLOC.LABEL.DELV_CUST_ACCT')}" visible="false" width="130"></s:GridColumn>
									<s:GridColumn dataField="cust_desc" headerText="{resourceManager.getString('default','DELVLOC.LABEL.DELV_CUST_ACCT')}" visible="true" width="200"></s:GridColumn>
									<s:GridColumn dataField="cust_cmpy_code" headerText="{resourceManager.getString('default','DELVLOC.LABEL.DELV_CUST_CMPYCODE')}" visible="false" width="160"></s:GridColumn>
									<s:GridColumn dataField="cust_cmpy_name" headerText="{resourceManager.getString('default','DELVLOC.LABEL.DELV_CUST_CMPYNAME')}" visible="false" width="250"></s:GridColumn>
									<s:GridColumn dataField="cust_supp_code" headerText="{resourceManager.getString('default','DELVLOC.LABEL.DELV_CUST_SUPPCODE')}" visible="true" width="160"></s:GridColumn>
									<s:GridColumn dataField="cust_supp_name" headerText="{resourceManager.getString('default','DELVLOC.LABEL.DELV_CUST_SUPPNAME')}" visible="true" width="240"></s:GridColumn>
									<s:GridColumn dataField="cust_ctgr_code" headerText="{resourceManager.getString('default','DELVLOC.LABEL.DELV_CUST_CATGCODE')}" visible="false"></s:GridColumn>
									<s:GridColumn dataField="cust_ctgr_text" headerText="{resourceManager.getString('default','DELVLOC.LABEL.DELV_CUST_CATEGORY')}" visible="true" width="130"></s:GridColumn>
								</s:source>
							</s:ArrayList>
						</s:columns>
					</s:DataGrid>
				</s:VGroup>
				
			</s:HGroup>
			
		</s:VGroup>
		
		<s:Spacer height="20" />
		
		<s:HGroup width="100%" paddingBottom="4" paddingTop="0" gap="5">
			<s:Spacer width="100%"/>
			<components:DKI_Button id="btn_cancel" label="{resourceManager.getString('default','CLOSE')}" height="100%" click="cancel_clickHandler()" enabled="true" type="cancel" focusEnabled="true" />
		</s:HGroup>
	</s:Panel>
	
</s:VGroup>
