<?xml version="1.0" encoding="utf-8"?>
<s:ItemRenderer xmlns:fx="http://ns.adobe.com/mxml/2009" 
				xmlns:s="library://ns.adobe.com/flex/spark" 
				xmlns:mx="library://ns.adobe.com/flex/mx" 
				autoDrawBackground="false" xmlns:components="components.*">
	
	<s:states>
		<s:State name="normal" />
		<s:State name="selected" />
		<s:State name="hovered"/>
	</s:states>
	
	<fx:Script>
		<![CDATA[
			import assets.Assets;
			
			import components.ModalEquipmentDetails;
			import components.ModalEquipmentUpdate;
			
			import mx.collections.ArrayCollection;
			import mx.core.BitmapAsset;
			import mx.core.FlexGlobals;
			import mx.events.FlexEvent;
			import mx.managers.PopUpManager;
			
			import valueObjects.Compartment;
			
			[Bindable] private var imgHeight:Number = 100;
			[Bindable] private var imgWidth:Number = 100;
			[Bindable] private var img:BitmapAsset;
			[Bindable] private var offset:Number  = 0;
			
			private function set image(qualifier:String):void{
				switch(qualifier){
					case 'F':case'f':
						img = Assets.FLATBED;	
						imgWidth = 284*imgHeight/120;
						return;
					case 'R':case'r':
						img = Assets.RIGID;
						imgWidth = 515*imgHeight/120;
						return;
					case 'P':case'p':
						img = Assets.PRIME_MOVER;	
						imgWidth = 222*imgHeight/120;
						if(data.idx == 1)offset = -42;
						return;
					case 'T':case't':
						img = Assets.TRAILER;
						imgWidth = 375*imgHeight/120;
						offset = -7;
						return;
					case 'S':case's':	// Rigid Ship
						img = Assets.SHIP;
						imgWidth = 515*imgHeight/120;
						return;
					case 'E':case'e':	// Rail Car
						img = Assets.RAILTANK;
						imgWidth = 386*imgHeight/120;
						return;
				}
				trace("GRAPHICS NOT DEFINED = "+qualifier);
				img = null; imgWidth = 0;
			}
			override public function set data(o:Object):void
			{
				super.data  = o;
				/*idx = data.idx;
				composition = data.eqc_sub_item;
				schedul = data.etyp_schedul;
				type = data.sub_item_sched_type;
				rigid = data.sub_item_etyp_isrigid;
				category = data.etyp_category;
				*/
				if(data != null)
				if(data.etyp_category != null){
					image = data.etyp_category.toString();
				}else{
					if(data.eqc_sub_item == null){
						if(data.etyp_isrigid == "Y" || 
							data.etyp_isrigid == "y" || 
							data.sub_item_etyp_isrigid == "Y" || 
							data.sub_item_etyp_isrigid == "y" ){
							image = "R";
						}else{
							if(data.etyp_schedul == "Y" ||
								data.etyp_schedul == "y" ){
								image = "T";
							}else{
								image = "P";
							}
						}
					}else{
						if(data.sub_item_sched_type == "N" || 
							data.sub_item_sched_type == "n" ){
							image = "P";
						}else{
							image = "T";
						}
					}
				}
			}
			
			private function isBadgeVisible(composition:String,schedul:String,type:String):Boolean
			{
				if(composition==null){
					if((schedul=='N')||(schedul=='n')) return false;
					else return true;
				}else{
					if((type=='N')||(type=='n')) return false;
					else return true;
				}								
			}
			
			private function showDetails(arr:Object):void
			{
				var eq:ModalEquipmentDetails = new ModalEquipmentDetails();
				eq.title = resourceManager.getString('default','global.titles.cmpt_details');
				
				var temp:ArrayCollection = new ArrayCollection;
				for each(var x:Object in arr){
					temp.addItem(x);
				}
				eq.arr = temp;
				eq.nComp = arr.length.toString();
				PopUpManager.addPopUp(eq,this.parentApplication as DisplayObject,true);
				PopUpManager.centerPopUp(eq);
			}
			
			private function editDetails(arr:Object):void
			{
				var eq:ModalEquipmentUpdate = new ModalEquipmentUpdate();
				eq.title = resourceManager.getString('default','global.titles.cmpt_details');
				
				var seals:Array = new Array();
				var temp:ArrayCollection = new ArrayCollection;
				for each(var x:Object in arr){
					temp.addItem(x);
					seals[x.cmpt_no] = x.cmpt_n_seals;
				}
				eq.arr = temp;
				eq.seals = seals;
				
				eq.nComp = arr.length.toString();
				PopUpManager.addPopUp(eq,this.parentApplication as DisplayObject,true);
				PopUpManager.centerPopUp(eq);
			}
			
			public function getCompArray(arr:Object):ArrayCollection
			{
				var temp:ArrayCollection = new ArrayCollection;
				for each(var x:Object in arr){
					temp.addItem(x);
				}
				return temp;
			}
			
			public function isGridVisible(arr:Object):Boolean
			{
				if(arr.length==0) return false;
				else return true;
			}
			
			private function getTitle(composition:String, ncTitle:String, cTitle:String):String
			{
				if(composition==null) return ncTitle;
				else return cTitle;
			}
			
			public function isNumSealColumnVisible():Boolean
			{
				var value:String = global.getValueFromSiteConfigSettings( "SITE_USE_SEAL" );
				if ( value == 'Y' )
				{
					return true;
				}
				else
				{
					return false;
				}
			}
		]]>
	</fx:Script>

	<s:transitions>
		<s:Transition fromState="normal" toState="hovered">
			<s:Fade target="{btnGrp}" duration="500"/>
		</s:Transition>
		<s:Transition fromState="hovered" toState="normal">
			<s:Fade target="{btnGrp}" duration="500"/>
		</s:Transition>
		<s:Transition fromState="normal" toState="hovered">
			<s:Fade target="{updBtn}" duration="500"/>
		</s:Transition>
		<s:Transition fromState="hovered" toState="normal">
			<s:Fade target="{updBtn}" duration="500"/>
		</s:Transition>
	</s:transitions>

		
	<s:VGroup top="5">
		<s:Image source="{img}" width="{imgWidth}" height="{imgHeight}" />
		<s:Label text="{getTitle(data.eqc_sub_item,data.etyp_title,data.eqc_sub_item_title)}" width="100%" textAlign="center" />
		<s:Spacer height="10" />
		<components:DKI_DataGrid width="100%" height="155" contentBackgroundAlpha="0" id="compList" dataProvider="{getCompArray(data.compartments)}" visible="{isGridVisible(data.compartments)}">
			<components:columns>
				<s:ArrayList>
					<s:GridColumn dataField="cmpt_no" headerText="{resourceManager.getString('default','ETYP_CMPT.CMPT_NO')}" width="40"></s:GridColumn>
					<s:GridColumn dataField="cmpt_capacit" headerText="{global.gCapacityLabel}" width="80"></s:GridColumn>
					<s:GridColumn dataField="unit" headerText="{resourceManager.getString('default','ETYP_CMPT.CMPT_UNITS')}" width="80"></s:GridColumn>
					<s:GridColumn dataField="cmpt_n_seals" headerText="{resourceManager.getString('default','ETYP_CMPT.CMPT_N_SEALS')}" width="90" visible="{this.isNumSealColumnVisible()}"></s:GridColumn>
				</s:ArrayList>
			</components:columns>
		</components:DKI_DataGrid>
	</s:VGroup>
	
	<s:Graphic top="35" horizontalCenter="0" visible="{isBadgeVisible(data.eqc_sub_item, data.etyp_schedul,data.sub_item_sched_type)}" id="badge">
		<s:Ellipse height="20" width="20">
			<s:stroke>
				<s:SolidColorStroke color="0x000000" weight="1"/>
			</s:stroke>
			<s:fill>
				<s:SolidColor color="0xff0000" />
			</s:fill>
		</s:Ellipse>
	</s:Graphic>
	
	<s:Graphic top="57" horizontalCenter="0" visible="{isBadgeVisible(data.eqc_sub_item, data.etyp_schedul,data.sub_item_sched_type)}">
		<s:Rect height="12" width="89">
			<s:stroke>
				<s:SolidColorStroke color="0x000000" weight="1"/>
			</s:stroke>
			<s:fill>
				<s:SolidColor color="0xFFFFFF" />
			</s:fill>
		</s:Rect>
	</s:Graphic>
	
	<s:Label text="{data.compartments.length.toString()}" horizontalCenter="0" top="40" fontSize="13" fontWeight="bold" color="0xFFFFFF" width="100%" textAlign="center" visible="{isBadgeVisible(data.eqc_sub_item, data.etyp_schedul,data.sub_item_sched_type)}"/>
	<s:Label visible="{isBadgeVisible(data.eqc_sub_item, data.etyp_schedul,data.sub_item_sched_type)}" top="59" width="85" color="0x555555" fontSize="11" fontWeight="bold" horizontalCenter="0" text="compartments" textAlign="center"/>

	<s:HGroup id="updBtn" top="3" left="3" includeIn="hovered,selected" gap="1" visible="{global.siteUseSeal}">
		<s:Image source="assets/icons/edit.png" useHandCursor="true" buttonMode="true" click="editDetails(data.compartments)" visible="{badge.visible}"/>
	</s:HGroup>

	<s:HGroup id="btnGrp" top="3" right="3" includeIn="hovered,selected" gap="1">
		<s:Image source="assets/icons/info.png" useHandCursor="true" buttonMode="true" click="showDetails(data.compartments)" visible="{badge.visible}"/>
	</s:HGroup>
	
</s:ItemRenderer>