<?xml version="1.0" encoding="utf-8"?>
<s:GridItemRenderer xmlns:fx="http://ns.adobe.com/mxml/2009"
					xmlns:s="library://ns.adobe.com/flex/spark"
					xmlns:mx="library://ns.adobe.com/flex/mx" clipAndEnableScrolling="true"
					xmlns:components="components.*"
					xmlns:dm="dm.*"
					>
	
	<fx:Script>
		<![CDATA[
			import dm.utils.tools;
			import mx.charts.CategoryAxis;
			import mx.collections.ArrayCollection;
			import spark.events.IndexChangeEvent;
			
			[Bindable] public var basetankCodes:ArrayCollection;      // Tank code repository according to base code
			[Bindable] public var basetankCodes_disp:ArrayCollection; // Tank code for display
			
			public var readOnly:Boolean      = true;
			public var tank_code_disp:String = "";
			
			override public function prepare(hasBeenRecycled:Boolean):void
			{
				// TODO Auto-generated method stub
				//trace(owner);
				if (data)
				{
					///if (DM.ManualTransactions.curr_selected_transfer == -1) return;
					
					// The reference transfer data array could be null, user could delete all transfers by clicking 'Del Transfer' button.
					if (DM.ManualTransactions.curr_trsf_ref != null && DM.ManualTransactions.curr_trsf_ref.length == 0)
						return;
					
					//Ver2.9 When loading from saved MT data, this index is -1. (Related to initMemberValues())
					if (DM.ManualTransactions.curr_selected_transfer < 0)
						return;
					
					var dmMT:Object = DM.ManualTransactions;
					var oTmp:Object = DM.ManualTransactions.curr_trsf_ref.getItemAt(DM.ManualTransactions.curr_selected_transfer);
					trace(" ");
					trace("TankCodeRender ====> prepare");
					trace("Drawer Code ->"+oTmp.curr_trsf_drwr_cd);
					trace("Drawer Prod Code ->"+oTmp.curr_trsf_drwr_prod_cd);
					trace("Arm Code ->"+oTmp.curr_trsf_arm_cd);
					trace("Base Product Code ->"+data.trsf_bs_prodcd);
					basetankCodes = new ArrayCollection();
					for each (var obj:Object in DM.ManualTransactions.tankcodes)
					{
						// Drawer (no need + Drawer Product + Arm) + Base Product ==> Tank
						// Select all the tanks which belong to the (Drawer + Base Prod) as a tank container.
						if (obj.RAT_PROD_PRODCMPY == oTmp.curr_trsf_drwr_cd
						/*&& obj.RAT_PROD_PRODCODE == oTmp.curr_trsf_drwr_prod_cd*/
						/*&& obj.STREAM_ARMCODE    == oTmp.curr_trsf_arm_cd*/
						 && obj.STREAM_BASECODE   == data.trsf_bs_prodcd)
						{
							// Only add the tanks belong to this company+product+arm+baseprod.
							var found:int = 0;
							for each (var o:Object in basetankCodes)
							{
								if (obj.STREAM_TANKCODE == o.STREAM_TANKCODE)
								{
									found = 1;
									break;
								}
							}
							if (!found)
							{
								basetankCodes.addItem(obj);
								trace("TANKCODE ==========> CODE -> "+obj.STREAM_TANKCODE);
							}
						}
					}
					
					trace("TANKCODE ==========> basetankCodes.length -> "+basetankCodes.length);
					trace("data.trsf_bs_prodcd ==========> CODE -> "+data.trsf_bs_prodcd);
					
					// Find tank codes(whick user selected arm linked) in tank code repository.
					basetankCodes_disp = new ArrayCollection();
					for each (var obj:Object in basetankCodes)
					{
						trace("basetankCodes ==========> CODE -> "+obj.STREAM_TANKCODE);
						// Go through every transfer's bases to check the matched tank code.
						// If matched found put it into the array collection for display usage.
						trace("DM.ManualTransactions.transactionDataArr ==========> length -> "+DM.ManualTransactions.transactionDataArr.length);
						for (var trsfIdx:int = 0; trsfIdx < DM.ManualTransactions.transactionDataArr.length; trsfIdx++)
						{
							trace("trsfIdx ==========> "+trsfIdx);
							trace("DM.ManualTransactions.transactionDataArr[trsfIdx].baseprod ==========> length -> "+DM.ManualTransactions.transactionDataArr[trsfIdx].baseprod.length);
							for (var bsIdx:int = 0; bsIdx < DM.ManualTransactions.transactionDataArr[trsfIdx].baseprod.length; bsIdx++)
							{
								trace("bsIdx ==========> "+bsIdx);
								trace("obj.STREAM_TANKCODE == DM.ManualTransactions.transactionDataArr[trsfIdx].baseprod[bsIdx].trsf_bs_tk_cd ? ==========> "+obj.STREAM_TANKCODE + ' == '+DM.ManualTransactions.transactionDataArr[trsfIdx].baseprod[bsIdx].trsf_bs_tk_cd);
								if (obj.STREAM_TANKCODE == DM.ManualTransactions.transactionDataArr[trsfIdx].baseprod[bsIdx].trsf_bs_tk_cd)
								{
									var found:int = 0;
									for each (var o:Object in basetankCodes_disp)
									{
										if (obj.STREAM_TANKCODE == o.STREAM_TANKCODE)
										{
											found = 1;
											break;
										}
									}
									if (!found)
									{
										basetankCodes_disp.addItem(obj);
										trace("TANKCODE_DISP ==========> CODE -> "+obj.STREAM_TANKCODE);
									}
								}
							}
							trace("one transfer done");
							trace("");
						}
						trace("one basetankcode done");
						trace("");
					}
					
					var idx:int = -1;
					if (basetankCodes.length == 1)
					{
						// Below process is dummy, as read only, lable used instead of list box.
						// Only one tank available, so select it.
						listData.selectedIndex = 0;	
						idx = 0;
					}
					else
					{
						// Below process is dummy, as read only, lable used instead of list box.
						// This case is: one base has multipule tanks.
						var tmp:String = String(data[column.dataField]);
						idx = tools.getItemIndexFromCode(tmp, basetankCodes, "STREAM_TANKCODE");
						if (readOnly && idx == -1)
						{
							idx = basetankCodes.length - 1;
						}
						listData.selectedIndex = idx;
					}
					try
					{
						tank_code_disp = "";
						for (var i:int = 0; i < basetankCodes_disp.length; i++)
						{
							tank_code_disp += basetankCodes_disp[i].STREAM_TANKCODE + ((i < basetankCodes_disp.length -1) ? '|' : '');
						}
						// If one base has multipule tanks, just list them all.
						//listLabel.text = basetankCodes[idx].STREAM_TANKCODE;
						listLabel.text = tank_code_disp;
						trace("TANKCODE_DISP ==========> basetankCodes_disp.length -> "+basetankCodes_disp.length);
						trace("LIST ==========> listLabel.text -> "+tmp);
						listLabel.setStyle("color", DM.ManualTransactions.TEXT_COLOR_BLACK);
					}
					catch(e:Error)
					{
						listLabel.text = "Select Prod & Arm";
						listLabel.setStyle("color", DM.ManualTransactions.TEXT_COLOR_RED);
					}
					
					validateTankCode();
				}
			}
			
			protected function droplist_changeHandler(event:IndexChangeEvent):void
			{
				data[column.dataField] = listData.selectedItem.TANK_CODE;
				//var parnt:DataGrid = owner as DataGrid;
				//(parnt.dataProvider as ArrayCollection).refresh();
			}
			
			protected function validateTankCode():void
			{
//				if (listData.selectedIndex != -1)
//				{
//					// If one tank selected, set the tank value.
//					if (basetankCodes.length > 0)
//						data[column.dataField] = basetankCodes.getItemAt(listData.selectedIndex).STREAM_TANKCODE;
//				}
//				else
//				{
//					// If no tank selected, clear the tank value.
//					data[column.dataField] = null;
//				}
				// Ver2.1
				if (tank_code_disp != "")
				{
					// If one tank or more tank code displayed, set the tank code string.
					data[column.dataField] = tank_code_disp;
				}
				else
				{
					// If no tank code displayed, clear the tank value.
					data[column.dataField] = null;
				}
			}
			
		]]>
	</fx:Script>
	
	<fx:Declarations>
		<dm:DM/>
	</fx:Declarations>
	<!--
	dataProvider="{DM.ManualTransactions.tankcodes}"
	selectedItem="{data[column.dataField]}"
	-->
	<s:DropDownList id="listData" top="0" left="0" bottom="0" right="0" includeInLayout="{!readOnly}" visible="{!readOnly}"
					dataProvider="{basetankCodes}"
					change="droplist_changeHandler(event)"
					labelField="STREAM_TANKCODE" prompt="Select Tank Code" useVirtualLayout="false"/>
	
	<s:Label id="listLabel" top="2" left="2" bottom="2" right="2" backgroundColor="#EAEAEA" verticalAlign="middle" includeInLayout="{readOnly}" visible="{readOnly}" backgroundAlpha="1"/>
	
</s:GridItemRenderer>
