<?xml version="1.0" encoding="utf-8"?>
<s:VGroup xmlns:fx="http://ns.adobe.com/mxml/2009" 
		 xmlns:s="library://ns.adobe.com/flex/spark" 
		 xmlns:mx="library://ns.adobe.com/flex/mx"
		 width="600" height="600" currentState="normal" 
		 xmlns:components="components.*" creationComplete="onCreate(event)"
		 xmlns:loadschedulesservice="services.loadschedulesservice.*">
	<s:states>
		<s:State name="normal"/>
		<s:State name="edit"/>
	</s:states>
	<fx:Script>
		<![CDATA[
			
			import dm.utils.tools;
			
			import mx.collections.ArrayCollection;
			import mx.events.CloseEvent;
			import mx.events.CollectionEvent;
			import mx.events.FlexEvent;
			import mx.managers.PopUpManager;
			import mx.rpc.events.FaultEvent;
			import mx.rpc.events.ResultEvent;
			import mx.utils.ArrayUtil;
			import mx.utils.ObjectUtil;
			
			import spark.events.GridItemEditorEvent;
			
			[Bindable] private var _supplier:String;
			[Bindable] private var _orderNumber:String;
			[Bindable] private var _nextSeal:String;
			[Bindable] private var _postfix:String;
			[Bindable] private var _prefix:String;
			[Bindable] private var _compartment:String;
			
			
			
			[Bindable] public var origData:ArrayCollection = new ArrayCollection();
			[Bindable] public var _sealNum:ArrayCollection = new ArrayCollection();
			
			
			[Bindable] public var loadStatus:String = "";
			[Bindable] public var nextSealEditable:Boolean = true;
			[Bindable] public var numOfSealEditable:Boolean = global.siteSealSourceExternal;
			
			public var sealRange:String="";
			protected var showMessage:Boolean=false;
			

			
			public function setParams(supplier:String, orderNumber:String):void{
				
				_supplier = supplier;
				_orderNumber = orderNumber;
				
				refresh();
				
			}
			protected function refresh():void{
				////getSeals.token = ldService.getSeals(_orderNumber, _supplier);
				getNextSeals.token = ldService.getNextSeal();
			}
			
			protected function closeHandler(event:MouseEvent):void{
				//this.sealRange = _nextSeal + '=' + '???';
				PopUpManager.removePopUp(this);
			}
			
			protected function onFault(event:FaultEvent):void{
				trace("SEAL JUST DIED, PLEASE CHECK WHAT IS WRONG<<<");
			}
						
			protected function setSealRange():void
			{
				var minSeal:String="";
				var maxSeal:String="";
				
				for each ( var o:Object in this._sealNum )
				{
					if ( minSeal == "" )
					{
						minSeal = o.seal_nr;
					}
					if ( maxSeal == "" )
					{
						maxSeal = o.seal_nr;
					}
					if ( int(o.seal_nr) < int(minSeal) )
					{
						minSeal = o.seal_nr;
					}
					if ( int(o.seal_nr) > int(maxSeal) )
					{
						maxSeal = o.seal_nr;
					}
				}
				
				if ( minSeal == "" && maxSeal == "")
				{
					this.sealRange = "";
				}
				else
				{
					this.sealRange = minSeal + '=' + String(int(maxSeal));
				}
				
			}
			
			

			
			
			
			protected function cancelEdit(event:MouseEvent):void{
				// TODO Auto-generated method stub
				_sealNum.source = ObjectUtil.copy(origData.source) as Array;
				tools.acCopy( this.origData, this._sealNum );
				_sealNum.refresh();
				currentState = "normal";
			}
			
			protected function saveEdit(event:MouseEvent):void{
				tools.acCopy( this._sealNum, this.origData );
				currentState = "normal";
				
				/* for (var i:int = 0; i < origData.length; i++) {
					for (var j:int = 0; j < _sealNum.length; j++) {
						if(origData.getItemAt(i).seal_nr == _sealNum.getItemAt(j).seal_nr){
							if(origData.getItemAt(i).seal_prefix != _sealNum.getItemAt(j).seal_prefix){
								////updatePrefix.token = ldService.setPrefix(_sealNum.getItemAt(j).seal_nr, _sealNum.getItemAt(j).seal_prefix);
								origData.getItemAt(i).seal_prefix = _sealNum.getItemAt(j).seal_prefix;
							}	
							if(origData.getItemAt(i).seal_suffix != _sealNum.getItemAt(j).seal_suffix){
								////updateSuffix.token = ldService.setSuffix(_sealNum.getItemAt(j).seal_nr, _sealNum.getItemAt(j).seal_suffix);
								origData.getItemAt(i).seal_suffix = _sealNum.getItemAt(j).seal_suffix;
							}
						}
					}
				} */
			}
			protected function gridUpdate(event:CollectionEvent):void{
				for (var i:int = 0; i < origData.length; i++) {
					for (var j:int = 0; j < _sealNum.length; j++) {
						
						if(origData.getItemAt(i).seal_prefix == null) origData.getItemAt(i).seal_prefix = "";
						if(origData.getItemAt(i).seal_suffix == null) origData.getItemAt(i).seal_suffix = "";
						if(_sealNum.getItemAt(i).seal_prefix == null) _sealNum.getItemAt(i).seal_prefix = "";
						if(_sealNum.getItemAt(i).seal_suffix == null) _sealNum.getItemAt(i).seal_suffix = "";
						
						if(origData.getItemAt(i).seal_nr == _sealNum.getItemAt(j).seal_nr){
							if(origData.getItemAt(i).seal_prefix != _sealNum.getItemAt(j).seal_prefix||
							   origData.getItemAt(i).seal_suffix != _sealNum.getItemAt(j).seal_suffix){
								
								
								trace("ORIG_PRE:"+origData.getItemAt(i).seal_prefix, 
									  "EDIT_PRE:"+_sealNum.getItemAt(j).seal_prefix,
									  "ORIG_SUF:"+origData.getItemAt(i).seal_suffix, 
									  "EDIT_SUF:"+_sealNum.getItemAt(j).seal_suffix);
								
								
								currentState = "edit";
								return;
							}
						}
					}
				}
				currentState = "normal";
			}
			
			protected function dgUpdate(event:GridItemEditorEvent):void{
				gridUpdate(null);
			}
			
			protected function dgEditStart(event:GridItemEditorEvent):void{
				//tools.acCopy( this._sealNum, this.origData );
				currentState = "edit";
			}
			

			/* protected function onGetSeals(event:ResultEvent):void{
				sealGrid.selectedIndex = -1;
				
				_sealNum = new ArrayCollection(ObjectUtil.copy((getSeals.lastResult as ArrayCollection).source) as Array);
				_sealNum.addEventListener(CollectionEvent.COLLECTION_CHANGE,gridUpdate);
				origData.source = ObjectUtil.copy(_sealNum.source) as Array;
				origData.refresh();
				gridUpdate(null);
			} */
			
			protected function generateNew(event:MouseEvent):void{
				if ( int(numOfSealInput.text) > 0 ) {
					this.sealRange = this._nextSeal + "=" + String(int(this._nextSeal)+int(numOfSealInput.text)-1);
				}
				else {
					this.sealRange = "";
				}
				
				this.origData.removeAll();
				this._sealNum.removeAll();
				var len:int = int(numOfSealInput.text);
				for (var i:int=0; i<len; i++ )
				{
					var o:Object = new Object();
					o.seal_prefix = "";
					o.seal_suffix = "";
					o.seal_cmpt_nr = i+1;
					o.seal_nr = this._nextSeal;
					this._nextSeal = tools.increaseString(this._nextSeal);
					this._sealNum.addItem(o);
					this.origData.addItem(o);
				}
				
				tools.acCopy( this._sealNum, this.origData );
				this.setSealRange();
				this.showMessage = false;
				setNextSeals.token = ldService.setNextSeal(_nextSeal);
				
				//allocateSeal.token = ldService.allocateSeal(_orderNumber, _supplier, numOfSealEditable?numOfSealInput.text:-1);
			}
			
			/* protected function onAllocateSeal(event:ResultEvent):void{
				if(allocateSeal.lastResult == "OK"){
					refresh();
					global.msgSuccess(resourceManager.getString('default','global.msg.AllocateSealSucceeded'));
				}else{
					//global.msgFail(allocateSeal.lastResult);
					global.msgFail(resourceManager.getString('default','global.msg.AllocateSealFailed'));
				}

			} */
			
			protected function onGetNextSeals(event:ResultEvent):void{
				//trace(ObjectUtil.toString(getNextSeals.lastResult));
				if(getNextSeals.lastResult.length == 1){
					if(getNextSeals.lastResult[0].site_next_seal){
						_nextSeal = getNextSeals.lastResult[0].site_next_seal;
						
					}
				}
			}
			
			protected function refreshNextSealNumber(event:MouseEvent):void{				
				getNextSeals.token = ldService.getNextSeal();
			}
			
			protected function saveNextSealNumber(event:MouseEvent):void{
				this.showMessage = true;
				setNextSeals.token = ldService.setNextSeal(_nextSeal);
			}
			
			protected function onSetNextSeals(event:ResultEvent):void{
				if ( this.showMessage == false ) return;
				if(setNextSeals.lastResult == "OK"){
					refresh();
					global.msgSuccess(resourceManager.getString('default','global.msg.SetNextSealSucceeded'));
				}else{
					//global.msgFail(setNextSeals.lastResult);
					global.msgFail(resourceManager.getString('default','global.msg.SetNextSealFailed'));
				}
			}
			
		
			
			protected function onCreate(event:FlexEvent):void{
				//this.title = resourceManager.getString('default','m_seals');
				addEventListener(CloseEvent.CLOSE,function(e:Event):void{closeHandler(null);});
			}
			
			
			protected function dealocateSelected(event:MouseEvent):void{
				_selcomp = sealGrid.selectedItem.seal_cmpt_nr;
				//this.sealGrid.dataProvider.removeItemAt(this.sealGrid.selectedIndex);
				//deleteSeal.token     = ldService.deleteSeal(sealGrid.selectedItem.seal_nr);
				
				var len:int = this._sealNum.length;
				for (var i:int=0; i<len; i++ )
				{
					var o:Object = this._sealNum.getItemAt(i);
					if ( o.seal_nr == this.sealGrid.selectedItem.seal_nr )
					{
						this._sealNum.removeItemAt(i);
						break;
					}
				}
				tools.acCopy( this._sealNum, this.origData );
				this.setSealRange();
				this.sealGrid.selectedIndex = -1;
				
				this.btn_realloc.enabled=false;
				this.btn_dealloc_one.enabled=false;
			}
			
			private var _selcomp:int = 0;
			protected function reallocateSelectedSeal(event:MouseEvent):void{
				_selcomp = sealGrid.selectedItem.seal_cmpt_nr;
				//reallocateSeal.token = ldService.reallocate(sealGrid.selectedItem.seal_nr, _orderNumber,_supplier, _selcomp);
				
				var len:int = this._sealNum.length;
				for (var i:int=0; i<len; i++ )
				{
					var o:Object = this._sealNum.getItemAt(i);
					if ( o.seal_nr == this.sealGrid.selectedItem.seal_nr )
					{
						o.seal_nr = this._nextSeal
						this._sealNum.removeItemAt(i);
						this._sealNum.addItemAt(o, i);
						//this.sealGrid.selectedIndex = -1;
						//this.sealGrid.invalidateDisplayList();
						this._nextSeal = tools.increaseString(this._nextSeal);
						break;
					}
				}
				
				tools.acCopy( this._sealNum, this.origData );
				this.setSealRange();
				this.showMessage = false;
				setNextSeals.token = ldService.setNextSeal(_nextSeal);
				this.btn_realloc.enabled=false;
				this.btn_dealloc_one.enabled=false;
			}			
			protected function onReallocateSeal(event:ResultEvent):void{
				refresh();
			}
			protected function allocateOnetherSeal(event:MouseEvent):void{
				_selcomp = 1;
				
				var o:Object = new Object();
				o.seal_prefix = "";
				o.seal_suffix = "";
				o.seal_cmpt_nr = this.sealGrid.dataProviderLength+1;
				o.seal_nr = this._nextSeal;
				this._nextSeal = tools.increaseString(this._nextSeal);
				this._sealNum.addItem(o);
				tools.acCopy( this._sealNum, this.origData );
				
				//allocateOneSeal.token = ldService.allocateOne(_orderNumber,_supplier, _selcomp);
				this.setSealRange();
				this.showMessage = false;
				setNextSeals.token = ldService.setNextSeal(_nextSeal);
			}
			protected function onAllocateOneSeal(event:ResultEvent):void{
				refresh();
			}
			
			/* protected function onDelete(event:ResultEvent):void{
				if(deleteSeal.lastResult == "OK"){
					refresh()
					global.msgSuccess(resourceManager.getString('default','global.msg.DeleteSealSucceeded'));
				}else{
					//global.msgFail(deleteSeal.lastResult);
					global.msgFail(resourceManager.getString('default','global.msg.DeleteSealFailed'));
				}
			} */

			
			
			
			
			/* protected function onDeallocate(event:ResultEvent):void{
				if(deallocateAll.lastResult == "OK"){
					refresh();
					global.msgSuccess(resourceManager.getString('default','global.msg.DeallocateAllSealsSucceeded'));
				}else{
					//global.msgFail(deallocateAll.lastResult);
					global.msgFail(resourceManager.getString('default','global.msg.DeallocateAllSealsFailed'));
				}
			} */
			protected function dealocateAll(event:MouseEvent):void{
				this.sealGrid.dataProvider.removeAll();
				this.origData.removeAll();
				this._sealNum.removeAll();
				this.setSealRange();
			}
			
			
			/* protected function onUpdatePrefix(event:ResultEvent):void{
				if(updatePrefix.lastResult == "OK"){
					//global.msgSuccess("Prefix Updated.");
					global.msgSuccess(resourceManager.getString('default','global.msg.UpdateSealPrefixSucceeded'));
				}else{
					//global.msgFail(updatePrefix.lastResult);
					global.msgFail(resourceManager.getString('default','global.msg.UpdateSealPrefixFailed'));
				}
				refresh();
			}
			protected function onUpdateSuffix(event:ResultEvent):void{
				if(updateSuffix.lastResult == "OK"){
					//global.msgSuccess("Suffix Updated.");
					global.msgSuccess(resourceManager.getString('default','global.msg.UpdateSealSuffixSucceeded'));
				}else{
					//global.msgFail(updateSuffix.lastResult);
					global.msgFail(resourceManager.getString('default','global.msg.UpdateSealSuffixFailed'));
				}
				refresh();
			} */
			

		]]>
	</fx:Script>
	
	<fx:Declarations>
		<!-- Place non-visual elements (e.g., services, value objects) here -->
		<s:CallResponder id="getNextSeals" 		result="onGetNextSeals(event)"/>
		<s:CallResponder id="setNextSeals" 		result="onSetNextSeals(event)"/>
		
		<loadschedulesservice:LoadSchedulesService id="ldService" showBusyCursor="true" fault="onFault(event)"  channelSet="{global.channelSet}"/>
		
	</fx:Declarations>
	
	<s:VGroup width="100%" height="100%" paddingBottom="10" paddingLeft="10" paddingRight="10" paddingTop="10" verticalAlign="middle" horizontalAlign="center">
		<s:HGroup width="100%">
			<s:Label text="{resourceManager.getString('default','global.lbl.SealSupplier')}" width="120" fontWeight="bold"/>
			<s:Label text="{_supplier}" />
		</s:HGroup>
		<s:HGroup width="100%" verticalAlign="middle">
			<s:Label text="{resourceManager.getString('default','KYA_CUST_ORDNO')}" width="120" fontWeight="bold"/>
			<s:Label text="{_orderNumber}" />
			<s:Spacer width="100%"/>
		</s:HGroup>
		<mx:HRule width="95%"/>
		
		<s:HGroup width="100%" verticalAlign="middle">
			<s:Label text="{resourceManager.getString('default','global.lbl.SealNext')}" width="120" fontWeight="bold"/>
			<s:Label text="{_nextSeal}" includeInLayout="{!nextSealEditable}" visible="{nextSealEditable}"/>
			<s:TextInput text="@{_nextSeal}" includeInLayout="{nextSealEditable}" visible="{nextSealEditable}"/>
			<components:DKI_Button width="120" noLabel="false" type="save" label="{resourceManager.getString('default','UPDATE')}" click="saveNextSealNumber(event)" includeInLayout="{nextSealEditable}" visible="{nextSealEditable}"/>
		</s:HGroup>
		
		<s:HGroup width="100%" verticalAlign="middle">
			<s:Label text="{resourceManager.getString('default','global.lbl.SealTotal')}" width="120" fontWeight="bold"/>
			<s:Label text="{_sealNum.length}" includeInLayout="{!numOfSealEditable}" visible="{!numOfSealEditable}"/>
			<s:TextInput text="{_sealNum.length}" id="numOfSealInput" maxChars="3" restrict="0-9" includeInLayout="{numOfSealEditable}" visible="{numOfSealEditable}" enabled="{!_sealNum.length &amp;&amp; (loadStatus == 'F'||loadStatus == 'A')}"/>
			<components:DKI_Button width="120" height="100%" noLabel="false" type="create" label="{resourceManager.getString('default','button.lbl.ALLOCATE')}" click="generateNew(event)" includeInLayout="{numOfSealEditable}" visible="{numOfSealEditable}" enabled="{!_sealNum.length &amp;&amp; (loadStatus == 'F'||loadStatus == 'A')}"/>
			<components:DKI_Button width="120" height="100%" noLabel="false" type="create" label="{resourceManager.getString('default','button.lbl.ADD_ONE')}" click="allocateOnetherSeal(event)" includeInLayout="{numOfSealEditable}" visible="{numOfSealEditable}" enabled="{loadStatus == 'F'||loadStatus == 'A'}"/>
		</s:HGroup>
		
		
		<mx:HRule width="95%"/>
		<components:DKI_DataGrid id="sealGrid" width="100%" height="100%" dataProvider="{_sealNum}" 
								 gridItemEditorSessionStart="dgEditStart(event)"
								 gridItemEditorSessionSave="dgUpdate(event)"
								 gridItemEditorSessionCancel="dgUpdate(event)" 
								 editable="{loadStatus == 'F'||loadStatus == 'A'}" >
			<components:columns>
				<s:ArrayList>
					<!--
					<s:GridColumn width="180" dataField="seal_cmpt_nr"  headerText="{resourceManager.getString('default','datagrid.headercaption.SealCompartment')}"></s:GridColumn>
					-->
					<s:GridColumn width="120" editable="true" dataField="seal_prefix"  headerText="{resourceManager.getString('default','datagrid.headercaption.SealPrefix')}">
					</s:GridColumn>
					<s:GridColumn editable="false" dataField="seal_nr"  headerText="{resourceManager.getString('default','datagrid.headercaption.SealNumber')}">
					</s:GridColumn>
					<s:GridColumn width="120" editable="true" dataField="seal_suffix"  headerText="{resourceManager.getString('default','datagrid.headercaption.SealSuffix')}">
					</s:GridColumn>
				</s:ArrayList>
			</components:columns>
		</components:DKI_DataGrid>
		
		<mx:HRule width="95%"
				  visible			= "{loadStatus == 'F'||loadStatus == 'A'}"
				  includeInLayout	= "{loadStatus == 'F'||loadStatus == 'A'}"
				  enabled			= "{loadStatus == 'F'||loadStatus == 'A'}"/>
		
		<s:HGroup width="100%" verticalAlign="middle" horizontalAlign="center" 
				  visible			= "{loadStatus == 'F'||loadStatus == 'A'}"
				  includeInLayout	= "{loadStatus == 'F'||loadStatus == 'A'}"
				  enabled			= "{loadStatus == 'F'||loadStatus == 'A'}">
			<components:DKI_Button width="100" height="100%" noLabel="false" type="refresh" click="refresh()" includeIn="normal"/>
			
			<components:DKI_Button width="120" height="100%" noLabel="false" type="create" includeIn="normal"
								   label="{resourceManager.getString('default','button.lbl.ALLOCATE')}" click="generateNew(event)" includeInLayout="{_sealNum.length==0}" visible="{_sealNum.length==0}"/>
			
			
			<components:DKI_Button width="160" height="100%" noLabel="false" type="edit" includeIn="normal" id="btn_realloc"
								   label="{resourceManager.getString('default','button.lbl.REALLOCATE_SELECTED')}" enabled="{sealGrid.selectedIndex>=0}" click="reallocateSelectedSeal(event)" includeInLayout="{_sealNum.length}" visible="{_sealNum.length}"/>
			
			
			<components:DKI_Button width="160" noLabel="false" type="delete" includeIn="normal" id="btn_dealloc_one"
								   label="{resourceManager.getString('default','button.lbl.DEALLOCATE_SELECTED')}" enabled="{sealGrid.selectedIndex>=0}" click="dealocateSelected(event)" includeInLayout="{_sealNum.length}" visible="{_sealNum.length}"/>
			
			<components:DKI_Button width="120" noLabel="false" type="delete" includeIn="normal"
								   label="{resourceManager.getString('default','button.lbl.DEALLOCATE_ALL')}" click="dealocateAll(event)" includeInLayout="{_sealNum.length}" visible="{_sealNum.length}"/>
			
			
			<s:Spacer width="100%" includeIn="edit"/>
			
			<components:DKI_Button width="120" height="100%" noLabel="false" type="cancel" includeIn="edit"
								   label="Cancel" click="cancelEdit(event)"/>
			
			<components:DKI_Button width="120" noLabel="false" type="save" includeIn="edit"
								   label="Save" click="saveEdit(event)"/>
			
			
			
		</s:HGroup>
		<!--
		<mx:HRule width="95%"/>
		
		<s:HGroup width="100%" verticalAlign="middle">
			<s:Label width="150" text="Next Seal Number:"/>
			<s:TextInput width="50"  text="@{_prefix}"   prompt="Prefix"      maxChars="5"/>
			<s:TextInput width="120" text="@{_nextSeal}" prompt="Next Seal #" maxChars="20"/>
			<s:TextInput width="50"  text="@{_postfix}"  prompt="Postfix"     maxChars="5"/>
			<components:DKI_Button width="30"  height="100%" noLabel="false" type="refresh" click="refreshNextSealNumber(event)"/>
			<components:DKI_Button width="120" height="100%" noLabel="false" type="save"    click="saveNextSealNumber(event)" label="Save"/>
		</s:HGroup>
		
		<mx:HRule width="95%"/>
		
		<s:HGroup width="100%" verticalAlign="middle">
			
			<s:Label width="150" text="Add Seal to Compartment:"/>
			<s:TextInput restrict="0-9" width="232" text="@{_compartment}" prompt="Compartment #"/>
			<components:DKI_Button width="120" height="100%" noLabel="false" type="create" label="Add Seal" click="addSeal(event)"/>
			
		</s:HGroup>
		
		<mx:HRule width="95%"/>
		-->
		
	</s:VGroup>
</s:VGroup>
