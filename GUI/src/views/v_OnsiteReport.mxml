<?xml version="1.0" encoding="utf-8"?>
	<s:Panel xmlns:fx="http://ns.adobe.com/mxml/2009"
			 xmlns:s="library://ns.adobe.com/flex/spark"
			 xmlns:mx="library://ns.adobe.com/flex/mx"
			 xmlns:components="components.*"
			 xmlns:companiesservice="services.companiesservice.*"
			 xmlns:personnelservice="services.personnelservice.*"
			 currentState="normal" creationComplete="creationCompleteHandler(event)"
			 skinClass="skins.WidgetPanelSkin"
			 width="100%" height="100%" skinClass.widget="skins.NullSkin">
		<s:layout>
			<s:VerticalLayout gap="10" paddingTop="5" paddingLeft="5" paddingRight="5" paddingBottom="5"/>
		</s:layout>
	<s:states>
		<s:State name="widget"/>
		<s:State name="normal"/>
		<s:State name="print"/>
	</s:states>
	
	<fx:Script>
		<![CDATA[
			import components.MessageDialog;
			import dm.remoteDataService;
			
			import mx.controls.Alert;
			import mx.events.FlexEvent;
			import mx.printing.*;
			import mx.rpc.events.ResultEvent;
			
			import org.alivepdf.fonts.CoreFont;
			import org.alivepdf.fonts.EmbeddedFont;
			import org.alivepdf.fonts.FontFamily;
			import org.alivepdf.fonts.IFont;
			import org.alivepdf.layout.*;
			import org.alivepdf.pdf.PDF;
			import org.alivepdf.saving.*;
			
			[Bindable] public var readOnly:Boolean = false;
			[Bindable] public var canUpdate:Boolean = false;
			[Bindable] public var canCreate:Boolean = false;
			[Bindable] public var canDelete:Boolean = false;
			[Bindable] public var hasPassword:Boolean = false;
			
			private var f:FileReference = new FileReference();
			
			private var siteName:String = "";
			
			private var createBatchPersonnelAction:remoteDataService = new remoteDataService( "BatchService.createBatchPersonnel", null, createBatchPersonnelAction_resultHandler, 1 );
			private var createBatchEquipmentAction:remoteDataService = new remoteDataService( "BatchService.createBatchEquipment", null, createBatchEquipmentAction_resultHandler, 1 );
			private var createBatchTankerAction:remoteDataService = new remoteDataService( "BatchService.createBatchTanker", null, createBatchTankerAction_resultHandler, 1 );
			
			private var formButtonSettingsMaker:remoteDataService = new remoteDataService( "ScreenFormButtonService.lookupFormButtonSettings", null, formButtonSettingsMaker_resultHandler, 1 );
			private var _formButtonSettingsString:String="";
			
			protected function creationCompleteHandler(event:FlexEvent):void
			{
				// TODO Auto-generated method stub
				this.formButtonSettingsMaker.service( "ONSITE_REPORT" );
			}
			
			protected function formButtonSettingsMaker_resultHandler():void
			{
				this._formButtonSettingsString =  formButtonSettingsMaker.dataString;
				
				if ( _formButtonSettingsString.length > 0 )
				{
					global.adjustFormButtonSettings( _formButtonSettingsString.substr(1), this );
				}
			}
			
			
			protected function button1_clickHandler(event:MouseEvent):void
			{
				//navigateToURL(new URLRequest('Personnel.pdf'),'_self');
				var curDate:String  = dateformat.format(new Date());
				var aRect:Rectangle = new Rectangle(4,2,200,12);
				var bRect:Rectangle = new Rectangle(4,14,200,280);
				var cRect:Rectangle = new Rectangle(90,14,50,280);
				var dRect:Rectangle = new Rectangle(4,2,200,17);
				var pdf:PDF = new PDF(Orientation.PORTRAIT, Unit.MM, Size.A4);
				siteName = getSiteManagerResult.lastResult as String;
				var page:int = 46;
				for (var i:int=0; i < getPersonnelOnSiteResult.lastResult.length;i++)
				{	
					if (page > 45)
					{
						page = 1;
						pdf.addPage();
						pdf.setFont( new CoreFont ( FontFamily.ARIAL ),12,false);
						pdf.drawRect(aRect);
						pdf.drawRect(bRect);
						pdf.drawRect(cRect);
						pdf.addText(siteName,5,6);
						pdf.addText(curDate,165,6);
						pdf.addMultiCell(210,0,'Personnel Onsite Report',0,'C',0);
						//pdf.setFont( new CoreFont ( FontFamily.ARIAL ),8);
						pdf.addText('Name',45,18);
						pdf.addText('Area',110,18);
						pdf.addText('TimeStamp',160,18);
						pdf.drawRect(dRect);
					}
					pdf.setFont( new CoreFont ( FontFamily.ARIAL ),8);
					pdf.addText(getPersonnelOnSiteResult.lastResult[i].per_name, 10, page*6+18);
					pdf.addText(getPersonnelOnSiteResult.lastResult[i].per_area, 100, page*6+18);
					if (getPersonnelOnSiteResult.lastResult[i].per_enter_time != null)
						pdf.addText(getPersonnelOnSiteResult.lastResult[i].per_enter_time, 150, page*6+18);
					page += 1;	
				}	
				var ba:ByteArray = pdf.save(Method.LOCAL);
				f.save(ba,'onsite.pdf');
				f.addEventListener(Event.COMPLETE,fileSaved);
			}

			protected function fileSaved(event:Event):void
			{
				f.removeEventListener(Event.COMPLETE,fileSaved);
			}
			
			protected function dataGrid_creationCompleteHandler(event:FlexEvent):void
			{
				getPersonnelOnSiteResult.token = personnelService.getOnSite(null);
			}
			
			protected function getPersonnelOnSiteResult_resultHandler(event:ResultEvent):void
			{
				getSiteManagerResult.token = personnelService.getSiteManager();
			}
			
			protected function batchPsnl_clickHandler(event:MouseEvent):void
			{
				this.createBatchPersonnelAction.service();
			}
			
			protected function batchEqpt_clickHandler(event:MouseEvent):void
			{
				this.createBatchEquipmentAction.service();
			}
			
			protected function batchTnkr_clickHandler(event:MouseEvent):void
			{
				this.createBatchTankerAction.service();
			}
			
			protected function createBatchPersonnelAction_resultHandler( ):void
			{
				//global.msgSuccess("Add Personnel in Batch - " + this.createBatchPersonnelAction.dataString);
				var errorBox:MessageDialog = new MessageDialog( "Add Personnel in Batch - " + this.createBatchPersonnelAction.dataString );
			}
			
			protected function createBatchEquipmentAction_resultHandler( ):void
			{
				//global.msgSuccess("Add Equipment in Batch - " + this.createBatchEquipmentAction.dataString);
				var errorBox:MessageDialog = new MessageDialog( "Add Equipment in Batch - " + this.createBatchEquipmentAction.dataString );
			}
			
			
			protected function createBatchTankerAction_resultHandler( ):void
			{
				//global.msgSuccess("Add Tanker in Batch - " + this.createBatchTankerAction.dataString);
				var errorBox:MessageDialog = new MessageDialog( "Add Tanker in Batch - " + this.createBatchTankerAction.dataString );
			}
		]]>
	</fx:Script>
	
	<fx:Declarations>
		<s:DateTimeFormatter id="dateformat" dateTimePattern="dd-MMM-yyyy"/>
		<personnelservice:PersonnelService id="personnelService" fault="global.msgFail(event.fault.faultString)" channelSet="{global.channelSet}" showBusyCursor="true"/>
		<s:CallResponder id="getPersonnelOnSiteResult" result="getPersonnelOnSiteResult_resultHandler(event)"/>
		<s:CallResponder id="getSiteManagerResult"/>
	</fx:Declarations>
	<s:HGroup width="100%" paddingBottom="5" paddingTop="5">
		<components:DKI_Button id="button" label="{resourceManager.getString('default','global.lbl.generatereport')}" type="report" click="button1_clickHandler(event)"/>
		<components:DKI_Button id="batchPsnl" label="Add Personnel in Batch" visible="false" includeInLayout="false" enabled="true" type="create" click="batchPsnl_clickHandler(event)"/>
		<components:DKI_Button id="batchEqpt" label="Add Equipment in Batch" visible="false" includeInLayout="false" enabled="true" type="create" click="batchEqpt_clickHandler(event)"/>
		<components:DKI_Button id="batchTnkr" label="Add Tanker in Batch" visible="false" includeInLayout="false" enabled="true" type="create" click="batchTnkr_clickHandler(event)"/>
	</s:HGroup>
	<components:DKI_DataGrid id="dataGrid" width="100%" height="100%"
				creationComplete="dataGrid_creationCompleteHandler(event)" requestedRowCount="4">
		<components:columns>
			<s:ArrayList>
				<s:GridColumn dataField="per_name" headerText="{resourceManager.getString('default','datagrid.headercaption.name')}" width="{width*0.45}"></s:GridColumn>
				<s:GridColumn dataField="per_area" headerText="{resourceManager.getString('default','datagrid.headercaption.area')}" width="{width*0.3}"></s:GridColumn>
				<s:GridColumn dataField="per_enter_time" headerText="{resourceManager.getString('default','datagrid.headercaption.entrytime')}"></s:GridColumn>
			</s:ArrayList>
		</components:columns>
		<s:AsyncListView list="{getPersonnelOnSiteResult.lastResult}"/>
	</components:DKI_DataGrid>
</s:Panel>
