<?xml version="1.0" encoding="utf-8"?>
<s:VGroup xmlns:fx="http://ns.adobe.com/mxml/2009"
		  xmlns:s="library://ns.adobe.com/flex/spark"
		  xmlns:mx="library://ns.adobe.com/flex/mx"
		  xmlns:components="components.*"
		  creationComplete="creationCompleteHandler(event)"
		  gap="2" width="100%" height="100%">
	
	<s:states>
		<s:State name="normal"/>
		<s:State name="widget"/>
		<s:State name="edit" enterState="
				 callLater(function():void{dataGrid.ensureCellIsVisible(dataGrid.selectedIndex);});"/>
		<s:State name="create"/>
		<s:State name="detail" enterState="view_detailsHandler(event)"/>
	</s:states>
	
	<fx:Script>
		<![CDATA[
			import com.adobe.fiber.runtime.lib.DateTimeFunc;
			
			import components.ActionDialog;
			import components.ApproveDialog;
			import components.ConfirmDialog;
			import components.DKI_AlertBox;
			import components.DeleteDialog;
			import components.ExportData;
			import components.MessageDialog;
			import components.TransactionsDlg;
			import components.ViewPopupDlg;
			
			import dm.remoteDataService;
			import dm.remoteListService;
			import dm.utils.tools;
			
			import flash.events.KeyboardEvent;
			import flash.globalization.LocaleID;
			
			import mx.collections.ArrayCollection;
			import mx.controls.Alert;
			import mx.controls.DateField;
			import mx.events.FlexEvent;
			import mx.rpc.events.FaultEvent;
			import mx.rpc.events.ResultEvent;
			import mx.rpc.http.HTTPService;
			import mx.utils.ObjectUtil;
			import mx.utils.StringUtil;
			
			import renderers.DKI_HeaderColumn_Renderer;
			
			import spark.components.ToggleButton;
			import spark.components.VScrollBar;
			import spark.components.gridClasses.IGridItemRenderer;
			import spark.events.GridEvent;
			import spark.events.GridSelectionEvent;
			import spark.events.IndexChangeEvent;
			
			public static const MAIN_WINDOW_WIDTH:int = 1500;
			
			[Bindable] public var readOnly:Boolean = false;
			[Bindable] public var canUpdate:Boolean = false;
			[Bindable] public var canCreate:Boolean = false;
			[Bindable] public var canDelete:Boolean = false;
			[Bindable] public var hasPassword:Boolean = false;
			
			[Bindable] public var labelWidth:uint = 80;
			[Bindable] public var labelHeight:uint = 26;
			[Bindable] public var fieldWidth:uint = 285;
			[Bindable] public var fieldHeight:uint = 26;
			[Bindable] public var spaceWidth:uint = 15;
			[Bindable] public var spaceHeight:uint = 2;
			
			private var idx:int=-1;
			
			private var currentFilter:String=null;
			private var currentOrder:String='oprd_cust_no';
			private var currentDirection:String="ASC";
			
			private var currentOffset:int=0;
			private var currentPageSize:int=1000;
			[Bindable] private var totalLength:int=0;
			[Bindable] private var currentLength:int=0;
			
			private var currentFields:Object=new Object();
			private var currentTypes:Object=new Object();
			private var currentSorts:Object=new Object();
			private var currentOrders:Object=new Object();
			private var currentSortSeq:int=0;
			
			private var confirmDelete:DKI_AlertBox;
			
			
			private var confirmReport:ActionDialog;
			
			//private var exportContents:String="";
			private var f:FileReference = new FileReference();
			
			
			[Bindable] private var pagedRecords:remoteListService;
			
			
			private var deleteAction:remoteDataService = new remoteDataService( "AllocationPeriodService.delete", null, deleteData_resultHandler, 1 );
			private var createAction:remoteDataService = new remoteDataService( "AllocationPeriodService.create", null, createData_resultHandler, 1 );
			private var updateAction:remoteDataService = new remoteDataService( "AllocationPeriodService.update", null, updateData_resultHandler, 1 );
			
			private var allocItemPeriodNumberMaker:remoteDataService = new remoteDataService( "AllocationPeriodService.getNextAllocationPeriodNumber", null, getNextAllocationPeriodNumber_resultHandler, 1 );
			
			[Bindable] private var allocationTypeList:remoteDataService = new remoteDataService( "ListLibraryService.lookupAllocationType", null, lookupAllocType_resultHandler );
			[Bindable] private var allocationLockTypeList:remoteDataService = new remoteDataService( "ListLibraryService.lookupAllocationLockType", null, lookupLockType_resultHandler );
			
			[Bindable] private var supplierList:remoteDataService = new remoteDataService( "ListLibraryService.lookupAllocationSupplierAll", null, lookupSupplier_resultHandler );
			[Bindable] private var companyList:remoteDataService = new remoteDataService( "ListLibraryService.lookupAllocationCompany", null, lookupCompany_resultHandler );
			
			[Bindable] private var productUnitList:remoteDataService = new remoteDataService( "ListLibraryService.lookupProductUnit", null, lookupProductUnit_resultHandler );
			[Bindable] private var productList:remoteDataService = new remoteDataService( "ListLibraryService.lookupProduct", null, lookupProduct_resultHandler );
			
			
			
			public var parentParams:Object = new Object();
			
			public var mainListSelection:int = -1;
			
			public var isPopupWindow:Boolean=false;
			public var currentAllocType:int = -1;

			
			
			protected function creationCompleteHandler(event:FlexEvent):void
			{
				trace ("-------------start creationCompleteHandler");
				pagedRecords = new remoteListService( this.dataGrid, "AllocationPeriodService.getPaged", null, getPageData_resultHandler );
				//resourceManager.localeChain = ['zh_CN'];
				//global.LanguageCode="CHN";
				
				//this.startFiltering();
				//this.startLoadingPages();

				this.supplierList.service( );
				this.companyList.service( -1 );
				
				this.allocationTypeList.service( global.company );
				this.allocationLockTypeList.service( );
				
				this.productUnitList.service( );
				this.productList.service( "-1" );
				
				trace ("------------End creationCompleteHandler");
				
				//trace("this.grid.scroller1111", this.dataGrid.scroller);
				//trace("this.grid.scroller.verticalScrollBar.value", this.dataGrid.scroller.verticalScrollBar.value);
				this.dataGrid.scroller.verticalScrollBar.addEventListener(Event.CHANGE, verticalScrollBarChanged);
				this.dataGrid.addEventListener(KeyboardEvent.KEY_UP, reportKeyUp);
				this.dataGrid.columnHeaderGroup.addEventListener(GridEvent.GRID_CLICK, headerClickListener);
			}
			
			
			
			private function getNextAllocationPeriodNumber_resultHandler( ):void
			{
				if ( currentState != "create" )
				{
					return;
				}
				
				if ( allocItemPeriodNumberMaker.dataString == "ERROR" )
				{
					aiprd_index.text = "";
				}
				else
				{
					aiprd_index.text = allocItemPeriodNumberMaker.dataString;
				}
				
			}
			
			private function lookupProduct_resultHandler( ):void
			{
				/* if ( currentFields.hasOwnProperty( "aiprd_prodcode" ) )
				{
					this.fltr_product.selectedIndex = tools.getItemIndexFromCode( currentFields["aiprd_prodcode"], productList, "prod_code");
				} */
				
				if ( currentFields.hasOwnProperty( "aiprd_prodcode" ) && currentFields.hasOwnProperty( "aiprd_suppcode" ) )
				{
					var prod_desc:String = 	currentFields["aiprd_suppcode"] + ' - ' + currentFields["aiprd_prodcode"];
					this.fltr_product.selectedIndex = tools.getItemIndexFromCode( prod_desc, productList, "prod_keys");
				}
			}
			
			private function lookupAllocType_resultHandler():void
			{
				if ( currentFields.hasOwnProperty( "aiprd_type" ) )
				{
					this.fltr_alloctype.selectedIndex = tools.getItemIndexFromCode( currentFields["aiprd_type"], allocationTypeList, "acheck_type");
				}
			}
			
			private function lookupLockType_resultHandler():void
			{
				if ( currentFields.hasOwnProperty( "aiprd_lock" ) )
				{
					this.fltr_locktype.selectedIndex = tools.getItemIndexFromCode( currentFields["aiprd_lock"], allocationLockTypeList, "alloc_lock_id");
				}
			}
			
			protected function supplier_filterFunc(item:Object):Boolean
			{
				if ( this.currentAllocType == 1 )
				{
					if ( item.cmpy_code == 'BaSePrOd' )
					{
						return true;
					}
					else
					{
						return false;
					}
				}
				else
				{
					if ( item.cmpy_code == 'BaSePrOd' )
					{
						return false;
					}
					else
					{
						return true;
					}
				}
			}
			
			private function lookupSupplier_resultHandler():void
			{
				supplierList.filterFunction = supplier_filterFunc;
				supplierList.refresh();
				
				if ( currentFields.hasOwnProperty( "aiprd_suppcode" ) )
				{
					this.fltr_supplier.selectedIndex = tools.getItemIndexFromCode( currentFields["aiprd_suppcode"], supplierList, "cmpy_code");
				}
			}
			
			private function lookupCompany_resultHandler():void
			{
				if ( currentFields.hasOwnProperty( "aiprd_cmpycode" ) )
				{
					this.fltr_company.selectedIndex = tools.getItemIndexFromCode( currentFields["aiprd_cmpycode"], companyList, "cmpy_code");
				}
			}
			
			
			protected function lookupProductUnit_resultHandler( ):void
			{
				global.prodUnits = this.productUnitList;
			}
			
			
			
			protected function startLoadingPages():void
			{
				killBtn.setStyle("chromeColor","0xff0000");
				this.killBtn.includeInLayout=true;
				this.killBtn.visible = true;
				this.killBtn.enabled = true;
				
				resumeBtn.setStyle("chromeColor","0x00ff00");
				this.resumeBtn.includeInLayout=true;
				this.resumeBtn.visible = true;
				this.resumeBtn.enabled = false;
				
				this.btn_create.enabled = false
				this.btn_export.enabled = false;
				this.dataGrid.enabled = false;
				this.toolbar.enabled = false;
				//this.panel.enabled = false;
				
				currentLength=0;
				currentOffset = 0;
				
				//this.exportContents = this.genData.prepExportHeader( dataGrid );
				
				//currentPage=1;
				pagedRecords.currentPage=1;
				pagedRecords.removeAll();
				pagedRecords.refresh();
				this.pb.values(0, 0);
				//this.pagedRecords.service( currentFields, currentTypes, currentSorts, currentOrders, currentPage, currentPageSize );
				this.pagedRecords.listService( currentFields, currentTypes, currentSorts, currentOrders );
			}
			
			protected function endLoadingPages():void
			{
				this.btn_create.enabled = this.canCreate;
				this.btn_export.enabled = true;
				this.dataGrid.enabled = true;
				this.toolbar.enabled = true;
				//this.panel.enabled = true;
				//this.pb.values(totalCount, totalCount);
				this.pb.values(pagedRecords.totalCount, pagedRecords.totalCount, true);
				
				this.killBtn.includeInLayout=true;
				this.killBtn.visible = true;
				this.killBtn.enabled = false;
				
				this.resumeBtn.includeInLayout=true;
				this.resumeBtn.visible = true;
				//if ( totalLength > totalCount )
				if ( pagedRecords.totalLength > pagedRecords.totalCount )
				{
					this.resumeBtn.enabled = true;
				}
				else
				{
					this.resumeBtn.enabled = false;
				}
			}
			
			protected function exportCsvHandler(event:MouseEvent):void
			{
				this.confirmReport = new ActionDialog( doExport, cancelExport, resourceManager.getString('default','CONFIRM_REPORT_CSV') );
				
				//this.startLoadingPages();
			}
			
			private function getPageData_resultHandler( ):void
			{
				// if not finished
				if(pagedRecords.length < pagedRecords.totalCount)
				{
					pb.values(pagedRecords.length,pagedRecords.totalCount)
				}
				else
				{
					pb.values(pagedRecords.length,pagedRecords.totalCount)
					
					this.endLoadingPages();
					
					this.dataGrid.selectedIndex = this.mainListSelection;
					if ( this.mainListSelection >= 0)
					{
						this.dataGrid_selectionChangeHandler(null);
					}
					this.mainListSelection = -1;
					
				}
			}
			
			
			public function doExport():void
			{
				f.save( pagedRecords.exportContents, "allocperiods.csv" );
				
				this.endLoadingPages();
			}
			
			
			public function cancelExport():void
			{
				this.endLoadingPages();
				
				trace( pagedRecords.exportContents );
			}
			
			
			
			private function verticalScrollBarChanged(event:Event):void
			{
				if ( this.dataGrid.scroller != null)
				{
					var vs:VScrollBar;
					vs = this.dataGrid.scroller.verticalScrollBar;
					//trace("this.grid.scroller.verticalScrollBar.value", vs.value, vs.maximum, vs.minimum, vs.stepSize, vs.pageSize, vs.	snapInterval);
				}
				else
				{
					trace("grid is changed");
				}
			}
			
			private function reportKeyUp(event:KeyboardEvent):void
			{
				if ( this.dataGrid.scroller != null)
				{
					var vs:VScrollBar;
					vs = this.dataGrid.scroller.verticalScrollBar;
					//trace("this.grid.scroller.verticalScrollBar.value", vs.value, vs.maximum, vs.minimum, vs.stepSize, vs.pageSize, vs.	snapInterval);
				}
				else
				{
					trace("grid is changed");
				}
			}
			
			private function headerClickListener(event:GridEvent):void
			{
				if(event.column.dataField!='oprd_items')
				{
					var currentRenderer:IGridItemRenderer;
					var dir:String;
					
					if ( global.sortingBySingleColumn == true )
					{	// sorted by single column only
						for (var i:int=0; i < dataGrid.columns.length; i++)
						{
							currentRenderer = dataGrid.columnHeaderGroup.getHeaderRendererAt(i);
							if ( currentRenderer != null)
							{
								(currentRenderer as DKI_HeaderColumn_Renderer).setImage('');
							}
							//(currentRenderer as DKI_HeaderColumn_Renderer).setImage(''); 
						}
					}
					else
					{	// sorted by multiple columns
						;
					}
					currentRenderer = dataGrid.columnHeaderGroup.getHeaderRendererAt(event.columnIndex);
					
					if( currentSorts.hasOwnProperty(event.column.dataField ) )
					{
						dir = currentSorts[event.column.dataField];
						if( dir=="ASC" )
						{
							dir = "DESC";
						}
						else if ( dir == "DESC" )
						{
							dir = "";
						}
						else if ( dir == "" )
						{
							dir = "ASC";
						}
						else 
						{
							dir = "ASC";
						}
						
						if ( dir != "" )
						{
							currentSorts[event.column.dataField] = dir;	
						}
						else
						{
							delete currentSorts[event.column.dataField];
							delete currentOrders[event.column.dataField];
						}
					}
					else
					{
						if ( global.sortingBySingleColumn == true )
						{	// sorted by single column only
							currentSorts = new Object();
							currentOrders = new Object();
							currentSortSeq = 0;
						}
						else
						{	// sorted by multiple columns
							;
						}
						currentSorts[event.column.dataField] = "ASC";	
						dir = currentSorts[event.column.dataField];
						currentSortSeq += 1;
						currentOrders[event.column.dataField] = currentSortSeq;	
					}
					(currentRenderer as DKI_HeaderColumn_Renderer).setImage(dir);
					this.startFiltering();
				}
			}
			
			
			protected function dataGrid_selectionChangeHandler(event:GridSelectionEvent):void
			{
				if(currentState != 'widget')
				{
					idx=dataGrid.selectedIndex;
					dataGrid.ensureCellIsVisible(idx);
					
					currentState = "edit";					
					this.btn_save.enabled = this.canUpdate;
					
				}
			}
			
			protected function cancel_clickHandler():void
			{
				clearDetail();
				if ( currentState== "create" )
				{
					dataGrid.enabled=true;
				}
				currentState="normal";
				dataGrid.selectedIndex = -1;
			}			
			
			protected function fltr_supplier_changeHandler(event:IndexChangeEvent):void
			{
				var supplier:String;
				
				trace( "fltr_supplier_changeHandler", this.fltr_supplier.selectedIndex );
				
				if ( this.fltr_supplier.selectedIndex < 0 )
				{
					supplier = "-1";
				}
				else
				{
					supplier = supplierList[fltr_supplier.selectedIndex].cmpy_code;
				}
				
				trace( "fltr_supplier_changeHandler", supplier, this.fltr_supplier.selectedIndex );
				
				productList.service( supplier );
				
				//if (currentState == "edit") clearDetail();
				//startFiltering();
			}
			
			protected function fltr_product_changeHandler(event:IndexChangeEvent):void
			{
				//if (currentState == "edit") clearDetail();
				//startFiltering();
			}
			
			protected function fltr_company_changeHandler(event:IndexChangeEvent):void
			{
				//if (currentState == "edit") clearDetail();
				//startFiltering();
			}
			
			protected function fltr_alloctype_changeHandler(event:IndexChangeEvent):void
			{
				if ( this.fltr_alloctype.selectedIndex < 0 )
				{
					this.currentAllocType = -1;
				}
				else
				{
					this.currentAllocType = fltr_alloctype.selectedItem.acheck_type;
				}
				supplierList.filterFunction = supplier_filterFunc;
				supplierList.refresh();
				//if (currentState == "edit") clearDetail();
				//startFiltering();
			}
			
			protected function fltr_locktype_changeHandler(event:IndexChangeEvent):void
			{
				//if (currentState == "edit") clearDetail();
				//startFiltering();
			}
			
			private function startFiltering():void
			{
				var supplierFilter:String = '';  
				var companyFilter:String = '';  
				var productFilter:String = '';
				var allocTypeFilter:String = '';
				var lockTypeFilter:String = '';
				var fields:Object;
				var types:Object;
				
				//interruptor=false;
				pagedRecords.interruptor=false;
				
				fields = new Object();
				types = new Object();
				
				if (fltr_supplier.selectedIndex > -1) 
				{
					supplierFilter = "aiprd_suppcode='"+supplierList[fltr_supplier.selectedIndex].cmpy_code+"' ";
					fields["aiprd_suppcode"] = supplierList[fltr_supplier.selectedIndex].cmpy_code;
					if ( fields["aiprd_suppcode"] == "ANY" )
					{
						supplierFilter = '';
						fields["aiprd_suppcode"] = "";
					}
				}
				else
				{
					if ( global.setComboBoxNoSelection == true )
					{
						fltr_supplier.selectedIndex = -1;
					}
					supplierFilter = '';
					fields["aiprd_suppcode"] = "";
				}
				types["aiprd_suppcode"] = "EXACT_STRING";
				
				if (fltr_company.selectedIndex > -1) 
				{
					companyFilter = "aiprd_cmpycode='"+companyList[fltr_company.selectedIndex].cmpy_code+"' ";
					fields["aiprd_cmpycode"] = companyList[fltr_company.selectedIndex].cmpy_code;
					if ( fields["aiprd_cmpycode"] == "ANY" )
					{
						companyFilter = '';
						fields["aiprd_cmpycode"] = "";
					}
				}
				else
				{
					if ( global.setComboBoxNoSelection == true )
					{
						fltr_company.selectedIndex = -1;
					}
					companyFilter = '';
					fields["aiprd_cmpycode"] = "";
				}
				types["aiprd_cmpycode"] = "EXACT_STRING";
				
				
				if ( this.currentState != "widget" )
				{
					if (fltr_alloctype.selectedIndex > -1) 
					{
						allocTypeFilter = "aiprd_type="+allocationTypeList[fltr_alloctype.selectedIndex].acheck_type+" ";
						fields["aiprd_type"] = allocationTypeList[fltr_alloctype.selectedIndex].acheck_type;
					}
					else
					{
						if ( global.setComboBoxNoSelection == true )
						{
							fltr_alloctype.selectedIndex = -1;
						}
						allocTypeFilter = '';
						fields["aiprd_type"] = "";
					}
					types["aiprd_type"] = "NUMBER";
					
					if (fltr_locktype.selectedIndex > -1) 
					{
						lockTypeFilter = "aiprd_lock="+allocationLockTypeList[fltr_locktype.selectedIndex].alloc_lock_id+" ";
						fields["aiprd_lock"] = allocationLockTypeList[fltr_locktype.selectedIndex].alloc_lock_id;
					}
					else
					{
						if ( global.setComboBoxNoSelection == true )
						{
							fltr_locktype.selectedIndex = -1;
						}
						lockTypeFilter = '';
						fields["aiprd_lock"] = "";
					}
					types["aiprd_lock"] = "NUMBER";
					
					if (fltr_product.selectedIndex > -1) 
					{
						productFilter = "aiprd_prodcode='"+this.productList[fltr_product.selectedIndex].prod_code+"' ";
						fields["aiprd_prodcode"] = this.productList[fltr_product.selectedIndex].prod_code;
						if ( fields["aiprd_prodcode"] == "ANY" )
						{
							productFilter = '';
							fields["aiprd_prodcode"] = "";
						}
					}
					else
					{
						if ( global.setComboBoxNoSelection == true )
						{
							fltr_product.selectedIndex = -1;
						}
						productFilter = '';
						fields["aiprd_prodcode"] = "";
					}
					types["aiprd_prodcode"] = "EXACT_STRING";
					
				}
				
				currentFilter = "WHERE 1=1 ";
				if ( lockTypeFilter.length > 0 )
				{
					currentFilter += "AND " + lockTypeFilter;
				}
				if ( supplierFilter.length > 0 )
				{
					currentFilter += "AND " + supplierFilter;
				}
				if ( companyFilter.length > 0 )
				{
					currentFilter += "AND " + companyFilter;
				}
				if ( allocTypeFilter.length > 0 )
				{
					currentFilter += "AND " + allocTypeFilter;
				}
				if ( productFilter.length > 0 )
				{
					currentFilter += "AND " + productFilter;
				}
				
				currentFields = fields;
				currentTypes = types;
				
				this.startLoadingPages();
				
				trace("this.grid.scroller3333", this.dataGrid.scroller);
				trace("this.grid.scroller.verticalScrollBar.value", this.dataGrid.scroller.verticalScrollBar.value);
			}
			
			protected function resetRecords(event:MouseEvent):void
			{
				this.setFilters( this.parentParams );
				return;
			}
			
			protected function filterRecords(event:MouseEvent):void
			{
				if (currentState == "edit") clearDetail();
				this.startFiltering();
			}
			
			protected function refreshRecords(event:MouseEvent):void
			{
				if ( currentState != "widget" )
				{
					currentState = 'normal';
					dataGrid.enabled=true;
				}
				clearDetail();
				
				fltr_supplier.selectedIndex = -1;
				fltr_company.textInput.text = '';
				fltr_company.selectedIndex = -1;
				if ( currentState != "widget" )
				{
					fltr_product.selectedIndex = -1;
					fltr_alloctype.selectedIndex = -1;
					fltr_locktype.selectedIndex = -1;
				}
				dataGrid.selectedIndex = -1;
				currentFilter = null;
				currentOrder = null;
				currentFields = new Object();
				currentTypes = new Object();
				
				currentSorts = new Object();
				currentOrders = new Object();
				var currentRenderer:IGridItemRenderer;
				for (var i:int=0; i < dataGrid.columns.length; i++)
				{
					currentRenderer = dataGrid.columnHeaderGroup.getHeaderRendererAt(i);
					if ( currentRenderer != null)
					{
						(currentRenderer as DKI_HeaderColumn_Renderer).setImage('');
					}
					//(currentRenderer as DKI_HeaderColumn_Renderer).setImage(''); 
				}
				//getPagedResult.token = custOrdersService.getPaged( currentFields, currentTypes, currentSorts, currentOrders);
				
				this.startLoadingPages();
				trace("this.grid.scroller2222", this.dataGrid.scroller);
				trace("this.grid.scroller.verticalScrollBar.value", this.dataGrid.scroller.verticalScrollBar.value);
			}
			
			protected function clearDetail(): void
			{
				if (currentState != 'widget')
				{
				}
			}			
			
			private function editRecord():void
			{
				
				if ( this.checkDates() > 0 )
				{
					this.btn_save.enabled = this.canUpdate;
					return;
				}
				if ( this.checkFields() > 0 )
				{
					this.btn_save.enabled = this.canUpdate;
					return;
				}
				
				var obj:Object = new Object();
				
				

				if (aiprd_type.selectedIndex>=0)
				{
					obj.aiprd_type = allocationTypeList[aiprd_type.selectedIndex].acheck_type;
				}
				else
				{
					obj.aiprd_type = dataGrid.selectedItem.aiprd_type;
				}
				
				if (aiprd_cmpycode.selectedIndex>=0)
				{
					obj.aiprd_cmpycode = companyList[aiprd_cmpycode.selectedIndex].cmpy_code;
				}
				else
				{
					obj.aiprd_cmpycode = dataGrid.selectedItem.aiprd_cmpycode;
				}
				
				if (aiprd_suppcode.selectedIndex>=0)
				{
					obj.aiprd_suppcode = supplierList[aiprd_suppcode.selectedIndex].cmpy_code;
				}
				else
				{
					obj.aiprd_suppcode = dataGrid.selectedItem.aiprd_suppcode;
				}
				
				obj.aiprd_lock = 4;
				
				if (aiprd_prodcode.selectedIndex>=0)
				{
					obj.aiprd_prodcode = this.productList[aiprd_prodcode.selectedIndex].prod_code;
					//obj.aiprd_suppcode = this.productList[aiprd_prodcode.selectedIndex].prod_cmpy;
				}
				else
				{
					obj.aiprd_prodcode = dataGrid.selectedItem.aiprd_prodcode;
					//obj.aiprd_suppcode = dataGrid.selectedItem.aiprd_suppcode;
				}
				
				obj.aiprd_index = aiprd_index.text;
				
				obj.aiprd_daystart = dateConvert.format(aiprd_daystart.selectedDate);
				obj.aiprd_dayend = dateConvert.format(aiprd_dayend.selectedDate);
				
				if (aiprd_produnit.selectedIndex>=0)
				{
					obj.aiprd_produnit = this.productUnitList[aiprd_produnit.selectedIndex].unit_id;
				}
				else
				{
					obj.aiprd_produnit = dataGrid.selectedItem.aiprd_produnit;
				}
				
				obj.aiprd_qtylimit = aiprd_qtylimit.text;
				obj.aiprd_qtyused = "";
				
				
				updateAction.service( obj );

			}
			
			private function doDelete(): void
			{
				var errors:String="";
				var index:int=0;

				if ( index > 0 )
				{
					var errorBox:MessageDialog = new MessageDialog( errors );
				}
				else
				{
					var canDelete:DeleteDialog = new DeleteDialog(deleteRecord, hasPassword);
				}
			}
			
			private function deleteRecord():void
			{
				var obj:Object = new Object();
				
				
				
				if (aiprd_type.selectedIndex>=0)
				{
					obj.aiprd_type = allocationTypeList[aiprd_type.selectedIndex].acheck_type;
				}
				else
				{
					obj.aiprd_type = dataGrid.selectedItem.aiprd_type;
				}
				
				if (aiprd_cmpycode.selectedIndex>=0)
				{
					obj.aiprd_cmpycode = companyList[aiprd_cmpycode.selectedIndex].cmpy_code;
				}
				else
				{
					obj.aiprd_cmpycode = dataGrid.selectedItem.aiprd_cmpycode;
				}
				
				if (aiprd_suppcode.selectedIndex>=0)
				{
					obj.aiprd_suppcode = supplierList[aiprd_suppcode.selectedIndex].cmpy_code;
				}
				else
				{
					obj.aiprd_suppcode = dataGrid.selectedItem.aiprd_suppcode;
				}
				
				obj.aiprd_lock = 4;
				
				if (aiprd_prodcode.selectedIndex>=0)
				{
					obj.aiprd_prodcode = this.productList[aiprd_prodcode.selectedIndex].prod_code;
					//obj.aiprd_suppcode = this.productList[aiprd_prodcode.selectedIndex].prod_cmpy;
				}
				else
				{
					obj.aiprd_prodcode = dataGrid.selectedItem.aiprd_prodcode;
					//obj.aiprd_suppcode = dataGrid.selectedItem.aiprd_suppcode;
				}
				
				obj.aiprd_index = aiprd_index.text;
				
				obj.aiprd_daystart = dateConvert.format(aiprd_daystart.selectedDate);
				obj.aiprd_dayend = dateConvert.format(aiprd_dayend.selectedDate);
				
				if (aiprd_produnit.selectedIndex>=0)
				{
					obj.aiprd_produnit = this.productUnitList[aiprd_produnit.selectedIndex].unit_id;
					obj.aiprd_unitname = this.productUnitList[aiprd_produnit.selectedIndex].unit_name;
				}
				else
				{
					obj.aiprd_produnit = dataGrid.selectedItem.aiprd_produnit;
					obj.aiprd_unitname = dataGrid.selectedItem.aiprd_unitname;
				}
				
				obj.aiprd_qtylimit = aiprd_qtylimit.text;
				
				deleteAction.service( obj );

			}
			
			
			private function checkDates():int
			{
				var errors:String="";
				var index:int=0;
				
				if ( (this.aiprd_daystart.selectedDate != null)
					&& (this.aiprd_dayend.selectedDate != null) 
					&& (this.aiprd_daystart.selectedDate > this.aiprd_dayend.selectedDate )
				)
				{
					index += 1;
					errors += String(index) + ". " + resourceManager.getString('default','ALERT__ALLOCATION_PERIOD_START_GT_END') + "\n";
				}
				
				
				for each( var o:Object in this.pagedRecords )
				{
					if ( o["aiprd_index"] == this.aiprd_index.text )
					{
						continue;
					}
					if ( this.convertDateToLocale( o["aiprd_daystart"]) <= this.aiprd_daystart.selectedDate && this.convertDateToLocale( o["aiprd_dayend"]) >= this.aiprd_daystart.selectedDate )
					{
						index += 1;
						errors += String(index) + ". " + resourceManager.getString('default','ALERT__ALLOCATION_PERIOD_START_OVERLAP') + o["aiprd_index"] + ".\n";
					}
					if ( this.convertDateToLocale( o["aiprd_daystart"]) <= this.aiprd_dayend.selectedDate && this.convertDateToLocale( o["aiprd_dayend"]) >= this.aiprd_dayend.selectedDate )
					{
						index += 1;
						errors += String(index) + ". " + resourceManager.getString('default','ALERT__ALLOCATION_PERIOD_END_OVERLAP') + o["aiprd_index"] + ".\n";
					}
				}
				
				
				if ( index > 0 )
				{
					var errorBox:MessageDialog = new MessageDialog( errors );
				}
				
				return index;
			}
			
			
			private function checkFields():int
			{
				var errors:String="";
				var index:int=0;
				
				if ( aiprd_prodcode.selectedIndex == -1 )//< 0 )
				{
					index += 1;
					errors += String(index) + ". " + resourceManager.getString('default','PLEASE')+resourceManager.getString('default','SELECT')+resourceManager.getString('default','AIPRD_PRODNAME') + "\n";
				}
				if ( aiprd_produnit.selectedIndex == -1 )//< 0 )
				{
					index += 1;
					errors += String(index) + ". " + resourceManager.getString('default','PLEASE')+resourceManager.getString('default','SELECT')+resourceManager.getString('default','AIPRD_UNITNAME') + "\n";
				}
				if ( StringUtil.trim(aiprd_index.text).length == 0 )
				{
					index += 1;
					errors += String(index) + ". " + resourceManager.getString('default','PLEASE')+resourceManager.getString('default','ENTER')+resourceManager.getString('default','AIPRD_INDEX') + "\n";
				}
				//if ( StringUtil.trim(aiprd_daystart.currentDate).length == 0 )
				if ( StringUtil.trim(dateConvertLong.format(aiprd_daystart.selectedDate)).length == 0 )
				{
					index += 1;
					errors += String(index) + ". " + resourceManager.getString('default','PLEASE')+resourceManager.getString('default','ENTER')+resourceManager.getString('default','AIPRD_DAYSTART') + "\n";
				}
				//if ( StringUtil.trim(aiprd_dayend.currentDate).length == 0 )
				if ( StringUtil.trim(dateConvertLong.format(aiprd_dayend.selectedDate)).length == 0 )
				{
					index += 1;
					errors += String(index) + ". " + resourceManager.getString('default','PLEASE')+resourceManager.getString('default','ENTER')+resourceManager.getString('default','AIPRD_DAYEND') + "\n";
				}
				if ( StringUtil.trim(aiprd_qtylimit.text).length == 0 )
				{
					index += 1;
					errors += String(index) + ". " + resourceManager.getString('default','PLEASE')+resourceManager.getString('default','ENTER')+resourceManager.getString('default','AIPRD_QTYLIMIT') + "\n";
				}
				
				if ( index > 0 )
				{
					var errorBox:MessageDialog = new MessageDialog( errors );
				}
				
				return index;
			}
			
			private function createRecord():void
			{
				
				if ( this.checkDates() > 0 )
				{
					this.btn_save.enabled = this.canCreate;
					return;
				}
				if ( this.checkFields() > 0 )
				{
					this.btn_save.enabled = this.canCreate;
					return;
				}
				
				var obj:Object = new Object();
				

				
				if (aiprd_type.selectedIndex>=0)
				{
					obj.aiprd_type = allocationTypeList[aiprd_type.selectedIndex].acheck_type;
				}
				else
				{
					if ( this.fltr_alloctype.selectedIndex>=0)
					{
						obj.aiprd_type = allocationTypeList[fltr_alloctype.selectedIndex].acheck_type;
					}
					else
					{
						obj.aiprd_type = this.allocationTypeList[0].acheck_type;
						
					}
				}
				
				if (aiprd_cmpycode.selectedIndex>=0)
				{
					obj.aiprd_cmpycode = companyList[aiprd_cmpycode.selectedIndex].cmpy_code;
				}
				else
				{
					if ( this.fltr_company.selectedIndex>=0)
					{
						obj.aiprd_cmpycode = companyList[fltr_company.selectedIndex].cmpy_code;
					}
					else
					{
						obj.aiprd_cmpycode = this.companyList[0].cmpy_code;
						
					}
				}
				
				if (aiprd_suppcode.selectedIndex>=0)
				{
					obj.aiprd_suppcode = supplierList[aiprd_suppcode.selectedIndex].cmpy_code;
				}
				else
				{
					if ( this.fltr_supplier.selectedIndex>=0)
					{
						obj.aiprd_suppcode = supplierList[fltr_supplier.selectedIndex].cmpy_code;
					}
					else
					{
						obj.aiprd_suppcode = this.supplierList[0].cmpy_code;
					}
				}
				
				obj.aiprd_lock = 4;
				
				if (aiprd_prodcode.selectedIndex>=0)
				{
					obj.aiprd_prodcode = this.productList[aiprd_prodcode.selectedIndex].prod_code;
					//obj.aiprd_suppcode = this.productList[aiprd_prodcode.selectedIndex].prod_cmpy;
				}
				else
				{
					if (this.fltr_product.selectedIndex>=0)
					{
						obj.aiprd_prodcode = this.productList[fltr_product.selectedIndex].prod_code;
						//obj.aiprd_suppcode = this.productList[fltr_product.selectedIndex].prod_cmpy;
					}
					else
					{
						obj.aiprd_prodcode = this.productList[0].prod_code;
						//obj.aiprd_suppcode = this.productList[0].prod_cmpy;
					}
				}
				
				obj.aiprd_index = aiprd_index.text;
				
				obj.aiprd_daystart = dateConvert.format(aiprd_daystart.selectedDate);
				obj.aiprd_dayend = dateConvert.format(aiprd_dayend.selectedDate);
				
				if (aiprd_produnit.selectedIndex>=0)
				{
					obj.aiprd_produnit = this.productUnitList[aiprd_produnit.selectedIndex].unit_id;
				}
				else
				{
					if ( this.fltr_produnit.text.length > 0)
					{
						obj.aiprd_produnit = int(this.fltr_produnit.text);
					}
					else
					{
						obj.aiprd_produnit = this.productUnitList[0].unit_id;
					}
				}
				
				obj.aiprd_qtylimit = aiprd_qtylimit.text;
				obj.aiprd_qtyused = "";

				
				createAction.service( obj );

			}
			
			
			protected function createNewRecord(event:MouseEvent):void
			{	
				if ( this.fltr_locktype.selectedIndex<0 || (this.fltr_locktype.selectedItem!=null && this.fltr_locktype.selectedItem.alloc_lock_id!=4) )
				{
					global.msgWarning( resourceManager.getString('default','ALERT__ALLOCATION_PERIOD_LOCK_NOT_PERIOD') );
					return
				}
				
				if ( this.fltr_alloctype.selectedIndex>=0 && this.fltr_company.selectedIndex>=0 && this.fltr_product.selectedIndex>=0 && this.fltr_supplier.selectedIndex>=0 )
				{
					allocItemPeriodNumberMaker.service( this.fltr_alloctype.selectedItem.acheck_type, this.fltr_company.selectedItem.cmpy_code, this.fltr_supplier.selectedItem.cmpy_code, this.fltr_product.selectedItem.prod_code );
				}
				else
				{
					var warnMsg:String = "";
					
					if ( this.fltr_alloctype.selectedIndex<0 )
					{
						warnMsg += resourceManager.getString('default','AIPRD_TYPENAME') + ", ";
					}
					if ( this.fltr_company.selectedIndex<0 )
					{
						warnMsg += resourceManager.getString('default','AIPRD_CMPYNAME') + ", ";
					}
					if ( this.fltr_product.selectedIndex<0 )
					{
						warnMsg += resourceManager.getString('default','AIPRD_PRODNAME') + ", ";
					}
					if ( this.fltr_supplier.selectedIndex<0 )
					{
						warnMsg += resourceManager.getString('default','AIPRD_SUPPNAME') + ", ";
					}
					
					if ( warnMsg.length > 0 )
					{
						global.msgWarning( resourceManager.getString('default','ALERT__ALLOCATION_PERIOD_SET_FILTERS_FIRST') + warnMsg.substring(0, warnMsg.length-2)  );
					}
					else
					{
						global.msgWarning( resourceManager.getString('default','ALERT__ALLOCATION_PERIOD_SET_PRODUCT_FIRST') );
					}
					
					return;
				}
					
				idx=dataGrid.selectedIndex;
				dataGrid.ensureCellIsVisible(idx);
				currentState="create";
				this.btn_save.enabled = this.canCreate;
				dataGrid.enabled=false;
				
				trace("this.aiprd_produnit.selectedItem = this.fltr_locktype.text;  in createNewRecord", ">>>>"+this.fltr_produnit.text+"<<<<");
				
				this.aiprd_produnit.selectedIndex = tools.getItemIndexFromCode( this.fltr_produnit.text, productUnitList, "unit_id");
				
				this.aiprd_daystart.selectedDate = this.getDefaultDateByChoice( 'y', 1 );
				this.aiprd_dayend.selectedDate = this.getDefaultDateByChoice( 'y', 10 );
			}
			
			
			public function getArrayCollection(obj:Object):ArrayCollection
			{
				var temp:ArrayCollection = new ArrayCollection;
				temp.addItem( obj );
				return temp;
			}
			
			public function convertDateToLocaleString(dt:String):String
			{
				var dt_string:String;
				var dt_date:Date = new Date();
				
				dt_string = ""; 
				if ((dt!=null) && (dt!='null') && (dt!=''))
				{
					dt_date = DateField.stringToDate(dt,"YYYY-MM-DD");
					dt_string = dateFormatter.format( dt_date);
				}
				//trace ("convertDateToLocale", dt, dt_date, dt_string);
				return dt_string;
			}
			
			public function convertDateToLocale(dt:String):Date
			{
				var dt_date:Date = new Date();
				
				if ((dt!=null) && (dt!='null') && (dt!=''))
				{
					dt_date = DateField.stringToDate(dt,"YYYY-MM-DD");
				}
				//trace ("convertDateToLocale", dt, dt_date, dt_string);
				return dt_date;
			}
			
			public function convertDateToLocaleLong(dt:String):Date
			{
				var dt_date:Date = new Date();
				
				if ((dt!=null) && (dt!='null') && (dt!=''))
				{
					//dt_date = DateField.stringToDate(dt,"YYYY-MM-DD HH:NN:SS");
					dt_date = DateTimeFunc.createDate(
						int(dt.substr(0, 4))
						, int(dt.substr(5, 2))
						, int(dt.substr(8, 2))
						, int(dt.substr(11, 2))
						, int(dt.substr(14, 2))
						, int(dt.substr(17, 2))
						);
				}
				//trace ("convertDateToLocale", dt, dt_date, dt_string);
				return dt_date;
			}
			
			public function getDefaultDate():Date
			{
				var now_date:Date;
				var def_date:Date;
				
				now_date = new Date();
				def_date = DateTimeFunc.dateAdd( "yyyy", 1, now_date );

				//trace ("getDefaultDate", now_date, def_date);
				
				return def_date;
			}
			
			/*
			Adds units of time to a date. Units are:
			
			yyyy: Year
			q: Quarter
			m: Month
			y: Day of year
			d: Day
			w: Weekday
			ww: Week
			h: Hour
			n: Minute
			s: Second
			l: Millisecond
			*/
			public function getDefaultDateByChoice(part:String, units:int):Date
			{
				var now_date:Date;
				var def_date:Date;
				
				now_date = new Date();
				def_date = DateTimeFunc.dateAdd( part, units, now_date );
				
				//trace ("getDefaultDate", now_date, def_date);
				
				return def_date;
			}
			
			protected function view_detailsHandler(event:FlexEvent):void
			{
			}
			
			protected function unitLabelFunction(item:Object, column:GridColumn):String
			{
				var ret:String = 'l(amb)';
				for each(var obj:Object in this.productUnitList)
				{
					if(obj.unit_id == item [column.dataField]) ret=obj.unit_name;
				}
				return ret;
			}
			
			protected function dateLabelFunction(item:Object, column:GridColumn):String
			{
				var ret:String = "";
				
				ret = item [column.dataField];
				return ret;
			}
			
			protected function save_clickHandler():void
			{
				this.btn_save.enabled = false;
				if (currentState == "create")
				{
					createRecord();
				}
				if (currentState == "edit")
				{
					editRecord();
				}
				if (currentState == "detail")
				{
					editRecord();
				}
			}
			
			public function setFilters( params:*=false ): void
			{
				if ( params == false )
				{
					return;
				}
				
				this.parentParams = params;
				
				currentState = "normal";
				
				trace ("...............................in setFilters");
				tools.pr( params);
				
				var po:Object=new Object();
				
				po["aiprd_alloctype"] = tools.getObjAttribute( params, "aiprd_alloctype", "" );
				po["aiprd_cmpycode"] = tools.getObjAttribute( params, "aiprd_cmpycode", "" );
				po["aiprd_suppcode"] = tools.getObjAttribute( params, "aiprd_suppcode", "" );
				po["aiprd_prodcode"] = tools.getObjAttribute( params, "aiprd_prodcode", "" );
				po["aiprd_prodname"] = tools.getObjAttribute( params, "aiprd_prodname", "" );
				po["aiprd_qtylimit"] = tools.getObjAttribute( params, "aiprd_qtylimit", "" );
				po["aiprd_produnit"] = tools.getObjAttribute( params, "aiprd_produnit", "" );
				po["aiprd_locktype"] = tools.getObjAttribute( params, "aiprd_locktype", "" );

				this.currentAllocType = int(po["aiprd_alloctype"]);
				supplierList.filterFunction = supplier_filterFunc;
				supplierList.refresh();
				
				var fields:Object;
				var types:Object;
				
				//interruptor=false;
				pagedRecords.interruptor=false;
				
				fields = new Object();
				types = new Object();
				
				fields["aiprd_type"] = po["aiprd_alloctype"];
				types["aiprd_type"] = "NUMBER";
				fields["aiprd_cmpycode"] = po["aiprd_cmpycode"];
				types["aiprd_cmpycode"] = "EXACT_STRING";
				fields["aiprd_suppcode"] = po["aiprd_suppcode"];
				types["aiprd_suppcode"] = "EXACT_STRING";
				fields["aiprd_prodcode"] = po["aiprd_prodcode"];
				types["aiprd_prodcode"] = "EXACT_STRING";
				fields["aiprd_lock"] = po["aiprd_locktype"];
				types["aiprd_lock"] = "NUMBER";
				
				currentFields = fields;
				currentTypes = types;
				this.startLoadingPages();
				
				if ( po.hasOwnProperty( "aiprd_alloctype" ) )
				{
					this.fltr_alloctype.selectedIndex = tools.getItemIndexFromCode( po["aiprd_alloctype"], allocationTypeList, "acheck_type");
				}
				
				if ( po.hasOwnProperty( "aiprd_cmpycode" ) )
				{
					this.fltr_company.selectedIndex = tools.getItemIndexFromCode( po["aiprd_cmpycode"], companyList, "cmpy_code");
				}
				
				if ( po.hasOwnProperty( "aiprd_suppcode" ) )
				{
					if ( int(po["aiprd_alloctype"]) == 1 )
					{
						this.fltr_supplier.selectedIndex = 0;
					}
					else
					{
						this.fltr_supplier.selectedIndex = tools.getItemIndexFromCode( po["aiprd_suppcode"], supplierList, "cmpy_code");
					}
				}
				
				if ( po.hasOwnProperty( "aiprd_prodcode" ) && po.hasOwnProperty( "aiprd_suppcode" ) )
				{
					this.fltr_product.selectedIndex = tools.getItemIndexFromCode( po["aiprd_suppcode"]+" - "+po["aiprd_prodcode"], productList, "prod_keys");
				}
				
				if ( po.hasOwnProperty( "aiprd_locktype" ) )
				{
					this.fltr_locktype.selectedIndex = tools.getItemIndexFromCode( po["aiprd_locktype"], allocationLockTypeList, "alloc_lock_id");
				}
				
				this.fltr_produnit.text = po["aiprd_produnit"];
				
				
				pb.values(pagedRecords.length,pagedRecords.length)
			}
			
			
			protected function createData_resultHandler( ):void
			{
				clearDetail();
				if ( this.createAction.dataString == "OK" )
				{
					global.msgSuccess(resourceManager.getString('default','MSG_CREATE__SUCCESS'));
				}
				else
				{
					global.msgFail(resourceManager.getString('default','ERROR_CREATE__FAILURE'));
				}
				
				
				currentState="normal";
				
				this.startFiltering();
				dataGrid.selectedIndex = -1;
				dataGrid.enabled=true;
			}
			
			
			protected function updateData_resultHandler( ):void
			{
				clearDetail();
				if ( this.updateAction.dataString == "OK" )
				{
					global.msgSuccess(resourceManager.getString('default','MSG_UPDATE__SUCCESS'));
				}
				else
				{
					global.msgFail(resourceManager.getString('default','ERROR_UPDATE__FAILURE'));
				}
				
				currentState="normal";
				
				this.startFiltering();
				dataGrid.selectedIndex = -1;
				dataGrid.enabled=true;
			}
			
			
			protected function deleteData_resultHandler( ):void
			{
				clearDetail();
				if ( this.deleteAction.dataString == "OK" )
				{
					global.msgSuccess(resourceManager.getString('default','MSG_DELETE__SUCCESS'));
				}
				else
				{
					global.msgFail(resourceManager.getString('default','ERROR_DELETE__FAILURE'));
				}
				
				currentState="normal";
				this.startFiltering();
				dataGrid.selectedIndex = -1;
			}
			
			protected function killBtn_clickHandler(event:MouseEvent):void
			{
				//interruptor=true;
				pagedRecords.interruptor=true;
				trace("WTF >>>>>>>>>>");
			}
			
			protected function resumeBtn_clickHandler(event:MouseEvent):void
			{
				//interruptor=false;
				pagedRecords.interruptor=false;
				
				this.resumeLoadingPages();
				trace("RESUME >>>>>>>>>>");
			}
			
			protected function resumeLoadingPages():void
			{
				killBtn.setStyle("chromeColor","0xff0000");
				this.killBtn.includeInLayout=true;
				this.killBtn.visible = true;
				this.killBtn.enabled = true;
				
				resumeBtn.setStyle("chromeColor","0x00ff00");
				this.resumeBtn.includeInLayout=true;
				this.resumeBtn.visible = true;
				this.resumeBtn.enabled = false;
				
				this.btn_create.enabled = false
				this.btn_export.enabled = false;
				this.dataGrid.enabled = false;
				this.toolbar.enabled = false;
				
				//pb.values(pagedRecords.length,totalLength);
				pb.values(pagedRecords.length,pagedRecords.totalLength);
				//currentPage = int(this.pagedRecords.length/currentPageSize) + 1;
				//this.pagedRecords.service( currentFields, currentTypes, currentSorts, currentOrders, currentPage, currentPageSize );
				this.pagedRecords.listService( currentFields, currentTypes, currentSorts, currentOrders );
			}
			
			
		]]>
	</fx:Script>
	<fx:Declarations>
		<s:DateTimeFormatter id="dateFormatter" locale="{LocaleID.DEFAULT}" dateStyle="short" timeStyle="none"/>
		<s:DateTimeFormatter id="dateConvert" dateTimePattern="yyyy-MM-dd"/>
		<s:DateTimeFormatter id="dateConvertLong" dateTimePattern="yyyy-MM-dd HH:mm:ss"/>
		<components:ValidationGroup id="vg" action="{save_clickHandler}" defaultButton="{btn_save}" isProtected="{hasPassword}"/>
	</fx:Declarations>
	<s:Panel id="panel" width="100%" height="100%"
			 skinClass="skins.WidgetPanelSkin"
			 skinClass.widget="skins.NullSkin">
		<s:layout>
			<s:VerticalLayout/>
		</s:layout>
		
		<s:HGroup id="toolbar" width="100%" gap="5" paddingBottom="2" paddingTop="2">
			<components:DKI_DropDownList id="fltr_alloctype" width="130" height="100%"
										 change="fltr_alloctype_changeHandler(event)" cornerRadius="10"
										 labelField="acheck_name" prompt="{resourceManager.getString('default','ALLOC_TYPENAME')+resourceManager.getString('default','FILTER')}"
										 visible.widget="false" excludeFrom="widget" dataProvider="{allocationTypeList}"/>
			<components:DKI_ComboBox id="fltr_company" width="180" height="100%" enabled="{fltr_alloctype.selectedIndex > -1}"
									change="fltr_company_changeHandler(event)" cornerRadius="10"
									labelField="cmpy_name" prompt="{resourceManager.getString('default','ALLOC_CMPYNAME')+resourceManager.getString('default','FILTER')}"
									dataProvider="{companyList}"/>
			<components:DKI_DropDownList id="fltr_supplier" width="180" height="100%"
										 change="fltr_supplier_changeHandler(event)" cornerRadius="10"
										 labelField="cmpy_name" prompt="{resourceManager.getString('default','ALLOC_SUPPNAME')+resourceManager.getString('default','FILTER')}"
										 dataProvider="{supplierList}"/>
			<components:DKI_ComboBox id="fltr_product" width="170" height="100%" enabled="{fltr_supplier.selectedIndex > -1}"
									change="fltr_product_changeHandler(event)" 
									excludeFrom="widget" cornerRadius="10"
									labelField="prod_name" prompt="{resourceManager.getString('default','AIPRD_PRODNAME')+resourceManager.getString('default','FILTER')}"
									width.edit="182" width.widget="160" dataProvider="{this.productList}"/>
			
			<components:DKI_DropDownList id="fltr_locktype" width="130" height="100%" enabled="false"
										 change="fltr_locktype_changeHandler(event)" cornerRadius="10"
										 labelField="alloc_lock_name" prompt="{resourceManager.getString('default','ALLOC_LOCKNAME')+resourceManager.getString('default','FILTER')}"
										 visible.widget="false" excludeFrom="widget" dataProvider="{allocationLockTypeList}"/>
			
			<s:Label id="fltr_produnit" text="" visible="false" includeInLayout="false" />
			

			<s:Spacer width="100%" excludeFrom="widget"/>
			<components:DKI_Button id="filterBtn" height="24" noLabel="false" click="filterRecords(event)"
								   type="filteron"/>
			<components:DKI_Button id="resetBtn" height="24" noLabel="false" click="refreshRecords(event)"
								   type="filteroff"/>
			<components:DKI_Button height="100%" label="{resourceManager.getString('default','RESET')+resourceManager.getString('default','FILTER')}" click="resetRecords(event)"
								   width.widget="100%" type="refresh"/>
			<components:DKI_Button id="btn_export" label="{resourceManager.getString('default','EXPORTDATA')}" type="report" click="exportCsvHandler(event)" includeIn="normal"/>
			<components:DKI_Button id="btn_create" label="{resourceManager.getString('default','CREATE')}" height="100%" click="createNewRecord(event)" includeIn="normal" enabled="{this.canCreate}" type="create"/>			
		</s:HGroup>
		<s:DataGrid id="dataGrid" width="100%" height="100%" requestedRowCount="4"
					selectionChange="dataGrid_selectionChangeHandler(event)"
					skinClass="skins.DKI_DataGrid_Skin"
					editable="false"
					>
			<s:columns>
				<s:ArrayList>
					<s:source>
						<s:GridColumn dataField="aiprd_type" headerText="{resourceManager.getString('default','AIPRD_TYPE')}" visible="true"></s:GridColumn>
						<s:GridColumn dataField="aiprd_typename" headerText="{resourceManager.getString('default','AIPRD_TYPENAME')}" visible="true"></s:GridColumn>
						<s:GridColumn dataField="aiprd_cmpycode" headerText="{resourceManager.getString('default','AIPRD_CMPYCODE')}" visible="true"></s:GridColumn>
						<s:GridColumn dataField="aiprd_cmpyname" headerText="{resourceManager.getString('default','AIPRD_CMPYNAME')}" visible="true"></s:GridColumn>
						<s:GridColumn dataField="aiprd_prodcode" headerText="{resourceManager.getString('default','AIPRD_PRODCODE')}" visible="true"></s:GridColumn>
						<s:GridColumn dataField="aiprd_prodname" headerText="{resourceManager.getString('default','AIPRD_PRODNAME')}" visible="true"></s:GridColumn>
						<s:GridColumn dataField="aiprd_suppcode" headerText="{resourceManager.getString('default','AIPRD_SUPPCODE')}" visible="true"></s:GridColumn>
						<s:GridColumn dataField="aiprd_suppname" headerText="{resourceManager.getString('default','AIPRD_SUPPNAME')}" visible="true"></s:GridColumn>
						<s:GridColumn dataField="aiprd_index" headerText="{resourceManager.getString('default','AIPRD_INDEX')}" visible="true"></s:GridColumn>
						<s:GridColumn dataField="aiprd_daystart" headerText="{resourceManager.getString('default','AIPRD_DAYSTART')}" visible="true" itemRenderer="renderers.DateRenderer"></s:GridColumn>
						<s:GridColumn dataField="aiprd_dayend" headerText="{resourceManager.getString('default','AIPRD_DAYEND')}" visible="true" itemRenderer="renderers.DateRenderer"></s:GridColumn>
						<s:GridColumn dataField="aiprd_produnit" headerText="{resourceManager.getString('default','AIPRD_PRODUNIT')}" 
									  visible="false" labelFunction="unitLabelFunction" itemEditor="itemeditors.ProductUnits"></s:GridColumn>
						<s:GridColumn dataField="aiprd_unitname" headerText="{resourceManager.getString('default','AIPRD_UNITNAME')}" visible="true"></s:GridColumn>
						<s:GridColumn dataField="aiprd_qtylimit" headerText="{resourceManager.getString('default','AIPRD_QTYLIMIT')}" visible="true"></s:GridColumn>
						<s:GridColumn dataField="aiprd_qtyused" headerText="{resourceManager.getString('default','AIPRD_QTYUSED')}" visible="true"></s:GridColumn>
						<s:GridColumn dataField="aiprd_qtyleft" headerText="{resourceManager.getString('default','AIPRD_QTYLEFT')}" visible="true"></s:GridColumn>
						<s:GridColumn dataField="aiprd_lock" headerText="{resourceManager.getString('default','AIPRD_LOCK')}" visible="true"></s:GridColumn>
						<s:GridColumn dataField="aiprd_lockname" headerText="{resourceManager.getString('default','AIPRD_LOCKNAME')}" visible="true"></s:GridColumn>
					</s:source>
				</s:ArrayList>
			</s:columns>
			<s:dataProvider>
				<s:AsyncListView id="pgList" list="{this.pagedRecords}"/>
			</s:dataProvider>
		</s:DataGrid>
		<s:HGroup width="100%">
			<components:Downloader id="pb" width="100%" height="18"/>
			<!--mx:ProgressBar id="pb" width="100%" height="22" visible="false" includeInLayout="false"  mode="manual" source="{this.pgList}" label="{this.currentLength} records shown from {this.currentLength} loaded out of {this.totalLength} found." labelPlacement="center"/-->
			<s:Button id="killBtn" width="18" height="18" label="" cornerRadius="12" visible="false" includeInLayout="false"
					  click="killBtn_clickHandler(event)"/>
			<s:Button id="resumeBtn" width="18" height="18" label="" cornerRadius="12" visible="false" includeInLayout="false"
					  click="resumeBtn_clickHandler(event)"/>
		</s:HGroup>
	</s:Panel>
	
	<s:Panel id="details" includeIn="edit,create,detail" width="100%" height="240"
			 itemCreationPolicy="immediate" skinClass="skins.WidgetPanelSkin">
		<s:layout>
			<s:VerticalLayout/>
			<!--s:TileLayout/-->
		</s:layout>
		
		<s:Spacer height="5"/>
		<s:VGroup>
			<s:HGroup width="100%">
				<s:HGroup>
					<s:Label width="{labelWidth}" height="{labelHeight}" text="{resourceManager.getString('default','AIPRD_TYPENAME')}" verticalAlign="middle"/>
					<components:DKI_ValidatorComboBox id="aiprd_type" 
													  dataProvider="{allocationTypeList}" 
													  labelField="acheck_name" 
													  selectedItem="{dataGrid.selectedItem.aiprd_typename}" enabled="false"
													  selectedIndex.create="{this.fltr_alloctype.selectedIndex}" 
													  width="{fieldWidth}" height="{fieldHeight}" 
													  prompt="{resourceManager.getString('default','SELECT')+resourceManager.getString('default','AIPRD_TYPENAME')}"
													  required="true" validationGroup="{vg}" automationName="{resourceManager.getString('default','AIPRD_TYPENAME')}" 
													  />
				</s:HGroup>
				<s:Spacer width="{spaceWidth}" />
				<s:HGroup>
					<s:Label width="{labelWidth}" height="{labelHeight}" text="{resourceManager.getString('default','AIPRD_CMPYNAME')}" verticalAlign="middle"/>
					<components:DKI_ValidatorComboBox id="aiprd_cmpycode" 
													  dataProvider="{companyList}" 
													  labelField="cmpy_name" 
													  selectedItem="{dataGrid.selectedItem.aiprd_cmpyname}" enabled="false" 
													  selectedIndex.create="{this.fltr_company.selectedIndex}"
													  width="{fieldWidth}" height="{fieldHeight}" 
													  prompt="{resourceManager.getString('default','SELECT')+resourceManager.getString('default','AIPRD_CMPYNAME')}"  
													  required="true" validationGroup="{vg}" automationName="{resourceManager.getString('default','AIPRD_CMPYNAME')}" 
													  />
				</s:HGroup>
				<s:Spacer width="{spaceWidth}" />
				<s:HGroup>
					<s:Label width="{labelWidth}" height="{labelHeight}" text="{resourceManager.getString('default','AIPRD_SUPPNAME')}" verticalAlign="middle"/>
					<components:DKI_ValidatorComboBox  id="aiprd_suppcode" 
													   dataProvider="{supplierList}" 
													   labelField="cmpy_name" 
													   selectedItem="{dataGrid.selectedItem.aiprd_suppname}" enabled="false" 
													   selectedIndex.create="{this.fltr_supplier.selectedIndex}"
													   width="{fieldWidth}" height="{fieldHeight}" 
													   prompt="{resourceManager.getString('default','SELECT')+resourceManager.getString('default','AIPRD_SUPPNAME')}"  
													   required="true" validationGroup="{vg}" automationName="{resourceManager.getString('default','AIPRD_SUPPNAME')}" 
													   />
				</s:HGroup>
				
			</s:HGroup>
			
			<s:Spacer height="5" />
			
			<s:HGroup>
				<s:HGroup>
					<s:Label width="{labelWidth}" height="{labelHeight}" text="{resourceManager.getString('default','AIPRD_PRODNAME')}" verticalAlign="middle"/>
					<components:DKI_ValidatorComboBox id="aiprd_prodcode" 
													  dataProvider="{this.productList}" 
													  labelField="prod_desc" 
													  selectedItem="{dataGrid.selectedItem.aiprd_suppcode + ' - ' + dataGrid.selectedItem.aiprd_prodcode + ' - ' + dataGrid.selectedItem.aiprd_prodname}" enabled="false" 
													  selectedIndex.create="{this.fltr_product.selectedIndex}" 
													  width="{fieldWidth}" height="{fieldHeight}" 
													  prompt="{resourceManager.getString('default','SELECT')+resourceManager.getString('default','AIPRD_PRODNAME')}"  
													  required="true" validationGroup="{vg}" automationName="{resourceManager.getString('default','AIPRD_PRODNAME')}" 
													  />
				</s:HGroup>
				<s:Spacer width="{spaceWidth}" />
				<s:HGroup>
					<s:Label width="{labelWidth}" height="{labelHeight}" text="{resourceManager.getString('default','AIPRD_UNITNAME')}" verticalAlign="middle"/>
					<components:DKI_ValidatorComboBox id="aiprd_produnit" 
													  dataProvider="{this.productUnitList}" 
													  labelField="unit_name" 
													  selectedItem="{dataGrid.selectedItem.aiprd_unitname}" enabled="true" 
													  selectedIndex.create="{int(this.fltr_produnit.text)}" enabled.create="true" 
													  width="{fieldWidth}" height="{fieldHeight}" 
													  prompt="{resourceManager.getString('default','SELECT')+resourceManager.getString('default','AIPRD_UNITNAME')}"
													  required="true" validationGroup="{vg}" automationName="{resourceManager.getString('default','AIPRD_UNITNAME')}" 
													  />
				</s:HGroup>
				<s:Spacer width="{spaceWidth}" />
				<s:HGroup>
					<s:Label width="{labelWidth}" height="{labelHeight}" text="{resourceManager.getString('default','AIPRD_INDEX')}" verticalAlign="middle"/>
					<components:DKI_ValidatorInput id="aiprd_index" 
												   width="{fieldWidth}" height="{fieldHeight}" 
												   text="{dataGrid.selectedItem.aiprd_index}" editable="false" enabled="false"
												   text.create="" editable.create="true" enabled.create="true" 
												   required="true" validationType="integer" validationGroup="{vg}" automationName="{resourceManager.getString('default','AIPRD_INDEX')}"
												   />
				</s:HGroup>
				<s:Spacer width="{spaceWidth}" />
			</s:HGroup>
			
			<s:Spacer height="5" />
			
			<s:HGroup>
				<s:HGroup>
					<s:Label width="{labelWidth}" height="{labelHeight}" text="{resourceManager.getString('default','AIPRD_DAYSTART')}" verticalAlign="middle"/>
					<components:DKI_DateTime id="aiprd_daystart" 
												selectedDate="{convertDateToLocale(dataGrid.selectedItem.aiprd_daystart)}" enabled="true" 
												selectedDate.create="{new Date()}" enabled.create="true" 
												width="{fieldWidth}" height="{fieldHeight}" timeEnabled="false"
												/>
				</s:HGroup>
				<s:Spacer width="{spaceWidth}" />
				<s:HGroup>
					<s:Label width="{labelWidth}" height="{labelHeight}" text="{resourceManager.getString('default','AIPRD_DAYEND')}" verticalAlign="middle"/>
					<components:DKI_DateTime id="aiprd_dayend" 
												selectedDate="{convertDateToLocale(dataGrid.selectedItem.aiprd_dayend)}" enabled="true" 
												selectedDate.create="{getDefaultDateByChoice('y', 10)}" enabled.create="true" 
												width="{fieldWidth}" height="{fieldHeight}" timeEnabled="false"
												/>
				</s:HGroup>
				<s:Spacer width="{spaceWidth}" />
				<s:HGroup>
					<s:Label width="{labelWidth}" height="{labelHeight}" text="{resourceManager.getString('default','AIPRD_QTYLIMIT')}" verticalAlign="middle"/>
					<components:DKI_ValidatorInput id="aiprd_qtylimit" 
												   width="{fieldWidth}" height="{fieldHeight}" 
												   text="{dataGrid.selectedItem.aiprd_qtylimit}" editable="true" enabled="true"
												   text.create="" editable.detail="false" enabled.detail="false" editable.edit="true" enabled.edit="true" 
												   required="true" validationType="integer" validationGroup="{vg}" automationName="{resourceManager.getString('default','AIPRD_QTYLIMIT')}"
												   />
				</s:HGroup>
			</s:HGroup>
			
			
		</s:VGroup>
		
		<s:Spacer height="0" />
		
		<s:HGroup width="100%" paddingBottom="4" paddingTop="0" gap="5">
			<s:Spacer width="100%"/>
			<components:DKI_Button id="btn_delete" label="{resourceManager.getString('default','DELETE')}" height="100%" click="doDelete()" includeIn="edit" enabled="{this.canDelete}" type="delete"/>
			<components:DKI_Button id="btn_save" label.create="{resourceManager.getString('default','SAVE')}" label="{resourceManager.getString('default','UPDATE')}" height="100%" includeIn="edit,create" enabled.create="{this.canCreate}" enabled="{this.canUpdate}" type.create="create" type="edit"/>
			<components:DKI_Button id="btn_cancel" label="{resourceManager.getString('default','CANCEL')}" height="100%" click="cancel_clickHandler()" enabled="true" type="cancel"/>
		</s:HGroup>
	</s:Panel>
	
</s:VGroup>
