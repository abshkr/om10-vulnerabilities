<?xml version="1.0" encoding="utf-8"?>
<s:VGroup xmlns:fx="http://ns.adobe.com/mxml/2009"
		  xmlns:s="library://ns.adobe.com/flex/spark"
		  xmlns:mx="library://ns.adobe.com/flex/mx"
		  xmlns:components="components.*"
		  creationComplete="creationCompleteHandler(event)"
		  gap="2" width="100%" height="100%">
	
	<s:states>
		<s:State name="normal" enterState="this.toolbar.enabled=true"/>
		<s:State name="widget" enterState="this.toolbar.enabled=true"/>
		<s:State name="edit" enterState="callLater(function():void{dataGrid.ensureCellIsVisible(idx);});drawerProductItemGrid.enabled=true;this.toolbar.enabled=false"/>
		<s:State name="create" enterState="drawerProductItemGrid.enabled=false;this.toolbar.enabled=false"/>
		<s:State name="detail" enterState="view_detailsHandler(event);drawerProductItemGrid.enabled=true;this.toolbar.enabled=false"/>
	</s:states>
	
	<fx:Script>
		<![CDATA[
			import com.adobe.fiber.runtime.lib.DateTimeFunc;
			
			import components.ActionDialog;
			import components.ConfirmDialog;
			import components.DeleteDialog;
			import components.ErrorDialog;
			import components.ExportData;
			import components.MessageDialog;
			import components.TransactionsDlg;
			import components.ViewPopupDlg;
			
			import dm.remoteBulkListService;
			import dm.remoteDataService;
			import dm.remoteListService;
			import dm.utils.tools;
			
			import flash.events.KeyboardEvent;
			import flash.globalization.LocaleID;
			
			import flashx.textLayout.container.ScrollPolicy;
			
			import mx.collections.ArrayCollection;
			import mx.controls.Alert;
			import mx.controls.DateField;
			import mx.events.FlexEvent;
			import mx.managers.PopUpManager;
			import mx.rpc.events.ResultEvent;
			import mx.utils.ObjectUtil;
			import mx.utils.StringUtil;
			
			import renderers.DKI_HeaderColumn_Renderer;
			
			import spark.components.ToggleButton;
			import spark.components.VScrollBar;
			import spark.components.gridClasses.IGridItemRenderer;
			import spark.events.GridEvent;
			import spark.events.GridItemEditorEvent;
			import spark.events.GridSelectionEvent;
			import spark.events.IndexChangeEvent;
			
			import views.v_GenericProducts;
			
			
			public static const MAIN_WINDOW_WIDTH:int = 1500;
			
			[Bindable] public var readOnly:Boolean = false;
			[Bindable] public var canUpdate:Boolean = false;
			[Bindable] public var canCreate:Boolean = false;
			[Bindable] public var canDelete:Boolean = false;
			[Bindable] public var hasPassword:Boolean = false;
			[Bindable] public var canCreateGenProd:Boolean = false;
			[Bindable] public var canDeleteGenProd:Boolean = false;
			
			[Bindable] private var isHotVolumeCheckEnabled:Boolean = false;
			[Bindable] private var isExtBlendAllowed:Boolean = false;
			[Bindable] public var DP_DENS_LO:Number = 500;
			[Bindable] public var DP_DENS_HI:Number = 1500;
			[Bindable] public var DP_TEMP_LO:Number = -25;
			[Bindable] public var DP_TEMP_HI:Number = 275;
			
			
			[Bindable] public var labelWidth:uint = 100;
			[Bindable] public var labelHeight:uint = 26;
			[Bindable] public var fieldWidth:uint = 240;
			[Bindable] public var fieldHeight:uint = 26;
			[Bindable] public var spaceWidth:uint = 15;
			[Bindable] public var spaceHeight:uint = 2;
			[Bindable] public var prodItemGridHeight:uint = 240;
			[Bindable] public var hotLineHeight:uint = 0;
			[Bindable] public var dcsLineHeight:uint = 0;
			
			private var idx:int=-1;
			
			private var currentFilter:String=null;
			private var currentOrder:String='prod_cmpycode';
			private var currentDirection:String="ASC";
			
			private var currentOffset:int=0;
			private var currentPageSize:int=1000;
			[Bindable] private var totalLength:int=0;
			[Bindable] private var currentLength:int=0;
			
			private var currentFields:Object=new Object();
			private var currentTypes:Object=new Object();
			//private var currentSorts:Object=new Object();
			//private var currentOrders:Object=new Object();
			private var currentSorts:Object={prod_cmpycode:'ASC'};
			private var currentOrders:Object={prod_cmpycode:1};
			private var currentSortSeq:int=0;
			
			private var  originalItems:ArrayCollection;
			
			
			private var confirmReport:ActionDialog;
			private var confirmSave:ActionDialog;
			private var errorDialog:ErrorDialog;
			
			//private var exportContents:String="";
			private var f:FileReference = new FileReference();
			
			
			//private var getData:Responder = new Responder(getData_resultHandler);
			
			//private var pagedRecords:ArrayCollection=new ArrayCollection();
			//private var pagedRecords:remoteDataService = new remoteDataService( "DrawerProductService.getPaged", getData, null );
			[Bindable] private var pagedRecords:remoteListService;
			
			[Bindable] private var drawerProductItemList:remoteDataService = new remoteDataService( "DrawerProductService.getDrawerProductItems", null, drawerProductItemList_resultHandler );
			[Bindable] private var drawerProductItemInitList:remoteDataService = new remoteDataService( "DrawerProductService.initDrawerProductItems", null, drawerProductItemInitList_resultHandler );
			
			private var deleteAction:remoteDataService = new remoteDataService( "DrawerProductService.delete", null, deleteData_resultHandler, 1 );
			private var createAction:remoteDataService = new remoteDataService( "DrawerProductService.create", null, createData_resultHandler, 1 );
			private var updateAction:remoteDataService = new remoteDataService( "DrawerProductService.update", null, updateData_resultHandler, 1 );
			private var createGenProdAction:remoteDataService = new remoteDataService( "DrawerProductService.createGenProd", null, createGenProdData_resultHandler, 1 );
			private var deleteGenProdAction:remoteDataService = new remoteDataService( "DrawerProductService.deleteGenProd", null, deleteGenProdData_resultHandler, 1 );
			
			private var drawerProductKeyChecker:remoteDataService = new remoteDataService( "DrawerProductService.isDrawerProductKeyUsed", null, drawerProductKeyChecker_resultHandler, 2 );
			//private var drawerProductKeyCheckerBeforeCreate:remoteDataService = new remoteDataService( "DrawerProductService.isDrawerProductKeyUsed", null, drawerProductKeyCheckerBeforeCreate_resultHandler, 2 );
			private var drawerProductItemKeyChecker:remoteDataService = new remoteDataService( "DrawerProductService.isDrawerProductItemKeyUsed", null, drawerProductItemKeyChecker_resultHandler, 2 );
			
			private var gridColumnSequenceMaker:remoteDataService = new remoteDataService( "ScreenGridColumnService.lookupGridColumnSequence", null, gridColumnSequenceMaker_resultHandler, 1 );
			private var _gridColumnSequenceString:String="";
			private var formColumnSettingsMaker:remoteDataService = new remoteDataService( "ScreenFormColumnService.lookupFormColumnSettings", null, formColumnSettingsMaker_resultHandler, 1 );
			private var _formColumnSettingsString:String="";
			private var formButtonSettingsMaker:remoteDataService = new remoteDataService( "ScreenFormButtonService.lookupFormButtonSettings", null, formButtonSettingsMaker_resultHandler, 1 );
			private var _formButtonSettingsString:String="";
			
			
			[Bindable] private var drawerProductHazchemList:remoteDataService = new remoteDataService( "ListLibraryService.lookupHazchem", null, null );
			[Bindable] private var drawerProductGroupList:remoteDataService = new remoteDataService( "ListLibraryService.lookupProductGroup", null, null );
			[Bindable] private var drawerProductClassList:remoteDataService = new remoteDataService( "ListLibraryService.lookupGenericProduct", null, lookupGenProd_resultHandler );
			[Bindable] private var genericProductList:remoteDataService = new remoteDataService( "ListLibraryService.lookupGenericProduct", null, null );
			[Bindable] private var baseProductList:remoteDataService = new remoteDataService( "ListLibraryService.lookupBaseProduct", null, null );
			[Bindable] private var availBaseProducts:ArrayCollection=new ArrayCollection();
			
			[Bindable] private var drawerList:remoteDataService = new remoteDataService( "ListLibraryService.lookupCompanyAll", null, lookupCompany_resultHandler );
			private var companyConfigList:remoteDataService = new remoteDataService( "CompanyConfigService.getData", null, null );
			
			[Bindable] private var productUnitList:remoteDataService = new remoteDataService( "ListLibraryService.lookupProductUnit", null, lookupProductUnit_resultHandler );
			[Bindable] private var productList:remoteDataService = new remoteDataService( "ListLibraryService.lookupProduct", null, lookupProduct_resultHandler );
			
			//private var genData:ExportData = new ExportData();
			
			public var mainListSelection:int = -1;
			private var _saveButtonClicked:Boolean=false;
			
			public var genericProductPopup:ViewPopupDlg = new ViewPopupDlg( "Generic Products", new v_GenericProducts(), closeDialogHandler );
			
			[Bindable] private var drawerProductDGList:remoteDataService = new remoteDataService( "DangerousGoodsService.getData", null, lookupProdDGLink_resultHandler );
			public var productDGLinkPopup:ViewPopupDlg = new ViewPopupDlg( "Dangerous Goods", new v_DangerousGoods(), closeDialogHandlerFromDG );

			
			protected function creationCompleteHandler(event:FlexEvent):void
			{
				companyConfigList.service(  );
				this.formColumnSettingsMaker.service( "DRAWER_PRODUCTS" );
				this.formButtonSettingsMaker.service( "DRAWER_PRODUCTS" );
				
				trace ("-------------start creationCompleteHandler");
				pagedRecords = new remoteListService( this.dataGrid, "DrawerProductService.getPaged", null, getPageData_resultHandler );
				//resourceManager.localeChain = ['zh_CN'];
				//global.LanguageCode="CHN";
				this.gridColumnSequenceMaker.service( "DRAWER_PRODUCTS" );
				
				
				var value:String = global.getValueFromSiteConfigSettings( "SITE_AUTO_FILTER_WHEN_OPEN_SCREEN" );
				if ( value == 'Y' )
				{
					this.startFiltering();
				}
				else
				{
					;
				}
				
				if ( global.getValueFromSiteConfigSettings("SITE_LOAD_SAFEFILL_CHECK_BY_HIGHTEMP") == 'Y' )
				{
					this.isHotVolumeCheckEnabled = true;
					this.hotLineHeight = 30;
				}
				else
				{
					this.isHotVolumeCheckEnabled = false;
					this.hotLineHeight = 0;
				}
				
				if ( global.getValueFromSiteConfigSettings("SITE_EXTERNAL_BLENDING_ALLOWED") == 'Y' )
				{
					this.isExtBlendAllowed = true;
					this.dcsLineHeight = 30;
				}
				else
				{
					this.isExtBlendAllowed = false;
					this.dcsLineHeight = 0;
				}
				
				this.drawerProductItemInitList.service();
				//this.drawerProductItemList.service( "-1", "-1" );	
				
				this.drawerList.service( 4 );
				
				this.drawerProductHazchemList.service( );
				this.drawerProductGroupList.service( );
				this.drawerProductClassList.service( );
				this.genericProductList.service( );
				this.baseProductList.service( );
				
				
				this.productUnitList.service( );
				this.productList.service( "-1" );
				
				this.drawerProductDGList.service( );
				
				trace ("------------End creationCompleteHandler");
				
				
				//trace("this.grid.scroller1111", this.dataGrid.scroller);
				//trace("this.grid.scroller.verticalScrollBar.value", this.dataGrid.scroller.verticalScrollBar.value);
				this.dataGrid.scroller.verticalScrollBar.addEventListener(Event.CHANGE, verticalScrollBarChanged);
				this.dataGrid.addEventListener(KeyboardEvent.KEY_UP, reportKeyUp);
				this.dataGrid.columnHeaderGroup.addEventListener(GridEvent.GRID_CLICK, headerClickListener);
					
			}
			
			
			
			protected function formColumnSettingsMaker_resultHandler():void
			{
				this._formColumnSettingsString =  formColumnSettingsMaker.dataString;
			}
			
			protected function formButtonSettingsMaker_resultHandler():void
			{
				this._formButtonSettingsString =  formButtonSettingsMaker.dataString;
			}
			
			
			protected function startLoadingPages():void
			{
				killBtn.setStyle("chromeColor","0xff0000");
				this.killBtn.includeInLayout=true;
				this.killBtn.visible = true;
				this.killBtn.enabled = true;
				
				resumeBtn.setStyle("chromeColor","0x00ff00");
				this.resumeBtn.includeInLayout=true;
				this.resumeBtn.visible = true;
				this.resumeBtn.enabled = false;
				
				this.btn_create.enabled = false
				this.btn_export.enabled = false;
				this.dataGrid.enabled = false;
				this.toolbar.enabled = false;
				//this.panel.enabled = false;
				
				currentLength=0;
				currentOffset = 0;
				
				//this.exportContents = this.genData.prepExportHeader( dataGrid );
				
				//currentPage=1;
				pagedRecords.currentPage=1;
				pagedRecords.removeAll();
				pagedRecords.refresh();
				this.pb.values(0, 0);
				//this.pagedRecords.service( currentFields, currentTypes, currentSorts, currentOrders, currentPage, currentPageSize );
				this.pagedRecords.listService( currentFields, currentTypes, currentSorts, currentOrders );
			}
			
			protected function endLoadingPages():void
			{
				this.btn_create.enabled = this.canCreate;
				this.btn_export.enabled = true;
				this.dataGrid.enabled = true;
				this.toolbar.enabled = true;
				//this.panel.enabled = true;
				//this.pb.values(totalCount, totalCount);
				this.pb.values(pagedRecords.totalCount, pagedRecords.totalCount, true);
				
				this.killBtn.includeInLayout=true;
				this.killBtn.visible = true;
				this.killBtn.enabled = false;
				
				this.resumeBtn.includeInLayout=true;
				this.resumeBtn.visible = true;
				//if ( totalLength > totalCount )
				if ( pagedRecords.totalLength > pagedRecords.totalCount )
				{
					this.resumeBtn.enabled = true;
				}
				else
				{
					this.resumeBtn.enabled = false;
				}
				
				//this.fltr_product.setFocus();
				var len:int = this.fltr_product.text.length;
				this.fltr_product.selectRange(len, len);
			}
			
			protected function exportCsvHandler(event:MouseEvent):void
			{
				this.confirmReport = new ActionDialog( doExport, cancelExport, resourceManager.getString('default','CONFIRM_REPORT_CSV') );
				
				//this.startLoadingPages();
			}
			
			private function getPageData_resultHandler():void
			{
				// if not finished
				if(pagedRecords.length < pagedRecords.totalCount)
				{
					pb.values(pagedRecords.length,pagedRecords.totalCount)
				}
				else
				{
					pb.values(pagedRecords.length,pagedRecords.totalCount)
					
					this.endLoadingPages();
					
					this.dataGrid.selectedIndex = this.mainListSelection;
					if ( this.mainListSelection >= 0)
					{
						this.dataGrid_selectionChangeHandler(null);
					}
					this.mainListSelection = -1;
					
				}
				
			}
			
			
			public function doExport():void
			{
				//genData.prepOther(dataGrid,'drawerProductlist.csv', this.pagedRecords);
				
				//f.save( this.exportContents, "drawerProductlist.csv" );
				f.save( pagedRecords.exportContents, "drawerProductlist.csv" );
				
				this.endLoadingPages();
			}
			
			
			public function cancelExport():void
			{
				this.endLoadingPages();
				
				//trace( this.exportContents );
			}
			
			public function doNothing():void
			{
			}
			
			
			private function verticalScrollBarChanged(event:Event):void
			{
				if ( this.dataGrid.scroller != null)
				{
					var vs:VScrollBar;
					vs = this.dataGrid.scroller.verticalScrollBar;
					//trace("this.grid.scroller.verticalScrollBar.value", vs.value, vs.maximum, vs.minimum, vs.stepSize, vs.pageSize, vs.	snapInterval);
				}
				else
				{
					trace("grid is changed");
				}
			}
			
			private function reportKeyUp(event:KeyboardEvent):void
			{
				if ( this.dataGrid.scroller != null)
				{
					var vs:VScrollBar;
					vs = this.dataGrid.scroller.verticalScrollBar;
					//trace("this.grid.scroller.verticalScrollBar.value", vs.value, vs.maximum, vs.minimum, vs.stepSize, vs.pageSize, vs.	snapInterval);
				}
				else
				{
					trace("grid is changed");
				}
			}
			
			private function headerClickListener(event:GridEvent):void
			{
				if(event.column.dataField!='prod_items')
				{
					var currentRenderer:IGridItemRenderer;
					var dir:String;
					
					if ( global.sortingBySingleColumn == true )
					{	// sorted by single column only
						for (var i:int=0; i < dataGrid.columns.length; i++)
						{
							currentRenderer = dataGrid.columnHeaderGroup.getHeaderRendererAt(i);
							if ( currentRenderer != null)
							{
								(currentRenderer as DKI_HeaderColumn_Renderer).setImage('');
							}
							//(currentRenderer as DKI_HeaderColumn_Renderer).setImage(''); 
						}
					}
					else
					{	// sorted by multiple columns
						;
					}
					currentRenderer = dataGrid.columnHeaderGroup.getHeaderRendererAt(event.columnIndex);
					
					if( currentSorts.hasOwnProperty(event.column.dataField ) )
					{
						dir = currentSorts[event.column.dataField];
						if( dir=="ASC" )
						{
							dir = "DESC";
						}
						else if ( dir == "DESC" )
						{
							dir = "";
						}
						else if ( dir == "" )
						{
							dir = "ASC";
						}
						else 
						{
							dir = "ASC";
						}
						
						if ( dir != "" )
						{
							currentSorts[event.column.dataField] = dir;	
						}
						else
						{
							delete currentSorts[event.column.dataField];
							delete currentOrders[event.column.dataField];
						}
					}
					else
					{
						if ( global.sortingBySingleColumn == true )
						{	// sorted by single column only
							currentSorts = new Object();
							currentOrders = new Object();
							currentSortSeq = 0;
						}
						else
						{	// sorted by multiple columns
							;
						}
						currentSorts[event.column.dataField] = "ASC";	
						dir = currentSorts[event.column.dataField];
						currentSortSeq += 1;
						currentOrders[event.column.dataField] = currentSortSeq;	
					}
					(currentRenderer as DKI_HeaderColumn_Renderer).setImage(dir);
					this.startFiltering();
				}
			}
			
			
			protected function drawerProductItemInitList_resultHandler( ):void
			{
				trace ("---------------start drawerProductItemInitList_resultHandler");
				
				if (currentState == "edit")
				{
					trace ("---------------edit drawerProductItemInitList_resultHandler");
					this.drawerProductItemGrid.dataProvider = this.prepareDrawerProductItems();
				}
				if (currentState == "create")
				{
					trace ("---------------create drawerProductItemInitList_resultHandler");
					this.drawerProductItemGrid.dataProvider = this.prepareDrawerProductItems();
				}
				if (currentState == "detail")
				{
					trace ("drawerProductItemInitList_resultHandler", dataGrid,  dataGrid.selectedItem );
					if ( dataGrid.selectedItem != null )
					{
						this.drawerProductItemGrid.dataProvider = this.drawerProductItemList;//  dataGrid.selectedItem.prod_items;
						this.originalItems = new ArrayCollection();
						for each(var x:Object in this.drawerProductItemList)
						{
							trace( "drawerProductItemInitList_resultHandler x", x.pitem_base_code, x.pitem_base_name, x.pitem_ratio_value );
							this.originalItems.addItem(ObjectUtil.copy(x));
						}
						
					}
				}
				
				this.adjustBaseProductList();
				
				trace ("---------------End drawerProductItemInitList_resultHandler");
			}
			
			protected function drawerProductItemList_resultHandler():void
			{
				trace ("--------------Start drawerProductItemList_resultHandler");
				this.toggleValidationRequired();
				
				if ( drawerProductItemList.length>0 )
				{
					this.drawerProductItemGrid.dataProvider = null;
					this.drawerProductItemGrid.dataProvider = drawerProductItemList;
					adjustHotTempCheckFlag();
				}
				else
				{
					this.drawerProductItemGrid.dataProvider = null;
				}
				
				this.drawerProductItemInitList.service( ); 
				trace ("----------------End drawerProductItemList_resultHandler");
			}
			
			protected function dataGrid_selectionChangeHandler(event:GridSelectionEvent):void
			{
				if(currentState != 'widget')
				{
					idx=dataGrid.selectedIndex;
					//dataGrid.ensureCellIsVisible(idx+11);
					dataGrid.ensureCellIsVisible(idx);
					
					currentState = "edit";					
					this.btn_save.enabled = this.canUpdate;
					
					if ( _formColumnSettingsString.length > 0 )
					{
						global.adjustFormFieldSettings( _formColumnSettingsString.substr(1), this );
					}
					
					if ( _formButtonSettingsString.length > 0 )
					{
						global.adjustFormButtonSettings( _formButtonSettingsString.substr(1), this );
					}
					
					// get the drawer product ratio details
					
					this.drawerProductItemList.service( dataGrid.selectedItem.prod_code, dataGrid.selectedItem.prod_cmpycode  );
					//this.toggleValidationRequired();
				}
			}
			
			private function prepareDrawerProductItems():ArrayCollection
			{
				var temp:ArrayCollection = new ArrayCollection;
				var used:Boolean;
				var x:Object;
				var y:Object;
				
				this.originalItems = new ArrayCollection( );
				
				trace ("*****************start prepareDrawerProductItems************");
				
				trace ("dataGrid", dataGrid);
				
				if ( dataGrid==null || dataGrid.selectedItem==null || this.drawerProductItemList==null || this.drawerProductItemList.length==0 )
				{
					trace ("*****************dataGrid is null************");
					return temp;	
				}
				
				trace ("dataGrid.selectedItem", dataGrid.selectedItem);
				trace ("dataGrid.selectedItem.prod_items", dataGrid.selectedItem.prod_items);
				for each(x in this.drawerProductItemList)
				{
					trace( "prepareDrawerProductItems x", x.pitem_base_code, x.pitem_base_name, x.pitem_ratio_value );
					temp.addItem(x);
					this.originalItems.addItem(ObjectUtil.copy(x));
				}
				
				trace ("*****************end of inside prepareDrawerProductItems************");
				
				return temp;
			}
			
			private function mergeDrawerProductItems():ArrayCollection
			{
				var temp:ArrayCollection = new ArrayCollection;
				var used:Boolean;
				var x:Object;
				var y:Object;
				
				this.originalItems = new ArrayCollection( );
				
				trace ("*****************start mergeDrawerProductItems************");
				
				trace ("dataGrid", dataGrid);
				
				if ( dataGrid==null || dataGrid.selectedItem==null || this.drawerProductItemList==null || this.drawerProductItemList.length==0 )
				{
					trace ("*****************dataGrid is null************");
					for each(x in drawerProductItemInitList)
					{
						temp.addItem(x);
						this.originalItems.addItem(ObjectUtil.copy(x));
						trace( "mergeDrawerProductItems xy", x.pitem_base_code, x.pitem_base_name, x.pitem_ratio_value );
					}
					return temp;
				}
				
				trace ("dataGrid.selectedItem", dataGrid.selectedItem);
				trace ("dataGrid.selectedItem.prod_items", dataGrid.selectedItem.prod_items);
				for each(x in this.drawerProductItemList)
				{
					trace( "mergeDrawerProductItems x", x.pitem_base_code, x.pitem_base_name, x.pitem_ratio_value );
					temp.addItem(x);
					this.originalItems.addItem(ObjectUtil.copy(x));
				}
				
				for each(x in drawerProductItemInitList)
				{
					used = false;
					for each(y in drawerProductItemList)
					{
						if ( y.pitem_base_code == x.pitem_base_code && y.pitem_base_name == x.pitem_base_name )
						{
							used = true;
							break;
						}
					}
					if ( used == false )
					{
						trace( "mergeDrawerProductItems y", x.pitem_base_code, x.pitem_base_name, x.pitem_ratio_value );
						temp.addItem(x);
						this.originalItems.addItem(ObjectUtil.copy(x));
					}
				}
				
				//this.originalItems = new ArrayCollection( temp.source );
				//this.originalItems = ObjectUtil.copy(temp);
				trace ("*****************end of inside mergeDrawerProductItems************");
				
				return temp;
			}
			
			protected function drawerProductItemGrid_selectionChangeHandler(event:GridSelectionEvent):void
			{
				if ( drawerProductItemGrid.selectedIndex < 0 )
				{
					return;
				}
				
				trace( "drawerProductItemGrid.selectedItem", drawerProductItemGrid.selectedItem );

				var prod_cmpy:String;
				var prod_code:String;
				var base_code:String;
				prod_cmpy = drawerProductItemGrid.selectedItem.pitem_cmpy_code;
				prod_code = drawerProductItemGrid.selectedItem.pitem_prod_code;
				base_code = drawerProductItemGrid.selectedItem.pitem_base_code;
				
				drawerProductItemKeyChecker.service( prod_cmpy, prod_code, base_code );
			}
			
			protected function cancel_clickHandler():void
			{
				clearDetail();
				if ( currentState== "create" )
				{
					dataGrid.enabled=true;
				}
				currentState="normal";
				dataGrid.selectedIndex = -1;
			}			
			
			protected function gridColumnSequenceMaker_resultHandler():void
			{
				this._gridColumnSequenceString =  gridColumnSequenceMaker.dataString;
				
				if ( _gridColumnSequenceString.length > 0 )
				{
					global.adjustGridColumnSequence( _gridColumnSequenceString.substr(1), dataGrid );
				}
				
			}
			
			protected function lookupProdDGLink_resultHandler():void
			{
				if ( currentState == "create" )
				{
					if ( prod_dglink.selectedIndex > -1 )
					{
						prod_dglink.selectedItem = drawerProductDGList[prod_dglink.selectedIndex].dg_material;
					}
				}
				if ( currentState == "edit" || currentState == "detail" )
				{
					prod_dglink.selectedItem = dataGrid.selectedItem.prod_dglink;
				}
				
			}
			
			protected function lookupGenProd_resultHandler():void
			{
				/*
				<components:DKI_ValidatorComboBox id="prod_class" 
				dataProvider="{drawerProductClassList}" 
				labelField="gen_prod_desc" 
				selectedItem="{dataGrid.selectedItem.prod_classdesc}" enabled="true" 
				selectedItem.create="" selectedIndex.create="-1" enabled.create="true" 
				width="{fieldWidth}" height="{fieldHeight}" 
				prompt="{resourceManager.getString('default','SELECT')+resourceManager.getString('default','PROD_CLASS')}"
				required="true" validationGroup="{vg}" automationName="{resourceManager.getString('default','PROD_CLASS')}" 
				*/
				if ( currentState == "create" )
				{
					if ( prod_class.selectedIndex > -1 )
					{
						prod_class.selectedItem = drawerProductClassList[prod_class.selectedIndex].gen_prod_desc;
					}
				}
				if ( currentState == "edit" || currentState == "detail" )
				{
					prod_class.selectedItem = dataGrid.selectedItem.prod_classdesc;
				}
				
				if ( currentFields.hasOwnProperty( "prod_class" ) )
				{
					this.fltr_prodclass.selectedIndex = tools.getItemIndexFromCode( currentFields["prod_class"], drawerProductClassList, "gen_prod_code");
				}
				
			}
			
			protected function lookupProduct_resultHandler():void
			{
				if ( currentState == "edit" || currentState == "detail" )
				{
					if ( dataGrid.selectedIndex > -1 )
					{
						var prod_text:String = dataGrid.selectedItem.prod_2nd_drawer + ' - ' + dataGrid.selectedItem.prod_2nd_product + ' - ' + dataGrid.selectedItem.prod_2nd_product_name;
						this.prod_2nd_product.selectedIndex = tools.getItemIndexFromCode( prod_text, productList, "prod_desc");
					}
					else
					{
						this.prod_2nd_product.selectedIndex = -1;
					}
				}
			}
			
			protected function lookupCompany_resultHandler():void
			{
				if ( currentState == "create" )
				{
					if ( prod_cmpycode.selectedIndex > -1 )
					{
						prod_cmpycode.selectedItem = drawerList[prod_cmpycode.selectedIndex].cmpy_name;
					}
				}
				if ( currentState == "edit" || currentState == "detail" )
				{
					prod_cmpycode.selectedItem = dataGrid.selectedItem.prod_cmpyname;
				}
				
				if ( currentFields.hasOwnProperty( "prod_cmpycode" ) )
				{
					this.fltr_drawer.selectedIndex = tools.getItemIndexFromCode( currentFields["prod_cmpycode"], drawerList, "cmpy_code");
				}
				
				/* if ( currentState == "normal" )
				{
					if ( this.fltr_drawer.selectedIndex > -1 )
					{
						fltr_drawer.selectedItem = drawerList[fltr_drawer.selectedIndex].cmpy_name;
					}
				} */
			}

			
			protected function fltr_product_keyUpHandler(event:KeyboardEvent):void
			{
				if ( event.keyCode != 13 )
				{
					return;
				}
				if (currentState == "edit") clearDetail();
				startFiltering();
			}
			
			protected function fltr_drawer_changeHandler(event:IndexChangeEvent):void
			{
				if (currentState == "edit") clearDetail();
				startFiltering();
			}
			
			protected function fltr_hazchem_changeHandler(event:IndexChangeEvent):void
			{
				if (currentState == "edit") clearDetail();
				startFiltering();
			}
			
			protected function fltr_prodgroup_changeHandler(event:IndexChangeEvent):void
			{
				if (currentState == "edit") clearDetail();
				startFiltering();
			}
			
			protected function fltr_prodclass_changeHandler(event:IndexChangeEvent):void
			{
				if (currentState == "edit") clearDetail();
				startFiltering();
			}
			
			private function startFiltering():void
			{
				var productFilter:String = '';  
				var drawerFilter:String = '';  
				var hazchemFilter:String = '';
				var prodClassFilter:String = '';
				var prodGroupFilter:String = '';
				var fields:Object;
				var types:Object;
				
				//interruptor=false;
				pagedRecords.interruptor=false;
				
				fields = new Object();
				types = new Object();
				
				
				if(fltr_product.text!='')
				{					
					productFilter = "((UPPER(prod_code) LIKE UPPER('%"+(fltr_product.text)+"%') ) or "
						+ "(UPPER(prod_name) LIKE UPPER('%"+(fltr_product.text)+"%') )) ";
					fields["prod_code||prod_name"] = fltr_product.text+"||"+fltr_product.text;
				}
				else
				{
					productFilter = '';
					fields["prod_code||prod_name"] = "";
				}
				types["prod_code||prod_name"] = "STRING||STRING";
				
				
				if (fltr_drawer.selectedIndex > -1) 
				{
					drawerFilter = "prod_cmpycode='"+drawerList[fltr_drawer.selectedIndex].cmpy_code+"' ";
					fields["prod_cmpycode"] = drawerList[fltr_drawer.selectedIndex].cmpy_code;
					if ( fields["prod_cmpycode"] == "ANY" )
					{
						drawerFilter = '';
						fields["prod_cmpycode"] = "";
					}
				}
				else
				{
					if ( global.setComboBoxNoSelection == true )
					{
						fltr_drawer.selectedIndex = -1;
					}
					drawerFilter = '';
					fields["prod_cmpycode"] = "";
				}
				types["prod_cmpycode"] = "EXACT_STRING";
				
				
				
				if ( this.currentState != "widget" )
				{
					if (fltr_hazchem.selectedIndex > -1) 
					{
						hazchemFilter = "prod_hazid="+drawerProductHazchemList[fltr_hazchem.selectedIndex].hzcf_id+" ";
						fields["prod_hazid"] = drawerProductHazchemList[fltr_hazchem.selectedIndex].hzcf_id;
					}
					else
					{
						if ( global.setComboBoxNoSelection == true )
						{
							fltr_hazchem.selectedIndex = -1;
						}
						hazchemFilter = '';
						fields["prod_hazid"] = "";
					}
					types["prod_hazid"] = "EXACT_STRING";
					
					if (fltr_prodgroup.selectedIndex > -1) 
					{
						prodGroupFilter = "prod_group="+drawerProductGroupList[fltr_prodgroup.selectedIndex].pgr_code+" ";
						fields["prod_group"] = drawerProductGroupList[fltr_prodgroup.selectedIndex].pgr_code;
					}
					else
					{
						if ( global.setComboBoxNoSelection == true )
						{
							fltr_prodgroup.selectedIndex = -1;
						}
						prodGroupFilter = '';
						fields["prod_group"] = "";
					}
					types["prod_group"] = "EXACT_STRING";
					
					if (fltr_prodclass.selectedIndex>-1) 
					{
						prodClassFilter = "prod_class="+drawerProductClassList[fltr_prodclass.selectedIndex].gen_prod_code+" ";
						fields["prod_class"] = drawerProductClassList[fltr_prodclass.selectedIndex].gen_prod_code;
					}
					else
					{
						if ( global.setComboBoxNoSelection == true )
						{
							fltr_prodclass.selectedIndex = -1;
						}
						if ( fltr_prodclass.selectedIndex == -3 )
						{
							prodClassFilter = "prod_class="+fltr_prodclass.textInput.text+" ";;
							fields["prod_class"] = fltr_prodclass.textInput.text;
						}
						else
						{
							prodClassFilter = '';
							fields["prod_class"] = "";
						}
					}
					types["prod_class"] = "EXACT_STRING";
					
				}
				
				currentFilter = "WHERE 1=1 ";
				if ( prodGroupFilter.length > 0 )
				{
					currentFilter += "AND " + prodGroupFilter;
				}
				if ( prodClassFilter.length > 0 )
				{
					currentFilter += "AND " + prodClassFilter;
				}
				if ( productFilter.length > 0 )
				{
					currentFilter += "AND " + productFilter;
				}
				if ( drawerFilter.length > 0 )
				{
					currentFilter += "AND " + drawerFilter;
				}
				if ( hazchemFilter.length > 0 )
				{
					currentFilter += "AND " + hazchemFilter;
				}
				
				currentFields = fields;
				currentTypes = types;
				
				this.startLoadingPages();
				
				trace("this.grid.scroller3333", this.dataGrid.scroller);
				trace("this.grid.scroller.verticalScrollBar.value", this.dataGrid.scroller.verticalScrollBar.value);
			}
			
			private function findByPrimaryKey(cmpy:String, prod:String):void
			{
				var fields:Object;
				var types:Object;
				
				fields = new Object();
				types = new Object();
				
				fields["prod_cmpycode"] = cmpy;
				types["prod_cmpycode"] = "EXACT_STRING";
				fields["prod_code"] = prod;
				types["prod_code"] = "EXACT_STRING";
				
				//currentPage=1;
				pagedRecords.currentPage=1;
				pagedRecords.removeAll();
				pagedRecords.refresh();
				//this.pagedRecords.service( fields, types, currentSorts, currentOrders, currentPage, currentPageSize );
				this.pagedRecords.listService( fields, types, currentSorts, currentOrders );
			}
			
			protected function filterRecords(event:MouseEvent):void
			{
				if (currentState == "edit") clearDetail();
				this.startFiltering();
			}
			
			protected function refreshRecords(event:MouseEvent):void
			{
				if ( currentState != "widget" )
				{
					currentState = 'normal';
					dataGrid.enabled=true;
				}
				clearDetail();
				fltr_product.text = "";
				fltr_drawer.selectedIndex = -1;
				if ( currentState != "widget" )
				{
					fltr_hazchem.selectedIndex = -1;
					fltr_prodclass.selectedIndex = -1;
					fltr_prodgroup.selectedIndex = -1;
				}
				
				dataGrid.selectedIndex = -1;
				currentFilter = null;
				currentOrder = null;
				currentFields = new Object();
				currentTypes = new Object();
				
				currentSorts = new Object();
				currentOrders = new Object();
				var currentRenderer:IGridItemRenderer;
				for (var i:int=0; i < dataGrid.columns.length; i++)
				{
					currentRenderer = dataGrid.columnHeaderGroup.getHeaderRendererAt(i);
					if ( currentRenderer != null)
					{
						(currentRenderer as DKI_HeaderColumn_Renderer).setImage('');
					}
					//(currentRenderer as DKI_HeaderColumn_Renderer).setImage(''); 
				}
				this.startFiltering();
				//this.startLoadingPages();
				trace("this.grid.scroller2222", this.dataGrid.scroller);
				trace("this.grid.scroller.verticalScrollBar.value", this.dataGrid.scroller.verticalScrollBar.value);
			}
			
			protected function clearDetail(): void
			{
				if (currentState != 'widget')
				{
				}
			}			
			
			private function editRecord():void
			{
				
				if ( this.checkFields() > 0 )
				{
					this.btn_save.enabled = this.canUpdate;
					return;
				}
				
				if ( this.checkItemFields() == false )
				{
					this.btn_save.enabled = this.canUpdate;
					return;
				}
				
				if (prod_name.text.length > 20) {
					var errorBox2:MessageDialog = new MessageDialog( "Product Name must be less than 20 characters." );
					this.btn_save.enabled = this.canCreate;
					return;
				}
				
				var obj:Object = new Object();
				
				
				obj.prod_code = prod_code.text;
				obj.prod_name = prod_name.text;
				obj.prod_desc = prod_desc.text;
				
				if (prod_cmpycode.selectedIndex>=0)
				{
					obj.prod_cmpycode = drawerList[prod_cmpycode.selectedIndex].cmpy_code;
					obj.prod_cmpyname = drawerList[prod_cmpycode.selectedIndex].cmpy_name;
				}
				else
				{
					obj.prod_cmpycode = dataGrid.selectedItem.prod_cmpycode;
					obj.prod_cmpyname = dataGrid.selectedItem.prod_cmpyname;
				}
				
				if (prod_group.selectedIndex>=0)
				{
					obj.prod_group = drawerProductGroupList[prod_group.selectedIndex].pgr_code;
				}
				else
				{
					obj.prod_group = dataGrid.selectedItem.prod_group;
				}
				
				if (prod_class.selectedIndex>=0)
				{
					obj.prod_class = drawerProductClassList[prod_class.selectedIndex].gen_prod_code;
				}
				else
				{
					obj.prod_class = dataGrid.selectedItem.prod_class;
				}
				
				if (prod_hazid.selectedIndex>=0)
				{
					obj.prod_hazid = drawerProductHazchemList[prod_hazid.selectedIndex].hzcf_id;
				}
				else
				{
					obj.prod_hazid = "";//dataGrid.selectedItem.prod_hazid;
				}
				
				obj.prod_is_compliant = (prod_is_compliant.selected==true?1:0);
				
				obj.prod_ldtol_flag = (prod_ldtol_flag.selected==true?"on":"");
				
				obj.prod_ldtol_ptol = prod_ldtol_ptol.text;
				obj.prod_ldtol_ntol = prod_ldtol_ntol.text;
				
				if (prod_dglink.selectedIndex>=0)
				{
					obj.prod_dglink = drawerProductDGList[prod_dglink.selectedIndex].dg_material;
				}
				else
				{
					obj.prod_dglink = "";//dataGrid.selectedItem.prod_hazid;
				}
				
				obj.prod_check_hot_volume = (this.prod_check_hot_volume.selected==true?1:0);
				obj.prod_15_density = this.prod_15_density.text;
				obj.prod_hot_temp = this.prod_hot_temp.text;
				
				obj.prod_check_2nd_drawer = (this.prod_check_2nd_drawer.selected==true?1:0);
				if (prod_2nd_drawer.selectedIndex>=0)
				{
					obj.prod_2nd_drawer = drawerList[prod_2nd_drawer.selectedIndex].cmpy_code;
				}
				else
				{
					obj.prod_2nd_drawer = dataGrid.selectedItem.prod_2nd_drawer;
				}
				if (prod_2nd_product.selectedIndex>=0)
				{
					obj.prod_2nd_product = productList[prod_2nd_product.selectedIndex].prod_code;
				}
				else
				{
					obj.prod_2nd_product = dataGrid.selectedItem.prod_2nd_product;
				}
				
				
				obj.has_items = 0;
				var items:ArrayCollection=new ArrayCollection();
				var x:Object;
				var y:Object;
				var actions:ArrayCollection=new ArrayCollection();
				var action:Object;
				var match_found:Boolean=false;
				for each ( x in this.drawerProductItemGrid.dataProvider)
				{
					action = new Object();
					action.option = 0;  // do nothing
					trace( "********X", x.pitem_base_code, x.pitem_ratio_value);
					match_found = false;
					for each ( y in this.originalItems )
					{
						if ( x.pitem_base_code == y.pitem_base_code && x.pitem_base_name == y.pitem_base_name )
						{
							if ( x.pitem_ratio_value == y.pitem_ratio_value )
							{
								if ( x.pitem_ratio_value>0 
								 && ( x.pitem_bltol_flag != y.pitem_bltol_flag || x.pitem_bltol_ptol != y.pitem_bltol_ptol || x.pitem_bltol_ntol != y.pitem_bltol_ntol || x.pitem_hot_main != y.pitem_hot_main )
								)
								{
									action.option = 2; // update qty
								}
								else
								{
									action.option = 0;
								}
							}
							else
							{
								if (x.pitem_ratio_value > 0 && y.pitem_ratio_value > 0 )
								{
									action.option = 2; // update qty
								}
								else if (x.pitem_ratio_value > 0 && y.pitem_ratio_value == 0 )
								{
									action.option = 1; // insert qty
								}
								else if (x.pitem_ratio_value == 0 && y.pitem_ratio_value > 0 )
								{
									action.option = 3; // delete qty
								}
								else
								{
									action.option = 0;
								}
							}
							
							match_found = true;
						}
						if ( match_found == true )
						{
							trace( "********Y found", y.pitem_base_code, y.pitem_ratio_value, action.option);
							break;
						}
						//trace( "********Y", y.pitem_base_code, y.pitem_ratio_value, action.option);
					}
					actions.addItem(action);
					if ( action.option == 1 )
					{
						x.pitem_prod_code = obj.prod_code;
						x.pitem_prod_name = obj.prod_name;
						x.pitem_cmpy_code = obj.prod_cmpycode;
						x.pitem_cmpy_name = obj.prod_cmpyname;
						x.pitem_prod_group = obj.prod_group;
						x.pitem_prod_class = obj.prod_class;
						x.pitem_ldtol_flag = obj.prod_ldtol_flag;
						x.pitem_ldtol_ptol = obj.prod_ldtol_ptol;
						x.pitem_ldtol_ntol = obj.prod_ldtol_ntol;
						x.pitem_prod_hazid = obj.prod_hazid;
					}
					items.addItem(Object(x));
					obj.has_items = 1;
					trace( "********X", x.pitem_base_code, x.pitem_ratio_value, "***********action", action.option);
				}
				obj.prod_items = items.source;
				obj.actions = actions.source;
				
				//nc.call( 'DrawerProductService.update', updateData, obj );
				updateAction.service( obj );
			}
			
			protected function updateData_resultHandler( ):void
			{
				clearDetail();
				if ( this.updateAction.dataString == "OK" )
				{
					global.msgSuccess(resourceManager.getString('default','MSG_UPDATE__SUCCESS'));
					this.drawerProductClassList.service( );
					this.genericProductList.service( );
				}
				else
				{
					global.msgFail(resourceManager.getString('default','ERROR_UPDATE__FAILURE'));
				}
				
				var cmpy:String;
				var prod:String;
				cmpy = drawerList[prod_cmpycode.selectedIndex].cmpy_code;
				prod = prod_code.text;
				
				currentState="normal";
				findByPrimaryKey( cmpy, prod );

				dataGrid.selectedIndex = -1;
				dataGrid.enabled=true;
			}
			
			private function doDelete(): void
			{
				var errors:String="";
				var index:int=0;
				
				
				/*
				TODO - is this product used by other records?
				*/
				if ( index > 0 )
				{
					var errorBox:MessageDialog = new MessageDialog( errors );
				}
				else
				{
					var canDelete:DeleteDialog = new DeleteDialog(deleteRecord, hasPassword);
				}
			}
			
			private function deleteRecord():void
			{
				var obj:Object = new Object();
				
				
				obj.prod_cmpycode = dataGrid.selectedItem.prod_cmpycode;
				obj.prod_code = dataGrid.selectedItem.prod_code;
				obj.prod_name = dataGrid.selectedItem.prod_name;
				obj.prod_group = dataGrid.selectedItem.prod_group;
				obj.prod_class = dataGrid.selectedItem.prod_class;
				obj.prod_hazid = dataGrid.selectedItem.prod_hazid;
				obj.prod_dglink = dataGrid.selectedItem.prod_dglink;
				
				//obj.prod_items = this.drawerProductItemGrid.dataProvider.toArray();
				
				//nc.call( 'DrawerProductService.delete', deleteData, obj );
				deleteAction.service( obj );
			}
			
			protected function deleteData_resultHandler( ):void
			{
				clearDetail();
				if ( this.deleteAction.dataString == "OK" )
				{
					global.msgSuccess(resourceManager.getString('default','MSG_DELETE__SUCCESS'));
					this.drawerProductClassList.service( );
					this.genericProductList.service( );
				}
				else
				{
					global.msgFail(resourceManager.getString('default','ERROR_DELETE__FAILURE'));
				}
				
				currentState="normal";
				this.startFiltering();
				dataGrid.selectedIndex = -1;
			}
			
			private function createGenProdRecord2():void
			{
				
				var obj:Object = new Object();
				
				obj.prod_class = fltr_prodclass.textInput.text;
							
				if (fltr_drawer.selectedIndex>=0)
				{
					obj.prod_cmpycode = drawerList[fltr_drawer.selectedIndex].cmpy_code;
				}
				else
				{
					obj.prod_cmpycode = "";
				}
				
				obj.prod_code = fltr_product.text;
				
				createGenProdAction.service( obj );
			}
			
			private function createGenProdRecord():void
			{
				
				var obj:Object = new Object();
				
				
				obj.prod_class = generic_product.textInput.text;
				
				if (prod_cmpycode.selectedIndex>=0)
				{
					obj.prod_cmpycode = drawerList[prod_cmpycode.selectedIndex].cmpy_code;
				}
				else
				{
					obj.prod_cmpycode = drawerList[0].cmpy_code;
				}
				
				obj.prod_code = prod_code.text;
				
				createGenProdAction.service( obj );
			}
			
			protected function createGenProdData_resultHandler( ):void
			{
				//clearDetail();
				//generic_product.selectedIndex = -1;
				//generic_product.textInput.text = "";
				if ( this.createGenProdAction.dataString == "OK" )
				{
					global.msgSuccess(resourceManager.getString('default','MSG_CREATE__SUCCESS'));
					this.drawerProductClassList.service( );
					this.genericProductList.service( );
				}
				else
				{
					global.msgFail(resourceManager.getString('default','ERROR_CREATE__FAILURE'));
				}
				
				//this.drawerProductClassList.service();
			}
			
			private function deleteGenProdRecord():void
			{
				
				var code:String = "";
				
				code = generic_product.textInput.text;
				
				deleteGenProdAction.service( code );
			}
			
			protected function deleteGenProdData_resultHandler( ):void
			{
				//clearDetail();
				//generic_product.selectedIndex = -1;
				generic_product.textInput.text = "";
				if ( this.deleteGenProdAction.dataString == "OK" )
				{
					global.msgSuccess(resourceManager.getString('default','MSG_DELETE__SUCCESS'));
					this.drawerProductClassList.service( );
					this.genericProductList.service( );
				}
				else
				{
					global.msgFail(resourceManager.getString('default','ERROR_DELETE__FAILURE'));
				}
				
				//this.drawerProductClassList.service();
			}
			
			private function checkDrawerProductKey():void
			{
				var obj:Object=new Object();
				
				if (prod_cmpycode.selectedIndex>=0)
				{
					obj.prod_cmpycode = drawerList[prod_cmpycode.selectedIndex].cmpy_code;
				}
				else
				{
					obj.prod_cmpycode = "-1";
				}
				
				obj.prod_code = this.prod_code.text;
				
				drawerProductKeyChecker.service( obj.prod_cmpycode, obj.prod_code );
			}
			
			protected function drawerProductKeyChecker_resultHandler( ):void
			{
				if ( drawerProductKeyChecker.dataInteger > 0 )
				{
					global.msgWarning( resourceManager.getString('default','ALERT__DRAWER_PRODUCT_EXIST') );
					this.btn_save.enabled = this.canCreate;
				}
				else
				{
					if ( this._saveButtonClicked == true )
					{
						this.createRecord();
					}
				}
				
				this._saveButtonClicked = false;
			}
			
			private function checkDrawerProductItemKey(base_prod:String):void
			{
				var obj:Object=new Object();
				
				if (prod_cmpycode.selectedIndex>=0)
				{
					obj.pitem_cmpy_code = drawerList[prod_cmpycode.selectedIndex].cmpy_code;
				}
				else
				{
					obj.pitem_cmpy_code = "-1";
				}
				
				obj.pitem_prod_code = this.prod_code.text;
				
				
				obj.pitem_base_code = base_prod;
				
				drawerProductKeyChecker.service( obj.pitem_cmpy_code, obj.pitem_prod_code );
				drawerProductItemKeyChecker.service( obj.pitem_cmpy_code, obj.pitem_prod_code, obj.pitem_base_code );
			}
			
			protected function drawerProductItemKeyChecker_resultHandler( ):void
			{
				if ( drawerProductItemKeyChecker.dataInteger > 0 )
				{
					//global.msgWarning( resourceManager.getString('default','ALERT__DRAWER_PRODUCT_ITEM_EXIST') );
				}
			}
			
			private function checkFields():int
			{
				var errors:String="";
				var index:int=0;
				
				if ( prod_cmpycode.selectedIndex == -1 )//< 0 )
				{
					index += 1;
					errors += String(index) + ". " + resourceManager.getString('default','PLEASE')+resourceManager.getString('default','SELECT')+resourceManager.getString('default','PROD_CMPYCODE') + "\n";
				}
				/*
				if ( prod_group.selectedIndex == -1 )//< 0 )
				{
					index += 1;
					errors += String(index) + ". " + resourceManager.getString('default','PLEASE')+resourceManager.getString('default','SELECT')+resourceManager.getString('default','PROD_GROUP') + "\n";
				}
				if ( prod_class.selectedIndex == -1 )
				{
					index += 1;
					errors += String(index) + ". " + resourceManager.getString('default','PLEASE')+resourceManager.getString('default','SELECT')+resourceManager.getString('default','PROD_CLASS') + "\n";
				}
				if ( prod_hazid.selectedIndex == -1 )//< 0 )
				{
					index += 1;
					errors += String(index) + ". " + resourceManager.getString('default','PLEASE')+resourceManager.getString('default','SELECT')+resourceManager.getString('default','PROD_HAZID') + "\n";
				}
				*/
				if ( prod_ldtol_flag.selected == true )
				{
					if ( StringUtil.trim(prod_ldtol_ptol.text).length == 0 )
					{
						index += 1;
						errors += String(index) + ". " + resourceManager.getString('default','PLEASE')+resourceManager.getString('default','ENTER')+resourceManager.getString('default','PROD_LDTOL_PTOL') + "\n";
					}
					if ( StringUtil.trim(prod_ldtol_ntol.text).length == 0 )
					{
						index += 1;
						errors += String(index) + ". " + resourceManager.getString('default','PLEASE')+resourceManager.getString('default','ENTER')+resourceManager.getString('default','PROD_LDTOL_NTOL') + "\n";
					}
				}
				
				if ( this.isHotVolumeCheckEnabled && this.prod_check_hot_volume.selected )
				{
					if ( StringUtil.trim(this.prod_15_density.text).length == 0 )
					{
						index += 1;
						errors += String(index) + ". " + resourceManager.getString('default','ALERT__PROD_DENS_BLANK') + "\n";
					}
					else
					{
						var dens:Number = Number(this.prod_15_density.text);
						if ( !( dens >= DP_DENS_LO && dens <= DP_DENS_HI ) )
						{
							index += 1;
							errors += String(index) + ". " + resourceManager.getString('default','ALERT__PROD_DENS_OUTLIMIT') + "\n";
						}
					}
					
					if ( StringUtil.trim(this.prod_hot_temp.text).length == 0 )
					{
						index += 1;
						errors += String(index) + ". " + resourceManager.getString('default','ALERT__PROD_TEMP_BLANK') + "\n";
					}
					else
					{
						var temp:Number = Number(this.prod_hot_temp.text);
						if ( !( temp >= DP_TEMP_LO && temp <= DP_TEMP_HI ) )
						{
							index += 1;
							errors += String(index) + ". " + resourceManager.getString('default','ALERT__PROD_TEMP_OUTLIMIT') + "\n";
						}
					}
				}
				
				
				if ( index > 0 )
				{
					var errorBox:MessageDialog = new MessageDialog( errors );
				}
				
				return index;
			}
/* 			
			private function checkDrawerProductKeyBeforeCreate():void
			{
				var obj:Object=new Object();
				
				if (prod_cmpycode.selectedIndex>=0)
				{
					obj.prod_cmpycode = drawerList[prod_cmpycode.selectedIndex].cmpy_code;
				}
				else
				{
					obj.prod_cmpycode = "-1";
				}
				
				obj.prod_code = this.prod_code.text;
				
				drawerProductKeyCheckerBeforeCreate.service( obj.prod_cmpycode, obj.prod_code );
			}
			
			protected function drawerProductKeyCheckerBeforeCreate_resultHandler( ):void
			{
				if ( drawerProductKeyCheckerBeforeCreate.dataInteger > 0 )
				{
					global.msgWarning( resourceManager.getString('default','ALERT__DRAWER_PRODUCT_EXIST') );
					//var errorBox:MessageDialog = new MessageDialog( resourceManager.getString('default','ALERT__DRAWER_PRODUCT_EXIST') );
					this.btn_save.enabled = this.canCreate;
				}
				else
				{
					createRecord();
				}
			}
 */			
			private function createRecord():void
			{
				/* var prod_num:int;
				
				prod_num = drawerProductKeyChecker.dataInteger;
				if ( prod_num > 0 )
				{
					var errorBox:MessageDialog = new MessageDialog( resourceManager.getString('default','ALERT__DRAWER_PRODUCT_EXIST') );
					return;
				} */
				
				if ( checkAvaiableItems() == 0 )
				{
					var errorBox2:MessageDialog = new MessageDialog( resourceManager.getString('default','ALERT__DRAWER_PRODUCT_ITEM_ATLEAST') );
					this.btn_save.enabled = this.canCreate;
					return;
				}
				
				if ( this.checkFields() > 0 )
				{
					this.btn_save.enabled = this.canCreate;
					return;
				}
				
				if ( this.checkItemFields() == false )
				{
					this.btn_save.enabled = this.canCreate;
					return;
				}
				
				var obj:Object = new Object();
				
				if (prod_name.text.length > 20) {
					var errorBox2:MessageDialog = new MessageDialog( "Product Name must be less than 20 characters." );
					this.btn_save.enabled = this.canCreate;
					return;
				}
				
				obj.prod_code = prod_code.text;
				obj.prod_name = prod_name.text;
				obj.prod_desc = prod_desc.text;
				
				if (prod_cmpycode.selectedIndex>=0)
				{
					obj.prod_cmpycode = drawerList[prod_cmpycode.selectedIndex].cmpy_code;
					obj.prod_cmpyname = drawerList[prod_cmpycode.selectedIndex].cmpy_name;
				}
				else
				{
					obj.prod_cmpycode = drawerList[0].cmpy_code;
					obj.prod_cmpyname = drawerList[0].cmpy_name;
				}
				
				if (prod_group.selectedIndex>=0)
				{
					obj.prod_group = drawerProductGroupList[prod_group.selectedIndex].pgr_code;
				}
				else
				{
					obj.prod_group = "";//drawerProductGroupList[0].pgr_code;
				}
				
				if (prod_class.selectedIndex>=0)
				{
					obj.prod_class = drawerProductClassList[prod_class.selectedIndex].gen_prod_code;
				}
				else
				{
					obj.prod_class = "";//drawerProductClassList[0].gen_prod_code;
					if ( prod_class.selectedIndex != -1 )
					{
						obj.prod_class = prod_class.textInput.text;
					}
				}
				
				if (prod_hazid.selectedIndex>=0)
				{
					obj.prod_hazid = drawerProductHazchemList[prod_hazid.selectedIndex].hzcf_id;
				}
				else
				{
					obj.prod_hazid = "";//drawerProductHazchemList[0].hzcf_id;
				}
				
				obj.prod_is_compliant = (prod_is_compliant.selected==true?1:0);
				
				obj.prod_ldtol_flag = (prod_ldtol_flag.selected==true?"on":"");
				
				obj.prod_ldtol_ptol = prod_ldtol_ptol.text;
				obj.prod_ldtol_ntol = prod_ldtol_ntol.text;
				
				if (prod_dglink.selectedIndex>=0)
				{
					obj.prod_dglink = drawerProductDGList[prod_dglink.selectedIndex].dg_material;
				}
				else
				{
					obj.prod_dglink = "";//dataGrid.selectedItem.prod_hazid;
				}
				
				obj.prod_check_hot_volume = (this.prod_check_hot_volume.selected==true?1:0);
				obj.prod_15_density = this.prod_15_density.text;
				obj.prod_hot_temp = this.prod_hot_temp.text;
				
				obj.prod_check_2nd_drawer = (this.prod_check_2nd_drawer.selected==true?1:0);
				if (prod_2nd_drawer.selectedIndex>=0)
				{
					obj.prod_2nd_drawer = drawerList[prod_2nd_drawer.selectedIndex].cmpy_code;
				}
				else
				{
					obj.prod_2nd_drawer = "";
				}
				if (prod_2nd_product.selectedIndex>=0)
				{
					obj.prod_2nd_product = productList[prod_2nd_product.selectedIndex].prod_code;
				}
				else
				{
					obj.prod_2nd_product = "";
				}
				
				
				obj.has_items = 0;
				var items:ArrayCollection=new ArrayCollection();
				var x:Object;
				for each ( x in this.drawerProductItemGrid.dataProvider)
				{
					trace( "********X", x.pitem_base_code, x.pitem_ratio_value);
					if ( x.pitem_ratio_value > 0 )
					{
						x.pitem_prod_code = obj.prod_code;
						x.pitem_prod_name = obj.prod_name;
						x.pitem_cmpy_code = obj.prod_cmpycode;
						x.pitem_cmpy_name = obj.prod_cmpyname;
						x.pitem_prod_group = obj.prod_group;
						x.pitem_prod_class = obj.prod_class;
						x.pitem_ldtol_flag = obj.prod_ldtol_flag;
						x.pitem_ldtol_ptol = obj.prod_ldtol_ptol;
						x.pitem_ldtol_ntol = obj.prod_ldtol_ntol;
						x.pitem_prod_hazid = obj.prod_hazid;
						
						
						items.addItem(x);
						obj.has_items = 1;
					}
				}
				obj.prod_items = items.source;
				
				//nc.call( 'DrawerProductService.create', createData, obj );
				createAction.service( obj );
			}
			
			protected function createData_resultHandler( ):void
			{
				clearDetail();
				if ( this.createAction.dataString == "OK" )
				{
					global.msgSuccess(resourceManager.getString('default','MSG_CREATE__SUCCESS'));
					this.drawerProductClassList.service( );
					this.genericProductList.service( );
				}
				else
				{
					global.msgFail(resourceManager.getString('default','ERROR_CREATE__FAILURE'));
				}
				
				var cmpy:String;
				var prod:String;
				cmpy = drawerList[prod_cmpycode.selectedIndex].cmpy_code;
				prod = prod_code.text;
				
				currentState="normal";
				findByPrimaryKey( cmpy, prod );
				
				dataGrid.selectedIndex = -1;
				dataGrid.enabled=true;
			}
			
			protected function createNewRecord(event:MouseEvent):void
			{	
				idx=dataGrid.selectedIndex;
				dataGrid.ensureCellIsVisible(idx);
				currentState="create";
				dataGrid.enabled=false;
				this.btn_save.enabled = this.canCreate;
				
				if ( _formColumnSettingsString.length > 0 )
				{
					global.adjustFormFieldSettings( _formColumnSettingsString.substr(1), this );
				}
				
				if ( _formButtonSettingsString.length > 0 )
				{
					global.adjustFormButtonSettings( _formButtonSettingsString.substr(1), this );
				}
				
				this.drawerProductItemList.service( "-1", "-1"  );
				//this.equipCmptsList.visible = false;
			}
			
			
			public function getArrayCollection(obj:Object):ArrayCollection
			{
				var temp:ArrayCollection = new ArrayCollection;
				temp.addItem( obj );
				return temp;
			}
			
			public function convertDateToLocaleString(dt:String):String
			{
				var dt_string:String;
				var dt_date:Date = new Date();
				
				dt_string = ""; 
				if ((dt!=null) && (dt!='null') && (dt!=''))
				{
					dt_date = DateField.stringToDate(dt,"YYYY-MM-DD");
					dt_string = dateFormatter.format( dt_date);
				}
				//trace ("convertDateToLocale", dt, dt_date, dt_string);
				return dt_string;
			}
			
			public function convertDateToLocale(dt:String):Date
			{
				var dt_date:Date = new Date();
				
				if ((dt!=null) && (dt!='null') && (dt!=''))
				{
					dt_date = DateField.stringToDate(dt,"YYYY-MM-DD");
				}
				//trace ("convertDateToLocale", dt, dt_date, dt_string);
				return dt_date;
			}
			
			public function convertDateToLocaleLong(dt:String):Date
			{
				var dt_date:Date = new Date();
				
				if ((dt!=null) && (dt!='null') && (dt!=''))
				{
					//dt_date = DateField.stringToDate(dt,"YYYY-MM-DD HH:NN:SS");
					dt_date = DateTimeFunc.createDate(
						int(dt.substr(0, 4))
						, int(dt.substr(5, 2))
						, int(dt.substr(8, 2))
						, int(dt.substr(11, 2))
						, int(dt.substr(14, 2))
						, int(dt.substr(17, 2))
					);
				}
				//trace ("convertDateToLocale", dt, dt_date, dt_string);
				return dt_date;
			}
			
			public function getDefaultDate():Date
			{
				var now_date:Date;
				var def_date:Date;
				
				now_date = new Date();
				def_date = DateTimeFunc.dateAdd( "yyyy", 1, now_date );
				
				//trace ("getDefaultDate", now_date, def_date);
				
				return def_date;
			}
			
			protected function view_detailsHandler(event:FlexEvent):void
			{
			}
			
			protected function unitLabelFunction(item:Object, column:GridColumn):String
			{
				var ret:String = 'l(amb)';
				//for each(var obj:Object in lookupDrawerProductUnit.lastResult)
				for each(var obj:Object in this.productUnitList)
				{
					if(obj.unit_id == item [column.dataField]) ret=obj.unit_name;
				}
				return ret;
			}
			
			protected function dateLabelFunction(item:Object, column:GridColumn):String
			{
				var ret:String = "";
				
				ret = item [column.dataField];
				return ret;
			}
			
			protected function lookupProductUnit_resultHandler( ):void
			{
				global.prodUnits = this.productUnitList;
			}
			
			protected function save_clickHandler():void
			{
				this.btn_save.enabled = false;
				doSave();
				//this.confirmSave = new ActionDialog( doSave, doNothing, resourceManager.getString('default','CONFIRM_SAVE_RATIOS') );
				
				//this.startLoadingPages();
			}
			
			protected function doSave():void
			{
				if (currentState == "create")
				{
					//createRecord();
					this._saveButtonClicked = true;
					checkDrawerProductKey();
					//checkDrawerProductKeyBeforeCreate();
				}
				if (currentState == "edit")
				{
					editRecord();
				}
				if (currentState == "detail")
				{
					editRecord();
				}
			}
			
			public function closeDialogHandler():void
			{
				/* this.mainListSelection = this.dataGrid.selectedIndex;
				this.currentState = "normal";
				this.dataGrid.selectedIndex = -1;
				this.startFiltering(); */
				this.drawerProductClassList.service( );
				this.genericProductList.service( );
			}
			
			public function closeDialogHandlerFromDG():void
			{
				this.drawerProductDGList.service( );
			}
			
			
			public function checkItemFields():Boolean
			{
				var x:Object;
				var obj:Object;
				var errGrid:ArrayCollection=new ArrayCollection();
				
				for each ( x in this.drawerProductItemGrid.dataProvider)
				{
					trace( "********X", x.pitem_base_code, x.pitem_ratio_value);
					if ( tools.isValueNumeric( x.pitem_ratio_value ) == false )
					{
						//global.msgFail("Please enter the number for 'Ratio' of '" + x.pitem_base_code + " - " + x.pitem_base_name + "'");
						//return false;
						obj=new Object();
						obj['name'] = resourceManager.getString('default','PITEM_RATIO_VALUE');
						obj['description'] = "Please enter the number for 'Ratio' of '" + x.pitem_base_code + " - " + x.pitem_base_name + "'";
						errGrid.addItem( obj );
					}
					else
					{
						if ( int( x.pitem_ratio_value ) < 0 || x.pitem_ratio_value.search("-")>=0 )
						{
							//global.msgFail("Please enter the number greater than zero for 'Ratio' of '" + x.pitem_base_code + " - " + x.pitem_base_name + "'");
							//return false;
							obj=new Object();
							obj['name'] = resourceManager.getString('default','PITEM_RATIO_VALUE');
							obj['description'] = "Please enter the number greater than zero for 'Ratio' of '" + x.pitem_base_code + " - " + x.pitem_base_name + "'";
							errGrid.addItem( obj );
						}
						if ( int( x.pitem_ratio_value ) > 999999999 )
						{
							//global.msgFail("Please enter the number greater than zero for 'Ratio' of '" + x.pitem_base_code + " - " + x.pitem_base_name + "'");
							//return false;
							obj=new Object();
							obj['name'] = resourceManager.getString('default','PITEM_RATIO_VALUE');
							obj['description'] = "Please enter the number less than 999999999 for 'Ratio' of '" + x.pitem_base_code + " - " + x.pitem_base_name + "'";
							errGrid.addItem( obj );
						}
					}
					
					if ( tools.isValueNumeric( x.pitem_bltol_ptol ) == false )
					{
						//global.msgFail("Please enter the number for 'Blend Tolerance Upper Limit' of '" + x.pitem_base_code + " - " + x.pitem_base_name + "'");
						//return false;
						obj=new Object();
						obj['name'] = resourceManager.getString('default','PITEM_BLTOL_PTOL');
						obj['description'] = "Please enter the number for 'Blend Tolerance Upper Limit' of '" + x.pitem_base_code + " - " + x.pitem_base_name + "'";
						errGrid.addItem( obj );
					}
					else
					{
						if ( int( x.pitem_bltol_ptol ) < 0 || x.pitem_bltol_ptol.search("-")>=0 )
						{
							//global.msgFail("Please enter the number greater than zero for 'Blend Tolerance Upper Limit' of '" + x.pitem_base_code + " - " + x.pitem_base_name + "'");
							//return false;
							obj=new Object();
							obj['name'] = resourceManager.getString('default','PITEM_BLTOL_PTOL');
							obj['description'] = "Please enter the number greater than zero for 'Blend Tolerance Upper Limit' of '" + x.pitem_base_code + " - " + x.pitem_base_name + "'";
							errGrid.addItem( obj );
						}
					}
					
					if ( tools.isValueNumeric( x.pitem_bltol_ntol ) == false )
					{
						//global.msgFail("Please enter the number for 'Blend Tolerance Lower Limit' of '" + x.pitem_base_code + " - " + x.pitem_base_name + "'");
						//return false;
						obj=new Object();
						obj['name'] = resourceManager.getString('default','PITEM_BLTOL_NTOL');
						obj['description'] = "Please enter the number for 'Blend Tolerance Lower Limit' of '" + x.pitem_base_code + " - " + x.pitem_base_name + "'";
						errGrid.addItem( obj );
					}
					else
					{
						if ( int( x.pitem_bltol_ntol ) > 0 )
						{
							//global.msgFail("Please enter the number less than zero for 'Blend Tolerance Lower Limit' of '" + x.pitem_base_code + " - " + x.pitem_base_name + "'");
							//return false;
							obj=new Object();
							obj['name'] = resourceManager.getString('default','PITEM_BLTOL_NTOL');
							obj['description'] = "Please enter the number less than zero for 'Blend Tolerance Lower Limit' of '" + x.pitem_base_code + " - " + x.pitem_base_name + "'";
							errGrid.addItem( obj );
						}
					}
					
					if ( x.pitem_bltol_flag == "1" )
					{
						if ( (x.pitem_bltol_ntol == "" || x.pitem_bltol_ntol == null) )
						{
							//global.msgFail("It is mandatory for 'Blend Tolerance Lower Limit' of '" + x.pitem_base_code + " - " + x.pitem_base_name + "'");
							//return false;
							obj=new Object();
							obj['name'] = resourceManager.getString('default','PITEM_BLTOL_NTOL');
							obj['description'] = "It is mandatory for 'Blend Tolerance Lower Limit' of '" + x.pitem_base_code + " - " + x.pitem_base_name + "'";
							errGrid.addItem( obj );
						}
						if ( (x.pitem_bltol_ptol == "" || x.pitem_bltol_ptol == null) )
						{
							//global.msgFail("It is mandatory for 'Blend Tolerance Upper Limit' of '" + x.pitem_base_code + " - " + x.pitem_base_name + "'");
							//return false;
							obj=new Object();
							obj['name'] = resourceManager.getString('default','PITEM_BLTOL_PTOL');
							obj['description'] = "It is mandatory for 'Blend Tolerance Upper Limit' of '" + x.pitem_base_code + " - " + x.pitem_base_name + "'";
							errGrid.addItem( obj );
						}
					}
				}
				
				
				if ( errGrid.length > 0 )
				{
					errorDialog = new ErrorDialog( closeErrorDialog, resourceManager.getString('default','VALIDATION__PROMPT'), errGrid, resourceManager.getString('default','VALIDATION__TITLE'));
					return false;
				}
				else
				{
					return true;
				}
			}
			
			public function closeErrorDialog():void
			{
				PopUpManager.removePopUp(this.errorDialog.dialog );	
			}
			
			public function checkItemFields2():Boolean
			{
				var x:Object;
				var errGrid:ArrayCollection=new ArrayCollection();
				
				for each ( x in this.drawerProductItemGrid.dataProvider)
				{
					trace( "********X", x.pitem_base_code, x.pitem_ratio_value);
					if ( tools.isValueNumeric( x.pitem_ratio_value ) == false )
					{
						global.msgFail("Please enter the number for 'Ratio' of '" + x.pitem_base_code + " - " + x.pitem_base_name + "'");
						return false;
					}
					else
					{
						if ( int( x.pitem_ratio_value ) < 0 || x.pitem_ratio_value.search("-")>=0 )
							//if ( int( x.pitem_ratio_value ) < 0  )
						{
							global.msgFail("Please enter the number greater than zero for 'Ratio' of '" + x.pitem_base_code + " - " + x.pitem_base_name + "'");
							return false;
						}
					}
					if ( tools.isValueNumeric( x.pitem_bltol_ptol ) == false )
					{
						global.msgFail("Please enter the number for 'Blend Tolerance Upper Limit' of '" + x.pitem_base_code + " - " + x.pitem_base_name + "'");
						return false;
					}
					else
					{
						if ( int( x.pitem_bltol_ptol ) < 0 || x.pitem_bltol_ptol.search("-")>=0 )
						{
							global.msgFail("Please enter the number greater than zero for 'Blend Tolerance Upper Limit' of '" + x.pitem_base_code + " - " + x.pitem_base_name + "'");
							return false;
						}
					}
					if ( tools.isValueNumeric( x.pitem_bltol_ntol ) == false )
					{
						global.msgFail("Please enter the number for 'Blend Tolerance Lower Limit' of '" + x.pitem_base_code + " - " + x.pitem_base_name + "'");
						return false;
					}
					else
					{
						if ( int( x.pitem_bltol_ntol ) > 0 )
						{
							global.msgFail("Please enter the number less than zero for 'Blend Tolerance Lower Limit' of '" + x.pitem_base_code + " - " + x.pitem_base_name + "'");
							return false;
						}
					}
					if ( x.pitem_bltol_flag == "1" )
					{
						if ( (x.pitem_bltol_ntol == "" || x.pitem_bltol_ntol == null) )
						{
							global.msgFail("It is mandatory for 'Blend Tolerance Lower Limit' of '" + x.pitem_base_code + " - " + x.pitem_base_name + "'");
							return false;
						}
						if ( (x.pitem_bltol_ptol == "" || x.pitem_bltol_ptol == null) )
						{
							global.msgFail("It is mandatory for 'Blend Tolerance Upper Limit' of '" + x.pitem_base_code + " - " + x.pitem_base_name + "'");
							return false;
						}
					}
				}
				
				return true;
			}
			
			public function checkAvaiableItems():int
			{
				var x:Object;
				var num:int=0;
				
				for each ( x in this.drawerProductItemGrid.dataProvider)
				{
					if ( tools.isValueNumeric( x.pitem_ratio_value ) == true && int(x.pitem_ratio_value) != 0 )
					{
						num += 1;
					}
				}
				
				return num;
			}
			
			protected function killBtn_clickHandler(event:MouseEvent):void
			{
				//interruptor=true;
				pagedRecords.interruptor=true;
				trace("WTF >>>>>>>>>>");
			}
			
			protected function resumeBtn_clickHandler(event:MouseEvent):void
			{
				//interruptor=false;
				pagedRecords.interruptor=false;
				
				this.resumeLoadingPages();
				trace("RESUME >>>>>>>>>>");
			}
			
			protected function resumeLoadingPages():void
			{
				killBtn.setStyle("chromeColor","0xff0000");
				this.killBtn.includeInLayout=true;
				this.killBtn.visible = true;
				this.killBtn.enabled = true;
				
				resumeBtn.setStyle("chromeColor","0x00ff00");
				this.resumeBtn.includeInLayout=true;
				this.resumeBtn.visible = true;
				this.resumeBtn.enabled = false;
				
				this.btn_create.enabled = false
				this.btn_export.enabled = false;
				this.dataGrid.enabled = false;
				this.toolbar.enabled = false;
				
				//pb.values(pagedRecords.length,totalLength);
				pb.values(pagedRecords.length,pagedRecords.totalLength);
				//currentPage = int(this.pagedRecords.length/currentPageSize) + 1;
				//this.pagedRecords.service( currentFields, currentTypes, currentSorts, currentOrders, currentPage, currentPageSize );
				this.pagedRecords.listService( currentFields, currentTypes, currentSorts, currentOrders );
			}
			
			protected function adjustSecondDrawerLink(code:String):void
			{
				var linkToSecondDrawerFlag:Boolean = false;
				var linkedSecondDrawer:String = "";
				
				for each( var o:Object in companyConfigList.source )
				{
					if ( o['cmpy_code'] == code )
					{
						if ( o['config_key'] == 'CMPY_2ND_DRAWER_FLAG' )
						{
							linkToSecondDrawerFlag = o['config_value']=='Y'?true:false;
						}
						if ( o['config_key'] == 'CMPY_2ND_DRAWER' )
						{
							linkedSecondDrawer = o['config_value'];
							if ( linkedSecondDrawer == null )
							{
								linkedSecondDrawer = "";
							}
						}
					}
				}
				
				if ( linkToSecondDrawerFlag == true )
				{
					this.prod_check_2nd_drawer.enabled = (true&&isExtBlendAllowed);
					this.prod_2nd_drawer.enabled = (this.prod_check_2nd_drawer.selected&&isExtBlendAllowed);
					this.prod_2nd_product.visible = (this.prod_check_2nd_drawer.selected&&isExtBlendAllowed);
					this.prod_2nd_product.enabled = (this.prod_check_2nd_drawer.selected&&isExtBlendAllowed);
					if ( currentState == "create" )
					{
						this.prod_2nd_drawer.selectedIndex = tools.getItemIndexFromCode( linkedSecondDrawer, this.drawerList, "cmpy_code");
					}
				}
				else
				{
					this.prod_check_2nd_drawer.enabled = false;
					this.prod_2nd_drawer.enabled = false;
					this.prod_2nd_product.visible = false;
					this.prod_2nd_product.enabled = false;
				}
			}
			
			protected function adjustToleranceFields():void
			{
				var obj:Object;
				
				if (prod_cmpycode.selectedIndex>=0)
				{
					obj = drawerList[prod_cmpycode.selectedIndex];
				}
				else
				{
					obj = null;
				}
				
				if ( obj != null && obj.hasOwnProperty( "cmpy_ldtol_flag" ) )
				{
					this.prod_ldtol_flag.enabled = Boolean( int(obj["cmpy_ldtol_flag"]) );
				}
				else
				{
					this.prod_ldtol_flag.enabled = false;
				}
				//this.prod_ldtol_ntol.required = this.prod_ldtol_flag.enabled;
				//this.prod_ldtol_ptol.required = this.prod_ldtol_flag.enabled;
				this.prod_ldtol_ntol.required = this.prod_ldtol_flag.selected;
				this.prod_ldtol_ptol.required = this.prod_ldtol_flag.selected;
				
				
				var bltol_flag:Boolean;
				if ( obj != null && obj.hasOwnProperty( "cmpy_bltol_flag" ) )
				{
					bltol_flag = Boolean( int(obj["cmpy_bltol_flag"]) );
				}
				else
				{
					bltol_flag = false;
				}
				
				var j:int;
				for (j=0; j < this.drawerProductItemGrid.columns.length; j++)
				{
					var cln:GridColumn = drawerProductItemGrid.columns.getItemAt(j) as GridColumn;
					if ( cln.dataField == "pitem_bltol_flag" )
					{
						cln.editable = bltol_flag;
						break;
					}
				}
				
				if ( obj != null && obj.hasOwnProperty( "cmpy_code" ) )
				{
					adjustSecondDrawerLink(obj["cmpy_code"]);
				}
				else
				{
					adjustSecondDrawerLink("-1");
				}
			}
			
			protected function prod_ldtol_flag_clickHandler(event:MouseEvent):void
			{
				// TODO Auto-generated method stub
				this.prod_ldtol_ntol.required = this.prod_ldtol_flag.selected;
				this.prod_ldtol_ptol.required = this.prod_ldtol_flag.selected;
			}
			
			protected function toggleGenericProductButtons():void
			{
				trace("in.............................toggleGenericProductButtons", generic_product.selectedIndex, generic_product.dataProvider.length);
				
				if ( this.canCreate == true && generic_product.selectedIndex == -3 && generic_product.textInput.text.length>0 )
				//if ( this.canCreate == true && generic_product.selectedIndex == -3 && generic_product.textInput.text.length>0 && generic_product.dataProvider.length==0 )
				{
					canCreateGenProd = true;
				}
				else
				{
					canCreateGenProd = false;
				}
				
				if ( this.canDelete == true && generic_product.selectedIndex >=0 && generic_product.selectedItem.prod_count==0 )
				{
					canDeleteGenProd = true;
				}
				else
				{
					canDeleteGenProd = false;
					if ( this.canDelete == true && generic_product.selectedIndex >=0 )
					{
						global.msgWarning("This generic name hase been used by "+String(generic_product.selectedItem.prod_count)+" drawer products therefore cannot be deleted");
					}
				}
				
				this.btn_createGenProd.enabled = canCreateGenProd;
				this.btn_deleteGenProd.enabled = canDeleteGenProd;
				trace("in.............................toggleGenericProductButtons2", generic_product.selectedIndex, generic_product.dataProvider.length, canCreateGenProd, canDeleteGenProd);
				
			}
			
			protected function generic_product_changeHandler(event:IndexChangeEvent):void
			{
				this.toggleGenericProductButtons();
			}
			
			public function goToGenericProducts():void
			{
				
				this.genericProductPopup.popupTitle = resourceManager.getString('default','m_genericproducts');
				this.genericProductPopup.setSecurity( this.readOnly, this.canUpdate, this.canCreate, this.canDelete, this.hasPassword );
				
				this.genericProductPopup.parentWidth = this.width*0.8;
				this.genericProductPopup.parentHeight = this.height*0.8;
				
				trace ( "*******************Pop up a screen to make generic products!");
				genericProductPopup.openDialog();
				
				var params:Object = new Object();
				
				genericProductPopup.setFilters( params ); 
			}
			
			public function goToProductDGLinks():void
			{
				this.productDGLinkPopup
				this.productDGLinkPopup.popupTitle = resourceManager.getString('default','DANGEROUSGOODS.LABEL.TITLE');
				this.productDGLinkPopup.setSecurity( this.readOnly, this.canUpdate, this.canCreate, this.canDelete, this.hasPassword );
				
				this.productDGLinkPopup.parentWidth = this.width;
				this.productDGLinkPopup.parentHeight = this.height;
				
				trace ( "*******************Pop up a screen to make generic products!");
				productDGLinkPopup.openDialog();
				
				var params:Object = new Object();
				
				productDGLinkPopup.setFilters( params ); 
			}
			
			protected function base_product_addHandler():void
			{
				var temp:ArrayCollection = new ArrayCollection;
				var used:Boolean;
				var x:Object;
				var y:Object;
				
				for each(x in drawerProductItemInitList)
				{
					if ( this.base_product.selectedIndex>=0 &&  x.pitem_base_code == this.base_product.selectedItem.base_code )
					{
						this.originalItems.addItem(ObjectUtil.copy(x));
						this.drawerProductItemGrid.dataProvider.addItem(x);
						break;
					}
				}
				
				this.adjustBaseProductList();
				this.adjustHotTempCheckFlag();
			}
			
			protected function adjustBaseProductList():void
			{
				if ( currentState != 'edit' && currentState != 'create' )
				{
					return;
				}
				
				this.availBaseProducts.removeAll();
				
				for each( var o:Object in this.baseProductList )
				{
					var used:Boolean=false;
					for each( var r:Object in this.drawerProductItemGrid.dataProvider )
					//for each( var r:Object in this.drawerProductItemList )
					{
						if ( o.hasOwnProperty("base_code") && r.hasOwnProperty("pitem_base_code") && o.base_code == r.pitem_base_code )
						{
							used = true;
							break;
						}
					}
					if ( used == false )
					{
						this.availBaseProducts.addItem(ObjectUtil.copy(o));
					}
				}
				
				base_product.dataProvider = null;
				base_product.dataProvider = this.availBaseProducts;
			}
			
			protected function adjustHotTempCheckFlag():void
			{
				var hotFound:Boolean=false;
				
				for each ( var o:Object in this.drawerProductItemGrid.dataProvider )
				{
					if ( o != null && (o.hasOwnProperty("pitem_hot_check") && o["pitem_hot_check"] == 1) && (o.hasOwnProperty("pitem_ratio_value") && o["pitem_ratio_value"] > 0) )
					{
						hotFound = true;
						break;
					}
				}
				
				this.prod_check_hot_volume.selected = hotFound;
			}
			
			protected function toggleValidationRequired():void
			{
				if( StringUtil.trim( this.prod_ldtol_ntol.text ).length > 0 )
				{
					this.prod_ldtol_ntol.required = true;
				}
				else
				{
					this.prod_ldtol_ntol.required = false;
				}
				
				if( StringUtil.trim( this.prod_ldtol_ptol.text ).length > 0 )
				{
					this.prod_ldtol_ptol.required = true;
				}
				else
				{
					this.prod_ldtol_ptol.required = false;
				}
			}
			
			protected function prod_code_focusOutHandler(event:FocusEvent):void
			{
				// TODO Auto-generated method stub
				trace("..................prod_code_focusOutHandler.................", event.currentTarget, event.relatedObject, event.target );
			}
			
			
			protected function adjustSecondProduct():void
			{
				if ( this.prod_2nd_drawer.selectedIndex >= 0 )
				{
					this.productList.service( this.prod_2nd_drawer.selectedItem.cmpy_code );
				}
				else
				{
					this.productList.service( "-1" );
				}
			}
			
			protected function prod_2nd_drawer_changeHandler(event:IndexChangeEvent):void
			{
				// TODO Auto-generated method stub
				this.adjustSecondProduct();
			}
			
			protected function prod_2nd_drawer_valueCommitHandler(event:FlexEvent):void
			{
				// TODO Auto-generated method stub
				this.adjustSecondProduct();
			}
			
			protected function drawerProductItemGrid_gridItemEditorSessionSaveHandler(event:GridItemEditorEvent):void
			{
				this.adjustHotTempCheckFlag();
				
				// Need make sure the hot main flag is unique for the main base product
				
				if ( event == null )
				{
					return;
				}
				else
				{
					if ( event.column.dataField != 'pitem_hot_main' )
					{
						return;
					}
				}
				
				if ( event.rowIndex < 0 || event.rowIndex >= drawerProductItemGrid.dataProviderLength )
				{
					return;
				}
				
				var currRow:Object=null;
				currRow = this.drawerProductItemGrid.dataProvider.getItemAt( event.rowIndex );
				if ( currRow == null )
				{
					return;
				}
				else
				{
					if ( currRow.hasOwnProperty("pitem_hot_main") == false )
					{
						return;
					}
					else
					{
						if ( currRow.pitem_hot_main == 'N' || currRow.pitem_hot_main == '0' )
						{
							return;
						}
					}
				}
				
				var i:int;
				for ( i=0; i<drawerProductItemGrid.dataProviderLength; i++ )
				{
					if ( i == event.rowIndex )
					{
						continue;
					}
					var o:Object = this.drawerProductItemGrid.dataProvider.getItemAt( i );
					if ( o != null )
					{
						if ( o.hasOwnProperty("pitem_hot_main") && (o["pitem_hot_main"]=='Y' || o["pitem_hot_main"]=='1') )
						{
							o["pitem_hot_main"] = 'N';
						}
					}
				}
				
				drawerProductItemGrid.invalidateCell( -1, event.columnIndex );
			}
			
		]]>
	</fx:Script>
	<fx:Declarations>
		<s:DateTimeFormatter id="dateFormatter" locale="{LocaleID.DEFAULT}" dateStyle="short" timeStyle="none"/>
		<s:DateTimeFormatter id="dateConvert" dateTimePattern="yyyy-MM-dd"/>
		<s:DateTimeFormatter id="dateConvertLong" dateTimePattern="yyyy-MM-dd HH:mm:ss"/>
		<components:ValidationGroup id="vg" action="{save_clickHandler}" defaultButton="{btn_save}" isProtected="{hasPassword}"/>
	</fx:Declarations>
	<s:Panel id="panel" width="100%" height="100%"
			 skinClass="skins.WidgetPanelSkin"
			 skinClass.widget="skins.NullSkin">
		<s:layout>
			<s:VerticalLayout/>
		</s:layout>
		<s:VGroup width="100%" id="toolbar"  >
			<s:HGroup gap="5" paddingBottom="2" paddingTop="2" width="100%">
				<components:DKI_ComboBox id="fltr_drawer" width="180" height="100%" enabled="true"
										change="fltr_drawer_changeHandler(event)" cornerRadius="10"
										labelField="cmpy_name" prompt="{resourceManager.getString('default','PROD_CMPYNAME')+resourceManager.getString('default','FILTER')}"
										dataProvider="{drawerList}"/>
				<components:DKI_ValidatorInput id="fltr_product" validationType="search" minWidth="160" height="{labelHeight}" width="100%"
											   keyUp="fltr_product_keyUpHandler(event)"  
											   prompt="{resourceManager.getString('default','PROD_CODE')+'/'+resourceManager.getString('default','PROD_NAME')+resourceManager.getString('default','FILTER')}"/>
				
				<components:DKI_DropDownList id="fltr_prodgroup" width="130" height="100%"
											 change="fltr_prodgroup_changeHandler(event)" cornerRadius="10"
											 labelField="pgr_text" prompt="{resourceManager.getString('default','PROD_GROUPNAME')+resourceManager.getString('default','FILTER')}"
											 visible.widget="false" excludeFrom="widget" dataProvider="{drawerProductGroupList}"/>
				<components:DKI_DropDownList id="fltr_hazchem" width="130" height="100%"
											 change="fltr_hazchem_changeHandler(event)" cornerRadius="10"
											 labelField="hzcf_text" prompt="{resourceManager.getString('default','PROD_HAZID')+resourceManager.getString('default','FILTER')}"
											 visible.widget="false" excludeFrom="widget" dataProvider="{drawerProductHazchemList}"/>
				<components:DKI_ComboBox id="fltr_prodclass" width="150" height="100%"
												change="fltr_prodclass_changeHandler(event)" cornerRadius="10"
												labelField="gen_prod_code" prompt="{resourceManager.getString('default','PROD_CLASS')+resourceManager.getString('default','FILTER')}"
												visible.widget="false" excludeFrom="widget" dataProvider="{drawerProductClassList}"/>
				
				<!--<s:BorderContainer>
					<s:layout>
						<s:HorizontalLayout/>
					</s:layout>
					<components:SearchComboWithCase id="fltr_prodclass" width="150" height="100%" isTextFieldReset="false"
												 change="fltr_prodclass_changeHandler(event)" cornerRadius="10"
												 labelField="gen_prod_code" prompt="{resourceManager.getString('default','PROD_CLASS')+resourceManager.getString('default','FILTER')}"
												 visible.widget="false" excludeFrom="widget" dataProvider="{drawerProductClassList}"/>
					<components:DKI_Button id="btn_createGenProd" cornerRadius="0" label="{resourceManager.getString('default','CREATE')}" width="32" height="100%" click="createGenProdRecord()" includeIn="normal" enabled="{ canCreateGenProd }" type="create"/>
				</s:BorderContainer>-->
				
			<!--/s:HGroup>
			<s:HGroup gap="5" paddingBottom="2" paddingTop="2" width="100%"-->
				<s:Spacer width="100%"/>
				<components:DKI_Button id="filterBtn" height="24" noLabel="false" click="filterRecords(event)"
									   type="filteron"/>
				<components:DKI_Button id="resetBtn" height="24" noLabel="false" click="refreshRecords(event)"
									   type="filteroff"/>
				<components:DKI_Button id="btn_export" label="{resourceManager.getString('default','EXPORTDATA')}" type="report" click="exportCsvHandler(event)" includeIn="normal"/>
				<components:DKI_Button id="btn_create" label="{resourceManager.getString('default','CREATE')}" height="24" click="createNewRecord(event)" includeIn="normal" enabled="{this.canCreate}" type="create"/>	
			</s:HGroup>
		</s:VGroup>
			
		
		<s:DataGrid id="dataGrid" width="100%" height="100%" requestedRowCount="4"
					selectionChange="dataGrid_selectionChangeHandler(event)"
					skinClass="skins.DKI_DataGrid_Skin"
					height.widget="100%">
			<s:columns>
				<s:ArrayList>
					<s:source>
						<s:GridColumn dataField="prod_cmpycode" headerText="{resourceManager.getString('default','PROD_CMPYCODE')}" visible="true" width="100"></s:GridColumn>
						<s:GridColumn dataField="prod_cmpyname" headerText="{resourceManager.getString('default','PROD_CMPYNAME')}" visible="true" width="150"></s:GridColumn>
						<s:GridColumn dataField="prod_code" headerText="{resourceManager.getString('default','PROD_CODE')}" visible="true" width="100"></s:GridColumn>
						<s:GridColumn dataField="prod_name" headerText="{resourceManager.getString('default','PROD_NAME')}" visible="true" width="150"></s:GridColumn>
						<s:GridColumn dataField="prod_is_compliant" headerText="{resourceManager.getString('default','PROD_IS_COMPLIANT')}" visible="true" itemRenderer="renderers.GridCheckRender" width="100"></s:GridColumn>
						<s:GridColumn dataField="prod_group" headerText="{resourceManager.getString('default','PROD_GROUP')}" visible="true" width="100"></s:GridColumn>
						<s:GridColumn dataField="prod_groupname" headerText="{resourceManager.getString('default','PROD_GROUPNAME')}" visible="true" width="150"></s:GridColumn>
						<s:GridColumn dataField="prod_price" headerText="{resourceManager.getString('default','PROD_PRICE')}" visible="false"></s:GridColumn>
						<s:GridColumn dataField="prod_priceunit" headerText="{resourceManager.getString('default','PROD_PRICEUNIT')}" visible="false"></s:GridColumn>
						<s:GridColumn dataField="prod_class" headerText="{resourceManager.getString('default','PROD_CLASS')}" visible="false" width="100"></s:GridColumn>
						<s:GridColumn dataField="prod_classdesc" headerText="{resourceManager.getString('default','PROD_CLASS')}" visible="true" width="100"></s:GridColumn>
						<s:GridColumn dataField="prod_textcolor" headerText="{resourceManager.getString('default','PROD_TEXTCOLOR')}" visible="false"></s:GridColumn>
						<s:GridColumn dataField="prod_backcolor" headerText="{resourceManager.getString('default','PROD_BACKCOLOR')}" visible="false"></s:GridColumn>
						<s:GridColumn dataField="prod_rptunit" headerText="{resourceManager.getString('default','PROD_RPTUNIT')}" visible="false"></s:GridColumn>
						<s:GridColumn dataField="prod_rptunitname" headerText="{resourceManager.getString('default','PROD_RPTUNITNAME')}" visible="false"></s:GridColumn>
						<s:GridColumn dataField="prod_rpttemp" headerText="{resourceManager.getString('default','PROD_RPTTEMP')}" visible="false"></s:GridColumn>
						<s:GridColumn dataField="prod_number" headerText="{resourceManager.getString('default','PROD_NUMBER')}" visible="false"></s:GridColumn>
						<s:GridColumn dataField="prod_is_blend" headerText="{resourceManager.getString('default','PROD_IS_BLEND')}" visible="true" itemRenderer="renderers.GridCheckRender" width="100"></s:GridColumn>
						<s:GridColumn dataField="prod_ldtol_flag" headerText="{resourceManager.getString('default','PROD_LDTOL_FLAG')}" visible="{!global.OMLITE}" itemRenderer="renderers.GridCheckRender" width="100"></s:GridColumn>
						<s:GridColumn dataField="prod_ldtol_ntol" headerText="{resourceManager.getString('default','PROD_LDTOL_NTOL')}" visible="{!global.OMLITE}" width="100"></s:GridColumn>
						<s:GridColumn dataField="prod_ldtol_ptol" headerText="{resourceManager.getString('default','PROD_LDTOL_PTOL')}" visible="{!global.OMLITE}" width="100"></s:GridColumn>
						<s:GridColumn dataField="prod_hazid" headerText="{resourceManager.getString('default','PROD_HAZID')}" visible="true" width="100"></s:GridColumn>
						<s:GridColumn dataField="prod_hazname" headerText="{resourceManager.getString('default','PROD_HAZNAME')}" visible="true" width="100"></s:GridColumn>
						<s:GridColumn dataField="prod_hazclass" headerText="{resourceManager.getString('default','PROD_HAZCLASS')}" visible="true" width="100"></s:GridColumn>
						<s:GridColumn dataField="prod_hazcode" headerText="{resourceManager.getString('default','PROD_HAZCODE')}" visible="true" width="100"></s:GridColumn>
						<s:GridColumn dataField="prod_hazrisk" headerText="{resourceManager.getString('default','PROD_HAZRISK')}" visible="false"></s:GridColumn>
						<s:GridColumn dataField="prod_hazemrg" headerText="{resourceManager.getString('default','PROD_HAZEMRG')}" visible="false"></s:GridColumn>
						<s:GridColumn dataField="prod_hazpackgrp" headerText="{resourceManager.getString('default','PROD_HAZPACKGRP')}" visible="false"></s:GridColumn>
						<s:GridColumn dataField="prod_hazpackmthd" headerText="{resourceManager.getString('default','PROD_HAZPACKMTHD')}" visible="false"></s:GridColumn>
						<s:GridColumn dataField="prod_check_hot_volume" headerText="{resourceManager.getString('default','PROD_CHECK_HOT_VOLUME')}" visible="{this.isHotVolumeCheckEnabled}" width="100" itemRenderer="renderers.GridCheckRender"></s:GridColumn>
						<s:GridColumn dataField="prod_15_density" headerText="{resourceManager.getString('default','PROD_15_DENSITY')}" visible="{this.isHotVolumeCheckEnabled}" width="120"></s:GridColumn>
						<s:GridColumn dataField="prod_hot_temp" headerText="{resourceManager.getString('default','PROD_HOT_TEMP')}" visible="{this.isHotVolumeCheckEnabled}" width="100"></s:GridColumn>
						<s:GridColumn dataField="prod_check_2nd_drawer" headerText="{resourceManager.getString('default','PROD_CHECK_2ND_DRAWER')}" visible="{this.isExtBlendAllowed}" width="100" itemRenderer="renderers.GridCheckRender"></s:GridColumn>
						<s:GridColumn dataField="prod_2nd_drawer" headerText="{resourceManager.getString('default','PROD_2ND_DRAWER_CODE')}" visible="{this.isExtBlendAllowed}" width="100"></s:GridColumn>
						<s:GridColumn dataField="prod_2nd_drawer_name" headerText="{resourceManager.getString('default','PROD_2ND_DRAWER')}" visible="{this.isExtBlendAllowed}" width="150"></s:GridColumn>
						<s:GridColumn dataField="prod_2nd_product" headerText="{resourceManager.getString('default','PROD_2ND_PRODUCT_CODE')}" visible="{this.isExtBlendAllowed}" width="100"></s:GridColumn>
						<s:GridColumn dataField="prod_2nd_product_name" headerText="{resourceManager.getString('default','PROD_2ND_PRODUCT')}" visible="{this.isExtBlendAllowed}" width="150"></s:GridColumn>
						<s:GridColumn dataField="prod_desc" headerText="{resourceManager.getString('default','PROD_DESC')}" visible="true" width="150"></s:GridColumn>
					</s:source>
				</s:ArrayList>
			</s:columns>
			<s:dataProvider>
				<!--s:AsyncListView id="pgList" list="{getPagedResult.lastResult}"/-->
				<s:AsyncListView id="pgList" list="{pagedRecords}"/>
			</s:dataProvider>
		</s:DataGrid>
		<s:HGroup width="100%">
			<components:Downloader id="pb" width="100%" height="18"/>
			<!--mx:ProgressBar id="pb" width="100%" height="22" visible="false" includeInLayout="false"  mode="manual" source="{this.pgList}" label="{this.currentLength} records shown from {this.currentLength} loaded out of {this.totalLength} found." labelPlacement="center"/-->
			<s:Button id="killBtn" width="18" height="18" label="" cornerRadius="12" visible="false" includeInLayout="false"
					  click="killBtn_clickHandler(event)"/>
			<s:Button id="resumeBtn" width="18" height="18" label="" cornerRadius="12" visible="false" includeInLayout="false"
					  click="resumeBtn_clickHandler(event)"/>
		</s:HGroup>
	</s:Panel>
	
	<s:Panel id="details" includeIn="edit,create,detail" width="100%" height="450"
			 itemCreationPolicy="immediate" skinClass="skins.WidgetPanelSkin">
		<s:layout>
			<s:VerticalLayout/>
			<!--s:TileLayout/-->
		</s:layout>
		
		<s:Spacer height="5"/>
		<s:VGroup width="100%">
			<s:HGroup width="100%">
				<s:VGroup width="100%">
					<s:HGroup width="100%">
						<s:HGroup>
							<s:Label width="{labelWidth}" height="{labelHeight}" text="{resourceManager.getString('default','PROD_CMPYNAME')}" verticalAlign="middle"/>
							<components:DKI_ValidatorComboBox id="prod_cmpycode" 
															  dataProvider="{drawerList}" 
															  labelField="cmpy_name" 
															  selectedItem="{dataGrid.selectedItem.prod_cmpyname}" enabled="false" enabled.edit="false" 
															  selectedItem.create="" selectedIndex.create="-1" enabled.create="true" 
															  width="{fieldWidth}" height="{fieldHeight}" 
															  prompt="{resourceManager.getString('default','SELECT')+resourceManager.getString('default','PROD_CMPYNAME')}"  
															  change="adjustToleranceFields()" valueCommit="adjustToleranceFields()"
															  required="true" validationGroup="{vg}" automationName="{resourceManager.getString('default','PROD_CMPYNAME')}" 
															  />
						</s:HGroup>
						<s:Spacer width="{spaceWidth}" />
						<s:HGroup>
							<s:Label width="{labelWidth}" height="{labelHeight}" text="{resourceManager.getString('default','PROD_CODE')}" verticalAlign="middle"/>
							<components:DKI_ValidatorInput id="prod_code" maxChars="18" 
														   width="{fieldWidth}" height="{fieldHeight}" 
														   text="{dataGrid.selectedItem.prod_code}" editable="false" enabled="false" 
														   text.create="" editable.create="true" enabled.create="true" focusOut="checkDrawerProductKey()" 
														   required="true" validationType="alphanumeric" validationGroup="{vg}" automationName="{resourceManager.getString('default','PROD_CODE')}" 
														   />
						</s:HGroup>
						<s:Spacer width="{spaceWidth}" />
						<s:HGroup>
							<s:Label width="{labelWidth}" height="{labelHeight}" text="{resourceManager.getString('default','PROD_NAME')}" verticalAlign="middle"/>
							<components:DKI_ValidatorInput id="prod_name" maxChars="20" 
														   width="{fieldWidth}" height="{fieldHeight}" 
														   text="{dataGrid.selectedItem.prod_name}" editable="true" enabled="true" 
														   text.create="" editable.create="true" enabled.create="true" 
														   required="true" validationType="document" validationGroup="{vg}" automationName="{resourceManager.getString('default','PROD_NAME')}" 
														   />
						</s:HGroup>
						
					</s:HGroup>
					
					<s:HGroup>
						<s:HGroup>
							<s:Label width="{labelWidth}" height="{labelHeight}" text="{resourceManager.getString('default','PROD_GROUPNAME')}" verticalAlign="middle"/>
							<components:DKI_ValidatorComboBox id="prod_group" 
															  dataProvider="{drawerProductGroupList}" 
															  labelField="pgr_text" 
															  selectedItem="{dataGrid.selectedItem.prod_group + ' - ' + dataGrid.selectedItem.prod_groupname}" enabled="true" 
															  selectedItem.create="" selectedIndex.create="-1" enabled.create="true" 
															  width="{fieldWidth}" height="{fieldHeight}" 
															  prompt="{resourceManager.getString('default','SELECT')+resourceManager.getString('default','PROD_GROUPNAME')}"
															  required="false" validationGroup="{vg}" automationName="{resourceManager.getString('default','PROD_GROUPNAME')}" 
															  />
						</s:HGroup>
						<s:Spacer width="{spaceWidth}" />
						<s:HGroup>
							<s:Label width="{labelWidth}" height="{labelHeight}" text="{resourceManager.getString('default','PROD_HAZID')}" verticalAlign="middle"/>
							<components:DKI_ValidatorComboBox id="prod_hazid" 
															  dataProvider="{drawerProductHazchemList}" 
															  labelField="hzcf_text" 
															  selectedItem="{dataGrid.selectedItem.prod_hazid + ' - ' + dataGrid.selectedItem.prod_hazname}" enabled="true" enabled.edit="true"
															  selectedItem.create="" selectedIndex.create="-1" enabled.create="true" 
															  width="{fieldWidth}" height="{fieldHeight}" 
															  prompt="{resourceManager.getString('default','SELECT')+resourceManager.getString('default','PROD_HAZID')}"
															  required="false" validationGroup="{vg}" automationName="{resourceManager.getString('default','PROD_HAZID')}" 
															  />
						</s:HGroup>
						<s:Spacer width="{spaceWidth}" />
						<s:HGroup>
							<s:Label width="{labelWidth}" height="{labelHeight}" text="{resourceManager.getString('default','PROD_CLASS')}" verticalAlign="middle"/>
							<components:DKI_ValidatorComboBox id="prod_class" 
															  dataProvider="{drawerProductClassList}" 
															  labelField="gen_prod_desc" 
															  selectedItem="{dataGrid.selectedItem.prod_classdesc}" enabled="true" 
															  selectedItem.create="" selectedIndex.create="-1" enabled.create="true" 
															  width="{fieldWidth}" height="{fieldHeight}" 
															  prompt="{resourceManager.getString('default','SELECT')+resourceManager.getString('default','PROD_CLASS')}"
															  required="true" validationGroup="{vg}" automationName="{resourceManager.getString('default','PROD_CLASS')}" 
															  />
						</s:HGroup>
					</s:HGroup>
					
					<s:HGroup visible="{!global.OMLITE}" includeInLayout="{!global.OMLITE}">
						<s:HGroup>
							<s:Label width="{labelWidth}" height="{labelHeight-10}" text="  "/>
							<s:CheckBox id="prod_ldtol_flag" width="{fieldWidth}" label="{resourceManager.getString('default','PROD_LDTOL_FLAG2')}" fontWeight="bold" click="prod_ldtol_flag_clickHandler(event)" 
										selected.edit="{dataGrid.selectedItem.prod_ldtol_flag>0?true:false}" enabled.edit="false" selected.create="false" enabled.create="false"/>
						</s:HGroup>
						<s:Spacer width="{spaceWidth}" />
						<s:HGroup>
							<s:Label width="{labelWidth}" height="{labelHeight}" text="{resourceManager.getString('default','PROD_LDTOL_NTOL')}" verticalAlign="middle"/>
							<components:DKI_ValidatorInput id="prod_ldtol_ntol" 
														   width="{fieldWidth}" height="{fieldHeight}" 
														   text="{dataGrid.selectedItem.prod_ldtol_ntol}" editable="true" enabled="true" 
														   text.create="" editable.create="true" enabled.create="true" change="toggleValidationRequired()" 
														   required="false" validationType="numeric_non_positive" validationGroup="{vg}" automationName="{resourceManager.getString('default','PROD_LDTOL_NTOL')}" 
														   />
						</s:HGroup>
						<s:Spacer width="{spaceWidth}" />
						<s:HGroup>
							<s:Label width="{labelWidth}" height="{labelHeight}" text="{resourceManager.getString('default','PROD_LDTOL_PTOL')}" verticalAlign="middle"/>
							<components:DKI_ValidatorInput id="prod_ldtol_ptol" 
														   width="{fieldWidth}" height="{fieldHeight}" 
														   text="{dataGrid.selectedItem.prod_ldtol_ptol}" editable="true" enabled="true" 
														   text.create="" editable.create="true" enabled.create="true" change="toggleValidationRequired()" 
														   required="false" validationType="numeric_non_negative" validationGroup="{vg}" automationName="{resourceManager.getString('default','PROD_LDTOL_PTOL')}" 
														   />
						</s:HGroup>
					</s:HGroup>
					
					<s:HGroup id="hotVolumeGroup" visible="{this.isHotVolumeCheckEnabled}" includeInLayout="{this.isHotVolumeCheckEnabled}">
						<s:HGroup>
							<s:Label width="{labelWidth}" height="{labelHeight-10}" text="  "/>
							<s:CheckBox id="prod_check_hot_volume" width="{fieldWidth}" label="{resourceManager.getString('default','PROD_CHECK_HOT_VOLUME2')}" fontWeight="bold" 
										selected.edit="{dataGrid.selectedItem.prod_check_hot_volume>0?true:false}" enabled.edit="false" selected.create="false" enabled.create="false"/>
						</s:HGroup>
						<s:Spacer width="{spaceWidth}" />
						<s:HGroup>
							<s:Label width="{labelWidth}" height="{labelHeight}" text="{resourceManager.getString('default','PROD_15_DENSITY2')}" verticalAlign="middle"/>
							<components:DKI_ValidatorInput id="prod_15_density" 
														   width="{fieldWidth-80}" height="{fieldHeight}" 
														   text="{dataGrid.selectedItem.prod_15_density}" editable="false" enabled="false" 
														   text.create="1000" 
														   editable.create="{this.isHotVolumeCheckEnabled &amp;&amp; this.prod_check_hot_volume.selected}" enabled.create="{this.isHotVolumeCheckEnabled &amp;&amp; this.prod_check_hot_volume.selected}" 
														   editable.edit="{this.isHotVolumeCheckEnabled &amp;&amp; this.prod_check_hot_volume.selected}" enabled.edit="{this.isHotVolumeCheckEnabled &amp;&amp; this.prod_check_hot_volume.selected}"  
														   required="{this.isHotVolumeCheckEnabled &amp;&amp; this.prod_check_hot_volume.selected}" validationType="numeric_non_negative" validationGroup="{vg}" automationName="{resourceManager.getString('default','PROD_15_DENSITY2')}" 
														   />
							<s:Label width="74" height="{labelHeight}" text="[{DP_DENS_LO}~{DP_DENS_HI}]" verticalAlign="middle"/>
						</s:HGroup>
						<s:Spacer width="{spaceWidth}" />
						<s:HGroup>
							<s:Label width="{labelWidth}" height="{labelHeight}" text="{resourceManager.getString('default','PROD_HOT_TEMP2')}" verticalAlign="middle"/>
							<components:DKI_ValidatorInput id="prod_hot_temp" 
														   width="{fieldWidth-80}" height="{fieldHeight}" 
														   text="{dataGrid.selectedItem.prod_hot_temp}" editable="false" enabled="false" 
														   text.create="15" 
														   editable.create="{this.isHotVolumeCheckEnabled &amp;&amp; this.prod_check_hot_volume.selected}" enabled.create="{this.isHotVolumeCheckEnabled &amp;&amp; this.prod_check_hot_volume.selected}"  
														   editable.edit="{this.isHotVolumeCheckEnabled &amp;&amp; this.prod_check_hot_volume.selected}" enabled.edit="{this.isHotVolumeCheckEnabled &amp;&amp; this.prod_check_hot_volume.selected}"  
														   required="{this.isHotVolumeCheckEnabled &amp;&amp; this.prod_check_hot_volume.selected}" validationType="numeric" validationGroup="{vg}" automationName="{resourceManager.getString('default','PROD_HOT_TEMP2')}" 
														   />
							<s:Label width="74" height="{labelHeight}" text="[{DP_TEMP_LO}~{DP_TEMP_HI}]" verticalAlign="middle"/>
						</s:HGroup>
					</s:HGroup>
					
					<s:HGroup id="dcsGroup" visible="{this.isExtBlendAllowed}" includeInLayout="{this.isExtBlendAllowed}">
						<s:HGroup>
							<s:Label width="{labelWidth}" height="{labelHeight-10}" text="  "/>
							<s:CheckBox id="prod_check_2nd_drawer" width="{fieldWidth}" visible="{this.isExtBlendAllowed}" includeInLayout="{this.isExtBlendAllowed}" 
										label="{resourceManager.getString('default','PROD_CHECK_2ND_DRAWER2')}" fontWeight="bold" 
										selected="{dataGrid.selectedItem.prod_check_2nd_drawer>0?true:false}" selected.create="false" 
										enabled="false" enabled.edit="{this.isExtBlendAllowed}" enabled.create="{this.isExtBlendAllowed}" 
										/>
						</s:HGroup>
						
						<s:Spacer width="{spaceWidth}" />
						<s:HGroup visible="{this.isExtBlendAllowed}" includeInLayout="{this.isExtBlendAllowed}">
							<s:Label width="{labelWidth}" height="{labelHeight}" text="{resourceManager.getString('default','PROD_2ND_DRAWER2')}" verticalAlign="middle"/>
							<components:DKI_ValidatorComboBox id="prod_2nd_drawer" 
															  dataProvider="{drawerList}" 
															  labelField="cmpy_name" 
															  selectedItem="{dataGrid.selectedItem.prod_2nd_drawer_name}" enabled="false" enabled.edit="{this.isExtBlendAllowed &amp;&amp; this.prod_check_2nd_drawer.selected}" 
															  selectedItem.create="" selectedIndex.create="-1" enabled.create="{this.isExtBlendAllowed &amp;&amp; this.prod_check_2nd_drawer.selected}" 
															  width="{fieldWidth}" height="{fieldHeight}" change="prod_2nd_drawer_changeHandler(event)" valueCommit="prod_2nd_drawer_valueCommitHandler(event)" 
															  prompt="{resourceManager.getString('default','SELECT')+resourceManager.getString('default','PROD_2ND_DRAWER2')}"  
															  
															  required="false" validationGroup="{vg}" automationName="{resourceManager.getString('default','PROD_2ND_DRAWER2')}" 
															  />
						</s:HGroup>
						<s:Spacer width="{spaceWidth}" />
						<s:HGroup visible="{this.isExtBlendAllowed}" includeInLayout="{this.isExtBlendAllowed}">
							<s:Label width="{labelWidth}" height="{labelHeight}" text="{resourceManager.getString('default','PROD_2ND_PRODUCT2')}" visible="{this.isExtBlendAllowed &amp;&amp; this.prod_check_2nd_drawer.selected}" verticalAlign="middle"/>
							<components:DKI_ValidatorComboBox id="prod_2nd_product" 
															  dataProvider="{this.productList}" 
															  labelField="prod_desc" 
															  selectedItem="{dataGrid.selectedItem.prod_2nd_drawer + ' - ' + dataGrid.selectedItem.prod_2nd_product + ' - ' + dataGrid.selectedItem.prod_2nd_product_name}" enabled="false" enabled.edit="{this.isExtBlendAllowed &amp;&amp; this.prod_check_2nd_drawer.selected}" 
															  selectedItem.create="" selectedIndex.create="-1" enabled.create="{this.isExtBlendAllowed &amp;&amp; this.prod_check_2nd_drawer.selected}"
															  visible="{this.isExtBlendAllowed &amp;&amp; this.prod_check_2nd_drawer.selected}" 
															  width="{fieldWidth}" height="{fieldHeight}" 
															  prompt="{resourceManager.getString('default','SELECT')+resourceManager.getString('default','PROD_2ND_PRODUCT2')}"  
															  
															  required="false" validationGroup="{vg}" automationName="{resourceManager.getString('default','PROD_2ND_PRODUCT2')}" 
															  />
						</s:HGroup>
					</s:HGroup>
				</s:VGroup>
				<s:Spacer width="{spaceWidth}" />
				<s:VGroup width="100%" id="desc_area">
					<s:HGroup>
						<s:Label width="{labelWidth}" height="{labelHeight}" text="{resourceManager.getString('default','PROD_DESC')}" verticalAlign="middle"/>
						<s:Label width="{labelWidth}" height="{labelHeight}" text="  "/>
						<s:CheckBox id="prod_is_compliant" width="{labelWidth+50}" label="{resourceManager.getString('default','PROD_IS_COMPLIANT')}" fontWeight="bold" 
									selected="{dataGrid.selectedItem.prod_is_compliant>0?true:false}" enabled="false" enabled.edit="true" enabled.create="true"/>
					</s:HGroup>
					
					<s:HGroup>
						<s:TextArea id="prod_desc" width="{labelWidth*3}" text="{dataGrid.selectedItem.prod_desc}" text.create="" height="{fieldHeight*2+desc_area.gap+hotLineHeight+dcsLineHeight}" maxChars="512"/>	
					</s:HGroup>
					
				</s:VGroup>
			</s:HGroup>
			
			<s:Spacer height="5" />
			
			<mx:HRule width="100%"/>
			
			<s:HGroup>
				<s:Label width="{labelWidth}" height="{labelHeight}" text="{resourceManager.getString('default','PITEM_BASE_PRODUCT')}" verticalAlign="middle"/>
				<components:SearchComboWithCase id="base_product" width="{fieldWidth*2}" height="{fieldHeight}" isTextFieldReset="false" enabled="{this.prod_cmpycode.selectedIndex>=0}" visible="true"
												cornerRadius="10"
												labelField="base_desc" 
												prompt="{resourceManager.getString('default','SELECT')+resourceManager.getString('default','PITEM_BASE_PRODUCT')}"
												dataProvider="{availBaseProducts}"/>
				<components:DKI_Button id="btn_createRatio" cornerRadius="0" label="{resourceManager.getString('default','CREATE')}" width="32" height="100%" click="base_product_addHandler()" enabled="{this.prod_cmpycode.selectedIndex>=0}" type="create"/>
			</s:HGroup>
			
			<!--s:BorderContainer includeInLayout="true" visible="true">
				<s:layout>
					<s:HorizontalLayout paddingBottom="1" paddingTop="1" paddingLeft="10" paddingRight="10" gap="10"/>
				</s:layout>
				<s:Label width="{labelWidth}" height="{labelHeight}" text="{resourceManager.getString('default','PITEM_BASE_PRODUCT')}" verticalAlign="middle"/>
				<components:SearchComboWithCase id="base_product" width="{fieldWidth*2}" height="{fieldHeight}" isTextFieldReset="false" enabled="true" visible="true"
												cornerRadius="10"
												labelField="base_desc" 
												prompt="{resourceManager.getString('default','SELECT')+resourceManager.getString('default','PITEM_BASE_PRODUCT')}"
												dataProvider="{availBaseProducts}"/>
				<components:DKI_Button id="btn_createRatio" cornerRadius="0" label="{resourceManager.getString('default','CREATE')}" width="32" height="100%" click="base_product_addHandler()" enabled="true" type="create"/>
			</s:BorderContainer-->
			
			<s:HGroup width="100%">
				
				<s:VGroup width="100%">
					<s:DataGrid id="drawerProductItemGrid" width="100%" height="{this.prodItemGridHeight-this.hotLineHeight-this.dcsLineHeight}" requestedRowCount="4" excludeFrom="widget,normal"
								selectionChange="drawerProductItemGrid_selectionChangeHandler(event)"
								skinClass="skins.DKI_DataGrid_Skin" visible="true" enabled="{this.prod_cmpycode.selectedIndex>=0}"
								editable="true" editable.detail="false" gridItemEditorSessionSave="drawerProductItemGrid_gridItemEditorSessionSaveHandler(event)"
								>
						<s:columns>
							<s:ArrayList>
								<s:source>
									<s:GridColumn dataField="pitem_prod_code" headerText="{resourceManager.getString('default','PITEM_PROD_CODE')}" visible="false" editable="false"></s:GridColumn>
									<s:GridColumn dataField="pitem_prod_name" headerText="{resourceManager.getString('default','PITEM_PROD_NAME')}" visible="false" editable="false"></s:GridColumn>
									<s:GridColumn dataField="pitem_cmpy_code" headerText="{resourceManager.getString('default','PITEM_CMPY_CODE')}" visible="false" editable="false"></s:GridColumn>
									<s:GridColumn dataField="pitem_cmpy_name" headerText="{resourceManager.getString('default','PITEM_CMPY_NAME')}" visible="false" editable="false"></s:GridColumn>
									<s:GridColumn dataField="pitem_prod_group" headerText="{resourceManager.getString('default','PITEM_PROD_GROUP')}" visible="false" editable="false"></s:GridColumn>
									<s:GridColumn dataField="pitem_prod_class" headerText="{resourceManager.getString('default','PITEM_PROD_CLASS')}" visible="false" editable="false"></s:GridColumn>
									<s:GridColumn dataField="pitem_ldtol_flag" headerText="{resourceManager.getString('default','PITEM_LDTOL_FLAG')}" visible="false" editable="false" itemRenderer="renderers.GridCheckRender"></s:GridColumn>
									<s:GridColumn dataField="pitem_ldtol_ptol" headerText="{resourceManager.getString('default','PITEM_LDTOL_PTOL')}" visible="false" editable="false"></s:GridColumn>
									<s:GridColumn dataField="pitem_ldtol_ntol" headerText="{resourceManager.getString('default','PITEM_LDTOL_NTOL')}" visible="false" editable="false"></s:GridColumn>
									<s:GridColumn dataField="pitem_prod_hazid" headerText="{resourceManager.getString('default','PITEM_PROD_HAZID')}" visible="false" editable="false"></s:GridColumn>
									<s:GridColumn dataField="pitem_base_code" headerText="{resourceManager.getString('default','PITEM_BASE_CODE')}" visible="true" editable="false"></s:GridColumn>
									<s:GridColumn dataField="pitem_base_name" headerText="{resourceManager.getString('default','PITEM_BASE_NAME')}" visible="true" editable="false"></s:GridColumn>
									<s:GridColumn dataField="pitem_ratio_value" headerText="{resourceManager.getString('default','PITEM_RATIO_VALUE')}" visible="true" editable="true"></s:GridColumn>
									<s:GridColumn dataField="pitem_bltol_flag" headerText="{resourceManager.getString('default','PITEM_BLTOL_FLAG')}" visible="{!global.OMLITE}" editable="false" itemEditor="itemeditors.GridCheckEditor" itemRenderer="renderers.GridCheckRender"></s:GridColumn>
									<s:GridColumn dataField="pitem_bltol_ntol" headerText="{resourceManager.getString('default','PITEM_BLTOL_NTOL')}" visible="{!global.OMLITE}" editable="true"></s:GridColumn>
									<s:GridColumn dataField="pitem_bltol_ptol" headerText="{resourceManager.getString('default','PITEM_BLTOL_PTOL')}" visible="{!global.OMLITE}" editable="true"></s:GridColumn>
									
									<s:GridColumn dataField="pitem_hot_main" headerText="{resourceManager.getString('default','PITEM_HOT_MAIN')}" visible="{this.isHotVolumeCheckEnabled}" editable="true" itemEditor="itemeditors.GridCheckEditor" itemRenderer="renderers.GridCheckRender"></s:GridColumn>
									
									<s:GridColumn dataField="pitem_adtv_flag" headerText="{resourceManager.getString('default','PITEM_ADTV_FLAG')}" visible="true" editable="false" itemRenderer="renderers.GridCheckRender"></s:GridColumn>
									<s:GridColumn dataField="pitem_ratio_subseq" headerText="{resourceManager.getString('default','PITEM_RATIO_SUBSEQ')}" visible="false" editable="false"></s:GridColumn>
									<s:GridColumn dataField="pitem_ratio_seq" headerText="{resourceManager.getString('default','PITEM_RATIO_SEQ')}" visible="false" editable="false"></s:GridColumn>
									<s:GridColumn dataField="pitem_ratio_subcount" headerText="{resourceManager.getString('default','PITEM_RATIO_SUBCOUNT')}" visible="false" editable="false"></s:GridColumn>
									<s:GridColumn dataField="pitem_ratio_count" headerText="{resourceManager.getString('default','PITEM_RATIO_COUNT')}" visible="false" editable="false"></s:GridColumn>
									<s:GridColumn dataField="pitem_ratio_total" headerText="{resourceManager.getString('default','PITEM_RATIO_TOTAL')}" visible="false" editable="false"></s:GridColumn>
									<s:GridColumn dataField="pitem_base_group" headerText="{resourceManager.getString('default','PITEM_BASE_GROUP')}" visible="false" editable="false"></s:GridColumn>
									<s:GridColumn dataField="pitem_base_grpname" headerText="{resourceManager.getString('default','PITEM_BASE_GRPNAME')}" visible="false" editable="false"></s:GridColumn>
									<s:GridColumn dataField="pitem_base_class" headerText="{resourceManager.getString('default','PITEM_BASE_CLASS')}" visible="true" editable="false"></s:GridColumn>
									<s:GridColumn dataField="pitem_bclass_name" headerText="{resourceManager.getString('default','PITEM_BCLASS_NAME')}" visible="true" editable="false"></s:GridColumn>
									<s:GridColumn dataField="pitem_hot_check" headerText="{resourceManager.getString('default','PROD_CHECK_HOT_VOLUME2')}" visible="{this.isHotVolumeCheckEnabled}" editable="false" itemRenderer="renderers.GridCheckRender"></s:GridColumn>
									<s:GridColumn dataField="pitem_base_tunit" headerText="{resourceManager.getString('default','PITEM_BASE_TUNIT')}" visible="false" editable="false"></s:GridColumn>
									<s:GridColumn dataField="pitem_base_tunitname" headerText="{resourceManager.getString('default','PITEM_BASE_TUNITNAME')}" visible="false" editable="false"></s:GridColumn>
									<s:GridColumn dataField="pitem_base_rpttemp" headerText="{resourceManager.getString('default','PITEM_BASE_RPTTEMP')}" visible="false" editable="false"></s:GridColumn>
									<s:GridColumn dataField="pitem_bclass_dens_lo" headerText="{resourceManager.getString('default','PITEM_BCLASS_DENS_LO')}" visible="true" editable="false"></s:GridColumn>
									<s:GridColumn dataField="pitem_bclass_dens_hi" headerText="{resourceManager.getString('default','PITEM_BCLASS_DENS_HI')}" visible="true" editable="false"></s:GridColumn>
									<s:GridColumn dataField="pitem_bclass_vcf_alg" headerText="{resourceManager.getString('default','PITEM_BCLASS_VCF_ALG')}" visible="false" editable="false"></s:GridColumn>
									<s:GridColumn dataField="pitem_bclass_temp_lo" headerText="{resourceManager.getString('default','PITEM_BCLASS_TEMP_LO')}" visible="false" editable="false"></s:GridColumn>
									<s:GridColumn dataField="pitem_bclass_temp_hi" headerText="{resourceManager.getString('default','PITEM_BCLASS_TEMP_HI')}" visible="false" editable="false"></s:GridColumn>
								</s:source>
							</s:ArrayList>
						</s:columns>
					</s:DataGrid>
				</s:VGroup>
				
			</s:HGroup>
			
		</s:VGroup>
		
		<s:Spacer height="0" />
		
		<s:HGroup width="100%" paddingBottom="4" paddingTop="0" gap="5">
			<components:DKI_Button id="btnGenericProduct" label="{resourceManager.getString('default','m_genericproducts')}" height="100%" includeIn="create,edit,detail" type="default" visible="true" enabled="{this.canUpdate}" includeInLayout="true" click="goToGenericProducts();"/>
			<components:DKI_ValidatorComboBox id="prod_dglink" 
											  dataProvider="{this.drawerProductDGList}" 
											  labelField="dg_material" 
											  selectedItem="{dataGrid.selectedItem.prod_dglink}" enabled="true" enabled.edit="true"
											  selectedItem.create="" selectedIndex.create="-1" enabled.create="true" 
											  width="{fieldWidth}" height="{fieldHeight}" 
											  prompt="{resourceManager.getString('default','SELECT')+resourceManager.getString('default','PROD_DGLINK')}"
											  required="false" validationGroup="{vg}" automationName="{resourceManager.getString('default','PROD_DGLINK')}" 
											  />
			<components:DKI_Button id="btnProdDGLink" label="{resourceManager.getString('default','BUTTON__PROD_DGLINK')}" height="100%" includeIn="create,edit,detail" type="default" visible="true" enabled="{this.canUpdate}" includeInLayout="true" click="goToProductDGLinks();"/>
			<s:BorderContainer includeInLayout="false" visible="false">
				<s:layout>
					<s:HorizontalLayout paddingBottom="1" paddingTop="1" paddingLeft="10" paddingRight="10" gap="10"/>
				</s:layout>
				<s:Label width="{labelWidth*2}" height="{labelHeight}" text="{resourceManager.getString('default','CREATE')+'/'+resourceManager.getString('default','DELETE')+' '+resourceManager.getString('default','PROD_CLASS')}" verticalAlign="middle"/>
				<components:SearchComboWithCase id="generic_product" width="{fieldWidth}" height="{fieldHeight}" isTextFieldReset="false" enabled="true" visible="true"
												change="generic_product_changeHandler(event)" 
												cornerRadius="10"
												labelField="gen_prod_code" 
												prompt="{resourceManager.getString('default','SELECT')+resourceManager.getString('default','PROD_CLASS')}"
												dataProvider="{genericProductList}"/>
				<components:DKI_Button id="btn_createGenProd" cornerRadius="0" label="{resourceManager.getString('default','CREATE')}" width="32" height="100%" click="createGenProdRecord()" enabled="{ canCreateGenProd }" type="create"/>
				<components:DKI_Button id="btn_deleteGenProd" cornerRadius="0" label="{resourceManager.getString('default','DELETE')}" width="32" height="100%" click="deleteGenProdRecord()" enabled="{ canDeleteGenProd }" type="delete"/>
			</s:BorderContainer>
			
			<s:Spacer width="100%"/>
			<components:DKI_Button id="btn_delete" label="{resourceManager.getString('default','DELETE')}" height="100%" click="doDelete()" includeIn="edit" enabled="{this.canDelete}" type="delete"/>
			<components:DKI_Button id="btn_save" label.create="{resourceManager.getString('default','SAVE')}" label="{resourceManager.getString('default','UPDATE')}" height="100%" includeIn="edit,create,detail" 
								   enabled.create="{this.canCreate}" enabled="{this.canUpdate}" type.create="create" type="edit" focusEnabled="true" focusEnabled.create="false"/>
			<components:DKI_Button id="btn_cancel" label="{resourceManager.getString('default','CANCEL')}" height="100%" click="cancel_clickHandler()" enabled="true" type="cancel" focusEnabled="true" focusEnabled.create="false"/>
		</s:HGroup>
	</s:Panel>
	
</s:VGroup>
