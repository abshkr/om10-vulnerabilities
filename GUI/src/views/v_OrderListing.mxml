<?xml version="1.0" encoding="utf-8"?>
<s:VGroup xmlns:fx="http://ns.adobe.com/mxml/2009"
		  xmlns:s="library://ns.adobe.com/flex/spark"
		  xmlns:mx="library://ns.adobe.com/flex/mx"
		  xmlns:components="components.*"
		  creationComplete="creationCompleteHandler(event)"
		  gap="2" width="100%" height="100%">
	
	<s:states>
		<s:State name="normal" enterState="this.toolbar.enabled=true"/>
		<s:State name="widget" enterState="this.toolbar.enabled=true"/>
		<s:State name="edit" enterState="callLater(function():void{dataGrid.ensureCellIsVisible(idx);});orderItemGrid.enabled=true;orderPeriodGrid.enabled=true;this.toolbar.enabled=false"/>
		<s:State name="create" enterState="orderItemGrid.enabled=true;orderPeriodGrid.enabled=false;orderTripGrid.enabled=false;orderItemTripGrid.enabled=false;this.toolbar.enabled=false"/>
		<s:State name="detail" enterState="view_detailsHandler(event);orderItemGrid.enabled=true;orderPeriodGrid.enabled=false;this.toolbar.enabled=false"/>
	</s:states>
	
	<fx:Script>
		<![CDATA[
			import com.adobe.fiber.runtime.lib.DateTimeFunc;
			
			import components.ActionDialog;
			import components.ApproveDialog;
			import components.ConfirmDialog;
			import components.DKI_AlertBox;
			import components.DeleteDialog;
			import components.ExportData;
			import components.MessageDialog;
			import components.PartnerChooser;
			import components.TransactionsDlg;
			import components.ViewPopupDlg;
			
			import dm.remoteBulkListService;
			import dm.remoteDataService;
			import dm.remoteListService;
			import dm.utils.tools;
			
			import flash.events.KeyboardEvent;
			import flash.globalization.LocaleID;
			
			import flashx.textLayout.container.ScrollPolicy;
			
			import mx.collections.ArrayCollection;
			import mx.controls.Alert;
			import mx.controls.DateField;
			import mx.events.FlexEvent;
			import mx.rpc.http.HTTPService;
			import mx.rpc.events.ResultEvent;
			import mx.rpc.events.FaultEvent;
			import mx.utils.ObjectUtil;
			import mx.utils.StringUtil;
			
			import renderers.DKI_HeaderColumn_Renderer;
			
			import spark.components.ToggleButton;
			import spark.components.VScrollBar;
			import spark.components.gridClasses.IGridItemRenderer;
			import spark.events.GridEvent;
			import spark.events.GridSelectionEvent;
			import spark.events.IndexChangeEvent;
			
			import views.v_DeliveryDetails;
			import views.v_LoadSchedules;
			import views.v_OrderPeriod;
			
			public static const MAIN_WINDOW_WIDTH:int = 1500;
			
			[Bindable] public var readOnly:Boolean = false;
			[Bindable] public var canUpdate:Boolean = false;
			[Bindable] public var canCreate:Boolean = false;
			[Bindable] public var canDelete:Boolean = false;
			[Bindable] public var hasPassword:Boolean = false;
			
			[Bindable] private var canManageOrderPeriod:Boolean = false;
			[Bindable] private var isPartnershipEnabled:Boolean = false;
			
			[Bindable] public var labelWidth:uint = 80;
			[Bindable] public var labelHeight:uint = 26;
			[Bindable] public var fieldWidth:uint = 185;
			[Bindable] public var fieldHeight:uint = 26;
			[Bindable] public var spaceWidth:uint = 15;
			[Bindable] public var spaceHeight:uint = 2;
			
			private var idx:int=-1;
			
			private var currentFilter:String=null;
			private var currentOrder:String='order_cust_no';
			private var currentDirection:String="ASC";
			
			private var currentOffset:int=0;
			private var currentPageSize:int=1000;
			[Bindable] private var totalLength:int=0;
			[Bindable] private var currentLength:int=0;
			
			private var currentFields:Object=new Object();
			private var currentTypes:Object=new Object();
			//private var currentSorts:Object=new Object();
			//private var currentOrders:Object=new Object();
			private var currentSorts:Object={order_exp_time:'DESC'};
			private var currentOrders:Object={order_exp_time:1};
			private var currentSortSeq:int=0;
			
			[Bindable] private var dateFilterTypes:ArrayCollection = new ArrayCollection([{code:'order_ord_time', name:'Order Date'},{code:'order_exp_time', name:'Expiry Date'}]);
			
			private var confirmDelete:DKI_AlertBox;
			
			private var  originalItems:ArrayCollection;
			
			
			private var confirmReport:ActionDialog;
			
			//private var exportContents:String="";
			private var f:FileReference = new FileReference();
			
			
			//private var getData:Responder = new Responder(getData_resultHandler);
			
			//private var pagedRecords:ArrayCollection=new ArrayCollection();
			//private var pagedRecords:remoteDataService = new remoteDataService( "OpenOrderService.getPaged", getData, null );
			[Bindable] private var pagedRecords:remoteListService;
			
			[Bindable] private var orderInstructions:remoteDataService = new remoteDataService( "OpenOrderService.getOrderInstructions", null, orderInstructions_resultHandler, 1 );
			[Bindable] private var orderItemList:remoteDataService = new remoteDataService( "OpenOrderService.getOrderItems", null, orderItemList_resultHandler );
			[Bindable] private var orderItemInitList:remoteDataService = new remoteDataService( "OpenOrderService.initOrderItems", null, orderItemInitList_resultHandler );
			[Bindable] private var orderPeriodList:remoteDataService = new remoteDataService( "OpenOrderService.getOrderPeriods", null, orderPeriodList_resultHandler );
			[Bindable] private var orderTripList:remoteDataService = new remoteDataService( "OpenOrderService.getOrderSchedules", null, orderTripList_resultHandler );
			[Bindable] private var orderItemTripList:remoteDataService = new remoteDataService( "OpenOrderService.getOrderItemSchedules", null, orderItemTripList_resultHandler );
			
			private var deleteAction:remoteDataService = new remoteDataService( "OpenOrderService.delete", null, deleteData_resultHandler, 1 );
			private var createAction:remoteDataService = new remoteDataService( "OpenOrderService.create", null, createData_resultHandler, 1 );
			private var updateAction:remoteDataService = new remoteDataService( "OpenOrderService.update", null, updateData_resultHandler, 1 );
			private var approveAction:remoteDataService = new remoteDataService( "OpenOrderService.approve", null, approveData_resultHandler, 1 );
			private var unapproveAction:remoteDataService = new remoteDataService( "OpenOrderService.unapprove", null, unapproveData_resultHandler, 1 );
			
			private var orderNoChecker:remoteDataService = new remoteDataService( "OpenOrderService.isOrderNoUsed", null, orderNoChecker_resultHandler, 2 );
			private var custOrderNoChecker:remoteDataService = new remoteDataService( "OpenOrderService.isOrderCustNoUsed", null, custOrderNoChecker_resultHandler, 2 );
			private var custOrderNoMaker:remoteDataService = new remoteDataService( "OpenOrderService.getNextOrderCustNum", null, custOrderNoMaker_resultHandler, 1 );
			
			private var defaultTimeMaker:remoteDataService = new remoteDataService( "OpenOrderService.getDefaultTimeString", null, defaultTimeMaker_resultHandler, 1 );
			private var _defaultTimeString:String="23:59:59";
			private var gridColumnSequenceMaker:remoteDataService = new remoteDataService( "ScreenGridColumnService.lookupGridColumnSequence", null, gridColumnSequenceMaker_resultHandler, 1 );
			private var _gridColumnSequenceString:String="";
			private var formColumnSettingsMaker:remoteDataService = new remoteDataService( "ScreenFormColumnService.lookupFormColumnSettings", null, formColumnSettingsMaker_resultHandler, 1 );
			private var _formColumnSettingsString:String="";
			private var formButtonSettingsMaker:remoteDataService = new remoteDataService( "ScreenFormButtonService.lookupFormButtonSettings", null, formButtonSettingsMaker_resultHandler, 1 );
			private var _formButtonSettingsString:String="";
			
			[Bindable] private var customerList:remoteDataService = new remoteDataService( "ListLibraryService.lookupCustomer", null, lookupCustomer_resultHandler );
			[Bindable] private var customerFilterList:remoteDataService = new remoteDataService( "ListLibraryService.lookupCustomer", null, lookupCustomerFilter_resultHandler );
			[Bindable] private var supplierList:remoteDataService = new remoteDataService( "ListLibraryService.lookupCompany", null, lookupSupplier_resultHandler );
			[Bindable] private var carrierList:remoteDataService = new remoteDataService( "ListLibraryService.lookupCompany", null, lookupCarrier_resultHandler );
			[Bindable] private var drawerList:remoteDataService = new remoteDataService( "ListLibraryService.lookupCompatibleDrawer", null, lookupDrawer_resultHandler );
			[Bindable] private var companyList:remoteDataService = new remoteDataService( "ListLibraryService.lookupCompany", null, null );
			
			[Bindable] private var orderMethodTypeList:remoteDataService = new remoteDataService( "ListLibraryService.lookupOrderMethodType", null, null );
			[Bindable] private var transportTypeList:remoteDataService = new remoteDataService( "ListLibraryService.lookupTransportType", null, lookupTransportType_resultHandler );
			[Bindable] private var orderStatusTypeList:remoteDataService = new remoteDataService( "ListLibraryService.lookupOrderStatusType", null, lookupOrderStatusType_resultHandler );
			[Bindable] private var customerSaleTypeList:remoteDataService = new remoteDataService( "ListLibraryService.lookupCustomerSaleType", null, null );
			//[Bindable] private var delvLocationList:remoteDataService = new remoteDataService( "ListLibraryService.lookupDelvLocation", null, null );
			[Bindable] private var delvLocationList:remoteBulkListService = new remoteBulkListService( "ListLibraryService.lookupDelvLocationByPage", null, lookupDelvLocationByPage_resultHandler );
			[Bindable] private var terminalList:remoteDataService = new remoteDataService( "ListLibraryService.lookupTerminal", null, lookupTerminal_resultHandler );
			
			[Bindable] private var personnelList:remoteDataService = new remoteDataService( "ListLibraryService.lookupPersonnel", null, null );
			
			[Bindable] private var erpTypeList:remoteDataService = new remoteDataService( "ListLibraryService.lookupErpType", null, null );
			[Bindable] private var productUnitList:remoteDataService = new remoteDataService( "ListLibraryService.lookupProductUnit", null, lookupProductUnit_resultHandler );
			[Bindable] private var customerPriceTypeList:remoteDataService = new remoteDataService( "ListLibraryService.lookupCustomerPriceType", null, null );
			[Bindable] private var priceOffsetList:remoteDataService = new remoteDataService( "ListLibraryService.lookupPriceOffset", null, null );
			
			[Bindable] private var productList:remoteDataService = new remoteDataService( "ListLibraryService.lookupProduct", null, null );
			
			
			/*
			6 - ORD_EXPIRED: order expired
			0 - ORD_NEW: new order
			5 - ORD_COMPLETED: fully delivered  !!!
			8 - ORD_PARTIALLY_COMPLETED: fully loaded but partially delivered !!!
			3 - ORD_DELIVERY: fully loaded but not delivered yet  !!!
			1 - ORD_FILLING: partially scheduled
			7 - ORD_PARTIALLY_DELIVERY: partially loaded but not all loaded
			2 - ORD_SCHEDULED: fully scheduled
			4 - ORD_OUTSTANDING : other status
			*/
			public static const ORDER_STATUS__NEW:int = 0;
			public static const ORDER_STATUS__FILLING:int = 1;
			public static const ORDER_STATUS__SCHEDULED:int = 2;
			public static const ORDER_STATUS__DELIVERY:int = 3;
			public static const ORDER_STATUS__OUTSTANDING:int = 4;
			public static const ORDER_STATUS__COMPLETED:int = 5;
			public static const ORDER_STATUS__EXPIRED:int = 6;
			public static const ORDER_STATUS__PARTIALLY_DELIVERY:int = 7;
			public static const ORDER_STATUS__PARTIALLY_COMPLETED:int = 8;
			
			public var transactionPopup:TransactionsDlg = new TransactionsDlg;
			
			//private var genData:ExportData = new ExportData();
			
			public var parentParams:Object = new Object();
			public var mainListSelection:int = -1;
			private var _saveButtonClicked:Boolean=false;
			
			public var isPopupWindow:Boolean=false;
			
			public var makeTransactionPopup:ViewPopupDlg = new ViewPopupDlg( "Manual transactions for open orders", new v_ManualTransactions(), closeDialogHandler );
			public var viewSchedulePopup:ViewPopupDlg = new ViewPopupDlg( "Load schedules for open orders", new v_LoadSchedules(), closeDialogHandler );
			public var orderPeriodPopup:ViewPopupDlg = new ViewPopupDlg( "Order periods for open orders", new v_OrderPeriod(), closeDialogHandler );
			
			public var partnershipPopup:ViewPopupDlg = new ViewPopupDlg( "Partnership List", new PartnerChooser(), afterClosePartnerList );
			
			public var deliveryDetailsPopup:ViewPopupDlg = new ViewPopupDlg( "Delivery Details", new v_DeliveryDetails(), null );
			
			
			public var defaultColumnForDateFilter:String = "order_ord_time";
			
			protected function creationCompleteHandler(event:FlexEvent):void
			{
				dateFilterTypes.removeAll();
				dateFilterTypes.addItem({code:'order_ord_time', name:resourceManager.getString('default','ORDER_ORD_TIME')});
				dateFilterTypes.addItem({code:'order_exp_time', name:resourceManager.getString('default','ORDER_EXP_TIME')});
				
				
				this.formColumnSettingsMaker.service( "OPEN_ORDER" );
				this.formButtonSettingsMaker.service( "OPEN_ORDER" );
				
				pagedRecords = new remoteListService( this.dataGrid, "OpenOrderService.getPaged", null, getPageData_resultHandler );
				trace ("-------------start creationCompleteHandler");
				this.gridColumnSequenceMaker.service( "OPEN_ORDER" );
				trace ("------------End creationCompleteHandler");
			}
			
			protected function formColumnSettingsMaker_resultHandler():void
			{
				this._formColumnSettingsString =  formColumnSettingsMaker.dataString;
			}
			
			protected function formButtonSettingsMaker_resultHandler():void
			{
				this._formButtonSettingsString =  formButtonSettingsMaker.dataString;
			}
			
			protected function gridColumnSequenceMaker_resultHandler():void
			{
				this._gridColumnSequenceString =  gridColumnSequenceMaker.dataString;
				
				if ( _gridColumnSequenceString.length > 0 )
				{
					global.adjustGridColumnSequence( _gridColumnSequenceString.substr(1), dataGrid );
				}
				
				this.startTheWindow();
			}
			
			
			protected function fltr_datetype_changeHandler(event:IndexChangeEvent):void
			{
				if ( this.fltr_datetype.selectedIndex >= 0 )
				{
					this.defaultColumnForDateFilter = this.dateFilterTypes.getItemAt( this.fltr_datetype.selectedIndex ).code;
				}
				//if (currentState == "edit") clearDetail();
				//startFiltering();
			}
			
			protected function startTheWindow():void
			{
				trace ("-------------start startTheWindow");
				//pagedRecords = new remoteListService( this.dataGrid, "OpenOrderService.getPaged", null, getPageData_resultHandler );
				//resourceManager.localeChain = ['zh_CN'];
				//global.LanguageCode="CHN";
				//this.gridColumnSequenceMaker.service( "OPEN_ORDER" );
				
				if ( global.getValueFromSiteConfigSettings("SITE_OO_FILTER_BY_EXPIRY") == 'Y' )
				{
					this.defaultColumnForDateFilter = "order_exp_time";
					this.fltr_datetype.selectedIndex = 1;
				}
				else
				{
					this.defaultColumnForDateFilter = "order_ord_time";
					this.fltr_datetype.selectedIndex = 0;
				}
				
				//this.fltr_daterange.dateText.text = "";
				//global.resetDateRangeComponent( "SITE_DEFAULT_DATERANGE_CUSTORDER", this.fltr_daterange );
				if ( global.getValueFromSiteConfigSettings("SITE_CLEAR_FILTER_BLANK") == 'Y' )
				{
					this.fltr_daterange.dateText.text = "";
				}
				else
				{
					global.resetDateRangeComponent( "SITE_DEFAULT_DATERANGE_CUSTORDER", this.fltr_daterange );
				}
				
				var value:String = global.getValueFromSiteConfigSettings( "SITE_AUTO_FILTER_WHEN_OPEN_SCREEN" );
				if ( value == 'Y' )
				{
					//this.startFiltering();
					if ( this.isPopupWindow == false )
					{
						this.startFiltering();
					}
				}
				else
				{
					;
				}
				
				if ( global.getValueFromSiteConfigSettings("SITE_PARTNERSHIP_ENABLED") == 'Y' )
				{
					this.isPartnershipEnabled = true;
				}
				else
				{
					this.isPartnershipEnabled = false;
				}
				/*
				value = global.getValueFromSiteConfigSettings( "SITE_OO_PROD_PERIOD_AVAILABLE" );
				if ( value == 'Y' )
				{
					this.canManageOrderPeriod = true;
				}
				else
				{
					this.canManageOrderPeriod = false;
				}
				*/
				this.canManageOrderPeriod = true;
				
				this.orderItemInitList.service( "-1" );
				
				this.defaultTimeMaker.service();
				
				this.customerList.service( "-1" );
				this.customerFilterList.service( "-1" );
				this.supplierList.service( 1 );
				this.carrierList.service( 2 );
				this.drawerList.service( "-1", "-1" );
				this.companyList.service( -1 );
				
				this.orderMethodTypeList.service( );
				this.transportTypeList.service( -1 );
				this.orderStatusTypeList.service( );
				this.customerSaleTypeList.service( );
				//this.delvLocationList.service( );
				this.delvLocationList.listService( new Object(), new Object(), new Object(), new Object() );
				this.terminalList.service( );
				
				this.personnelList.service( "-1", -1 );
				
				this.erpTypeList.service( );
				this.productUnitList.service( );
				this.customerPriceTypeList.service( );
				this.priceOffsetList.service( );
				
				this.productList.service( "-1" );
				
				
				trace ("------------End startTheWindow");
				
				
				//trace("this.grid.scroller1111", this.dataGrid.scroller);
				//trace("this.grid.scroller.verticalScrollBar.value", this.dataGrid.scroller.verticalScrollBar.value);
				this.dataGrid.scroller.verticalScrollBar.addEventListener(Event.CHANGE, verticalScrollBarChanged);
				this.dataGrid.addEventListener(KeyboardEvent.KEY_UP, reportKeyUp);
				this.dataGrid.columnHeaderGroup.addEventListener(GridEvent.GRID_CLICK, headerClickListener);
				
			}
			
			
			
			protected function startLoadingPages():void
			{
				killBtn.setStyle("chromeColor","0xff0000");
				this.killBtn.includeInLayout=true;
				this.killBtn.visible = true;
				this.killBtn.enabled = true;
				
				resumeBtn.setStyle("chromeColor","0x00ff00");
				this.resumeBtn.includeInLayout=true;
				this.resumeBtn.visible = true;
				this.resumeBtn.enabled = false;
				
				this.btn_create.enabled = false
				this.btn_export.enabled = false;
				this.dataGrid.enabled = false;
				this.toolbar.enabled = false;
				//this.panel.enabled = false;
				
				currentLength=0;
				currentOffset = 0;
				
				//this.exportContents = this.genData.prepExportHeader( dataGrid );
				
				//currentPage=1;
				pagedRecords.currentPage=1;
				pagedRecords.removeAll();
				pagedRecords.refresh();
				this.pb.values(0, 0);
				//this.pagedRecords.service( currentFields, currentTypes, currentSorts, currentOrders, currentPage, currentPageSize );
				this.pagedRecords.listService( currentFields, currentTypes, currentSorts, currentOrders );
			}
			
			protected function endLoadingPages():void
			{
				this.btn_create.enabled = this.canCreate;
				this.btn_export.enabled = true;
				this.dataGrid.enabled = true;
				this.toolbar.enabled = true;
				//this.panel.enabled = true;
				//this.pb.values(totalCount, totalCount);
				this.pb.values(pagedRecords.totalCount, pagedRecords.totalCount, true);
				
				this.killBtn.includeInLayout=true;
				this.killBtn.visible = true;
				this.killBtn.enabled = false;
				
				this.resumeBtn.includeInLayout=true;
				this.resumeBtn.visible = true;
				//if ( totalLength > totalCount )
				if ( pagedRecords.totalLength > pagedRecords.totalCount )
				{
					this.resumeBtn.enabled = true;
				}
				else
				{
					this.resumeBtn.enabled = false;
				}
			}
			
			protected function exportCsvHandler(event:MouseEvent):void
			{
				this.confirmReport = new ActionDialog( doExport, cancelExport, resourceManager.getString('default','CONFIRM_REPORT_CSV') );
				
				//this.startLoadingPages();
			}
			
			private function getPageData_resultHandler():void
			{
				// if not finished
				if(pagedRecords.length < pagedRecords.totalCount)
				{
					pb.values(pagedRecords.length,pagedRecords.totalCount)
				}
				else
				{
					pb.values(pagedRecords.length,pagedRecords.totalCount)
					
					this.endLoadingPages();
					
					this.dataGrid.selectedIndex = this.mainListSelection;
					if ( this.mainListSelection >= 0)
					{
						this.dataGrid_selectionChangeHandler(null);
					}
					this.mainListSelection = -1;
					
				}
				
			}
			
			
			public function doExport():void
			{
				//genData.prepOther(dataGrid,'orderlist.csv', this.pagedRecords);
				
				//f.save( this.exportContents, "orderlist.csv" );
				f.save( pagedRecords.exportContents, "orderlist.csv" );
				
				this.endLoadingPages();
			}
			
			
			public function cancelExport():void
			{
				this.endLoadingPages();
				
				//trace( this.exportContents );
			}
			
			
			
			
			protected function getPagedResult_resultHandler(event:ResultEvent):void
			{
				this.dataGrid.selectedIndex = this.mainListSelection;
				if ( this.mainListSelection >= 0)
				{
					this.dataGrid_selectionChangeHandler(null);
				}
				this.mainListSelection = -1;
			}
			
			private function lookupSupplier_resultHandler():void
			{
				if ( currentFields.hasOwnProperty( "order_supp_code" ) )
				{
					this.fltr_supplier.selectedIndex = tools.getItemIndexFromCode( currentFields["order_supp_code"], supplierList, "cmpy_code");
				}
				
				if (currentState == "edit" || currentState == "detail")
				{
					//this.order_supp_code.selectedItem = dataGrid.selectedItem.order_supp_name;
					order_supp_code.selectedIndex = tools.getItemIndexFromCode( this.dataGrid.selectedItem.order_supp_code, this.supplierList, "cmpy_code");
				}
			}
			
			private function lookupCarrier_resultHandler():void
			{
				if (currentState == "edit" || currentState == "detail")
				{
					//this.order_carr_code.selectedItem = dataGrid.selectedItem.order_carr_name;
					order_carr_code.selectedIndex = tools.getItemIndexFromCode( this.dataGrid.selectedItem.order_carr_code, this.carrierList, "cmpy_code");
				}
			}
			
			private function lookupTerminal_resultHandler():void
			{
				if (currentState == "edit" || currentState == "detail")
				{
					this.order_strm_code.selectedItem = dataGrid.selectedItem.order_strm_name;
					this.order_dtrm_code.selectedItem = dataGrid.selectedItem.order_dtrm_name;
				}
			}
			
			private function lookupTransportType_resultHandler():void
			{
				if (currentState == "edit" || currentState == "detail")
				{
					this.order_ttyp_id.selectedItem = dataGrid.selectedItem.order_ttyp_name;
				}
			}
			
			private function lookupDelvLocationByPage_resultHandler():void
			{
				if (currentState == "edit" || currentState == "detail")
				{
					this.order_dloc_code.selectedItem = dataGrid.selectedItem.order_dloc_code+' - '+dataGrid.selectedItem.order_dloc_name;
				}
			}
			
			private function lookupOrderStatusType_resultHandler():void
			{
				if ( currentFields.hasOwnProperty( "order_stat_id" ) )
				{
					this.fltr_ordstat.selectedIndex = tools.getItemIndexFromCode( currentFields["order_stat_id"], orderStatusTypeList, "ordstat_type_id");
				}
				
				if (currentState == "edit" || currentState == "detail")
				{
					this.order_stat_id.selectedItem = dataGrid.selectedItem.order_stat_name;
				}
			}
			
			
			protected function lookupCustomer_resultHandler():void
			{
				trace ("--------------Start lookupCustomer_resultHandler");
				trace ("----------------End lookupCustomer_resultHandler");
				
				/* if ( currentFields.hasOwnProperty( "order_cust_acnt" ) )
				{
					var idInFilter:int=-1;
					idInFilter = tools.getItemIndexFromCode( currentFields["order_cust_acnt"], customerList, "cust_acnt");
					this.fltr_customer.selectedIndex = idInFilter;
				} */
				
				if (currentState == "edit" || currentState == "detail")
				{
					//this.order_cust_acnt.selectedItem = dataGrid.selectedItem.order_cust_acnt + ' - ' + dataGrid.selectedItem.order_cust_name;
					var idInForm:int=-1;
					idInForm = tools.getItemIndexFromCode( dataGrid.selectedItem.order_cust_acnt, customerList, "cust_acnt");
					this.order_cust_acnt.selectedIndex = idInForm;
				}
			}
			
			protected function lookupCustomerFilter_resultHandler():void
			{
				trace ("--------------Start lookupCustomerFilter_resultHandler");
				trace ("----------------End lookupCustomerFilter_resultHandler");
				
				if ( currentFields.hasOwnProperty( "order_cust_acnt" ) )
				{
					var idInFilter:int=-1;
					idInFilter = tools.getItemIndexFromCode( currentFields["order_cust_acnt"], customerFilterList, "cust_acnt");
					this.fltr_customer.selectedIndex = idInFilter;
				}
				
				/* if (currentState == "edit" || currentState == "detail")
				{
					//this.order_cust_acnt.selectedItem = dataGrid.selectedItem.order_cust_acnt + ' - ' + dataGrid.selectedItem.order_cust_name;
					var idInForm:int=-1;
					idInForm = tools.getItemIndexFromCode( dataGrid.selectedItem.order_cust_acnt, customerList, "cust_acnt");
					this.order_cust_acnt.selectedIndex = idInForm;
				} */
			}
			
			
			private function verticalScrollBarChanged(event:Event):void
			{
				if ( this.dataGrid.scroller != null)
				{
					var vs:VScrollBar;
					vs = this.dataGrid.scroller.verticalScrollBar;
					//trace("this.grid.scroller.verticalScrollBar.value", vs.value, vs.maximum, vs.minimum, vs.stepSize, vs.pageSize, vs.	snapInterval);
				}
				else
				{
					trace("grid is changed");
				}
			}
			
			private function reportKeyUp(event:KeyboardEvent):void
			{
				if ( this.dataGrid.scroller != null)
				{
					var vs:VScrollBar;
					vs = this.dataGrid.scroller.verticalScrollBar;
					//trace("this.grid.scroller.verticalScrollBar.value", vs.value, vs.maximum, vs.minimum, vs.stepSize, vs.pageSize, vs.	snapInterval);
				}
				else
				{
					trace("grid is changed");
				}
			}
			
			private function headerClickListener(event:GridEvent):void
			{
				if(event.column.dataField!='order_items')
				{
					var currentRenderer:IGridItemRenderer;
					var dir:String;
					
					if ( global.sortingBySingleColumn == true )
					{	// sorted by single column only
						for (var i:int=0; i < dataGrid.columns.length; i++)
						{
							currentRenderer = dataGrid.columnHeaderGroup.getHeaderRendererAt(i);
							if ( currentRenderer != null)
							{
								(currentRenderer as DKI_HeaderColumn_Renderer).setImage('');
							}
							//(currentRenderer as DKI_HeaderColumn_Renderer).setImage(''); 
						}
					}
					else
					{	// sorted by multiple columns
						;
					}
					currentRenderer = dataGrid.columnHeaderGroup.getHeaderRendererAt(event.columnIndex);
					
					if( currentSorts.hasOwnProperty(event.column.dataField ) )
					{
						dir = currentSorts[event.column.dataField];
						if( dir=="ASC" )
						{
							dir = "DESC";
						}
						else if ( dir == "DESC" )
						{
							dir = "";
						}
						else if ( dir == "" )
						{
							dir = "ASC";
						}
						else 
						{
							dir = "ASC";
						}
						
						if ( dir != "" )
						{
							currentSorts[event.column.dataField] = dir;	
						}
						else
						{
							delete currentSorts[event.column.dataField];
							delete currentOrders[event.column.dataField];
						}
					}
					else
					{
						if ( global.sortingBySingleColumn == true )
						{	// sorted by single column only
							currentSorts = new Object();
							currentOrders = new Object();
							currentSortSeq = 0;
						}
						else
						{	// sorted by multiple columns
							;
						}
						currentSorts[event.column.dataField] = "ASC";	
						dir = currentSorts[event.column.dataField];
						currentSortSeq += 1;
						currentOrders[event.column.dataField] = currentSortSeq;	
					}
					(currentRenderer as DKI_HeaderColumn_Renderer).setImage(dir);
					this.startFiltering();
				}
			}
			
			
			protected function orderItemInitList_resultHandler( ):void
			{
				trace ("---------------start orderItemInitList_resultHandler");
				
				if (currentState == "edit")
				{
					trace ("---------------edit orderItemInitList_resultHandler");
					this.orderItemGrid.dataProvider = this.mergeOrderItems();
				}
				if (currentState == "detail")
				{
					trace ("orderItemInitList_resultHandler", dataGrid,  dataGrid.selectedItem );
					if ( dataGrid.selectedItem != null )
					{
						this.orderItemGrid.dataProvider = this.orderItemList;//  dataGrid.selectedItem.order_items;
						this.originalItems = new ArrayCollection();
						for each(var x:Object in this.orderItemList)
						{
							trace( "orderItemInitList_resultHandler x", x.oitem_prod_code, x.oitem_prod_cmpy, x.oitem_prod_qty );
							this.originalItems.addItem(ObjectUtil.copy(x));
						}
						
					}
				}
				
				trace ("---------------End orderItemInitList_resultHandler");
			}
			
			protected function orderItemList_resultHandler():void
			{
				trace ("--------------Start orderItemList_resultHandler");
				
				if ( orderItemList.length>0 )
				{
					this.orderItemGrid.dataProvider = null;
					this.orderItemGrid.dataProvider = orderItemList;
				}
				else
				{
					this.orderItemGrid.dataProvider = null;
				}
				
				this.orderItemInitList.service( dataGrid.selectedItem.order_drwr_code ); 
				trace ("----------------End orderItemList_resultHandler");
			}
			
			protected function orderTripList_resultHandler( ):void
			{
				trace ("--------------Start orderTripList_resultHandler");

				if ( orderTripList.length>0 )
				{
					this.orderTripGrid.dataProvider = null;
					this.orderTripGrid.dataProvider = orderTripList;
				}
				else
				{
					this.orderTripGrid.dataProvider = null;
				}
				trace ("----------------End orderTripList_resultHandler");
			}
			
			protected function dataGrid_selectionChangeHandler(event:GridSelectionEvent):void
			{
				if(currentState != 'widget')
				{
					idx=dataGrid.selectedIndex;
					//dataGrid.ensureCellIsVisible(idx+11);
					dataGrid.ensureCellIsVisible(idx);
					
					currentState = "edit";					
					adjustOrderEditability( dataGrid.selectedItem.order_approved, dataGrid.selectedItem.order_stat_id );
					
					//trace ("dataGrid.selectedItem.order_items", dataGrid.selectedItem.order_items);
					//if ( dataGrid.selectedItem.order_stat_id == ORDER_STATUS__NEW && dataGrid.selectedItem.order_approved == 'N' )
					if ( dataGrid.selectedItem.order_approved == 'N' )
					{
						currentState = "edit";
					}
					else
					{
						currentState = "detail";
					}
					this.btn_save.enabled = this.canUpdate;
					
					if ( _formColumnSettingsString.length > 0 )
					{
						global.adjustFormFieldSettings( _formColumnSettingsString.substr(1), this );
					}
					
					if ( _formButtonSettingsString.length > 0 )
					{
						global.adjustFormButtonSettings( _formButtonSettingsString.substr(1), this );
					}
					
					// get selectedIndex for company list
					if ( this.dataGrid.selectedIndex>=0 )
					{
						order_supp_code.selectedIndex = tools.getItemIndexFromCode( this.dataGrid.selectedItem.order_supp_code, this.supplierList, "cmpy_code");
						order_carr_code.selectedIndex = tools.getItemIndexFromCode( this.dataGrid.selectedItem.order_carr_code, this.carrierList, "cmpy_code");
						order_drwr_code.selectedIndex = tools.getItemIndexFromCode( this.dataGrid.selectedItem.order_drwr_code, this.drawerList, "cmpy_code");
						order_cust_acnt.selectedIndex = tools.getItemIndexFromCode( this.dataGrid.selectedItem.order_cust_acnt, customerList, "cust_acnt");
					}
					
					// get the order details including its periods setting
					var order_id:int=-1;
					
					order_id = int( dataGrid.selectedItem.order_sys_no );
					
					this.orderItemList.service( order_id );
					this.orderTripList.service( order_id );
					this.orderInstructions.service( order_id, -1 );
					
					this.orderItemTripList.removeAll();
					this.orderPeriodList.removeAll();
					
					/*
					6 - ORD_EXPIRED: order expired
					0 - ORD_NEW: new order
					5 - ORD_COMPLETED: fully delivered  !!!
					8 - ORD_PARTIALLY_COMPLETED: fully loaded but partially delivered !!!
					3 - ORD_DELIVERY: fully loaded but not delivered yet  !!!
					1 - ORD_FILLING: partially scheduled
					7 - ORD_PARTIALLY_DELIVERY: partially loaded but not all loaded
					2 - ORD_SCHEDULED: fully scheduled  ??
					4 - ORD_OUTSTANDING : other status
					*/
					if ( dataGrid.selectedItem.order_approved == 'N' )
					{
						this.btnSchedule.enabled = false;
						btnMakeTransaction.enabled = false;
						this.orderTripGrid.enabled = false;
						this.orderItemTripGrid.enabled = false;
						
						if ( dataGrid.selectedItem.order_stat_id == 0 )
						{
							btn_delete.enabled = this.canDelete;
						}
						else
						{
							btn_delete.enabled = false;
						}
					}
					else
					{
						this.btnSchedule.enabled = true;
						this.orderTripGrid.enabled = true;
						this.orderItemTripGrid.enabled = true;
						
						if ( dataGrid.selectedItem.order_stat_id == 0 
							|| dataGrid.selectedItem.order_stat_id == 1 
							|| dataGrid.selectedItem.order_stat_id == 7 
							|| dataGrid.selectedItem.order_stat_id == 2 
						)
						{
							btnMakeTransaction.enabled = this.canCreate;
						}
						else
						{
							btnMakeTransaction.enabled = false;
						}
					}
				}
			}
			
			protected function orderInstructions_resultHandler( ):void
			{
				trace ("--------------Start orderInstructions_resultHandler");
				
				dataGrid.selectedItem.order_instructions = orderInstructions.dataString;
				this.order_instructions.text = orderInstructions.dataString;
				
				trace ("----------------End orderInstructions_resultHandler");
			}
			
			private function mergeOrderItems():ArrayCollection
			{
				var temp:ArrayCollection = new ArrayCollection;
				var used:Boolean;
				var x:Object;
				var y:Object;
				
				this.originalItems = new ArrayCollection( );
				
				trace ("*****************start mergeOrderItems************");
				
				trace ("dataGrid", dataGrid);
				
				if ( dataGrid==null || dataGrid.selectedItem==null || this.orderItemList==null || this.orderItemList.length==0 )
				{
					trace ("*****************dataGrid is null************");
					for each(x in orderItemInitList)
					{
						temp.addItem(x);
						this.originalItems.addItem(ObjectUtil.copy(x));
						trace( "mergeOrderItems xy", x.oitem_prod_code, x.oitem_prod_cmpy, x.oitem_prod_qty );
					}
					return temp;
				}
				
				trace ("dataGrid.selectedItem", dataGrid.selectedItem);
				trace ("dataGrid.selectedItem.order_items", dataGrid.selectedItem.order_items);
				for each(x in this.orderItemList)
				{
					trace( "mergeOrderItems x", x.oitem_prod_code, x.oitem_prod_cmpy, x.oitem_prod_qty );
					temp.addItem(x);
					this.originalItems.addItem(ObjectUtil.copy(x));
				}
				
				for each(x in orderItemInitList)
				{
					used = false;
					for each(y in orderItemList)
					{
						if ( y.oitem_prod_code == x.oitem_prod_code && y.oitem_prod_cmpy == x.oitem_prod_cmpy )
						{
							used = true;
							break;
						}
					}
					if ( used == false )
					{
						trace( "mergeOrderItems y", x.oitem_prod_code, x.oitem_prod_cmpy, x.oitem_prod_qty );
						temp.addItem(x);
						this.originalItems.addItem(ObjectUtil.copy(x));
					}
				}
				
				//this.originalItems = new ArrayCollection( temp.source );
				//this.originalItems = ObjectUtil.copy(temp);
				trace ("*****************end of inside mergeOrderItems************");
				
				return temp;
			}
			
			protected function adjustOrderEditability(apprv:String, stat:int):void
			{
				//order_sys_no
				//order_supp_code
				//order_cust_acnt
				//order_cust_no
				//order_ord_time
				//order_dlv_time
				//order_exp_time
				//order_stat_id
				//order_mthd_id--
				//order_app_no
				//order_app_time
				//order_inv_no
				//order_total
				//order_limit		
				//order_price_printed
				//order_pay_note
				//order_psnl_code
				//order_src_id
				if ( apprv == "N" && stat != ORDER_STATUS__EXPIRED )
				{
					order_ref_code.enabled = true;
					order_ttyp_id.enabled = true;
					order_styp_id.enabled = true;
					order_drwr_code.enabled = true;
					order_carr_code.enabled = true;
					order_dloc_code.enabled = true;
					order_dtrm_code.enabled = true;
					order_strm_code.enabled = true;
					order_approved.enabled = false;
					order_trsf_type.enabled = true;
				}
				else
				{
					order_ref_code.enabled = false;
					order_ttyp_id.enabled = false;
					order_styp_id.enabled = false;
					order_drwr_code.enabled = false;
					order_carr_code.enabled = false;
					order_dloc_code.enabled = false;
					order_dtrm_code.enabled = false;
					order_strm_code.enabled = false;
					order_approved.enabled = false;
					order_trsf_type.enabled = false;
				}
			}
			
			protected function orderItemTripList_resultHandler( ):void
			{
				trace ("--------------Start orderItemTripList_resultHandler");
				/*
				orderItemGrid.selectedItem.oitem_schedules = null;
				orderItemGrid.selectedItem.oitem_schedules = this.orderItemTripList;
				
				if ( orderItemGrid.selectedItem.oitem_schedules.length>0 )
				{
				this.orderItemTripGrid.dataProvider = null;
				this.orderItemTripGrid.dataProvider = orderItemGrid.selectedItem.oitem_schedules;
				}
				else
				{
				this.orderItemTripGrid.dataProvider = null;
				}
				*/
				if ( orderItemTripList.length>0 )
				{
					this.orderItemTripGrid.dataProvider = null;
					this.orderItemTripGrid.dataProvider = orderItemTripList;
				}
				else
				{
					this.orderItemTripGrid.dataProvider = null;
				}
				trace ("----------------End orderItemTripList_resultHandler");
			}
			
			protected function orderPeriodList_resultHandler( ):void
			{
				trace ("--------------Start orderPeriodList_resultHandler");
				/*
				orderItemGrid.selectedItem.oitem_schedules = null;
				orderItemGrid.selectedItem.oitem_schedules = this.orderItemTripList;
				
				if ( orderItemGrid.selectedItem.oitem_schedules.length>0 )
				{
				this.orderItemTripGrid.dataProvider = null;
				this.orderItemTripGrid.dataProvider = orderItemGrid.selectedItem.oitem_schedules;
				}
				else
				{
				this.orderItemTripGrid.dataProvider = null;
				}
				*/
				if ( orderPeriodList.length>0 )
				{
					this.orderPeriodGrid.dataProvider = null;
					this.orderPeriodGrid.dataProvider = orderPeriodList;
				}
				else
				{
					this.orderPeriodGrid.dataProvider = null;
				}
				trace ("----------------End orderPeriodList_resultHandler");
			}
			
			protected function orderItemGrid_selectionChangeHandler(event:GridSelectionEvent):void
			{
				if ( orderItemGrid.selectedIndex < 0 )
				{
					return;
				}
				
				trace( "orderItemGrid.selectedItem", orderItemGrid.selectedItem );
				trace( "orderItemGrid.selectedItem.oitem_periods", orderItemGrid.selectedItem.oitem_periods );
				if ( orderItemGrid.selectedItem.oitem_periods != null )
				{
					trace( "orderItemGrid.selectedItem.oitem_periods.length", orderItemGrid.selectedItem.oitem_periods.length );
				}
				
				//orderPeriodGrid.dataProvider = orderItemGrid.selectedItem.oitem_periods;
				
				//orderItemTripGrid.dataProvider = orderItemGrid.selectedItem.oitem_schedules;
				var order_id:int;
				var prod_code:String;
				var prod_cmpy:String;
				order_id = int( orderItemGrid.selectedItem.oitem_order_id );
				prod_code = orderItemGrid.selectedItem.oitem_prod_code;
				prod_cmpy = orderItemGrid.selectedItem.oitem_prod_cmpy;
				orderItemTripList.service( order_id, prod_code, prod_cmpy );
				orderPeriodList.service( order_id, prod_code, prod_cmpy ); 
				
			}
			
			protected function orderPeriodGrid_selectionChangeHandler(event:GridSelectionEvent):void
			{
			}
			
			protected function cancel_clickHandler():void
			{
				clearDetail();
				if ( currentState== "create" )
				{
					dataGrid.enabled=true;
				}
				currentState="normal";
				dataGrid.selectedIndex = -1;
			}			
			
			protected function custOrderNoMaker_resultHandler():void
			{
				//order_cust_no.enabled = true;
				if ( custOrderNoMaker.dataString == "ERROR" )
				{
					order_cust_no.text = "";
				}
				else
				{
					order_cust_no.text = custOrderNoMaker.dataString;
				}
			}
			
			protected function defaultTimeMaker_resultHandler():void
			{
				this._defaultTimeString = defaultTimeMaker.dataString;
				global.gDefaultTimeString = defaultTimeMaker.dataString;
			}
			
			protected function lookupDrawer_resultHandler():void
			{
				//order_cust_no.enabled = true;
				if ( currentState == "create" )
				{
					if ( order_supp_code.selectedIndex >= 0 )
					{
						//order_drwr_code.selectedItem = supplierList[order_supp_code.selectedIndex].cmpy_name;
						order_drwr_code.selectedIndex = tools.getItemIndexFromCode( supplierList[order_supp_code.selectedIndex].cmpy_code, this.drawerList, "cmpy_code");
					}
				}
				if ( currentState == "edit" || currentState == "detail" )
				{
					//order_drwr_code.selectedItem = dataGrid.selectedItem.order_drwr_name;
					order_drwr_code.selectedIndex = tools.getItemIndexFromCode( dataGrid.selectedItem.order_drwr_code, this.drawerList, "cmpy_code");
				}
			}
			
			protected function adjustOrderCustomer():void
			{
				var supplier:String;
				
				trace( "adjustOrderCustomer", this.order_supp_code.selectedIndex );
				
				if ( this.order_supp_code.selectedIndex < 0 )
				{
					supplier = "-1";
				}
				else
				{
					supplier = supplierList[order_supp_code.selectedIndex].cmpy_code;
					this.drawerList.service( supplier, "-1" );
					if ( currentState == "create" )
					{
						//order_drwr_code.selectedItem = supplierList[order_supp_code.selectedIndex].cmpy_name;
						order_drwr_code.selectedIndex = tools.getItemIndexFromCode( supplierList[order_supp_code.selectedIndex].cmpy_code, this.drawerList, "cmpy_code");
					}
				}
				
				trace( "adjustOrderCustomer", supplier, this.order_supp_code.selectedIndex );
				
				this.customerList.service( supplier );
				
				if ( currentState == "create" )
				{
					order_cust_no.text = "";
				}
				
			}
			
			protected function adjustSupplerProducts():void
			{
				var supplier:String;
				
				trace( "adjustSupplerProducts", this.order_supp_code.selectedIndex );
				
				if ( this.order_supp_code.selectedIndex < 0 )
				{
					supplier = "-1";
				}
				else
				{
					supplier = supplierList[order_supp_code.selectedIndex].cmpy_code;
				}
				
				trace( "adjustSupplerProducts", supplier, this.order_supp_code.selectedIndex );
				
				this.orderItemInitList.service( supplier );
			}
			
			protected function adjustDrawerProducts():void
			{
				this.adjustSupplerProducts();
				return;
				
				var drawer:String;
				
				trace( "adjustDrawerProducts", this.order_drwr_code.selectedIndex );
				
				if ( this.order_drwr_code.selectedIndex < 0 )
				{
					drawer = "-1";
				}
				else
				{
					drawer = drawerList[order_drwr_code.selectedIndex].cmpy_code;
				}
				
				trace( "adjustDrawerProducts", drawer, this.order_drwr_code.selectedIndex );
				
				this.orderItemInitList.service( drawer );
			}
			
			protected function adjustOrderCustomerNumber():void
			{
				if (currentState!="create")
				{
					return;
				}
				
				var obj:Object = new Object();
				
				if (order_supp_code.selectedIndex>=0)
				{
					obj.order_supp_code = supplierList[order_supp_code.selectedIndex].cmpy_code;
				}
				else
				{
					obj.order_supp_code = "-1";
				}
				if (order_cust_acnt.selectedIndex>=0)
				{
					obj.order_cust_acnt = customerList[order_cust_acnt.selectedIndex].cust_acnt;
					obj.order_cust_code = customerList[order_cust_acnt.selectedIndex].cust_cmpy_code;
				}
				else
				{
					obj.order_cust_acnt = "-1";
					obj.order_cust_code = "-1";
				}
				if (order_dtrm_code.selectedIndex>=0)
				{
					obj.order_dtrm_code = terminalList[order_dtrm_code.selectedIndex].term_code;
				}
				else
				{
					obj.order_dtrm_code = terminalList[0].term_code;
				}
				
				custOrderNoMaker.service( obj )
				
			}
			
			protected function getOrderMethod(trnspt_type:int):int
			{
				if ( trnspt_type == 1 || trnspt_type == 3 )
				{
					return 1;
				}
				else
				{
					return 0;
				}
			}
			
			protected function adjustTransportType():void
			{
				var ord_mthd:int;
				
				if ( this.order_mthd_id.selectedIndex < 0 )
				{
					ord_mthd = -1;
				}
				else
				{
					ord_mthd = orderMethodTypeList[order_mthd_id.selectedIndex].ordmthd_type_id;
				}
				
				this.transportTypeList.service( ord_mthd );
			}
			
			protected function fltr_ordcustno_keyUpHandler(event:KeyboardEvent):void
			{
				var keyCode:uint = 0;
				if (event == null)
				{
					keyCode=0;
				}
				else
				{
					keyCode=event.keyCode;
				}
				
				if ( keyCode == 13 )
				{
					if (currentState == "edit") clearDetail();
					startFiltering();
				}
			}
			
			protected function fltr_refcode_keyUpHandler(event:KeyboardEvent):void
			{
				var keyCode:uint = 0;
				if (event == null)
				{
					keyCode=0;
				}
				else
				{
					keyCode=event.keyCode;
				}
				
				if ( keyCode == 13 )
				{
					if (currentState == "edit") clearDetail();
					startFiltering();
				}
			}
			
			protected function fltr_supplier_changeHandler(event:IndexChangeEvent):void
			{
				var supplier:String;
				
				if ( this.fltr_supplier.selectedIndex < 0 )
				{
					supplier = "-1";
				}
				else
				{
					supplier = supplierList[fltr_supplier.selectedIndex].cmpy_code;
				}
				
				fltr_customer.textInput.text='';
				fltr_customer.selectedIndex = -1;
				
				this.customerFilterList.service( supplier );
				
				//if (currentState == "edit") clearDetail();
				//startFiltering();
			}
			
			protected function fltr_customer_changeHandler(event:IndexChangeEvent):void
			{
				//if (currentState == "edit") clearDetail();
				//startFiltering();
			}
			
			protected function fltr_ordstat_changeHandler(event:IndexChangeEvent):void
			{
				//if (currentState == "edit") clearDetail();
				//startFiltering();
			}
			
			private function fltr_daterange_changeHandler():void
			{
				if (currentState == "edit") clearDetail();
				startFiltering();
			}						
			
			private function startFiltering():void
			{
				var supplierFilter:String = '';  
				var customerFilter:String = '';  
				var ordstatFilter:String = '';
				var refcodeFilter:String = '';
				var ordcustnoFilter:String = '';
				var fields:Object;
				var types:Object;
				
				//interruptor=false;
				pagedRecords.interruptor=false;
				
				fields = new Object();
				types = new Object();
				
				if (fltr_supplier.selectedIndex > -1) 
				{
					supplierFilter = "order_supp_code='"+supplierList[fltr_supplier.selectedIndex].cmpy_code+"' ";
					fields["order_supp_code"] = supplierList[fltr_supplier.selectedIndex].cmpy_code;
					if ( fields["order_supp_code"] == "ANY" )
					{
						supplierFilter = '';
						fields["order_supp_code"] = "";
					}
				}
				else
				{
					if ( global.setComboBoxNoSelection == true )
					{
						fltr_supplier.selectedIndex = -1;
					}
					supplierFilter = '';
					fields["order_supp_code"] = "";
				}
				types["order_supp_code"] = "EXACT_STRING";
				
				if (fltr_customer.selectedIndex > -1) 
				{
					customerFilter = "order_cust_acnt='"+customerFilterList[fltr_customer.selectedIndex].cust_acnt+"' ";
					fields["order_cust_acnt"] = customerFilterList[fltr_customer.selectedIndex].cust_acnt;
					if ( fields["order_cust_acnt"] == "ANY" )
					{
						customerFilter = '';
						fields["order_cust_acnt"] = "";
					}
				}
				else
				{
					if ( global.setComboBoxNoSelection == true )
					{
						fltr_customer.selectedIndex = -1;
					}
					customerFilter = '';
					fields["order_cust_acnt"] = "";
				}
				types["order_cust_acnt"] = "EXACT_STRING";
				
				if ( this.fltr_daterange.dateText.text.length > 0 )
				{
					if(this.fltr_daterange.sDate != null) 
					{
						fields[this.defaultColumnForDateFilter]=dateConvertLong.format(fltr_daterange.sDate) + "~~" + dateConvertLong.format(fltr_daterange.eDate);
						types[this.defaultColumnForDateFilter]="DATETIME";
					}
				}
				
				
				if ( this.currentState != "widget" )
				{
					if (fltr_ordstat.selectedIndex > -1) 
					{
						ordstatFilter = "order_stat_id="+orderStatusTypeList[fltr_ordstat.selectedIndex].ordstat_type_id+" ";
						fields["order_stat_id"] = orderStatusTypeList[fltr_ordstat.selectedIndex].ordstat_type_id;
					}
					else
					{
						if ( global.setComboBoxNoSelection == true )
						{
							fltr_ordstat.selectedIndex = -1;
						}
						ordstatFilter = '';
						fields["order_stat_id"] = "";
					}
					types["order_stat_id"] = "NUMBER";
					
					if(fltr_ordcustno.text!='')
					{					
						ordcustnoFilter = "(UPPER(TO_CHAR(order_cust_no)) LIKE UPPER('%"+(fltr_ordcustno.text)+"%') ) ";
						//ordcustnoFilter = "order_cust_no = " + fltr_ordcustno.text + " ";
						fields["order_cust_no"] = fltr_ordcustno.text;
					}
					else
					{
						ordcustnoFilter = '';
						fields["order_cust_no"] = "";
					}
					types["order_cust_no"] = "STRING";
					//types["order_cust_no"] = "NUMBER";
					
					if(fltr_refcode.text!='')
					{					
						refcodeFilter = "(UPPER(order_ref_code) LIKE UPPER('%"+(fltr_refcode.text)+"%') ) ";
						fields["order_ref_code"] = fltr_refcode.text;
					}
					else
					{
						refcodeFilter = '';
						fields["order_ref_code"] = "";
					}
					types["order_ref_code"] = "STRING";
				}
				
				currentFilter = "WHERE 1=1 ";
				if ( ordcustnoFilter.length > 0 )
				{
					currentFilter += "AND " + ordcustnoFilter;
				}
				if ( refcodeFilter.length > 0 )
				{
					currentFilter += "AND " + refcodeFilter;
				}
				if ( supplierFilter.length > 0 )
				{
					currentFilter += "AND " + supplierFilter;
				}
				if ( customerFilter.length > 0 )
				{
					currentFilter += "AND " + customerFilter;
				}
				if ( ordstatFilter.length > 0 )
				{
					currentFilter += "AND " + ordstatFilter;
				}
				
				if ( fltr_ordcustno.text != "" )
				{
					fields = new Object();
					types = new Object();
					fields["order_cust_no"] = fltr_ordcustno.text;
					types["order_cust_no"] = "STRING";
					currentFields = fields;
					currentTypes = types;
				}
				else
				{
					currentFields = fields;
					currentTypes = types;
				}
				
				this.startLoadingPages();
				
				trace("this.grid.scroller3333", this.dataGrid.scroller);
				trace("this.grid.scroller.verticalScrollBar.value", this.dataGrid.scroller.verticalScrollBar.value);
			}
			
			private function findByOrderCustNo(supplier:String, order_no:String):void
			{
				var fields:Object;
				var types:Object;
				
				fields = new Object();
				types = new Object();
				
				fields["order_supp_code"] = supplier;
				types["order_supp_code"] = "STRING";
				fields["order_cust_no"] = order_no;
				types["order_cust_no"] = "NUMBER";
				
				//currentPage=1;
				pagedRecords.currentPage=1;
				pagedRecords.removeAll();
				pagedRecords.refresh();
				//this.pagedRecords.service( fields, types, currentSorts, currentOrders, currentPage, currentPageSize );
				this.pagedRecords.listService( fields, types, currentSorts, currentOrders );
			}
			
			private function findByID(id:String):void
			{
				var fields:Object;
				var types:Object;
				
				fields = new Object();
				types = new Object();
				
				fields["order_sys_no"] = id;
				types["order_sys_no"] = "NUMBER";
				
				//currentPage=1;
				pagedRecords.currentPage=1;
				pagedRecords.removeAll();
				pagedRecords.refresh();
				//this.pagedRecords.service( fields, types, currentSorts, currentOrders, currentPage, currentPageSize );
				this.pagedRecords.listService( fields, types, currentSorts, currentOrders );
			}
			
			protected function filterRecords(event:MouseEvent):void
			{
				if (currentState == "edit") clearDetail();
				this.startFiltering();
			}
			
			protected function refreshRecords(event:MouseEvent):void
			{
				if ( currentState != "widget" )
				{
					currentState = 'normal';
					dataGrid.enabled=true;
				}
				clearDetail();
				fltr_supplier.selectedIndex = -1;
				fltr_customer.textInput.text = '';
				fltr_customer.selectedIndex = -1;
				if ( currentState != "widget" )
				{
					fltr_ordstat.selectedIndex = -1;
					fltr_refcode.text = '';
					fltr_ordcustno.text = '';
				}
				
				if ( global.getValueFromSiteConfigSettings("SITE_CLEAR_FILTER_BLANK") == 'Y' )
				{
					this.fltr_daterange.dateText.text = "";
				}
				else
				{
					global.resetDateRangeComponent( "SITE_DEFAULT_DATERANGE_CUSTORDER", this.fltr_daterange );
				}
				
				
				dataGrid.selectedIndex = -1;
				currentFilter = null;
				currentOrder = null;
				currentFields = new Object();
				currentTypes = new Object();
				
				currentSorts = new Object();
				currentOrders = new Object();
				var currentRenderer:IGridItemRenderer;
				for (var i:int=0; i < dataGrid.columns.length; i++)
				{
					currentRenderer = dataGrid.columnHeaderGroup.getHeaderRendererAt(i);
					if ( currentRenderer != null)
					{
						(currentRenderer as DKI_HeaderColumn_Renderer).setImage('');
					}
					//(currentRenderer as DKI_HeaderColumn_Renderer).setImage(''); 
				}
				this.startFiltering();
				//this.startLoadingPages();
				trace("this.grid.scroller2222", this.dataGrid.scroller);
				trace("this.grid.scroller.verticalScrollBar.value", this.dataGrid.scroller.verticalScrollBar.value);
			}
			
			protected function clearDetail(): void
			{
				if (currentState != 'widget')
				{
				}
			}			
			
			private function editRecord():void
			{
				
				if ( this.checkFields() > 0 )
				{
					this.btn_save.enabled = this.canUpdate;
					return;
				}
				
				if ( this.checkItemFields() == false )
				{
					this.btn_save.enabled = this.canUpdate;
					return;
				}
				
				var obj:Object = new Object();
				
				obj.order_sys_no = order_sys_no.text;
				
				if (order_supp_code.selectedIndex>=0)
				{
					obj.order_supp_code = supplierList[order_supp_code.selectedIndex].cmpy_code;
				}
				else
				{
					obj.order_supp_code = dataGrid.selectedItem.order_supp_code;
				}
				if (order_cust_acnt.selectedIndex>=0)
				{
					obj.order_cust_acnt = customerList[order_cust_acnt.selectedIndex].cust_acnt;
					obj.order_cust_code = customerList[order_cust_acnt.selectedIndex].cust_cmpy_code;
				}
				else
				{
					obj.order_cust_acnt = dataGrid.selectedItem.order_cust_acnt;
					obj.order_cust_code = dataGrid.selectedItem.order_cust_code;
				}
				
				obj.order_cust_no = order_cust_no.text;
				obj.order_ref_code = order_ref_code.text;
				
				/* obj.order_ord_time = dateConvertLong.format(order_ord_time.selectedDate);
				obj.order_dlv_time = dateConvert.format(order_dlv_time.selectedDate);
				obj.order_exp_time = dateConvert.format(order_exp_time.selectedDate) + " " + this._defaultTimeString; */
				
				obj.order_ord_time = global.convertDateTimeToIsoString( order_ord_time.selectedDate, order_ord_time.timeEnabled, "" );
				obj.order_dlv_time = global.convertDateTimeToIsoString( order_dlv_time.selectedDate, order_dlv_time.timeEnabled, "" );
				obj.order_exp_time = global.convertDateTimeToIsoString( order_exp_time.selectedDate, order_exp_time.timeEnabled, this._defaultTimeString );
				
				if (order_stat_id.selectedIndex>=0)
				{
					obj.order_stat_id = orderStatusTypeList[order_stat_id.selectedIndex].ordstat_type_id;
				}
				else
				{
					obj.order_stat_id = dataGrid.selectedItem.order_stat_id;
				}
				if (order_mthd_id.selectedIndex>=0)
				{
					obj.order_mthd_id = orderMethodTypeList[order_mthd_id.selectedIndex].ordmthd_type_id;
				}
				else
				{
					obj.order_mthd_id = orderMethodTypeList[0].ordmthd_type_id;
				}
				if (order_ttyp_id.selectedIndex>=0)
				{
					obj.order_ttyp_id = transportTypeList[order_ttyp_id.selectedIndex].trnspt_type_id;
				}
				else
				{
					obj.order_ttyp_id = dataGrid.selectedItem.order_ttyp_id;
				}
				if (order_styp_id.selectedIndex>=0)
				{
					obj.order_styp_id = customerSaleTypeList[order_styp_id.selectedIndex].sale_type_id;
				}
				else
				{
					obj.order_styp_id = dataGrid.selectedItem.order_styp_id;
				}
				
				if (order_drwr_code.selectedIndex>=0)
				{
					obj.order_drwr_code = drawerList[order_drwr_code.selectedIndex].cmpy_code;
				}
				else
				{
					obj.order_drwr_code = dataGrid.selectedItem.order_drwr_code;
				}
				if (order_carr_code.selectedIndex>=0)
				{
					obj.order_carr_code = carrierList[order_carr_code.selectedIndex].cmpy_code;
				}
				else
				{
					obj.order_carr_code = "ANY";
				}
				if (order_dloc_code.selectedIndex>=0)
				{
					obj.order_dloc_code = delvLocationList[order_dloc_code.selectedIndex].delv_code;
				}
				else
				{
					obj.order_dloc_code = dataGrid.selectedItem.order_dloc_code;
				}
				if (order_dtrm_code.selectedIndex>=0)
				{
					obj.order_dtrm_code = terminalList[order_dtrm_code.selectedIndex].term_code;
				}
				else
				{
					obj.order_dtrm_code = dataGrid.selectedItem.order_dtrm_code;
				}
				if (order_strm_code.selectedIndex>=0)
				{
					obj.order_strm_code = terminalList[order_strm_code.selectedIndex].term_code;
				}
				else
				{
					obj.order_strm_code = dataGrid.selectedItem.order_strm_code;
				}
				
				obj.order_approved = (order_approved.selected==true?"on":"");
				//obj.order_app_no = order_app_no.text;
				//obj.order_app_time = dateConvert.format(order_app_time.selectedDate);
				//obj.order_inv_no = order_inv_no.text;
				obj.order_total = order_total.text;
				obj.order_limit = order_limit.text;
				obj.order_trsf_type = order_trsf_type.text;
				obj.order_price_printed = (order_price_printed.selected==true?"on":"");
				obj.order_pay_note = order_pay_note.text;
				
				if (order_psnl_code.selectedIndex>=0)
				{
					obj.order_psnl_code = personnelList[order_psnl_code.selectedIndex].psnl_code;
				}
				else
				{
					obj.order_psnl_code = dataGrid.selectedItem.order_psnl_code;
				}
				if (order_src_id.selectedIndex>=0)
				{
					obj.order_src_id = erpTypeList[order_src_id.selectedIndex].erp_type_id;
				}
				else
				{
					obj.order_src_id = dataGrid.selectedItem.order_src_id;
				}
				
				obj.order_instructions = order_instructions.text;
				
				obj.order_sold_to_num = this.order_sold_to_num.text;
				obj.order_ship_to_num = this.order_ship_to_num.text;
				
				
				obj.has_items = 0;
				var items:ArrayCollection=new ArrayCollection();
				var x:Object;
				var y:Object;
				var actions:ArrayCollection=new ArrayCollection();
				var action:Object;
				var match_found:Boolean=false;
				for each ( x in this.orderItemGrid.dataProvider)
				{
					action = new Object();
					action.option = 0;  // do nothing
					trace( "********X", x.oitem_prod_code, x.oitem_prod_qty);
					match_found = false;
					for each ( y in this.originalItems )
					{
						if ( x.oitem_prod_code == y.oitem_prod_code && x.oitem_prod_cmpy == y.oitem_prod_cmpy )
						{
							if ( x.oitem_prod_qty == y.oitem_prod_qty )
							{
								if ( x.oitem_prod_qty>0 && x.oitem_prod_unit != y.oitem_prod_unit )
								{
									action.option = 2; // update qty
								}
								else
								{
									action.option = 0;
								}
							}
							else
							{
								if (x.oitem_prod_qty > 0 && y.oitem_prod_qty > 0 )
								{
									action.option = 2; // update qty
								}
								else if (x.oitem_prod_qty > 0 && y.oitem_prod_qty == 0 )
								{
									action.option = 1; // insert qty
								}
								else if (x.oitem_prod_qty == 0 && y.oitem_prod_qty > 0 )
								{
									action.option = 3; // delete qty
								}
								else
								{
									action.option = 0;
								}
							}
							
							match_found = true;
						}
						if ( match_found == true )
						{
							trace( "********Y found", y.oitem_prod_code, y.oitem_prod_qty, action.option);
							break;
						}
						//trace( "********Y", y.oitem_prod_code, y.oitem_prod_qty, action.option);
					}
					actions.addItem(action);
					items.addItem(Object(x));
					obj.has_items = 1;
					trace( "********X", x.oitem_prod_code, x.oitem_prod_qty, "***********action", action.option);
				}
				obj.order_items = items.source;
				obj.actions = actions.source;
				
				var aa:Object;
				for each ( aa in obj.actions )
				{
					trace("???????????", aa.option);
				}
				
				/*
				trace ("equipCmptsList", equipCmptsList );
				trace ("equipCmptsList.dataProvider", equipCmptsList.dataProvider );
				trace ("equipCmptsList.dataProvider[0]", equipCmptsList.dataProvider[0] );
				trace ("equipCmptsList(equipCmptsList.dataProvider[0] as Gui_Equipment_List )", (equipCmptsList.dataProvider[0] as Gui_Equipment_List ) );
				//				trace ("equipCmptsList", Gui_Equipment_List(equipCmptsList.dataProvider[0]) );
				trace ("equipCmptsList.dataProvider[0].eqpt_id", equipCmptsList.dataProvider[0].equipment[0].eqpt_id );
				trace ("equipCmptsList.dataProvider[0].compartments", equipCmptsList.dataProvider[0].compartments );
				trace ("equipCmptsList.dataProvider[0].equipment[0].compartments", equipCmptsList.dataProvider[0].equipment[0].compartments );
				//trace ("equipCmptsList",  );
				//obj.compartments = (equipCmptsList.dataProvider[0] as Gui_Equipment_List).compartments;
				//obj.compartments = (equipCmptsList.dataProvider[0] as Gui_Equipment_List).compartments;
				obj.compartments = (equipCmptsList.dataProvider[0]).equipment[0].compartments;
				//obj.compartments = (equipCmptsList.dataProvider);
				*/
				
				/*
				clearDetail();
				currentState="normal";
				this.findByID(obj.eqpt_id);
				dataGrid.selectedIndex = -1;
				dataGrid.enabled=true;
				*/
				
				//nc.call( 'OpenOrderService.update', updateData, obj );
				updateAction.service( obj );
			}
			
			protected function updateData_resultHandler( ):void
			{
				clearDetail();
				if ( this.updateAction.dataString == "OK" )
				{
					global.msgSuccess(resourceManager.getString('default','MSG_UPDATE__SUCCESS'));
				}
				else
				{
					global.msgFail(resourceManager.getString('default','ERROR_UPDATE__FAILURE'));
				}
				
				var txt:String;
				txt = this.order_sys_no.text;
				
				currentState="normal";
				this.findByID( txt );
				dataGrid.selectedIndex = -1;
				dataGrid.enabled=true;
			}
			
			private function doDelete(): void
			{
				var errors:String="";
				var index:int=0;
				/*
				//if ( eqpt_lock.selected == true )
				if ( dataGrid.selectedItem.eqpt_lock == "Y" )
				{
				index += 1;
				errors += String(index) + ". " + resourceManager.getString('default','ALERT__LOCKED_EQPT_CANNOT_BE_DELETED') + "\n";
				}
				//if ( eqp_must_tare_in.selected == true )
				if ( dataGrid.selectedItem.eqp_must_tare_in == "Y" )
				{
				index += 1;
				errors += String(index) + ". " + resourceManager.getString('default','ALERT__TAREIN_EQPT_CANNOT_BE_DELETED') + "\n";
				}
				
				trace ( "isEqptUsedByTanker", eqpt_code.text, dataGrid.selectedItem.eqpt_code, isEqptUsedByTanker.lastResult);
				if ( isEqptUsedByTanker.lastResult > 0 )
				{
				index += 1;
				errors += String(index) + ". " + resourceManager.getString('default','ALERT__EQPT_HAS_TANKER') + "\n";
				}
				*/
				if ( index > 0 )
				{
					var errorBox:MessageDialog = new MessageDialog( errors );
				}
				else
				{
					var canDelete:DeleteDialog = new DeleteDialog(deleteRecord, hasPassword);
				}
			}
			
			private function deleteRecord():void
			{
				var obj:Object = new Object();
				
				obj.order_cust_no = dataGrid.selectedItem.order_cust_no;
				obj.order_sys_no = dataGrid.selectedItem.order_sys_no;
				obj.order_cust_acnt = dataGrid.selectedItem.order_cust_acnt;
				obj.order_supp_code = dataGrid.selectedItem.order_supp_code;
				obj.order_cust_code = dataGrid.selectedItem.order_cust_code;
				obj.order_dtrm_code = dataGrid.selectedItem.order_dtrm_code;
				obj.order_stat_id = dataGrid.selectedItem.order_stat_id;
				
				//nc.call( 'OpenOrderService.delete', deleteData, obj );
				deleteAction.service( obj );
			}
			
			protected function deleteData_resultHandler( ):void
			{
				clearDetail();
				if ( this.deleteAction.dataString == "OK" )
				{
					global.msgSuccess(resourceManager.getString('default','MSG_DELETE__SUCCESS'));
				}
				else
				{
					global.msgFail(resourceManager.getString('default','ERROR_DELETE__FAILURE'));
				}
				
				currentState="normal";
				this.startFiltering();
				dataGrid.selectedIndex = -1;
			}
			
			private function doApprove():void
			{
				var x:Object;
				var y:Object;
				var upd_found:Boolean=false;
				for each ( x in this.orderItemGrid.dataProvider)
				{
					trace( "********X", x.oitem_prod_code, x.oitem_prod_qty);
					upd_found = false;
					for each ( y in this.originalItems )
					{
						if ( x.oitem_prod_code == y.oitem_prod_code && x.oitem_prod_cmpy == y.oitem_prod_cmpy )
						{
							if ( x.oitem_prod_qty != y.oitem_prod_qty )
							{
								upd_found = true;
								break;
							}
						}
						if ( upd_found == true )
						{
							break;
						}
					}
					if ( upd_found == true )
					{
						break;
					}
				}
				
				if ( upd_found == true )
				{
					var errorBox1:MessageDialog = new MessageDialog( resourceManager.getString('default','global.msg.prodqty2approve') );
					return;
				}
				
				
				var errors:String="";
				var index:int=0;
				
				if ( index > 0 )
				{
					var errorBox:MessageDialog = new MessageDialog( errors );
				}
				else
				{
					var canApprove:ApproveDialog = new ApproveDialog(approveRecord, hasPassword);
				}
			}
			
			private function approveRecord():void
			{
				var obj:Object = new Object();
				
				obj.order_cust_no = dataGrid.selectedItem.order_cust_no;
				obj.order_sys_no = dataGrid.selectedItem.order_sys_no;
				obj.order_cust_acnt = dataGrid.selectedItem.order_cust_acnt;
				obj.order_supp_code = dataGrid.selectedItem.order_supp_code;
				obj.order_cust_code = dataGrid.selectedItem.order_cust_code;
				obj.order_dtrm_code = dataGrid.selectedItem.order_dtrm_code;
				obj.order_stat_id = dataGrid.selectedItem.order_stat_id;
				
				//nc.call( 'OpenOrderService.approve', approveData, obj );
				approveAction.service( obj );
			}
			
			protected function approveData_resultHandler( ):void
			{
				clearDetail();
				if ( this.approveAction.dataString == "OK" )
				{
					global.msgSuccess(resourceManager.getString('default','MSG_APPROVE__SUCCESS'));
				}
				else
				{
					global.msgFail(resourceManager.getString('default','ERROR_APPROVE__FAILURE'));
				}
				
/* 				currentState="normal";
				this.startFiltering();
				dataGrid.selectedIndex = -1;
				//dataGrid.enabled=true;
 */				
				
				var txt:String;
				txt = this.order_sys_no.text;
				
				currentState="normal";
				this.findByID( txt );
				dataGrid.selectedIndex = -1;
				dataGrid.enabled=true;
			}
			
			private function doUnapprove():void
			{
				var errors:String="";
				var index:int=0;
				
				if ( index > 0 )
				{
					var errorBox:MessageDialog = new MessageDialog( errors );
				}
				else
				{
					var canUnapprove:ApproveDialog = new ApproveDialog(unapproveRecord, hasPassword, false);
				}
			}
			
			private function unapproveRecord():void
			{
				unapproveAction.service( dataGrid.selectedItem.order_sys_no);
			}
			
			protected function unapproveData_resultHandler( ):void
			{
				clearDetail();
				if ( this.unapproveAction.dataString == "OK" )
				{
					global.msgSuccess(resourceManager.getString('default','MSG_UNAPPROVE__SUCCESS'));
				}
				else
				{
					global.msgFail(resourceManager.getString('default','ERROR_UNAPPROVE__FAILURE'));
				}
				
/* 				currentState="normal";
				this.startFiltering();
				dataGrid.selectedIndex = -1;
				//dataGrid.enabled=true;
 */				
				
				var txt:String;
				txt = this.order_sys_no.text;
				
				currentState="normal";
				this.findByID( txt );
				dataGrid.selectedIndex = -1;
				dataGrid.enabled=true;
			}
			
			private function checkOrderNo():void
			{
				orderNoChecker.service( int(order_sys_no.text) );
			}
			
			protected function orderNoChecker_resultHandler( ):void
			{
				trace ("isOrderNoUsed", order_sys_no.text, order_cust_no.text, orderNoChecker.dataInteger);
				if ( orderNoChecker.dataInteger > 0 )
				{
					//var errorBox:MessageDialog = new MessageDialog( resourceManager.getString('default','ALERT__ORDER_NO_EXIST') );
					order_sys_no.errorString = resourceManager.getString('default','ALERT__ORDER_NO_EXIST');
					this.btn_save.enabled = this.canCreate;
				}
				else
				{
					order_sys_no.errorString = "";
				}
			}
			
			private function checkOrderCustNo():void
			{
				var supplier:String;
				if ( this.order_supp_code.selectedIndex < 0 )
				{
					supplier = "-1";
				}
				else
				{
					supplier = supplierList[order_supp_code.selectedIndex].cmpy_code;
				}
				custOrderNoChecker.service( supplier, int(order_cust_no.text) );
			}
			
			protected function custOrderNoChecker_resultHandler( ):void
			{
				trace ("isOrderCustNoUsed", order_sys_no.text, order_cust_no.text, custOrderNoChecker.dataInteger);
				if ( custOrderNoChecker.dataInteger > 0 )
				{
					//var errorBox:MessageDialog = new MessageDialog( resourceManager.getString('default','ALERT__ORDER_CUSTNO_EXIST') );
					order_cust_no.errorString = resourceManager.getString('default','ALERT__ORDER_CUSTNO_EXIST');
					this.btn_save.enabled = this.canCreate;
				}
				else
				{
					order_cust_no.errorString = "";
				}
			}
			
			private function checkFields():int
			{
				var errors:String="";
				var index:int=0;
				
				if ( order_supp_code.selectedIndex == -1 )//< 0 )
				{
					index += 1;
					errors += String(index) + ". " + resourceManager.getString('default','PLEASE')+resourceManager.getString('default','SELECT')+resourceManager.getString('default','ORDER_SUPP_CODE') + "\n";
				}
				if ( order_cust_acnt.selectedIndex == -1 )//< 0 )
				{
					index += 1;
					errors += String(index) + ". " + resourceManager.getString('default','PLEASE')+resourceManager.getString('default','SELECT')+resourceManager.getString('default','ORDER_CUST_ACNT') + "\n";
				}
				if ( StringUtil.trim(order_cust_no.text).length == 0 )
				{
					index += 1;
					errors += String(index) + ". " + resourceManager.getString('default','PLEASE')+resourceManager.getString('default','ENTER')+resourceManager.getString('default','ORDER_CUST_NO') + "\n";
				}
				//if ( StringUtil.trim(order_ord_time.currentDate).length == 0 )
				if ( StringUtil.trim(dateConvertLong.format(order_ord_time.selectedDate)).length == 0 )
				{
					index += 1;
					errors += String(index) + ". " + resourceManager.getString('default','PLEASE')+resourceManager.getString('default','ENTER')+resourceManager.getString('default','ORDER_ORD_TIME') + "\n";
				}
				//if ( StringUtil.trim(order_dlv_time.currentDate).length == 0 )
				if ( StringUtil.trim(dateConvertLong.format(order_dlv_time.selectedDate)).length == 0 )
				{
					index += 1;
					errors += String(index) + ". " + resourceManager.getString('default','PLEASE')+resourceManager.getString('default','ENTER')+resourceManager.getString('default','ORDER_DLV_TIME') + "\n";
				}
				//if ( StringUtil.trim(order_exp_time.currentDate).length == 0 )
				if ( StringUtil.trim(dateConvertLong.format(order_exp_time.selectedDate)).length == 0 )
				{
					index += 1;
					errors += String(index) + ". " + resourceManager.getString('default','PLEASE')+resourceManager.getString('default','ENTER')+resourceManager.getString('default','ORDER_EXP_TIME') + "\n";
				}
				if ( order_drwr_code.selectedIndex == -1 )//< 0 )
				{
					index += 1;
					errors += String(index) + ". " + resourceManager.getString('default','PLEASE')+resourceManager.getString('default','SELECT')+resourceManager.getString('default','ORDER_DRWR_CODE') + "\n";
				}
				if ( order_ttyp_id.selectedIndex == -1 )//< 0 )
				{
					index += 1;
					errors += String(index) + ". " + resourceManager.getString('default','PLEASE')+resourceManager.getString('default','SELECT')+resourceManager.getString('default','ORDER_TTYP_ID') + "\n";
				}
				if ( order_dtrm_code.selectedIndex == -1 )//< 0 )
				{
					index += 1;
					errors += String(index) + ". " + resourceManager.getString('default','PLEASE')+resourceManager.getString('default','SELECT')+resourceManager.getString('default','ORDER_DTRM_CODE') + "\n";
				}
				if ( order_strm_code.selectedIndex == -1 )//< 0 )
				{
					index += 1;
					errors += String(index) + ". " + resourceManager.getString('default','PLEASE')+resourceManager.getString('default','SELECT')+resourceManager.getString('default','ORDER_STRM_CODE') + "\n";
				}
				
				if ( index > 0 )
				{
					var errorBox:MessageDialog = new MessageDialog( errors );
				}
				
				return index;
			}
			
			private function createRecord():void
			{
				var order_num:int;
				
				order_num = custOrderNoChecker.dataInteger;
				trace ("isOrderCustNoUsed", order_sys_no.text, order_cust_no.text, order_num);
				if ( order_num > 0 )
				{
					var errorBox:MessageDialog = new MessageDialog( resourceManager.getString('default','ALERT__ORDER_CUSTNO_EXIST') );
					this.btn_save.enabled = this.canCreate;
					return;
				}
				
				order_num = orderNoChecker.dataInteger;
				trace ("isOrderNoUsed", order_sys_no.text, order_cust_no.text, order_num);
				if ( order_num > 0 )
				{
					var errorBox2:MessageDialog = new MessageDialog( resourceManager.getString('default','ALERT__ORDER_NO_EXIST') );
					this.btn_save.enabled = this.canCreate;
					return;
				}
				
				if ( this.checkFields() > 0 )
				{
					this.btn_save.enabled = this.canCreate;
					return;
				}
				
				if ( this.checkItemFields() == false )
				{
					this.btn_save.enabled = this.canCreate;
					return;
				}
				
				var obj:Object = new Object();
				
				obj.order_sys_no = order_sys_no.text;
				
				if (order_supp_code.selectedIndex>=0)
				{
					obj.order_supp_code = supplierList[order_supp_code.selectedIndex].cmpy_code;
				}
				else
				{
					obj.order_supp_code = supplierList[0].cmpy_code;
				}
				if (order_cust_acnt.selectedIndex>=0)
				{
					obj.order_cust_acnt = customerList[order_cust_acnt.selectedIndex].cust_acnt;
					obj.order_cust_code = customerList[order_cust_acnt.selectedIndex].cust_cmpy_code;
				}
				else
				{
					obj.order_cust_acnt = customerList[0].cust_acnt;
					obj.order_cust_code = customerList[0].cust_cmpy_code;
				}
				
				obj.order_cust_no = order_cust_no.text;
				obj.order_ref_code = order_ref_code.text;
				
				/* obj.order_ord_time = dateConvertLong.format(order_ord_time.selectedDate);
				obj.order_dlv_time = dateConvert.format(order_dlv_time.selectedDate);
				obj.order_exp_time = dateConvert.format(order_exp_time.selectedDate) + " " + this._defaultTimeString; */
				
				obj.order_ord_time = global.convertDateTimeToIsoString( order_ord_time.selectedDate, order_ord_time.timeEnabled, "" );
				obj.order_dlv_time = global.convertDateTimeToIsoString( order_dlv_time.selectedDate, order_dlv_time.timeEnabled, "" );
				obj.order_exp_time = global.convertDateTimeToIsoString( order_exp_time.selectedDate, order_exp_time.timeEnabled, this._defaultTimeString );
				
				if (order_stat_id.selectedIndex>=0)
				{
					obj.order_stat_id = orderStatusTypeList[order_stat_id.selectedIndex].ordstat_type_id;
				}
				else
				{
					obj.order_stat_id = orderStatusTypeList[0].ordstat_type_id;
				}
				if (order_mthd_id.selectedIndex>=0)
				{
					obj.order_mthd_id = orderMethodTypeList[order_mthd_id.selectedIndex].ordmthd_type_id;
				}
				else
				{
					obj.order_mthd_id = orderMethodTypeList[0].ordmthd_type_id;
				}
				if (order_ttyp_id.selectedIndex>=0)
				{
					obj.order_ttyp_id = transportTypeList[order_ttyp_id.selectedIndex].trnspt_type_id;
				}
				else
				{
					obj.order_ttyp_id = transportTypeList[0].trnspt_type_id;
				}
				if (order_styp_id.selectedIndex>=0)
				{
					obj.order_styp_id = customerSaleTypeList[order_styp_id.selectedIndex].sale_type_id;
				}
				else
				{
					obj.order_styp_id = customerSaleTypeList[0].sale_type_id;
				}
				
				if (order_drwr_code.selectedIndex>=0)
				{
					obj.order_drwr_code = drawerList[order_drwr_code.selectedIndex].cmpy_code;
				}
				else
				{
					obj.order_drwr_code = drawerList[0].cmpy_code;
				}
				if (order_carr_code.selectedIndex>=0)
				{
					obj.order_carr_code = carrierList[order_carr_code.selectedIndex].cmpy_code;
				}
				else
				{
					obj.order_carr_code = "ANY";
				}
				if (order_dloc_code.selectedIndex>=0)
				{
					obj.order_dloc_code = delvLocationList[order_dloc_code.selectedIndex].delv_code;
				}
				else
				{
					obj.order_dloc_code = "";
				}
				if (order_dtrm_code.selectedIndex>=0)
				{
					obj.order_dtrm_code = terminalList[order_dtrm_code.selectedIndex].term_code;
				}
				else
				{
					obj.order_dtrm_code = terminalList[0].term_code;
				}
				if (order_strm_code.selectedIndex>=0)
				{
					obj.order_strm_code = terminalList[order_strm_code.selectedIndex].term_code;
				}
				else
				{
					obj.order_strm_code = terminalList[0].term_code;
				}
				
				obj.order_approved = (order_approved.selected==true?"on":"");
				//obj.order_app_no = order_app_no.text;
				//obj.order_app_time = dateConvert.format(order_app_time.selectedDate);
				//obj.order_inv_no = order_inv_no.text;
				obj.order_total = order_total.text;
				obj.order_limit = order_limit.text;
				obj.order_trsf_type = order_trsf_type.text;
				obj.order_price_printed = (order_price_printed.selected==true?"on":"");
				obj.order_pay_note = order_pay_note.text;
				
				if (order_psnl_code.selectedIndex>=0)
				{
					obj.order_psnl_code = personnelList[order_psnl_code.selectedIndex].psnl_code;
				}
				else
				{
					obj.order_psnl_code = "";
				}
				if (order_src_id.selectedIndex>=0)
				{
					obj.order_src_id = erpTypeList[order_src_id.selectedIndex].erp_type_id;
				}
				else
				{
					obj.order_src_id = erpTypeList[4].erp_type_id;
				}
				
				obj.order_instructions = order_instructions.text;
				
				obj.order_sold_to_num = this.order_sold_to_num.text;
				obj.order_ship_to_num = this.order_ship_to_num.text;
				
				obj.has_items = 0;
				var items:ArrayCollection=new ArrayCollection();
				var x:Object;
				for each ( x in this.orderItemGrid.dataProvider)
				{
					trace( "********X", x.oitem_prod_code, x.oitem_prod_qty);
					if ( x.oitem_prod_qty > 0 )
					{
						/* var opobj:Object = new Object();
						opobj["oitem_prod_cmpy"] = x.oitem_prod_cmpy;
						opobj["oitem_prod_code"] = x.oitem_prod_code;
						opobj["oitem_prod_qty"] = x.oitem_prod_qty;
						opobj["oitem_prod_unit"] = x.oitem_prod_unit;
						opobj["oitem_pack_size"] = x.oitem_pack_size;
						opobj["oitem_prod_price"] = x.oitem_prod_price;
						opobj["oitem_exempt_no"] = x.oitem_exempt_no;
						opobj["oitem_padj_code"] = x.oitem_padj_code;
						items.addItem(opobj); */
						items.addItem(x);
						obj.has_items = 1;
					}
				}
				obj.order_items = items.source;
				
				//nc.call( 'OpenOrderService.create', createData, obj );
				createAction.service( obj );
			}
			
			protected function createData_resultHandler( ):void
			{
				clearDetail();
				if ( this.createAction.dataString == "OK" )
				{
					global.msgSuccess(resourceManager.getString('default','MSG_CREATE__SUCCESS'));
				}
				else
				{
					global.msgFail(resourceManager.getString('default','ERROR_CREATE__FAILURE'));
				}
				
				var supp:String;
				var id:String;
				supp = supplierList[order_supp_code.selectedIndex].cmpy_code;
				id = this.order_cust_no.text;
				
				
				currentState="normal";
				this.findByOrderCustNo( supp, id );
				dataGrid.selectedIndex = -1;
				dataGrid.enabled=true;
			}
			
			protected function createNewRecord(event:MouseEvent):void
			{	
				idx=dataGrid.selectedIndex;
				dataGrid.ensureCellIsVisible(idx);
				currentState="create";
				this.btn_save.enabled = this.canCreate;
				dataGrid.enabled=false;
				this.orderTripGrid.dataProvider=null;
				//this.equipCmptsList.visible = false;
				
				if ( _formColumnSettingsString.length > 0 )
				{
					global.adjustFormFieldSettings( _formColumnSettingsString.substr(1), this );
				}
				
				if ( _formButtonSettingsString.length > 0 )
				{
					global.adjustFormButtonSettings( _formButtonSettingsString.substr(1), this );
				}
			}
			
			
			public function getArrayCollection(obj:Object):ArrayCollection
			{
				var temp:ArrayCollection = new ArrayCollection;
				temp.addItem( obj );
				return temp;
			}
			
			public function convertDateToLocaleString(dt:String):String
			{
				var dt_string:String;
				var dt_date:Date = new Date();
				
				dt_string = ""; 
				if ((dt!=null) && (dt!='null') && (dt!=''))
				{
					dt_date = DateField.stringToDate(dt,"YYYY-MM-DD");
					dt_string = dateFormatter.format( dt_date);
				}
				//trace ("convertDateToLocale", dt, dt_date, dt_string);
				return dt_string;
			}
			
			public function convertDateToLocale(dt:String):Date
			{
				var dt_date:Date = new Date();
				
				if ((dt!=null) && (dt!='null') && (dt!=''))
				{
					dt_date = DateField.stringToDate(dt,"YYYY-MM-DD");
				}
				//trace ("convertDateToLocale", dt, dt_date, dt_string);
				return dt_date;
			}
			
			public function convertDateToLocaleLong(dt:String):Date
			{
				var dt_date:Date = new Date();
				
				if ((dt!=null) && (dt!='null') && (dt!=''))
				{
					//dt_date = DateField.stringToDate(dt,"YYYY-MM-DD HH:NN:SS");
					dt_date = DateTimeFunc.createDate(
						int(dt.substr(0, 4))
						, int(dt.substr(5, 2))
						, int(dt.substr(8, 2))
						, int(dt.substr(11, 2))
						, int(dt.substr(14, 2))
						, int(dt.substr(17, 2))
					);
				}
				//trace ("convertDateToLocale", dt, dt_date, dt_string);
				return dt_date;
			}
			
			public function getDefaultDate():Date
			{
				var now_date:Date;
				var def_date:Date;
				
				now_date = new Date();
				def_date = DateTimeFunc.dateAdd( "yyyy", 1, now_date );
				
				//trace ("getDefaultDate", now_date, def_date);
				
				return def_date;
			}
			
			protected function view_detailsHandler(event:FlexEvent):void
			{
			}
			
			protected function unitLabelFunction(item:Object, column:GridColumn):String
			{
				var ret:String = 'l(amb)';
				//for each(var obj:Object in lookupOrderUnit.lastResult)
				for each(var obj:Object in this.productUnitList)
				{
					if(obj.unit_id == item [column.dataField]) ret=obj.unit_name;
				}
				return ret;
			}
			
			protected function dateLabelFunction(item:Object, column:GridColumn):String
			{
				var ret:String = "";
				
				ret = item [column.dataField];
				return ret;
			}
			
			protected function lookupProductUnit_resultHandler( ):void
			{
				global.prodUnits = this.productUnitList;
			}
			
			protected function save_clickHandler():void
			{
				this.btn_save.enabled = false;
				if (currentState == "create")
				{
					createRecord();
				}
				if (currentState == "edit")
				{
					editRecord();
				}
				if (currentState == "detail")
				{
					editRecord();
				}
			}
			
			public function goToTransaction():void
			{
				if ( this.orderTripGrid.selectedIndex < 0 )
				{
					var errorBox:MessageDialog = new MessageDialog( resourceManager.getString('default','global.msg.selecttrip4transaction') );
				}
				else
				{
					transactionPopup.openDialog();
					var params:Object = new Object();
					//params["supplier"] = view.mainList.selectedItem.payload.SUPPLIER_CODE;
					//params["trip"] = view.mainList.selectedItem.payload.SHLS_TRIP_NO;
					//params["drawer"] = view.mainList.selectedItem.payload.drawer_code;
					//params["carrier"] = view.mainList.selectedItem.payload.carrier_code;
					//params["driver"] = view.mainList.selectedItem.payload.driver;
					params["supplier"] = this.orderTripGrid.selectedItem.schd_supp_code;
					params["trip"] = this.orderTripGrid.selectedItem.schd_trip_no;
					params["drawer"] = null;
					params["carrier"] = this.orderTripGrid.selectedItem.schd_carr_code;
					params["driver"] = null;
					
					transactionPopup.setParams(params);
				}
			}
			
			public function closeDialogHandler():void
			{
				
				var txt:String;
				txt = this.order_sys_no.text;
				
				this.mainListSelection = 0;
				currentState="normal";
				this.findByID( txt );
				
				/* this.mainListSelection = this.dataGrid.selectedIndex;
				this.currentState = "normal";
				this.dataGrid.selectedIndex = -1;
				this.startFiltering(); */
				
			}
			
			public function goToMakeTransaction():void
			{
				this.makeTransactionPopup.popupTitle = resourceManager.getString('default','BUTTON__OO_MAKE_TRANSACTIONS');
				this.makeTransactionPopup.setSecurity( this.readOnly, this.canUpdate, this.canCreate, this.canDelete, this.hasPassword );
				
				this.makeTransactionPopup.parentWidth = this.width;
				this.makeTransactionPopup.parentHeight = this.height;
				
				trace ( "*******************Pop up a screen to make manual transactions!");
				makeTransactionPopup.openDialog();
				
				var params:Object = new Object();
				
				if (order_supp_code.selectedIndex>=0)
				{
					params["supplier"] = supplierList[order_supp_code.selectedIndex].cmpy_code;
				}
				else
				{
					params["supplier"] = dataGrid.selectedItem.order_supp_code;
				}
				if (order_cust_acnt.selectedIndex>=0)
				{
					params["customer"] = customerList[order_cust_acnt.selectedIndex].cust_acnt;
					params["cust_cmpy"] = customerList[order_cust_acnt.selectedIndex].cust_cmpy_code;
				}
				else
				{
					params["customer"] = dataGrid.selectedItem.order_cust_acnt;
					params["cust_cmpy"] = dataGrid.selectedItem.order_cust_code;
				}
				
				if (order_carr_code.selectedIndex>=0)
				{
					params["carrier"] = carrierList[order_carr_code.selectedIndex].cmpy_code;
				}
				else
				{
					params["carrier"] = dataGrid.selectedItem.order_carr_code;
				}
				
				params["order_sys_no"] = order_sys_no.text;
				params["order_cust_no"] = order_cust_no.text;
				
				params["repost"] = false;
				params["transType"] = 1;//0; //"N";
				
				makeTransactionPopup.setFilters( params );
			}
			
			public function goToViewSchedule():void
			{
				this.viewSchedulePopup.popupTitle = resourceManager.getString('default','BUTTON__OO_VIEW_SCHEDULES');
				this.viewSchedulePopup.setSecurity( this.readOnly, this.canUpdate, this.canCreate, this.canDelete, this.hasPassword );
				
				this.viewSchedulePopup.parentWidth = this.width;
				this.viewSchedulePopup.parentHeight = this.height;
				
				trace ( "*******************Pop up a screen to make manual transactions!");
				viewSchedulePopup.openDialog();
				
				var params:Object = new Object();
				
				//params["order_sys_no"] = order_sys_no.text;
				params["order_cust_no"] = order_cust_no.text;
				
				if ( this.orderTripGrid.selectedIndex >= 0 )
				{
					params["supplier"] = this.orderTripGrid.selectedItem.schd_supp_code;
					params["trip"] = this.orderTripGrid.selectedItem.schd_trip_no;
				}
				else
				{
					if (order_supp_code.selectedIndex>=0)
					{
						params["supplier"] = supplierList[order_supp_code.selectedIndex].cmpy_code;
					}
					else
					{
						params["supplier"] = dataGrid.selectedItem.order_supp_code;
					}
					params["trip"] = "";
				}
				
				viewSchedulePopup.initFilters( params );
			}
			public function resetOrder():void {
				
				var orderNumber = dataGrid.selectedItem.order_cust_no;
				var quantityNumber = dataGrid.selectedItem.oprd_prod_qty;
				var path:String = "/phpwrapper/cust_reset.php?cust_order="+orderNumber+"&quantity="+quantityNumber;
				
				var viewService:HTTPService = new HTTPService();
				viewService.url = path;
				viewService.resultFormat="text";
				viewService.method="POST";
				viewService.addEventListener(FaultEvent.FAULT,onFault);
				viewService.addEventListener(ResultEvent.RESULT,onResult);
				viewService.send();
				
				clearDetail();
				currentState="normal";
			}
			
			public function cancelAllLoads():void {
				var orderNumber = dataGrid.selectedItem.order_cust_no;
				var path:String = "/phpwrapper/cust_close_loads.php?cust_order="+orderNumber;
				
				var viewService:HTTPService = new HTTPService();
				viewService.url = path;
				viewService.resultFormat="text";
				viewService.method="POST";
				viewService.addEventListener(FaultEvent.FAULT,onFault);
				viewService.addEventListener(ResultEvent.RESULT,onResult);
				viewService.send();
				
				clearDetail();
				currentState="normal";
				
			}
			
			protected function onFault(event:FaultEvent):void
			{
				global.msgFail(resourceManager.getString('default','LOADSCHD.MESSAGE.FAIL_PRINT_BOL'));


			}
			
			protected function onResult(event:FaultEvent):void
			{
				global.msgFail(resourceManager.getString('default','LOADSCHD.MESSAGE.FAIL_PRINT_BOL'));


			}
			
			public function goToOrderPeriod():void
			{
				if ( this.orderItemGrid.selectedIndex < 0 )
				{
					var errorBox:MessageDialog = new MessageDialog( resourceManager.getString('default','global.msg.selectordprod4period') );
					return;
				}
				
				this.orderPeriodPopup.popupTitle = resourceManager.getString('default','BUTTON__OO_PERIODS');
				this.orderPeriodPopup.setSecurity( this.readOnly, this.canUpdate, this.canCreate, this.canDelete, this.hasPassword );
				
				this.orderPeriodPopup.parentWidth = this.width;
				this.orderPeriodPopup.parentHeight = this.height;
				
				trace ( "*******************Pop up a screen to make order periods!");
				orderPeriodPopup.openDialog();
				
				var params:Object = new Object();
				
				//params["order_sys_no"] = order_sys_no.text;
				params["order_cust_no"] = order_cust_no.text;
				params["order_sys_no"] = order_sys_no.text;
				
				params["oprd_supp_code"] = dataGrid.selectedItem.order_supp_code;
				params["oprd_supp_name"] = dataGrid.selectedItem.order_supp_name;
				params["oprd_cust_acnt"] = dataGrid.selectedItem.order_cust_acnt;
				params["oprd_cust_code"] = dataGrid.selectedItem.order_cust_code;
				params["oprd_cust_name"] = dataGrid.selectedItem.order_cust_name;
				params["oprd_cust_no"] = dataGrid.selectedItem.order_cust_no;
				params["oprd_stat_id"] = dataGrid.selectedItem.order_stat_id;
				params["oprd_stat_name"] = dataGrid.selectedItem.order_stat_name;
				params["oprd_drwr_code"] = dataGrid.selectedItem.order_drwr_code;
				params["oprd_drwr_name"] = dataGrid.selectedItem.order_drwr_name;
				params["oprd_approved"] = dataGrid.selectedItem.order_approved;
				
				//params["oprd_ord_time"] = this.order_ord_time.selectedDate;
				//params["oprd_exp_time"] = this.order_exp_time.selectedDate;
				params["oprd_ord_time"] = dateConvert.format(order_ord_time.selectedDate);
				params["oprd_exp_time"] = dateConvert.format(order_exp_time.selectedDate);
				
				
				params["oitem_prod_code"] = this.orderItemGrid.selectedItem.oitem_prod_code;
				params["oitem_prod_cmpy"] = this.orderItemGrid.selectedItem.oitem_prod_cmpy;
				params["oitem_prod_name"] = this.orderItemGrid.selectedItem.oitem_prod_name;
				params["oitem_prod_qty"] = this.orderItemGrid.selectedItem.oitem_prod_qty;
				params["oitem_prod_unit"] = this.orderItemGrid.selectedItem.oitem_prod_unit;
				
				orderPeriodPopup.setFilters( params ); 
			}
			
			public function checkItemFields():Boolean
			{
				var x:Object;
				
				for each ( x in this.orderItemGrid.dataProvider)
				{
					trace( "********X", x.oitem_prod_code, x.oitem_prod_qty);
					if ( tools.isValueNumeric( x.oitem_prod_qty ) == false )
					{
						global.msgFail("Please enter the number for 'Prod Qty' of '" + x.oitem_prod_code + " - " + x.oitem_prod_name + "'");
						return false;
					}
					else
					{
						if ( Number( x.oitem_prod_qty ) < 0 || x.oitem_prod_qty.search("-")>=0 )
							//if ( int( x.oitem_prod_qty ) < 0  )
						{
							global.msgFail("Please enter the number greater than zero for 'Prod Qty' of '" + x.oitem_prod_code + " - " + x.oitem_prod_name + "'");
							return false;
						}
						
						var qty_gone:Number;
						if ( (Number(x.oitem_prod_qty2) - Number(x.oitem_schd_qty)) > (Number(x.oitem_prod_qty2) - Number(x.oitem_load_qty)) )
						{
							qty_gone = (Number(x.oitem_prod_qty2) - Number(x.oitem_schd_qty));
						}
						else 
						{
							qty_gone = (Number(x.oitem_prod_qty2) - Number(x.oitem_load_qty));
						}
						if ( Number(x.oitem_prod_qty) < qty_gone )
						{
							global.msgFail("The number should not be less than "+ qty_gone + " [quantity scheduled or loaded already] for 'Prod Qty' of '" + x.oitem_prod_code + " - " + x.oitem_prod_name + "'");
							return false;
						}
					}
				}
				
				return true;
			}
			
			protected function killBtn_clickHandler(event:MouseEvent):void
			{
				//interruptor=true;
				pagedRecords.interruptor=true;
				trace("WTF >>>>>>>>>>");
			}
			
			protected function resumeBtn_clickHandler(event:MouseEvent):void
			{
				//interruptor=false;
				pagedRecords.interruptor=false;
				
				this.resumeLoadingPages();
				trace("RESUME >>>>>>>>>>");
			}
			
			protected function resumeLoadingPages():void
			{
				killBtn.setStyle("chromeColor","0xff0000");
				this.killBtn.includeInLayout=true;
				this.killBtn.visible = true;
				this.killBtn.enabled = true;
				
				resumeBtn.setStyle("chromeColor","0x00ff00");
				this.resumeBtn.includeInLayout=true;
				this.resumeBtn.visible = true;
				this.resumeBtn.enabled = false;
				
				this.btn_create.enabled = false
				this.btn_export.enabled = false;
				this.dataGrid.enabled = false;
				this.toolbar.enabled = false;
				
				//pb.values(pagedRecords.length,totalLength);
				pb.values(pagedRecords.length,pagedRecords.totalLength);
				//currentPage = int(this.pagedRecords.length/currentPageSize) + 1;
				//this.pagedRecords.service( currentFields, currentTypes, currentSorts, currentOrders, currentPage, currentPageSize );
				this.pagedRecords.listService( currentFields, currentTypes, currentSorts, currentOrders );
			}
			
			public function afterClosePartnerList():void
			{
				trace("-------------------Back from PartnerList", this.partnershipPopup.popupView.dataGrid.selectedIndex);
				var obj:Object = this.partnershipPopup.popupView.partnerSelected;
				if ( obj != null && obj.hasOwnProperty( 'ACTION' ) && obj["ACTION"] == "CANCEL" )
				{
					return;
				}
				
				if ( obj != null && obj.hasOwnProperty( 'AG' ) )
				{
					this.order_sold_to_num.text = obj[ "AG" ];
				}
				if ( obj != null && obj.hasOwnProperty( 'WE' ) )
				{
					this.order_ship_to_num.text = obj[ "WE" ];
				}
			}
			
			protected function popupPartnerList(event:MouseEvent)
			{
				if ( this.order_supp_code.selectedIndex < 0 )
				{
					global.msgWarning( resourceManager.getString('default','LOADSCHD.MESSAGE.REQUIRE_SUPP4PARTNER') );
					return;
				}
				
				this.partnershipPopup.popupTitle = resourceManager.getString('default','m_partnership');
				this.partnershipPopup.setSecurity( this.readOnly, this.canUpdate, this.canCreate, this.canDelete, this.hasPassword );
				
				this.partnershipPopup.parentWidth = this.width/2;
				this.partnershipPopup.parentHeight = this.height/2;
				
				trace ( "*******************Pop up a screen to manage partnership!");
				partnershipPopup.openDialog();
				
				var params:Object = new Object();
				
				if ( event.currentTarget.id == 'btn_soldto' )
				{
					params["partner_code"] = this.order_sold_to_num.text;
					params["partner_type"] = "AG";
					params["partner_cmpy_code"] = this.order_supp_code.selectedItem.cmpy_code;
					params["partner_cust_acct"] = "";
				}
				
				if ( event.currentTarget.id == 'btn_shipto' )
				{
					params["partner_code"] = this.order_ship_to_num.text;
					params["partner_type"] = "WE";
					params["partner_cmpy_code"] = this.order_supp_code.selectedItem.cmpy_code;
					params["partner_cust_acct"] = "";
				}
				
				partnershipPopup.setFilters( params ); 
			}
			
			protected function showDeliveryDetails(event:MouseEvent)
			{
				this.deliveryDetailsPopup.popupTitle = resourceManager.getString('default','BUTTON__DELIVERY_DETAILS');
				this.deliveryDetailsPopup.setSecurity( this.readOnly, this.canUpdate, this.canCreate, this.canDelete, this.hasPassword );
				//this.deliveryDetailsPopup.setSecurity( this.readOnly, false, false, false, false );
				
				this.deliveryDetailsPopup.parentWidth = this.width;
				this.deliveryDetailsPopup.parentHeight = this.height;
				
				trace ( "*******************Pop up a screen to manage delivery details!");
				deliveryDetailsPopup.openDialog();
				
				var params:Object = new Object();
				
				
				params["dd_supp_code"] = dataGrid.selectedItem.order_supp_code;
				params["dd_tripord_no"] = dataGrid.selectedItem.order_cust_no;
				params["dd_ld_type"] = 3;
				params["dd_number"] = "";
				
				deliveryDetailsPopup.setFilters( params ); 
			}
			
			public function setFilters( params:*=false ): void
			{
				if ( params == false )
				{
					return;
				}
				
				this.parentParams = params;
				
				currentState = "normal";
				
				trace ("...............................in setFilters");
				tools.pr( params);
				
				var po:Object=new Object();
				
				po["order_supp_code"] = tools.getObjAttribute( params, "order_supp_code", "" );
				po["order_cust_acnt"] = tools.getObjAttribute( params, "order_cust_acnt", "" );
				
				var fields:Object;
				var types:Object;
				
				//interruptor=false;
				pagedRecords.interruptor=false;
				
				fields = new Object();
				types = new Object();
				
				fields["order_supp_code"] = po["order_supp_code"];
				types["order_supp_code"] = "EXACT_STRING";
				fields["order_cust_acnt"] = po["order_cust_acnt"];
				types["order_cust_acnt"] = "EXACT_STRING";
				
				currentFields = fields;
				currentTypes = types;
				this.startLoadingPages();
				
				if ( po.hasOwnProperty( "order_supp_code" ) )
				{
					this.fltr_supplier.selectedIndex = tools.getItemIndexFromCode( po["order_supp_code"], supplierList, "cmpy_code");
				}
				
				if ( po.hasOwnProperty( "order_cust_acnt" ) )
				{
					this.fltr_customer.selectedIndex = tools.getItemIndexFromCode( po["order_cust_acnt"], customerFilterList, "cust_acnt");
				}
				
				
				pb.values(pagedRecords.length,pagedRecords.length)
			}
			
		]]>
	</fx:Script>
	<fx:Declarations>
		<s:DateTimeFormatter id="dateFormatter" locale="{LocaleID.DEFAULT}" dateStyle="short" timeStyle="none"/>
		<s:DateTimeFormatter id="dateConvert" dateTimePattern="yyyy-MM-dd"/>
		<s:DateTimeFormatter id="dateConvertLong" dateTimePattern="yyyy-MM-dd HH:mm:ss"/>
		<components:ValidationGroup id="vg" action="{save_clickHandler}" defaultButton="{btn_save}" parentScreen="{this}" isProtected="{hasPassword}"/>
	</fx:Declarations>
	<s:Panel id="panel" width="100%" height="100%"
			 skinClass="skins.WidgetPanelSkin"
			 skinClass.widget="skins.NullSkin">
		<s:layout>
			<s:VerticalLayout/>
		</s:layout>
		<s:VGroup width="100%" id="toolbar"  >
			<s:HGroup gap="5" paddingBottom="2" paddingTop="2" width="100%">
				<components:DKI_DropDownList id="fltr_supplier" width="170" height="100%"
											 change="fltr_supplier_changeHandler(event)" cornerRadius="10"
											 labelField="cmpy_desc" prompt="{resourceManager.getString('default','ORDER_SUPP_NAME')+resourceManager.getString('default','FILTER')}"
											 width.edit="182" width.widget="160" dataProvider="{supplierList}"/>
				<components:SearchCombo id="fltr_customer" width="170" height="100%" enabled="{fltr_supplier.selectedIndex > -1}"
										change="fltr_customer_changeHandler(event)" cornerRadius="10"
										labelField="cust_desc" prompt="{resourceManager.getString('default','ORDER_CUST_ACNT')+resourceManager.getString('default','FILTER')}"
										width.edit="182" width.widget="160" dataProvider="{customerFilterList}"/>
				<components:DKI_DropDownList id="fltr_ordstat" width="188" height="100%"
											 change="fltr_ordstat_changeHandler(event)" cornerRadius="10"
											 labelField="ordstat_type_name" prompt="{resourceManager.getString('default','ORDER_STAT_NAME')+resourceManager.getString('default','FILTER')}"
											 width.edit="182" width.widget="160" visible.widget="false" excludeFrom="widget" dataProvider="{orderStatusTypeList}"/>
				<components:DKI_ValidatorInput id="fltr_ordcustno" validationType="search" minWidth="160" height="{labelHeight}" width="100%"
											   keyUp="fltr_ordcustno_keyUpHandler(event)"  restrict="0-9"
											   excludeFrom="widget" width.widget="140" 
											   prompt="{resourceManager.getString('default','ORDER_CUST_NO')+resourceManager.getString('default','FILTER')}"/>
				<components:DKI_ValidatorInput id="fltr_refcode" validationType="search" minWidth="160" height="{labelHeight}"  width="100%"
											   keyUp="fltr_refcode_keyUpHandler(event)"  restrict="A-Za-z0-9 \-"
											   excludeFrom="widget" width.widget="140" 
											   prompt="{resourceManager.getString('default','ORDER_REF_CODE')+resourceManager.getString('default','FILTER')}"/>
				<components:DKI_DropDownList id="fltr_datetype" width="108" height="100%"
											 change="fltr_datetype_changeHandler(event)" cornerRadius="10"
											 labelField="name" prompt="Date Type" requireSelection="true"
											 width.edit="102" width.widget="80" visible.widget="false" excludeFrom="widget" dataProvider="{this.dateFilterTypes}"/>
				<components:DKI_DateRange id="fltr_daterange" minWidth="220"  height="{labelHeight}" width="100%"
										  dateChange="fltr_daterange_changeHandler" defaultDays="7"
										  timeEnabled="true"/>					
				
				
			</s:HGroup>
			<s:HGroup gap="5" paddingBottom="2" paddingTop="2" width="100%">
				<s:Spacer width="100%"/>
				<components:DKI_Button id="filterBtn" height="24" noLabel="false" click="filterRecords(event)"
									   type="filteron"/>
				<components:DKI_Button id="resetBtn" height="24" noLabel="false" click="refreshRecords(event)"
									   type="filteroff"/>
				<components:DKI_Button id="btn_export" label="{resourceManager.getString('default','EXPORTDATA')}" type="report" click="exportCsvHandler(event)" includeIn="normal"/>
				<components:DKI_Button id="btn_create" label="{resourceManager.getString('default','CREATE')}" height="24" click="createNewRecord(event)" includeIn="normal" enabled="{this.canCreate}" type="create"/>	
			</s:HGroup>
		</s:VGroup>
			
		
		<s:DataGrid id="dataGrid" width="100%" height="100%" requestedRowCount="4"
					selectionChange="dataGrid_selectionChangeHandler(event)"
					skinClass="skins.DKI_DataGrid_Skin"
					height.widget="100%">
			<s:columns>
				<s:ArrayList>
					<s:source>
						<s:GridColumn dataField="order_sys_no" headerText="{resourceManager.getString('default','ORDER_SYS_NO')}" width="80" visible="true" visible.widget="false"></s:GridColumn>
						<s:GridColumn dataField="order_supp_code" headerText="{resourceManager.getString('default','ORDER_SUPP_CODE')}" width="100" visible="true" visible.widget="false"></s:GridColumn>
						<s:GridColumn dataField="order_supp_name" headerText="{resourceManager.getString('default','ORDER_SUPP_NAME')}" width="120"></s:GridColumn>
						<s:GridColumn dataField="order_cust_acnt" headerText="{resourceManager.getString('default','ORDER_CUST_ACNT')}" width="120" visible="true" visible.widget="false"></s:GridColumn>
						<s:GridColumn dataField="order_cust_code" headerText="{resourceManager.getString('default','ORDER_CUST_CODE')}" width="100" visible="true" visible.widget="false"></s:GridColumn>
						<s:GridColumn dataField="order_cust_name" headerText="{resourceManager.getString('default','ORDER_CUST_NAME')}" width="120"></s:GridColumn>
						<s:GridColumn dataField="order_cust_no" headerText="{resourceManager.getString('default','ORDER_CUST_NO')}" width="100"></s:GridColumn>
						<s:GridColumn dataField="order_ord_time" headerText="{resourceManager.getString('default','ORDER_ORD_TIME')}" itemRenderer="renderers.DateTimeRenderer" width="130"></s:GridColumn>
						<s:GridColumn dataField="order_ttyp_id" headerText="{resourceManager.getString('default','ORDER_TTYP_ID')}" visible="false"></s:GridColumn>
						<s:GridColumn dataField="order_ttyp_name" headerText="{resourceManager.getString('default','ORDER_TTYP_NAME')}" visible="false" visible.widget="false"></s:GridColumn>
						<s:GridColumn dataField="order_stat_id" headerText="{resourceManager.getString('default','ORDER_STAT_ID')}" visible="false"></s:GridColumn>
						<s:GridColumn dataField="order_stat_name" headerText="{resourceManager.getString('default','ORDER_STAT_NAME')}" width="160"></s:GridColumn>
						<s:GridColumn dataField="order_styp_id" headerText="{resourceManager.getString('default','ORDER_STYP_ID')}" visible="false"></s:GridColumn>
						<s:GridColumn dataField="order_styp_name" headerText="{resourceManager.getString('default','ORDER_STYP_NAME')}" visible="false"></s:GridColumn>
						<s:GridColumn dataField="order_dloc_code" headerText="{resourceManager.getString('default','ORDER_DLOC_CODE')}" width="100" visible="true"></s:GridColumn>
						<s:GridColumn dataField="order_dloc_name" headerText="{resourceManager.getString('default','ORDER_DLOC_NAME')}" width="120" visible="true" visible.widget="false"></s:GridColumn>
						<s:GridColumn dataField="order_ref_code" headerText="{resourceManager.getString('default','ORDER_REF_CODE')}" width="120"></s:GridColumn>
						<s:GridColumn dataField="order_dlv_time" headerText="{resourceManager.getString('default','ORDER_DLV_TIME')}" visible="false" visible.widget="false" itemRenderer="renderers.DateRenderer"></s:GridColumn>
						<s:GridColumn dataField="order_dtrm_code" headerText="{resourceManager.getString('default','ORDER_DTRM_CODE')}" visible="false"></s:GridColumn>
						<s:GridColumn dataField="order_dtrm_name" headerText="{resourceManager.getString('default','ORDER_DTRM_NAME')}" visible="false" visible.widget="false"></s:GridColumn>
						<s:GridColumn dataField="order_exp_time" headerText="{resourceManager.getString('default','ORDER_EXP_TIME')}" width="130" itemRenderer="renderers.DateTimeRenderer"></s:GridColumn>
						<s:GridColumn dataField="order_drwr_code" headerText="{resourceManager.getString('default','ORDER_DRWR_CODE')}" width="100" visible="true"></s:GridColumn>
						<s:GridColumn dataField="order_drwr_name" headerText="{resourceManager.getString('default','ORDER_DRWR_NAME')}" width="120" visible="true" visible.widget="false"></s:GridColumn>
						<s:GridColumn dataField="order_carr_code" headerText="{resourceManager.getString('default','ORDER_CARR_CODE')}" width="100" visible="true"></s:GridColumn>
						<s:GridColumn dataField="order_carr_name" headerText="{resourceManager.getString('default','ORDER_CARR_NAME')}" width="120" visible="true" visible.widget="false"></s:GridColumn>
						<s:GridColumn dataField="order_approved" headerText="{resourceManager.getString('default','ORDER_APPROVED')}" width="80" itemRenderer="renderers.GridCheckRender"></s:GridColumn>
						<s:GridColumn dataField="order_inv_no" headerText="{resourceManager.getString('default','ORDER_INV_NO')}" visible="false"></s:GridColumn>
						<s:GridColumn dataField="order_total" headerText="{resourceManager.getString('default','ORDER_TOTAL')}" visible="false"></s:GridColumn>
						<s:GridColumn dataField="order_limit" headerText="{resourceManager.getString('default','ORDER_LIMIT')}" visible="false"></s:GridColumn>
						<s:GridColumn dataField="order_app_no" headerText="{resourceManager.getString('default','ORDER_APP_NO')}" visible="false"></s:GridColumn>
						<s:GridColumn dataField="order_app_time" headerText="{resourceManager.getString('default','ORDER_APP_TIME')}" visible="false" itemRenderer="renderers.DateRenderer"></s:GridColumn>
						<s:GridColumn dataField="order_trsf_type" headerText="{resourceManager.getString('default','ORDER_TRSF_TYPE')}" visible="false"></s:GridColumn>
						<s:GridColumn dataField="order_price_printed" headerText="{resourceManager.getString('default','ORDER_PRICE_PRINTED')}" visible="false" itemRenderer="renderers.GridCheckRender"></s:GridColumn>
						<s:GridColumn dataField="order_strm_code" headerText="{resourceManager.getString('default','ORDER_STRM_CODE')}" visible="false"></s:GridColumn>
						<s:GridColumn dataField="order_strm_name" headerText="{resourceManager.getString('default','ORDER_STRM_NAME')}" visible="false" visible.widget="false"></s:GridColumn>
						<s:GridColumn dataField="order_pay_note" headerText="{resourceManager.getString('default','ORDER_PAY_NOTE')}" visible="false"></s:GridColumn>
						<s:GridColumn dataField="order_psnl_code" headerText="{resourceManager.getString('default','ORDER_PSNL_CODE')}" visible="false"></s:GridColumn>
						<s:GridColumn dataField="order_psnl_name" headerText="{resourceManager.getString('default','ORDER_PSNL_NAME')}" width="120"></s:GridColumn>
						<s:GridColumn dataField="order_sold_to_num" headerText="{resourceManager.getString('default','DD_SOLD_TO_TITLE')}" width="100" visible="true" visible.widget="false"></s:GridColumn>
						<s:GridColumn dataField="order_ship_to_num" headerText="{resourceManager.getString('default','DD_SHIP_TO_TITLE')}" width="100" visible="true" visible.widget="false"></s:GridColumn>
						<s:GridColumn dataField="order_last_change" headerText="{resourceManager.getString('default','ORDER_MODIFIED_ON')}" itemRenderer="renderers.DateTimeRenderer" width="130"></s:GridColumn>
						<s:GridColumn dataField="order_src_id" headerText="{resourceManager.getString('default','ORDER_SRC_ID')}" visible="false"></s:GridColumn>
						<s:GridColumn dataField="order_src_name" headerText="{resourceManager.getString('default','ORDER_SRC_NAME')}" visible="false" visible.widget="false"></s:GridColumn>
						<s:GridColumn dataField="order_items" headerText="{resourceManager.getString('default','ORDER_ITEMS')}" visible="false"></s:GridColumn>
					</s:source>
				</s:ArrayList>
			</s:columns>
			<s:dataProvider>
				<!--s:AsyncListView id="pgList" list="{getPagedResult.lastResult}"/-->
				<s:AsyncListView id="pgList" list="{pagedRecords}"/>
			</s:dataProvider>
		</s:DataGrid>
		<s:HGroup width="100%">
			<components:Downloader id="pb" width="100%" height="18"/>
			<!--mx:ProgressBar id="pb" width="100%" height="22" visible="false" includeInLayout="false"  mode="manual" source="{this.pgList}" label="{this.currentLength} records shown from {this.currentLength} loaded out of {this.totalLength} found." labelPlacement="center"/-->
			<s:Button id="killBtn" width="18" height="18" label="" cornerRadius="12" visible="false" includeInLayout="false"
					  click="killBtn_clickHandler(event)"/>
			<s:Button id="resumeBtn" width="18" height="18" label="" cornerRadius="12" visible="false" includeInLayout="false"
					  click="resumeBtn_clickHandler(event)"/>
		</s:HGroup>
	</s:Panel>
	
	<s:Panel id="details" includeIn="edit,create,detail" width="100%" height="420"
			 itemCreationPolicy="immediate" skinClass="skins.WidgetPanelSkin">
		<s:layout>
			<s:VerticalLayout/>
			<!--s:TileLayout/-->
		</s:layout>
		
		<s:Spacer height="5"/>
		<s:VGroup>
			<s:HGroup>
				<s:HGroup visible="false" includeInLayout="false">
					<s:Label width="{labelWidth}" height="{labelHeight}" text="{resourceManager.getString('default','ORDER_SYS_NO')}" verticalAlign="middle"/>
					<components:DKI_ValidatorInput id="order_sys_no" 
												   width="{fieldWidth}" height="{fieldHeight}" 
												   text="{dataGrid.selectedItem.order_sys_no}" editable="false" enabled="false"
												   text.create="" editable.create="false" enabled.create="false"
												   change="this.checkOrderNo()"
												   required="false" validationType="integer" validationGroup="{vg}" automationName="{resourceManager.getString('default','ORDER_SYS_NO')}" 
												   />
				</s:HGroup>
				<s:HGroup>
					<s:Label width="{labelWidth}" height="{labelHeight}" text="{resourceManager.getString('default','ORDER_SUPP_NAME')}" verticalAlign="middle"/>
					<components:DKI_ValidatorComboBox  id="order_supp_code" 
													   dataProvider="{supplierList}" 
													   labelField="cmpy_desc" 
													   selectedItem="" enabled="false" 
													   selectedItem.create="" selectedIndex.create="-1" enabled.create="true" 
													   width="{fieldWidth}" height="{fieldHeight}" 
													   prompt="{resourceManager.getString('default','SELECT')+resourceManager.getString('default','ORDER_SUPP_NAME')}"  
													   change="adjustOrderCustomer(); checkOrderCustNo()" valueCommit="adjustOrderCustomer()"
													   required="true" validationGroup="{vg}" automationName="{resourceManager.getString('default','ORDER_SUPP_NAME')}" 
													   />
					<!--s:Label width="{labelWidth}" height="{labelHeight}" text="{order_supp_code.selectedIndex}" verticalAlign="middle"/-->
				</s:HGroup>
				<s:Spacer width="{spaceWidth}" />
				<s:HGroup>
					<s:Label width="{labelWidth}" height="{labelHeight}" text="{resourceManager.getString('default','ORDER_CUST_ACNT')}" verticalAlign="middle"/>
					<components:DKI_ValidatorComboBox id="order_cust_acnt" 
													  dataProvider="{customerList}" 
													  labelField="cust_desc" 
													  selectedItem="" enabled="false" 
													  selectedItem.create="" selectedIndex.create="-1" enabled.create="{this.order_supp_code.selectedIndex>=0}" 
													  width="{fieldWidth}" height="{fieldHeight}" 
													  prompt="{resourceManager.getString('default','SELECT')+resourceManager.getString('default','ORDER_CUST_ACNT')}"  
													  change="adjustOrderCustomerNumber()"
													  required="true" validationGroup="{vg}" automationName="{resourceManager.getString('default','ORDER_CUST_ACNT')}" 
													  />
					<!--s:Label width="{labelWidth}" height="{labelHeight}" text="{order_cust_acnt.selectedIndex}" verticalAlign="middle"/-->
				</s:HGroup>
				<s:Spacer width="{spaceWidth}" />
				<s:HGroup>
					<s:Label width="{labelWidth}" height="{labelHeight}" text="{resourceManager.getString('default','ORDER_CUST_NO')}" verticalAlign="middle"/>
					<components:DKI_ValidatorInput id="order_cust_no" 
												   width="{fieldWidth}" height="{fieldHeight}" 
												   text="{dataGrid.selectedItem.order_cust_no}" editable="false" enabled="false" 
												   text.create="" editable.create="true" enabled.create="true" change="checkOrderCustNo()" 
												   required="true" validationType="integer" validationGroup="{vg}" automationName="{resourceManager.getString('default','ORDER_CUST_NO')}" 
												   />
				</s:HGroup>
				<s:Spacer width="{spaceWidth}" />
				<s:HGroup>
					<s:Label width="{labelWidth}" height="{labelHeight}" text="{resourceManager.getString('default','ORDER_REF_CODE')}" verticalAlign="middle"/>
					<components:DKI_ValidatorInput id="order_ref_code" 
												   width="{fieldWidth}" height="{fieldHeight}" 
												   text="{dataGrid.selectedItem.order_ref_code}" editable="true" enabled="true"
												   text.create="" editable.detail="false" enabled.detail="false" editable.edit="true" enabled.edit="true" 
												   required="false" validationType="alphanumeric" validationGroup="{vg}" automationName="{resourceManager.getString('default','ORDER_REF_CODE')}"
												   />
				</s:HGroup>
			</s:HGroup>
			
			<s:HGroup>
				<s:HGroup>
					<s:Label width="{labelWidth}" height="{labelHeight}" text="{resourceManager.getString('default','ORDER_ORD_TIME')}" verticalAlign="middle"/>
					<components:DKI_DateTime id="order_ord_time" 
											 selectedDate="{convertDateToLocaleLong(dataGrid.selectedItem.order_ord_time)}" enabled="false" 
											 selectedDate.create="{new Date()}" enabled.create="true" 
											 width="{fieldWidth}" height="{fieldHeight}" timeEnabled="false"
											 />
				</s:HGroup>
				<s:Spacer width="{spaceWidth}" />
				<s:HGroup>
					<s:Label width="{labelWidth}" height="{labelHeight}" text="{resourceManager.getString('default','ORDER_DLV_TIME')}" verticalAlign="middle"/>
					<components:DKI_DateTime id="order_dlv_time" 
											 selectedDate="{convertDateToLocaleLong(dataGrid.selectedItem.order_dlv_time)}" enabled="true" 
											 selectedDate.create="{new Date()}" enabled.create="true" 
											 width="{fieldWidth}" height="{fieldHeight}" timeEnabled="false"
											 />
				</s:HGroup>
				<s:Spacer width="{spaceWidth}" />
				<s:HGroup>
					<s:Label width="{labelWidth}" height="{labelHeight}" text="{resourceManager.getString('default','ORDER_EXP_TIME')}" verticalAlign="middle"/>
					<components:DKI_DateTime id="order_exp_time" 
											 selectedDate="{convertDateToLocaleLong(dataGrid.selectedItem.order_exp_time)}" enabled="true" 
											 selectedDate.create="{getDefaultDate()}" enabled.create="true" 
											 width="{fieldWidth}" height="{fieldHeight}" timeEnabled="false"
											 />
				</s:HGroup>
				<s:Spacer width="{spaceWidth}" />
				<s:HGroup visible="false" includeInLayout="false">
					<s:Label width="{labelWidth}" height="{labelHeight}" text="{resourceManager.getString('default','ORDER_MTHD_NAME')}" verticalAlign="middle"/>
					<components:DKI_ValidatorComboBox id="order_mthd_id" 
													  dataProvider="{orderMethodTypeList}" 
													  labelField="ordmthd_type_name" 
													  selectedItem="" selectedIndex="{getOrderMethod(dataGrid.selectedItem.order_ttyp_id)}" enabled="false" 
													  selectedItem.create="" selectedIndex.create="0" enabled.create="true" 
													  width="{fieldWidth}" height="{fieldHeight}" 
													  prompt="{resourceManager.getString('default','SELECT')+resourceManager.getString('default','ORDER_MTHD_NAME')}"
													  change="adjustTransportType()"
													  required="false"
													  />
					<!--s:Label width="{labelWidth}" height="{labelHeight}" text="{order_mthd_id.selectedIndex}" verticalAlign="middle"/-->
				</s:HGroup>
				<s:HGroup>
					<s:Label width="{labelWidth}" height="{labelHeight}" text="{resourceManager.getString('default','ORDER_TTYP_NAME')}" verticalAlign="middle"/>
					<components:DKI_ValidatorComboBox id="order_ttyp_id" 
													  dataProvider="{transportTypeList}" 
													  labelField="trnspt_type_name" 
													  selectedItem="{dataGrid.selectedItem.order_ttyp_name}" enabled="false" enabled.edit="true"
													  selectedItem.create="" selectedIndex.create="0" enabled.create="true" 
													  width="{fieldWidth}" height="{fieldHeight}" 
													  prompt="{resourceManager.getString('default','SELECT')+resourceManager.getString('default','ORDER_TTYP_NAME')}"
													  required="true" validationGroup="{vg}" automationName="{resourceManager.getString('default','ORDER_TTYP_NAME')}" 
													  />
					<!--s:Label width="{labelWidth}" height="{labelHeight}" text="{order_ttyp_id.selectedIndex}" verticalAlign="middle"/-->
				</s:HGroup>
				<s:Spacer width="{spaceWidth}" />
				<s:HGroup visible="false" includeInLayout="false">
					<s:Label width="{labelWidth}" height="{labelHeight}" text="{resourceManager.getString('default','ORDER_STYP_NAME')}" verticalAlign="middle"/>
					<components:DKI_ValidatorComboBox id="order_styp_id" 
													  dataProvider="{customerSaleTypeList}" 
													  labelField="sale_type_name" 
													  selectedItem="{dataGrid.selectedItem.order_styp_name}" enabled="false" enabled.edit="true" 
													  selectedItem.create="" selectedIndex.create="0" enabled.create="true" 
													  width="{fieldWidth}" height="{fieldHeight}" 
													  prompt="{resourceManager.getString('default','SELECT')+resourceManager.getString('default','ORDER_STYP_NAME')}"
													  required="false" 
													  />
					<!--s:Label width="{labelWidth}" height="{labelHeight}" text="{order_styp_id.selectedIndex}" verticalAlign="middle"/-->
				</s:HGroup>
			</s:HGroup>
			
			<s:HGroup>
				<s:HGroup>
					<s:Label width="{labelWidth}" height="{labelHeight}" text="{resourceManager.getString('default','ORDER_CARR_NAME')}" verticalAlign="middle"/>
					<components:DKI_ValidatorComboBox id="order_carr_code" 
													  dataProvider="{carrierList}" 
													  labelField="cmpy_desc" 
													  selectedItem="" enabled="false" enabled.edit="true" 
													  selectedItem.create="" selectedIndex.create="-1" enabled.create="true" 
													  width="{fieldWidth}" height="{fieldHeight}" 
													  prompt="{resourceManager.getString('default','SELECT')+resourceManager.getString('default','ORDER_CARR_NAME')}"  
													  required="false"  
													  />
					<!--s:Label width="{labelWidth}" height="{labelHeight}" text="{order_carr_code.selectedIndex}" verticalAlign="middle"/-->
				</s:HGroup>
				<s:Spacer width="{spaceWidth}" />
				<s:HGroup>
					<s:Label width="{labelWidth}" height="{labelHeight}" text="{resourceManager.getString('default','ORDER_DLOC_NAME')}" verticalAlign="middle"/>
					<components:DKI_ValidatorComboBox id="order_dloc_code" 
													  dataProvider="{delvLocationList}" 
													  labelField="delv_desc" 
													  selectedItem="{dataGrid.selectedItem.order_dloc_code+' - '+dataGrid.selectedItem.order_dloc_name}" enabled="false" enabled.edit="true" 
													  selectedItem.create="" selectedIndex.create="-1" enabled.create="true" 
													  width="{fieldWidth}" height="{fieldHeight}" 
													  prompt="{resourceManager.getString('default','SELECT')+resourceManager.getString('default','ORDER_DLOC_NAME')}"  
													  required="false"  
													  />
					<!--s:Label width="{labelWidth}" height="{labelHeight}" text="{order_dloc_code.selectedIndex}" verticalAlign="middle"/-->
				</s:HGroup>
				<s:Spacer width="{spaceWidth}" />
				<s:HGroup>
					<s:Label width="{labelWidth}" height="{labelHeight}" text="{resourceManager.getString('default','ORDER_DTRM_NAME')}" verticalAlign="middle"/>
					<components:DKI_ValidatorComboBox id="order_dtrm_code" 
													  dataProvider="{terminalList}" 
													  labelField="term_name" 
													  selectedItem="{dataGrid.selectedItem.order_dtrm_name}" enabled="false" enabled.edit="true" 
													  selectedItem.create="" selectedIndex.create="0" enabled.create="true" 
													  width="{fieldWidth}" height="{fieldHeight}" 
													  prompt="{resourceManager.getString('default','SELECT')+resourceManager.getString('default','ORDER_DTRM_NAME')}"
													  required="true" validationGroup="{vg}" automationName="{resourceManager.getString('default','ORDER_DTRM_NAME')}" 
													  />
					<!--s:Label width="20" height="{labelHeight}" text="{order_dtrm_code.selectedIndex}" verticalAlign="middle"/-->
				</s:HGroup>
				<s:Spacer width="{spaceWidth}" />
				<s:HGroup>
					<s:Label width="{labelWidth}" height="{labelHeight}" text="{resourceManager.getString('default','ORDER_STRM_NAME')}" verticalAlign="middle"/>
					<components:DKI_ValidatorComboBox id="order_strm_code" 
													  dataProvider="{terminalList}" 
													  labelField="term_name" 
													  selectedItem="{dataGrid.selectedItem.order_strm_name}" enabled="false" enabled.edit="true" 
													  selectedItem.create="" selectedIndex.create="0" enabled.create="true" 
													  width="{fieldWidth}" height="{fieldHeight}" 
													  prompt="{resourceManager.getString('default','SELECT')+resourceManager.getString('default','ORDER_STRM_NAME')}"
													  required="true" validationGroup="{vg}" automationName="{resourceManager.getString('default','ORDER_STRM_NAME')}" 
													  />
					<!--s:Label width="20" height="{labelHeight}" text="{order_strm_code.selectedIndex}" verticalAlign="middle"/-->
				</s:HGroup>
			</s:HGroup>
			
			<s:HGroup>
				<s:HGroup>
					<s:Label width="{labelWidth}" height="{labelHeight}" text="{resourceManager.getString('default','ORDER_DRWR_NAME')}" verticalAlign="middle"/>
					<components:DKI_ValidatorComboBox id="order_drwr_code" 
													  dataProvider="{drawerList}" 
													  labelField="cmpy_desc" 
													  selectedItem="" enabled="false" enabled.edit="true" 
													  selectedItem.create="" selectedIndex.create="-1" enabled.create="true" 
													  width="{fieldWidth}" height="{fieldHeight}" 
													  prompt="{resourceManager.getString('default','SELECT')+resourceManager.getString('default','ORDER_DRWR_NAME')}"  
													  change="adjustDrawerProducts()" valueCommit="adjustDrawerProducts()"
													  required="true" validationGroup="{vg}" automationName="{resourceManager.getString('default','ORDER_DRWR_NAME')}" 
													  />
					<!--s:Label width="{labelWidth}" height="{labelHeight}" text="{order_drwr_code.selectedIndex}" verticalAlign="middle"/-->
				</s:HGroup>
				<s:Spacer width="{spaceWidth}" />
				<s:HGroup>
					<s:Label width="{labelWidth}" height="{labelHeight}" text="{resourceManager.getString('default','ORDER_STAT_NAME')}" verticalAlign="middle"/>
					<components:DKI_ValidatorComboBox id="order_stat_id" 
													  dataProvider="{orderStatusTypeList}" 
													  labelField="ordstat_type_name" 
													  selectedItem="{dataGrid.selectedItem.order_stat_name}" enabled="false" 
													  selectedItem.create="" selectedIndex.create="0" enabled.create="false" 
													  width="{fieldWidth}" height="{fieldHeight}" 
													  prompt="{resourceManager.getString('default','SELECT')+resourceManager.getString('default','ORDER_STAT_NAME')}"
													  required="false"  
													  />
					<!--s:Label width="{labelWidth}" height="{labelHeight}" text="{order_stat_id.selectedIndex}" verticalAlign="middle"/-->
				</s:HGroup>
				<s:Spacer width="{spaceWidth}" />
				<s:HGroup>
					<s:Label width="{labelWidth}" height="{labelHeight}" text="{resourceManager.getString('default','DD_SOLD_TO_TITLE')}" verticalAlign="middle"/>
					<components:DKI_ValidatorInput id="order_sold_to_num" 
												   width="{this.isPartnershipEnabled?(fieldWidth-19):fieldWidth}" height="{fieldHeight}" 
												   text="{dataGrid.selectedItem.order_sold_to_num}" editable="true" enabled="true"
												   text.create="" editable.detail="false" enabled.detail="false" editable.edit="true" enabled.edit="true" 
												   required="false" validationType="alphanumeric" validationGroup="{vg}" automationName="{resourceManager.getString('default','DD_SOLD_TO_TITLE')}"
												   />
					<components:DKI_Button id="btn_soldto" label="" width="19" height="{fieldHeight-2}" skinClass="skins.DKI_ComboBoxButton_Skin" 
										   enabled="{this.isPartnershipEnabled}" enabled.detail="false" enabled.edit="{this.isPartnershipEnabled}"
										   visible="{this.isPartnershipEnabled}" includeInLayout="{this.isPartnershipEnabled}" click="popupPartnerList(event);"/>
				</s:HGroup>
				<s:Spacer width="{spaceWidth}" />
				<s:HGroup>
					<s:Label width="{labelWidth}" height="{labelHeight}" text="{resourceManager.getString('default','DD_SHIP_TO_TITLE')}" verticalAlign="middle"/>
					<components:DKI_ValidatorInput id="order_ship_to_num" 
												   width="{this.isPartnershipEnabled?(fieldWidth-19):fieldWidth}" height="{fieldHeight}" 
												   text="{dataGrid.selectedItem.order_ship_to_num}" editable="true" enabled="true"
												   text.create="" editable.detail="false" enabled.detail="false" editable.edit="true" enabled.edit="true" 
												   required="false" validationType="alphanumeric" validationGroup="{vg}" automationName="{resourceManager.getString('default','DD_SHIP_TO_TITLE')}"
												   />
					<components:DKI_Button id="btn_shipto" label="" width="19" height="{fieldHeight-2}" skinClass="skins.DKI_ComboBoxButton_Skin" 
										   enabled="{this.isPartnershipEnabled}" enabled.detail="false" enabled.edit="{this.isPartnershipEnabled}"
										   visible="{this.isPartnershipEnabled}" includeInLayout="{this.isPartnershipEnabled}" click="popupPartnerList(event);"/>
				</s:HGroup>
				<s:Spacer width="{spaceWidth}" />
				<s:HGroup visible="false" includeInLayout="false">
					<s:Label width="{labelWidth}" height="{labelHeight}" text="{resourceManager.getString('default','ORDER_PSNL_NAME')}" verticalAlign="middle"/>
					<components:DKI_ValidatorComboBox id="order_psnl_code" 
													  dataProvider="{personnelList}" 
													  labelField="psnl_name" 
													  selectedItem="{dataGrid.selectedItem.order_psnl_name}" enabled="false" enabled.edit="true" 
													  selectedItem.create="" selectedIndex.create="-1" enabled.create="true" 
													  width="{fieldWidth}" height="{fieldHeight}" requireSelection="false" 
													  prompt="{resourceManager.getString('default','SELECT')+resourceManager.getString('default','ORDER_PSNL_NAME')}"
													  required="false"  
													  />
					<!--s:Label width="20" height="{labelHeight}" text="{order_psnl_code.selectedIndex}" verticalAlign="middle"/-->
				</s:HGroup>
				<s:HGroup visible="false" includeInLayout="false">
					<s:Label width="{labelWidth}" height="{labelHeight}" text="{resourceManager.getString('default','ORDER_SRC_NAME')}" verticalAlign="middle"/>
					<components:DKI_ValidatorComboBox id="order_src_id" 
													  dataProvider="{erpTypeList}" 
													  labelField="erp_type_name" 
													  selectedItem="{dataGrid.selectedItem.order_src_name}" enabled="false" enabled.edit="true" 
													  selectedItem.create="" selectedIndex.create="4" enabled.create="true" 
													  width="{fieldWidth}" height="{fieldHeight}" 
													  prompt="{resourceManager.getString('default','SELECT')+resourceManager.getString('default','ORDER_SRC_NAME')}"
													  required="false"  
													  />
					<!--s:Label width="20" height="{labelHeight}" text="{order_src_id.selectedIndex}" verticalAlign="middle"/-->
				</s:HGroup>
				<!--s:HGroup visible="true" includeInLayout="true">
				<s:Label width="{labelWidth}" height="{labelHeight}" text="  "/>
				<s:CheckBox id="order_approved" 
				label="{resourceManager.getString('default','ORDER_APPROVED')}" fontWeight="bold" 
				selected="{dataGrid.selectedItem.order_approved=='Y'?true:false}" enabled="false" 
				selected.create="false"
				/>
				</s:HGroup-->
				
				
				<s:HGroup visible="false" includeInLayout="false">
					<s:Label width="{labelWidth}" height="{labelHeight}" text="{resourceManager.getString('default','ORDER_APP_NO')}" verticalAlign="middle"/>
					<components:DKI_ValidatorInput id="order_app_no" 
												   width="{fieldWidth}" height="{fieldHeight}" 
												   text="{dataGrid.selectedItem.order_app_no}" editable="false" enabled="false"
												   text.create="" editable.create="true" enabled.create="true" 
												   required="false" validationType="alphanumeric" validationGroup="{vg}" automationName="{resourceManager.getString('default','ORDER_APP_NO')}" 
												   />
				</s:HGroup>
				<s:HGroup visible="false" includeInLayout="false">
					<s:Label width="{labelWidth}" height="{labelHeight}" text="{resourceManager.getString('default','ORDER_APP_TIME')}" verticalAlign="middle"/>
					<components:DKI_DateTime id="order_app_time" 
											 selectedDate="{convertDateToLocaleLong(dataGrid.selectedItem.order_app_time)}" 
											 selectedDate.create="{new Date()}" enabled="false"
											 width="{fieldWidth}" height="{fieldHeight}" timeEnabled="false"
											 />
					
				</s:HGroup>
				
				<s:HGroup visible="false" includeInLayout="false">
					<s:Label width="{labelWidth}" height="{labelHeight}" text="{resourceManager.getString('default','ORDER_INV_NO')}" verticalAlign="middle"/>
					<components:DKI_ValidatorInput id="order_inv_no" 
												   width="{fieldWidth}" height="{fieldHeight}" 
												   text="{dataGrid.selectedItem.order_inv_no}" editable="false" 
												   text.create="" editable.create="true"  
												   required="false" validationType="integer" validationGroup="{vg}" automationName="{resourceManager.getString('default','ORDER_INV_NO')}" 
												   />
				</s:HGroup>
				<s:HGroup visible="false" includeInLayout="false">
					<s:Label width="{labelWidth}" height="{labelHeight}" text="{resourceManager.getString('default','ORDER_TOTAL')}" verticalAlign="middle"/>
					<components:DKI_ValidatorInput id="order_total" 
												   width="{fieldWidth}" height="{fieldHeight}" 
												   text="{dataGrid.selectedItem.order_total}" editable="false" enabled="false" 
												   text.create="0"  
												   required="false" validationType="integer" validationGroup="{vg}" automationName="{resourceManager.getString('default','ORDER_TOTAL')}" 
												   />
				</s:HGroup>
				<s:HGroup visible="false" includeInLayout="false">
					<s:Label width="{labelWidth}" height="{labelHeight}" text="{resourceManager.getString('default','ORDER_LIMIT')}" verticalAlign="middle"/>
					<components:DKI_ValidatorInput id="order_limit" 
												   width="{fieldWidth}" height="{fieldHeight}" 
												   text="{dataGrid.selectedItem.order_limit}" editable="false" enabled="false" editable.edit="true" enabled.edit="true" 
												   text.create="0" editable.create="true" enabled.create="true"  
												   required="false" validationType="integer" validationGroup="{vg}" automationName="{resourceManager.getString('default','ORDER_LIMIT')}" 
												   />
				</s:HGroup>
				<s:HGroup visible="false" includeInLayout="false">
					<s:Label width="{labelWidth}" height="{labelHeight}" text="  "/>
					<s:CheckBox id="order_price_printed" 
								label="{resourceManager.getString('default','ORDER_PRICE_PRINTED')}" fontWeight="bold" 
								selected="{dataGrid.selectedItem.order_price_printed=='Y'?true:false}" enabled="false" enabled.edit="true" 
								selected.create="false" enabled.create="true"
								/>
				</s:HGroup>
				<s:HGroup visible="false" includeInLayout="false">
					<s:Label width="{labelWidth}" height="{labelHeight}" text="{resourceManager.getString('default','ORDER_PAY_NOTE')}" verticalAlign="middle"/>
					<components:DKI_ValidatorInput id="order_pay_note" 
												   width="{fieldWidth}" height="{fieldHeight}" 
												   text="{dataGrid.selectedItem.order_pay_note}" editable="false" enabled="false" editable.edit="true" enabled.edit="true" 
												   text.create="" editable.create="true" enabled.create="true"   
												   required="false" validationType="alphanumeric" validationGroup="{vg}" automationName="{resourceManager.getString('default','ORDER_PAY_NOTE')}" 
												   />
				</s:HGroup>
			</s:HGroup>
			<s:Spacer height="5" />
			<s:HGroup width="100%">
				<s:VGroup width="{fieldWidth}">
					<s:HGroup>
						<s:Label width="{fieldWidth/2-10}" height="16" text="{resourceManager.getString('default','ORDER_TRSF_TYPE')}" verticalAlign="middle"/>
						<s:CheckBox id="order_approved" 
									label="{resourceManager.getString('default','ORDER_APPROVED')}" fontWeight="bold" 
									selected="{dataGrid.selectedItem.order_approved=='Y'?true:false}" enabled="false" 
									selected.create="false"
									/>
					</s:HGroup>
					<components:DKI_ValidatorInput id="order_trsf_type" 
												   width="{fieldWidth}" height="{fieldHeight}" 
												   text="{dataGrid.selectedItem.order_trsf_type}" editable="false" enabled="false" editable.edit="true" enabled.edit="true" 
												   text.create="" editable.create="true" enabled.create="true"  
												   required="false" validationType="alphanumeric" validationGroup="{vg}" automationName="{resourceManager.getString('default','ORDER_TRSF_TYPE')}" 
												   />
					<s:Label width="{fieldWidth-10}" height="16" text="{resourceManager.getString('default','ORDER_INSTRUCTIONS')}" verticalAlign="middle"/>
					<s:TextArea id="order_instructions" 
								width="{fieldWidth}" height="130" 
								text="{dataGrid.selectedItem.order_instructions}" editable="false" enabled="false" editable.edit="true" enabled.edit="true" 
								text.create="" editable.create="true" enabled.create="true"   
								/>
					<s:HGroup>
					</s:HGroup>
					<s:HGroup visible="true" includeInLayout="true">
					</s:HGroup>
				</s:VGroup>
				
				<s:HGroup width="{(this.width-fieldWidth-30)}">
					
					<s:VGroup width="25%">
						<s:DataGrid id="orderTripGrid" width="100%" height="210" requestedRowCount="4" excludeFrom="widget,normal"
									skinClass="skins.DKI_DataGrid_Skin" 
									editable="false" enabled="true"
									dataProvider="{this.orderTripList}"
									>
							<s:columns>
								<s:ArrayList>
									<s:source>
										<s:GridColumn dataField="schd_order_id" headerText="{resourceManager.getString('default','SCHD_ORDER_ID')}" visible="false"></s:GridColumn>
										<s:GridColumn dataField="schd_supp_code" headerText="{resourceManager.getString('default','SCHD_SUPP_CODE')}" visible="false"></s:GridColumn>
										<s:GridColumn dataField="schd_supplier" headerText="{resourceManager.getString('default','SCHD_SUPPLIER')}" visible="true"></s:GridColumn>
										<s:GridColumn dataField="schd_trip_no" headerText="{resourceManager.getString('default','SCHD_TRIP_NO')}" visible="true"></s:GridColumn>
										<s:GridColumn dataField="schd_carr_code" headerText="{resourceManager.getString('default','SCHD_CARR_CODE')}" visible="false"></s:GridColumn>
										<s:GridColumn dataField="schd_carrier" headerText="{resourceManager.getString('default','SCHD_CARRIER')}" visible="true"></s:GridColumn>
										<s:GridColumn dataField="schd_tnkr_code" headerText="{resourceManager.getString('default','SCHD_TNKR_CODE')}" visible="true"></s:GridColumn>
										<s:GridColumn dataField="schd_tanker" headerText="{resourceManager.getString('default','SCHD_TANKER')}" visible="false"></s:GridColumn>
										<s:GridColumn dataField="schd_date" headerText="{resourceManager.getString('default','SCHD_DATE')}" visible="true" itemRenderer="renderers.DateRenderer" width="80"></s:GridColumn>
										<s:GridColumn dataField="schd_status_code" headerText="{resourceManager.getString('default','SCHD_STATUS_CODE')}" visible="false"></s:GridColumn>
										<s:GridColumn dataField="schd_status" headerText="{resourceManager.getString('default','SCHD_STATUS')}" visible="true"></s:GridColumn>
									</s:source>
								</s:ArrayList>
							</s:columns>
						</s:DataGrid>
					</s:VGroup>
					
					<s:VGroup width="50%">
						<s:DataGrid id="orderItemGrid" width="100%" height="210" requestedRowCount="4" excludeFrom="widget,normal"
									selectionChange="orderItemGrid_selectionChangeHandler(event)"
									skinClass="skins.DKI_DataGrid_Skin" 
									editable="true" editable.detail="false"
									dataProvider.create="{this.orderItemInitList}" dataProvider="{this.mergeOrderItems()}"
									>
							<s:columns>
								<s:ArrayList>
									<s:source>
										<s:GridColumn dataField="oitem_order_id" headerText="{resourceManager.getString('default','OITEM_ORDER_ID')}" visible="false"></s:GridColumn>
										<s:GridColumn dataField="oitem_prod_code" headerText="{resourceManager.getString('default','OITEM_PROD_CODE')}" width="100" visible="true" editable="false"></s:GridColumn>
										<s:GridColumn dataField="oitem_prod_cmpy" headerText="{resourceManager.getString('default','OITEM_PROD_CMPY')}" visible="false"></s:GridColumn>
										<s:GridColumn dataField="oitem_prod_name" headerText="{resourceManager.getString('default','OITEM_PROD_NAME')}" width="150" visible="true" editable="false"></s:GridColumn>
										<s:GridColumn dataField="oitem_drwr_name" headerText="{resourceManager.getString('default','OITEM_DRWR_NAME')}" visible="false"></s:GridColumn>
										<s:GridColumn dataField="oitem_prod_qty" headerText="{resourceManager.getString('default','OITEM_PROD_QTY')}" width="90" visible="true" editable="true" editable.detail="false" ></s:GridColumn>
										<s:GridColumn dataField="oitem_prod_unit" headerText="{resourceManager.getString('default','OITEM_PROD_UNIT')}" 
													  width="90" visible="true" editable="true" editable.detail="false" labelFunction="unitLabelFunction" itemEditor="itemeditors.ProductUnits">
										</s:GridColumn>
										<s:GridColumn dataField="oitem_unit_name" headerText="{resourceManager.getString('default','OITEM_UNIT_NAME')}" visible="false"></s:GridColumn>
										<s:GridColumn dataField="oitem_by_packs" headerText="{resourceManager.getString('default','OITEM_BY_PACKS')}" visible="false" visible.detail="false" itemRenderer="renderers.GridCheckRender"></s:GridColumn>
										<s:GridColumn dataField="oitem_pack_size" headerText="{resourceManager.getString('default','OITEM_PACK_SIZE')}" visible="false" visible.detail="true"></s:GridColumn>
										<s:GridColumn dataField="oitem_schd_qty" headerText="{resourceManager.getString('default','OITEM_SCHD_QTY')}" width="150" editable="false" visible="true" visible.detail="true" itemRenderer="renderers.QuantityRenderer"></s:GridColumn>
										<s:GridColumn dataField="oitem_load_qty" headerText="{resourceManager.getString('default','OITEM_LOAD_QTY')}" width="150" editable="false" visible="true" visible.detail="true" itemRenderer="renderers.QuantityRenderer"></s:GridColumn>
										<s:GridColumn dataField="oitem_delv_qty" headerText="{resourceManager.getString('default','OITEM_DELV_QTY')}" width="150" editable="false" visible="true" visible.detail="true" itemRenderer="renderers.QuantityRenderer"></s:GridColumn>
										<s:GridColumn dataField="oitem_exempt_no" headerText="{resourceManager.getString('default','OITEM_EXEMPT_NO')}" visible="false"></s:GridColumn>
										<s:GridColumn dataField="oitem_padj_code" headerText="{resourceManager.getString('default','OITEM_PADJ_CODE')}" visible="false"></s:GridColumn>
										<s:GridColumn dataField="oitem_padj_name" headerText="{resourceManager.getString('default','OITEM_PADJ_NAME')}" visible="false"></s:GridColumn>
										<s:GridColumn dataField="oitem_price_type" headerText="{resourceManager.getString('default','OITEM_PRICE_TYPE')}" visible="false"></s:GridColumn>
										<s:GridColumn dataField="oitem_price_name" headerText="{resourceManager.getString('default','OITEM_PRICE_NAME')}" visible="false"></s:GridColumn>
										<s:GridColumn dataField="oitem_prod_price" headerText="{resourceManager.getString('default','OITEM_PROD_PRICE')}" visible="false"></s:GridColumn>
										<s:GridColumn dataField="oitem_period_no" headerText="{resourceManager.getString('default','OITEM_PERIOD_NO')}" visible="false"></s:GridColumn>
										<s:GridColumn dataField="oitem_line_no" headerText="{resourceManager.getString('default','OITEM_LINE_NO')}" visible="false"></s:GridColumn>
										<s:GridColumn dataField="oitem_periods" headerText="{resourceManager.getString('default','OITEM_PERIODS')}" visible="false"></s:GridColumn>
									</s:source>
								</s:ArrayList>
							</s:columns>
						</s:DataGrid>
					</s:VGroup>
					
					<s:VGroup width="25%">
						<s:DataGrid id="orderItemTripGrid" width="100%" height="210" requestedRowCount="4" excludeFrom="widget,normal"
									skinClass="skins.DKI_DataGrid_Skin" 
									editable="false" enabled="true"
									dataProvider="{this.orderItemTripList}"
									>
							<s:columns>
								<s:ArrayList>
									<s:source>
										<s:GridColumn dataField="schd_order_id" headerText="{resourceManager.getString('default','SCHD_ORDER_ID')}" visible="false"></s:GridColumn>
										<s:GridColumn dataField="schd_supp_code" headerText="{resourceManager.getString('default','SCHD_SUPP_CODE')}" visible="false"></s:GridColumn>
										<s:GridColumn dataField="schd_supplier" headerText="{resourceManager.getString('default','SCHD_SUPPLIER')}" visible="true"></s:GridColumn>
										<s:GridColumn dataField="schd_trip_no" headerText="{resourceManager.getString('default','SCHD_TRIP_NO')}" visible="true"></s:GridColumn>
										<s:GridColumn dataField="schd_cmpt_no" headerText="{resourceManager.getString('default','SCHD_CMPT_NO')}" visible="true"></s:GridColumn>
										<s:GridColumn dataField="schd_prod_code" headerText="{resourceManager.getString('default','SCHD_PROD_CODE')}" visible="true"></s:GridColumn>
										<s:GridColumn dataField="schd_prod_cmpy" headerText="{resourceManager.getString('default','SCHD_PROD_CMPY')}" visible="false"></s:GridColumn>
										<s:GridColumn dataField="schd_prod_name" headerText="{resourceManager.getString('default','SCHD_PROD_NAME')}" visible="true"></s:GridColumn>
										<s:GridColumn dataField="schd_prod_qty" headerText="{resourceManager.getString('default','SCHD_PROD_QTY')}" visible="true"></s:GridColumn>
										<s:GridColumn dataField="schd_prod_unit" headerText="{resourceManager.getString('default','SCHD_PROD_UNIT')}" visible="false"></s:GridColumn>
										<s:GridColumn dataField="schd_unit_name" headerText="{resourceManager.getString('default','SCHD_UNIT_NAME')}" visible="true"></s:GridColumn>
									</s:source>
								</s:ArrayList>
							</s:columns>
						</s:DataGrid>
					</s:VGroup>
					
					<s:VGroup width="40%" visible="false" includeInLayout="false">
						<s:DataGrid id="orderPeriodGrid" width="100%" height="210" requestedRowCount="4" excludeFrom="widget,normal"
									selectionChange="orderPeriodGrid_selectionChangeHandler(event)"
									skinClass="skins.DKI_DataGrid_Skin"
									editable="true" editable.detail="false"
									dataProvider="{this.orderPeriodList}"
									>
							<s:columns>
								<s:ArrayList>
									<s:source>
										<s:GridColumn dataField="oprd_order_id" headerText="{resourceManager.getString('default','OPRD_ORDER_ID')}" visible="false"></s:GridColumn>
										<s:GridColumn dataField="oprd_prod_code" headerText="{resourceManager.getString('default','OPRD_PROD_CODE')}" visible="true" editable="false" itemRenderer="renderers.ProductRender"></s:GridColumn>
										<s:GridColumn dataField="oprd_prod_cmpy" headerText="{resourceManager.getString('default','OPRD_PROD_CMPY')}" visible="false"></s:GridColumn>
										<s:GridColumn dataField="oprd_prod_name" headerText="{resourceManager.getString('default','OPRD_PROD_NAME')}" visible="false"></s:GridColumn>
										<s:GridColumn dataField="oprd_drwr_name" headerText="{resourceManager.getString('default','OPRD_DRWR_NAME')}" visible="false"></s:GridColumn>
										<s:GridColumn dataField="oprd_period_no" headerText="{resourceManager.getString('default','OPRD_PERIOD_NO')}"  visible="true" editable="true" editable.detail="false"></s:GridColumn>
										<s:GridColumn dataField="oprd_period_start" headerText="{resourceManager.getString('default','OPRD_PERIOD_START')}" visible="true" editable="true" editable.detail="false" itemRenderer="renderers.DateRenderer" itemEditor="itemeditors.DateEditor"></s:GridColumn>
										<s:GridColumn dataField="oprd_period_end" headerText="{resourceManager.getString('default','OPRD_PERIOD_END')}" visible="true" editable="true" editable.detail="false" itemRenderer="renderers.DateRenderer" itemEditor="itemeditors.DateEditor"></s:GridColumn>
										<!--s:GridColumn dataField="oprd_period_start" headerText="{resourceManager.getString('default','OPRD_PERIOD_START')}" visible="true" itemRenderer="renderers.DateRenderer" editable="true" editable.detail="false" ></s:GridColumn>
										<s:GridColumn dataField="oprd_period_end" headerText="{resourceManager.getString('default','OPRD_PERIOD_END')}" visible="true" itemRenderer="renderers.DateRenderer" editable="true" editable.detail="false"></s:GridColumn-->
										<s:GridColumn dataField="oprd_prod_unit" headerText="{resourceManager.getString('default','OPRD_PROD_UNIT')}"  
													  width="100" visible="true" editable="true" editable.detail="false" labelFunction="unitLabelFunction" itemEditor="itemeditors.ProductUnits">
										</s:GridColumn>
										<s:GridColumn dataField="oprd_unit_name" headerText="{resourceManager.getString('default','OPRD_UNIT_NAME')}" visible="false"></s:GridColumn>
										<s:GridColumn dataField="oprd_prod_qty" headerText="{resourceManager.getString('default','OPRD_PROD_QTY')}" visible="true" editable="true" editable.detail="false"></s:GridColumn>
										<s:GridColumn dataField="oprd_prod_used" headerText="{resourceManager.getString('default','OPRD_PROD_USED')}" visible="false" visible.detail="true"></s:GridColumn>
										<s:GridColumn dataField="oprd_price_fixed" headerText="{resourceManager.getString('default','OPRD_PRICE_FIXED')}" visible="false" itemRenderer="renderers.GridCheckRender"></s:GridColumn>
										<s:GridColumn dataField="oprd_prod_price" headerText="{resourceManager.getString('default','OPRD_PROD_PRICE')}" visible="false"></s:GridColumn>
									</s:source>
								</s:ArrayList>
							</s:columns>
							<!--s:dataProvider>
							<s:AsyncListView list="{orderItemGrid.selectedItem.oitem_periods}"/>
							</s:dataProvider-->
						</s:DataGrid>
					</s:VGroup>
					
				</s:HGroup>
				
			</s:HGroup>
			
		</s:VGroup>
		
		<s:Spacer height="0" />
		
		<s:HGroup width="100%" paddingBottom="4" paddingTop="0" gap="5">
			
			<components:DKI_Button id="viewDeliveryDetails" height="100%" includeIn="edit,detail"
								   label="{resourceManager.getString('default','BUTTON__DELIVERY_DETAILS')}"
								   click="showDeliveryDetails(event)" type="report"
								   visible="true" enabled="true" />
			<s:Spacer width="100%"/>
			<components:DKI_Button id="btnCloseAllLoads" label="{resourceManager.getString('default','button.lbl.CLOSE_ALL_LOADS')}" height="100%" includeIn="edit,detail" type="default" enabled="{this.canUpdate}" visible="{this.canManageOrderPeriod}" includeInLayout="{this.canManageOrderPeriod}" click="cancelAllLoads();"/>
			<components:DKI_Button id="btnResetOrder" label="{resourceManager.getString('default','button.lbl.RESET_ORDER')}" height="100%" includeIn="edit,detail" type="default" enabled="{this.canUpdate}" visible="{this.canManageOrderPeriod}" includeInLayout="{this.canManageOrderPeriod}" click="resetOrder();"/>
			<components:DKI_Button id="btnOrderPeriod" label="{resourceManager.getString('default','BUTTON__OO_PERIODS')}" height="100%" includeIn="edit,detail" type="default" enabled="{this.canUpdate}" visible="{this.canManageOrderPeriod}" includeInLayout="{this.canManageOrderPeriod}" click="goToOrderPeriod();"/>
			<components:DKI_Button id="btnSchedule" label="{resourceManager.getString('default','BUTTON__OO_VIEW_SCHEDULES')}" height="100%" includeIn="edit,detail" type="default" visible="true" includeInLayout="true" click="goToViewSchedule();"/>
			<components:DKI_Button id="btnMakeTransaction" label="{resourceManager.getString('default','BUTTON__OO_MAKE_TRANSACTIONS')}" height="100%" includeIn="edit,detail" type="default" visible="true" enabled="{this.canCreate}" click="goToMakeTransaction();"/>
			<components:DKI_Button id="btn_transaction" label="{resourceManager.getString('default','BUTTON__OO_VIEW_TRANSACTIONS')}" height="100%" click="goToTransaction()" includeIn="detail" enabled="true" visible="true" type="report"/>
			<components:DKI_Button id="btn_delete" label="{resourceManager.getString('default','DELETE')}" height="100%" click="doDelete()" includeIn="edit" enabled="{this.canDelete}" type="delete"/>
			<components:DKI_Button id="btn_approve" label="{resourceManager.getString('default','APPROVE')}" height="100%" click="doApprove()" includeIn="edit" enabled="{this.canUpdate}" type="save"/>
			<components:DKI_Button id="btn_unapprove" label="{resourceManager.getString('default','UNAPPROVE')}" height="100%" click="doUnapprove()" includeIn="detail" enabled="{this.canUpdate}" type="save"/>
			<components:DKI_Button id="btn_save" label.create="{resourceManager.getString('default','SAVE')}" label="{resourceManager.getString('default','UPDATE')}" height="100%" includeIn="edit,create,detail" enabled.create="{this.canCreate}" enabled="{this.canUpdate}" type.create="create" type="edit"/>
			<components:DKI_Button id="btn_cancel" label="{resourceManager.getString('default','CANCEL')}" height="100%" click="cancel_clickHandler()" enabled="true" type="cancel"/>
		</s:HGroup>
	</s:Panel>
	
</s:VGroup>
