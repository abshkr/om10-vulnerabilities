<?xml version="1.0" encoding="utf-8"?>
<s:VGroup xmlns:fx="http://ns.adobe.com/mxml/2009"
		  xmlns:s="library://ns.adobe.com/flex/spark"
		  xmlns:components="components.*"
		  xmlns:transactionservice="services.transactionservice.*"
		  xmlns:companiesservice="services.companiesservice.*"
		  xmlns:guitransactiondetailsservice1="services.guitransactiondetailsservice.*"
		  xmlns:guimeterdetailsservice="services.guimeterdetailsservice.*"
		  xmlns:transactionsservice="services.transactionsservice.*"
		  xmlns:mx="library://ns.adobe.com/flex/mx"
		  width="100%" height="100%" creationComplete="creationCompleteHandler(event)">
	
	<s:states>
		<s:State name="normal"/>
		<s:State name="view"  enterState="
				 callLater(function():void{dataGrid.ensureCellIsVisible(dataGrid.selectedIndex);});" />
	</s:states>
	
	<fx:Script>
		<![CDATA[
			import components.DKI_PassBox;
			import components.MessageDialog;
			import components.PasswordCheckDlg;
			
			import dm.remoteBulkListService;
			import dm.remoteDataService;
			import dm.remoteListService;
			import dm.utils.tools;
			
			import flash.globalization.LocaleID;
			
			import mx.collections.ArrayCollection;
			import mx.collections.errors.ItemPendingError;
			import mx.controls.DateField;
			import mx.core.FlexGlobals;
			import mx.events.CloseEvent;
			import mx.events.EffectEvent;
			import mx.events.FlexEvent;
			import mx.rpc.events.ResultEvent;
			import mx.utils.ObjectUtil;
			import mx.utils.StringUtil;
			
			import renderers.DKI_HeaderColumn_Renderer;
			
			import spark.components.gridClasses.IGridItemRenderer;
			import spark.core.NavigationUnit;
			import spark.events.GridEvent;
			import spark.events.GridSelectionEvent;
			import spark.events.IndexChangeEvent;
			
			import valueObjects.Transactions;
			
			[Bindable] public var readOnly:Boolean = false;
			[Bindable] public var canUpdate:Boolean = false;
			[Bindable] public var canCreate:Boolean = false;
			[Bindable] public var canDelete:Boolean = false;
			[Bindable] public var hasPassword:Boolean = false;
			
			[Bindable] public var frme:String;
			
			private var currentFilter:String=null;
			private var currentOrder:String='trsa_id';
			private var companyFilter:String=null;
			private var transactionFilter:String=null;
			private var currentDirection:String=" ASC";	
			private var idx:int=-1;
			private var current_code:String='';
			private var pending: Boolean = false;
			import mx.managers.PopUpManager;
			private var dialog:DKI_PassBox = new DKI_PassBox();
			private var chkPass:PasswordCheckDlg = new PasswordCheckDlg();
			
			private var currentFields:Object=new Object();
			private var currentTypes:Object=new Object();
			private var currentSorts:Object=new Object();
			private var currentOrders:Object=new Object();
			
			private var getData:Responder = new Responder(getData_resultHandler);
			
			private var pageCount:int=1;
			[Bindable] public  var bytesTotal:Number  = 1000000;
			[Bindable] public  var bytesLoaded:Number = 0;
			[Bindable] public  var totalCount:Number  = 0;
			
			[Bindable] private var currentPage:Number 		= 1;
			private var pageBy:int = 2000;
			[Bindable] private var finishedAllPages:Boolean =  true;
			[Bindable] private var interruptor:Boolean 		=  false;
			[Bindable] private var preFilter:Boolean 		=  true;
			[Bindable] private var transactionsArr:ArrayCollection=new ArrayCollection();
			[Bindable] private var isAvailable:Boolean = false;
			
			
			private var CSVOut:String='';
			
			[Bindable] private var btnArr:ArrayCollection = new ArrayCollection([{btn:"Trip"},{btn:"Bay"},{btn:"Transaction"},{btn:"Load"}]);
			[Bindable] private var statusArr:ArrayCollection = new ArrayCollection([{id:"All"},{id:"Active"},{id:"Ended"}]);
			
			public var fileName:String;
			private var f:FileReference=new FileReference();
			private var field:String;
			
			private var fieldName:String;
			private var companyName:String;
			
			[Bindable] private var freeze:Boolean=false;
			
			private var gridColumnSequenceMaker:remoteDataService = new remoteDataService( "ScreenGridColumnService.lookupGridColumnSequence", null, gridColumnSequenceMaker_resultHandler, 1 );
			private var _gridColumnSequenceString:String="";
			
			private var trsfGridColumnSequenceMaker:remoteDataService = new remoteDataService( "ScreenGridColumnService.lookupGridColumnSequence", null, trsfGridColumnSequenceMaker_resultHandler, 1 );
			private var _trsfGridColumnSequenceString:String="";
			
			[Bindable] private var transactionDetailsList:remoteDataService = new remoteDataService( "TransactionListService.getTransactionDetails", null, getTransactionDetailsList_resultHandler );
			
			
			protected function creationCompleteHandler(event:FlexEvent):void
			{
				btnArr = new ArrayCollection([
					{btn: resourceManager.getString('default','global.lbl.TRIP') },
					{btn: resourceManager.getString('default','global.lbl.BAY') },
					{btn: resourceManager.getString('default','global.lbl.TRANSACTION') },
					{btn: resourceManager.getString('default','global.lbl.LOAD') }
				]);
				
				statusArr = new ArrayCollection([
					{id: resourceManager.getString('default', 'global.lbl.ALL') },
					{id: resourceManager.getString('default', 'global.lbl.Active') },
					{id: resourceManager.getString('default', 'global.lbl.ended') }
				]);
				
				this.gridColumnSequenceMaker.service( "TRANSACTION_LIST" );
				this.trsfGridColumnSequenceMaker.service( "TRANSFER_LIST" );
				
				killBtn.setStyle("chromeColor","0xff0000");
				companyTypesResponder.token = companyService.getTransactionCompanyTypes();
				//dateRange.getInitFilter(1);
				if ( global.getValueFromSiteConfigSettings("SITE_CLEAR_FILTER_BLANK") == 'Y' )
				{
					this.dateRange.dateText.text = "";
				}
				else
				{
					global.resetDateRangeComponent( "SITE_DEFAULT_DATERANGE_TRANSACTION", this.dateRange );
				}
				
				var value:String = global.getValueFromSiteConfigSettings( "SITE_AUTO_FILTER_WHEN_OPEN_SCREEN" );
				if ( value == 'Y' )
				{
					setFilters(true);
				}
				else
				{
					//interruptor=true;
					isAvailable=true;
				}
				//setFilters(true);
				
				this.srchBar.selectedIndex = 0;
				this.Status.selectedIndex = 0;
			}
			
			protected function gridColumnSequenceMaker_resultHandler():void
			{
				this._gridColumnSequenceString =  gridColumnSequenceMaker.dataString;
				
				if ( _gridColumnSequenceString.length > 0 )
				{
					global.adjustGridColumnSequence( _gridColumnSequenceString.substr(1), dataGrid );
				}
				
			}
			
			protected function trsfGridColumnSequenceMaker_resultHandler():void
			{
				this._trsfGridColumnSequenceString =  trsfGridColumnSequenceMaker.dataString;
			}
			
			protected function getTransactionDetailsList_resultHandler():void
			{
				transactionDetailsGrid.dataProvider = this.transactionDetailsList;
			}
			
			
			protected function searchText_keyUpHandler(event:KeyboardEvent):void
			{	
				if (event.keyCode == 13) setFilters(true);
			} 
			
			protected function dataGrid_selectionChangeHandler(event:GridSelectionEvent):void
			{
				//transaction_vo = dataGrid.selectedItem as Transactions;
				if ( this.dataGrid.selectedIndex < 0 )
				{
					if ( currentState == "view" )
					{
						if ( _trsfGridColumnSequenceString.length > 0 )
						{
							global.adjustGridColumnSequence( _trsfGridColumnSequenceString.substr(1), transactionDetailsGrid );
						}
						
						// clean transfer grid and meter grid
						this.transactionDetailsGrid.dataProvider = null;
						this.meterDatagrid.dataProvider = null;
					}
					return;
				}
				
				currentState = "view";
				
				if ( _trsfGridColumnSequenceString.length > 0 )
				{
					global.adjustGridColumnSequence( _trsfGridColumnSequenceString.substr(1), transactionDetailsGrid );
				}
				
				if(dataGrid.selectedItem.trsa_ed_dmy ==null && this.canUpdate)
				{
					close.enabled = true;
				}
				else
				{
					close.enabled = false;
				}
				//getDetailsResult.token = guitransactiondetails.getTransactionDetails(dataGrid.selectedItem.trsa_id);
				this.transactionDetailsList.service( dataGrid.selectedItem.trsa_id );
				getMeterDetailsResult.token = getMeterDetails.getTransactionMeterDetails(dataGrid.selectedItem.trsa_id);
			}
			
			
			protected function companyType_creationCompleteHandler(event:FlexEvent):void
			{
				companyTypesResponder.token = companyService.getTransactionCompanyTypes();
			}
			
			protected function companyTypeLabel(item:Object):String
			{
				return item.company_name;
			}
			
			protected function companyNameLabel(item:Object):String
			{
				return item.cmpy_name;
				
			}
			
			protected function companyType_changeHandler(event:IndexChangeEvent):void
			{
				if ( companyType.selectedIndex > -1 )
				{
					getCompanyByType.token = companyService.lookupByType(companyTypesResponder.lastResult[companyType.selectedIndex].company_id);
					var type_id:int = companyTypesResponder.lastResult[companyType.selectedIndex].company_id;
					
					switch(type_id)
					{
						case 1:
							fieldName = "trsa_supplier";
							break;
						case 2:
							fieldName = "trsa_carrier";
							break;
						case 4:
							fieldName = "trsa_drawer";
							break;
					}
				}
			}
			
			protected function getCompanyByType_resultHandler(event:ResultEvent):void
			{
				companyByType.dataProvider = getCompanyByType.lastResult;
			}
			
			protected function getDetailsResult_resultHandler(event:ResultEvent):void
			{
				transactionDetailsGrid.dataProvider = getDetailsResult.lastResult;
			}
			
			protected function getMeterDetailsResult_resultHandler(event:ResultEvent):void
			{
				meterDatagrid.dataProvider = getMeterDetailsResult.lastResult;
			}
			
			protected function close_clickHandler(event:MouseEvent):void
			{
				if(hasPassword)
				{
					PopUpManager.addPopUp(chkPass,FlexGlobals.topLevelApplication.main,true);
					PopUpManager.centerPopUp(chkPass);
					chkPass.canceled=false;
					chkPass.userPassword.text="";
					chkPass.title=resourceManager.getString('default','CONFIRM_PASSWORD');
					chkPass.addEventListener(CloseEvent.CLOSE,onClose);
				}
				else
				{
					closeTrans();
				}
			}
			
			private function closeTrans():void{
				var obj:Object = new Object();
				if(companyType.selectedIndex > -1){
					obj.cmpy_typ_id = companyTypesResponder.lastResult[companyType.selectedIndex].company_id;
				}
				else
					obj.cmpy_typ_id = "-1";
				if(companyByType.selectedIndex > -1)
				{
					obj.cmpy_code = getCompanyByType.lastResult[companyByType.selectedIndex].cmpy_code;
				}
				else
					obj.cmpy_code = "-1";
				obj.tank_term = dataGrid.selectedItem.trsa_terminal;
				obj.bay_code = dataGrid.selectedItem.trsa_bay_cd;
				obj.trans_id = dataGrid.selectedItem.trsa_id;
				obj.tk = dataGrid.selectedItem.trsa_tanker;
				
				closeTransaction.token = transactionsService.closeTransaction(obj);
				trace("What!", ObjectUtil.toString(obj));
			}
			
			protected function onClose(event:CloseEvent):void
			{
				if (!chkPass.canceled)
				{
					if (chkPass.userPassword.text == global.userpass)
					{
						closeTrans();
					}
					else
					{
						global.msgFail(resourceManager.getString('default','FAIL_PASSWORD'));
					}
				}
				PopUpManager.removePopUp(chkPass);
				chkPass.removeEventListener(CloseEvent.CLOSE,onClose);
			}
			
			protected function closeTransaction_resultHandler(event:ResultEvent):void
			{
				if (event.result == "SUCCESS")
				{
					global.msgSuccess(resourceManager.getString('default','MSG_UPDATE__SUCCESS'));
					currentState = "normal";
					setFilters(true);
				}
				else
				{
					global.msgFail(resourceManager.getString('default','ERROR_UPDATE__FAILURE'));
				}
			}
			
			protected function setTimeStamp(item:Object, column:GridColumn):String
			{
				var date:Date = new Date();
				var str:String = "";
				if(column.dataField == "trsa_st_dmy")
					str=item.trsa_st_dmy
				else if(column.dataField == "trsa_ed_dmy")
					str=item.trsa_ed_dmy
				if (str==null)
				{	
					return '';
				}	
				else
				{	
					date = DateField.stringToDate(str,"YYYY-MM-DD");
					return dateFormatter.format(date)+str.substr(10,9);
				}
			}
			
			protected function setTimeStamp2(item:Object, column:GridColumn):String
			{
				var date:Date = new Date();
				var str:String=item.trsa_crt_dmy;
				if (str==null)
				{	
					return '';
				}	
				else
				{	
					date = DateField.stringToDate(str,"YYYY-MM-DD");
					return dateFormatter.format(date)+str.substr(10,9);
				}
			}
			
			protected function cancelBtn_clickHandler(event:MouseEvent):void
			{
				currentState="normal";
				dataGrid.selectedIndex = -1;
			}
			
			private function clearFilters():void
			{
				currentState='normal';
				companyType.selectedIndex = -1;
				companyByType.selectedIndex = -1;
				Status.selectedIndex = 0;
				srchBar.selectedIndex = 0;
				searchText.text = "";
				//dateRange.getInitFilter(1);
				if ( global.getValueFromSiteConfigSettings("SITE_CLEAR_FILTER_BLANK") == 'Y' )
				{
					this.dateRange.dateText.text = "";
				}
				else
				{
					global.resetDateRangeComponent( "SITE_DEFAULT_DATERANGE_TRANSACTION", this.dateRange );
				}
				setFilters(true);
			}
						
			private function nccall(...params):void{
				
				var nc:NetConnection = new NetConnection();
				nc.objectEncoding = ObjectEncoding.AMF3;
				//nc.connect("/amfservices/gateway/amf2/index.php");
				nc.connect(global.gatewayURL);
				nc.call.apply(nc,params);
			}
			
			private function onDateChanged():void
			{
				setFilters(true);
			}						
			
			protected function setFilters(value:Boolean=false):void
			{
				var types:Object = new Object();
				var fields:Object = new Object();
				interruptor=false;
				
				currentFields = fields;
				currentTypes = types;
				
				if (searchText.text != '')
				{	
					switch(srchBar.selectedIndex)
					{
						case 0:
							fields["trsa_trip"]=searchText.text;
							types["trsa_trip"]="STRING";
							break;
						case 1:
							fields["trsa_bay_cd"]=searchText.text;
							types["trsa_bay_cd"]="STRING";
							break;
						case 2:
							fields["trsa_id"]=searchText.text;
							types["trsa_id"]="STRING";
							break;
						case 3:
							fields["load_id"]=searchText.text;
							types["load_id"]="STRING";
							break;
					}
				}
				
				if (companyByType.selectedIndex > -1)
				{
					fields[fieldName]=companyByType.selectedItem.cmpy_code;
					types[fieldName]="STRING";
				}
				
				if(Status.selectedIndex==1)
				{	
					fields["trsa_ed_dmy"] = "NULL";
					types["trsa_ed_dmy"]="STRING";
				}
				
				if(Status.selectedIndex==2)
				{	
					if ( this.dateRange.dateText.text.length > 0 )
					{
						fields["trsa_ed_dmy"] = "~~"+dateConvert.format(dateRange.eDate);
						types["trsa_ed_dmy"]="STRING";
					}
				}
				
				if ( this.dateRange.dateText.text.length > 0 )
				{
					if(dateRange.sDate != null && searchText.text == '') 
					{
						fields["trsa_st_dmy"]=dateConvert.format(dateRange.sDate) + "~~" + dateConvert.format(dateRange.eDate);
						types["trsa_st_dmy"]="STRING";
					}
				}
				
				currentFields = fields;
				currentTypes = types;
				
				if (value)
				{
					currentPage=1;
					isAvailable=false;
					nccall('TransactionListService.getPaged',getData,currentFields,currentTypes,currentSorts,currentOrders,currentPage,pageBy);
				}
			}
			
			private function getData_resultHandler(obj:Object):void
			{
				if (currentPage==1) 
				{
					transactionsArr.removeAll();
					transactionsArr.refresh();
					bytesLoaded=0;
				}
				totalCount = Number(obj.count);
				if(interruptor)
				{
					totalCount = transactionsArr.length;	
					interruptor = false;
				}
				else
				{
					// uncompress
					if ( obj.hasOwnProperty('zip_on') && obj.zip_on == 1 )
					{
						var mthd:String="zlib";
						if ( obj.hasOwnProperty('zip_mthd') )
						{
							mthd = obj.zip_mthd;
						}
						obj.data = global.uncompressText( obj.data, mthd );
					}
					//var myobj:Object = JSON.parse(obj.data,null);
					var myobj:Object;
					if ( obj.hasOwnProperty('json_on') && obj.json_on == 1 )
					{
						myobj = JSON.parse( obj.data,null );
					}
					else
					{
						myobj = obj.data;
					}
					
					for each(var s:Object in myobj)
					{
						transactionsArr.source[s.rn-1] = s;
					}
					transactionsArr.refresh();
					bytesLoaded = transactionsArr.list.length/totalCount*bytesTotal-1;	
				}
				trace('>>>>'+totalCount);
				if(transactionsArr.length < totalCount)
				{
					trace(totalCount);
					nccall('TransactionListService.getPaged',getData,currentFields,currentTypes,currentSorts,currentOrders,++currentPage,pageBy);
				}
				else
				{
					finishedAllPages = true;
					isAvailable=true;
					
					this.pb.values(transactionsArr.length, totalCount, true);
					
					if ( currentState == "view" )
					{
						// clean transfer grid and meter grid
						this.transactionDetailsGrid.dataProvider = null;
						this.meterDatagrid.dataProvider = null;
					}
				}
			}
			
			protected function killPaged_clickHandler(event:MouseEvent):void
			{
				interruptor=true;
				isAvailable=true;
			}

			protected function CSVOutHandler(event:MouseEvent):void
			{
				genCSV();
			}
		
			protected function genCSV(): void
			{
				CSVOut ='';
				for (var i:int=0; i < dataGrid.columnsLength;i++)
				{
					if ((dataGrid.columns['source'][i] as GridColumn).visible==true)
					{	
						CSVOut += '"'+(dataGrid.columns['source'][i] as GridColumn).headerText+'"';
						if (i != dataGrid.columnsLength-1) CSVOut += ','
					}	
				}
				
				CSVOut += '\n';
				
				for (var k:int=0; k < transactionsArr.length; k++)
				{
					for (var j:int=0; j < dataGrid.columnsLength; j++)
					{
						if ((dataGrid.columns['source'][j] as GridColumn).visible==true)
						{
							field =(dataGrid.columns['source'][j] as GridColumn).dataField;
							if (transactionsArr[k][field] != null)
								CSVOut += '"'+transactionsArr[k][field]+'"'
							else
								CSVOut += '" "';
							if (j != dataGrid.columnsLength-1) CSVOut += ',';
						}
					}
					CSVOut += '\n';
					trace(k);
				}
				f.save(CSVOut, 'transactions.csv');
			}
			
			protected function get progressBarLabel():String
			{
				var lbl:String="0/0";
				// {transactionsArr.length} / {totalCount}
				if ( totalCount == 0 )
				{
					lbl = resourceManager.getString('default','SEARCH__NO_RESULTS'); 
				}
				else
				{
					lbl = "";
				}
				
				return lbl;
			}
		]]>
	</fx:Script>
	
	<fx:Declarations>
		<s:DateTimeFormatter id="dateFormatter" dateStyle="short" locale="{LocaleID.DEFAULT}"
							 timeStyle="none"/>
		<s:DateTimeFormatter id="dateConvert" dateTimePattern="yyyy-MM-dd HH:mm:ss"/>
		<s:RadioButtonGroup id="rb_status"/>
		<transactionsservice:TransactionsService id="transactionsService"  channelSet="{global.channelSet}"/>
		<companiesservice:CompaniesService id="companyService"  channelSet="{global.channelSet}"/>
		<s:CallResponder id="companyTypesResponder"/>
		<s:CallResponder id="getCompanyByType" result="getCompanyByType_resultHandler(event)"/>
		<guitransactiondetailsservice1:GuiTransactionDetailsService id="guitransactiondetails"  channelSet="{global.channelSet}"/>
		<s:CallResponder id="getDetailsResult" result="getDetailsResult_resultHandler(event)"/>
		<guimeterdetailsservice:GuiMeterDetailsService id="getMeterDetails"  channelSet="{global.channelSet}"/>
		<s:CallResponder id="getMeterDetailsResult"
						 result="getMeterDetailsResult_resultHandler(event)"/>
		<s:CallResponder id="closeTransaction" result="closeTransaction_resultHandler(event)"/>
	</fx:Declarations>
	
	<s:Panel id="panel" width="100%" height="100%" minHeight="0" skinClass="skins.WidgetPanelSkin"
			 title="Search">
		<s:layout>
			<s:VerticalLayout/>
		</s:layout>
		<s:VGroup id="toolbar" width="100%" gap="5" paddingBottom="2" paddingTop="2" enabled="{isAvailable}">
			<s:HGroup width="100%" gap="5">
				<components:DKI_DropDownList id="srchBar" dataProvider="{btnArr}" labelField="btn" selectedIndex="0" height="100%"/>
				<components:DKI_ValidatorInput id="searchText" minWidth="160" width="100%" height="100%"
											   keyUp="searchText_keyUpHandler(event)"
											   prompt="{resourceManager.getString('default','global.prompts.searchbykey')}"
											   validationType="search"/>
				<components:DKI_DropDownList id="companyType" width="140"
											 change="companyType_changeHandler(event)"
											 dataProvider="{companyTypesResponder.lastResult}"
											 labelField="company_name" prompt="{resourceManager.getString('default','global.lbl.companytype')}"/>
				<components:DKI_DropDownList id="companyByType" width="180" enabled="{companyType.selectedIndex>-1}"
											 labelFunction="companyNameLabel" prompt="{resourceManager.getString('default','global.lbl.company')}" change="setFilters(true)"/>
				<components:DKI_DropDownList id="Status" labelField="id" width="140" dataProvider="{statusArr}" selectedIndex="0"/>
				<components:DKI_DateRange id="dateRange" minWidth="220" height="26" width="100%"
										  dateChange="onDateChanged" defaultDays="30"
										  timeEnabled="true"/>					
				
			</s:HGroup>
			<s:HGroup width="100%">
				<s:Spacer width="100%"/>
				<components:DKI_Button height="24" noLabel="false" click="setFilters(true)"
									   type="filteron"/>
				<components:DKI_Button height="24" noLabel="false" click="clearFilters()"
									   type="filteroff"/>
				<s:Spacer width="20"/>
				<components:DKI_Button label="{resourceManager.getString('default','EXPORTDATA')}" click="CSVOutHandler(event)"
									   type="report"/>
				
			</s:HGroup>
		</s:VGroup>
		
		<components:DKI_DataGrid id="dataGrid" width="100%" height="100%" minWidth="0"
								 dataProvider="{transactionsArr}" requestedRowCount="2"
								 selectionChange="dataGrid_selectionChangeHandler(event)"
								 sortableColumns="true" enabled="{isAvailable}">
			<components:columns>
				<s:ArrayList>
					<s:GridColumn width="100" dataField="trsa_bay_cd" headerText="{resourceManager.getString('default','datagrid.headercaption.bay')}"/>
					<s:GridColumn width="120" dataField="trsa_id" headerText="{resourceManager.getString('default','datagrid.headercaption.transnum')}" sortCompareFunction="{global.sortNumeric}"/>
					<s:GridColumn width="100" dataField="trsa_trip" headerText="{resourceManager.getString('default','datagrid.headercaption.tripno')}" sortCompareFunction="{global.sortNumeric}"/>
					<s:GridColumn width="100" dataField="load_id" headerText="{resourceManager.getString('default','KYA_LOAD_ID')}" sortCompareFunction="{global.sortNumeric}"/>
					<s:GridColumn dataField="trsa_tanker" headerText="{resourceManager.getString('default','datagrid.headercaption.Tanker')}"/>
					<s:GridColumn dataField="trsa_per_name" headerText="{resourceManager.getString('default','ORDER_PSNL_NAME')}"/>
					<s:GridColumn dataField="trsa_st_dmy" headerText="{resourceManager.getString('default','JRPT_RANGE_START')}" labelFunction="setTimeStamp"/>
					<s:GridColumn dataField="trsa_ed_dmy" headerText="{resourceManager.getString('default','JRPT_RANGE_END')}" labelFunction="setTimeStamp"/>
					<s:GridColumn dataField="trsa_terminal" headerText="{resourceManager.getString('default','KYA_SITE_NAME')}"/>
					<s:GridColumn width="120" dataField="trsa_psn" headerText="{resourceManager.getString('default','datagrid.headercaption.lastmodifieduser')}"/>
					<s:GridColumn width="140" dataField="trsa_crt_dmy" headerText="{resourceManager.getString('default','datagrid.headercaption.timechanged')}" labelFunction="setTimeStamp2"/>
					<s:GridColumn dataField="trsa_reverse_flag" headerText="{resourceManager.getString('default','datagrid.headercaption.reverseflag')}" itemRenderer="renderers.GridCheckRender" visible="false"></s:GridColumn>
					<s:GridColumn width="200" dataField="trsa_reverse" headerText="{resourceManager.getString('default','datagrid.headercaption.transactionreversed')}" visible="false"/>
					<s:GridColumn dataField="trsa_supplier" headerText="{resourceManager.getString('default','datagrid.headercaption.Supplier')}" visible="false"/>
					<s:GridColumn dataField="trsa_carrier" headerText="{resourceManager.getString('default','datagrid.headercaption.Carrier')}" visible="false"/>
					<s:GridColumn dataField="trsa_drawer" headerText="{resourceManager.getString('default','DRAWER')}" visible="false"/>
				</s:ArrayList>
			</components:columns>
		</components:DKI_DataGrid>
		<s:HGroup width="100%">
			<components:Downloader id="pb" currValue="{transactionsArr.length}" totalValue="{totalCount}" width="100%" height="18"/>
			<!--<mx:ProgressBar id="pb" width="100%" height="22" fontWeight="bold"
							label="{transactionsArr.length} / {totalCount} {progressBarLabel}"
							labelPlacement="center" mode="polled" source="{this}"/>-->
			<s:Button id="killBtn" width="22" height="22" label=""
					  click="killPaged_clickHandler(event)" cornerRadius="12"/>
		</s:HGroup>
		<s:HGroup includeIn="view" width="100%">
			<s:VGroup width="100%">
				<s:Label fontWeight="bold" text="{resourceManager.getString('default','global.lbl.transferdetails')}"/>
				<components:DKI_DataGrid id="transactionDetailsGrid" width="100%" height="100%"
										 minWidth="0" editable="false" requestedRowCount="5"
										 sortableColumns="false">
					<components:columns>
						<s:ArrayList>
							<s:GridColumn dataField="trsf_id" headerText="{resourceManager.getString('default','datagrid.headercaption.transfer')}" width="100"></s:GridColumn>
							<s:GridColumn dataField="baa_bay_seq" headerText="{resourceManager.getString('default','datagrid.headercaption.bayarm')}" width="70"></s:GridColumn>
							<s:GridColumn dataField="eqpt_code" headerText="{resourceManager.getString('default','datagrid.headercaption.trailer')}" width="100"></s:GridColumn>
							<s:GridColumn dataField="prod_name" headerText="{resourceManager.getString('default','datagrid.headercaption.product')}" width="150"/>
							<s:GridColumn dataField="trsf_qty_amb" headerText="{resourceManager.getString('default','datagrid.headercaption.amb')}" width="120"/>
							<s:GridColumn dataField="trsf_qty_cor" headerText="{resourceManager.getString('default','datagrid.headercaption.std')}" width="120"/>
							<s:GridColumn dataField="trsf_load_kg" headerText="{resourceManager.getString('default','datagrid.headercaption.mass')}" width="120"/>
							<s:GridColumn dataField="trsf_density" headerText="{resourceManager.getString('default','datagrid.headercaption.density')}" width="120"/>
							<s:GridColumn dataField="trsf_temp" headerText="{resourceManager.getString('default','datagrid.headercaption.temp')}" width="85"/>
							<s:GridColumn dataField="trsf_api" headerText="{resourceManager.getString('default','datagrid.headercaption.API')}" width="120"/>
							<s:GridColumn dataField="trsf_temp_f" headerText="{resourceManager.getString('default','datagrid.headercaption.tempF')}" width="85"/>
						</s:ArrayList>
					</components:columns>
				</components:DKI_DataGrid>
			</s:VGroup>
		</s:HGroup>
		<s:HGroup includeIn="view" width="100%">
			<s:VGroup width="100%">
				<s:Label fontWeight="bold" text="{resourceManager.getString('default','global.lbl.meterdetails')}"/>
				<components:DKI_DataGrid id="meterDatagrid" width="100%" height="100%" minWidth="0"
										 editable="false" requestedRowCount="5"
										 sortableColumns="false">
					<components:columns>
						<s:ArrayList>
							<s:GridColumn dataField="baa_bay_seq" headerText="{resourceManager.getString('default','datagrid.headercaption.arm')}" width="100"></s:GridColumn>
							<s:GridColumn dataField="trsb_meter" headerText="{resourceManager.getString('default','datagrid.headercaption.meter')}" width="100"></s:GridColumn>
							<s:GridColumn dataField="trsf_opn_amb" headerText="{resourceManager.getString('default','datagrid.headercaption.openambient')}" width="140"></s:GridColumn>
							<s:GridColumn dataField="trsf_cls_amb" headerText="{resourceManager.getString('default','datagrid.headercaption.closingambient')}" width="140"/>
							<s:GridColumn dataField="trsf_opn_cor" headerText="{resourceManager.getString('default','datagrid.headercaption.opencorrected')}" width="140"/>
							<s:GridColumn dataField="trsf_cls_cor" headerText="{resourceManager.getString('default','datagrid.headercaption.closecorrected')}" width="140"/>
							<s:GridColumn dataField="trsf_open_kg" headerText="{resourceManager.getString('default','datagrid.headercaption.openmass')}" width="140"/>
							<s:GridColumn dataField="trsf_close_kg" headerText="{resourceManager.getString('default','datagrid.headercaption.closemass')}" width="140"/>
						</s:ArrayList>
					</components:columns>
				</components:DKI_DataGrid>
			</s:VGroup>	
		</s:HGroup>
		<s:HGroup includeIn="view" gap="10" width="100%">
			<s:Spacer width="100%"/>
			<components:DKI_Button id="close" label="{resourceManager.getString('default','global.lbl.closetransaction')}"
								   click="close_clickHandler(event)" enabled="false" type="save"/>
			<components:DKI_Button id="cancelBtn"
								   label="{resourceManager.getString('default','CLOSE')}"
								   click="cancelBtn_clickHandler(event)" type="close"/>
		</s:HGroup>
	</s:Panel>
</s:VGroup>
