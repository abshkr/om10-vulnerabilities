<?xml version="1.0" encoding="utf-8"?>
<s:VGroup xmlns:fx="http://ns.adobe.com/mxml/2009"
		  xmlns:s="library://ns.adobe.com/flex/spark"
		  xmlns:mx="library://ns.adobe.com/flex/mx"
		  xmlns:components="components.*"
		  creationComplete="creationCompleteHandler(event)"
		  gap="2" width="100%" height="100%">
	
	<s:states>
		<s:State name="normal" enterState="this.toolbar.enabled=true"/>
		<s:State name="widget" enterState="this.toolbar.enabled=true"/>
		<s:State name="edit" enterState="callLater(function():void{dataGrid.ensureCellIsVisible(idx);});this.toolbar.enabled=false"/>
		<s:State name="create" enterState="this.toolbar.enabled=false"/>
		<s:State name="detail" enterState="view_detailsHandler(event);this.toolbar.enabled=false"/>
		<s:State name="tankStatus" />
	</s:states>
	
	<fx:Script>
		<![CDATA[
			import com.adobe.fiber.runtime.lib.DateTimeFunc;
			
			import components.ActionDialog;
			import components.ConfirmDialog;
			import components.DeleteDialog;
			import components.ErrorDialog;
			import components.ExportData;
			import components.MessageDialog;
			import components.TransactionsDlg;
			import components.VCFManager;
			import components.ViewPopupDlg;
			
			import dm.remoteBulkListService;
			import dm.remoteDataService;
			import dm.remoteListService;
			import dm.utils.tools;
			
			import flash.events.KeyboardEvent;
			import flash.globalization.LocaleID;
			
			import flashx.textLayout.container.ScrollPolicy;
			
			import mx.collections.ArrayCollection;
			import mx.controls.Alert;
			import mx.controls.DateField;
			import mx.events.FlexEvent;
			import mx.managers.PopUpManager;
			import mx.rpc.events.ResultEvent;
			import mx.utils.ObjectUtil;
			import mx.utils.StringUtil;
			
			import renderers.DKI_HeaderColumn_Renderer;
			
			import spark.components.ToggleButton;
			import spark.components.VScrollBar;
			import spark.components.gridClasses.IGridItemRenderer;
			import spark.events.GridEvent;
			import spark.events.GridSelectionEvent;
			import spark.events.IndexChangeEvent;
			import spark.events.TextOperationEvent;
			
			import views.v_TankStatus;
			
			
			public static const MAIN_WINDOW_WIDTH:int = 1500;
			
			[Bindable] public var readOnly:Boolean = false;
			[Bindable] public var canUpdate:Boolean = false;
			[Bindable] public var canCreate:Boolean = false;
			[Bindable] public var canDelete:Boolean = false;
			[Bindable] public var hasPassword:Boolean = false;
			
			[Bindable] public var labelWidth:uint = 150;
			[Bindable] public var labelHeight:uint = 26;
			[Bindable] public var fieldWidth:uint = 300;
			[Bindable] public var fieldHeight:uint = 26;
			[Bindable] public var spaceWidth:uint = 15;
			[Bindable] public var spaceHeight:uint = 5;
			
			private var idx:int=-1;
			
			private var currentFilter:String=null;
			private var currentOrder:String='tank_code';
			private var currentDirection:String="ASC";
			
			private var currentOffset:int=0;
			private var currentPageSize:int=1000;
			[Bindable] private var totalLength:int=0;
			[Bindable] private var currentLength:int=0;
			
			private var currentFields:Object=new Object();
			private var currentTypes:Object=new Object();
			//private var currentSorts:Object=new Object();
			//private var currentOrders:Object=new Object();
			private var currentSorts:Object={tank_code:'ASC'};
			private var currentOrders:Object={tank_code:1};
			private var currentSortSeq:int=0;
			
			private var  originalItems:ArrayCollection;
			
			
			private var confirmReport:ActionDialog;
			private var confirmSave:ActionDialog;
			private var errorDialog:ErrorDialog;
			
			//private var exportContents:String="";
			private var f:FileReference = new FileReference();
			
			
			[Bindable] private var pagedRecords:remoteListService;
			
			private var deleteAction:remoteDataService = new remoteDataService( "TankService.delete", null, deleteData_resultHandler, 1 );
			private var createAction:remoteDataService = new remoteDataService( "TankService.create", null, createData_resultHandler, 1 );
			private var updateAction:remoteDataService = new remoteDataService( "TankService.update", null, updateData_resultHandler, 1 );
			
			private var tankKeyChecker:remoteDataService = new remoteDataService( "TankService.isTankKeyUsed", null, tankKeyChecker_resultHandler, 2 );
			
			private var gridColumnSequenceMaker:remoteDataService = new remoteDataService( "ScreenGridColumnService.lookupGridColumnSequence", null, gridColumnSequenceMaker_resultHandler, 1 );
			private var _gridColumnSequenceString:String="";
			private var formColumnSettingsMaker:remoteDataService = new remoteDataService( "ScreenFormColumnService.lookupFormColumnSettings", null, formColumnSettingsMaker_resultHandler, 1 );
			private var _formColumnSettingsString:String="";
			private var formButtonSettingsMaker:remoteDataService = new remoteDataService( "ScreenFormButtonService.lookupFormButtonSettings", null, formButtonSettingsMaker_resultHandler, 1 );
			private var _formButtonSettingsString:String="";
			
			
			private var refTemperatureReader:remoteDataService = new remoteDataService( "TankService.getStandardTemperature", null, refTemperatureReader_resultHandler, 3 );
			[Bindable] private var baseClassList:remoteDataService = new remoteDataService( "ListLibraryService.lookupBaseClass", null, null );
			[Bindable] private var baseProductList:remoteDataService = new remoteDataService( "ListLibraryService.lookupTankBaseProduct", null, null );
			[Bindable] private var terminalList:remoteDataService = new remoteDataService( "ListLibraryService.lookupTerminal", null, null );
			
			[Bindable] private var productUnitList:remoteDataService = new remoteDataService( "ListLibraryService.lookupProductUnit", null, lookupProductUnit_resultHandler );
			
			//private var genData:ExportData = new ExportData();
			
			public var mainListSelection:int = -1;
			private var _saveButtonClicked:Boolean=false;
			
			public var tankStatusPopup:ViewPopupDlg = new ViewPopupDlg( "Tank Status", new v_TankStatus(), closeDialogHandler );
			
			[Bindable] private var defaultRefTempC:Number;
			[Bindable] private var refTempC:Number;
			[Bindable] private var refTempF:Number;
			[Bindable] private var refTempTextC:String;
			[Bindable] private var refTempTextF:String;
			[Bindable] private var refTempText:String;
			[Bindable] private var stdTempC60F:Number=15.5556;
			[Bindable] private var stdVCF60F:Number;
			
			
			private var volumeType:String="NA";
			private var volumeAmount:Number=0.0;
			private var densityType:String="NA";
			private var densityAmount:Number=0.0;
			public var mngr:VCFManager = new VCFManager();
			
			// the number of digits after decimal point
			[Bindable] private var digitsAPI:int=2;
			[Bindable] private var digitsTEMP:int=2;
			[Bindable] private var digitsDENS:int=3;
			[Bindable] private var digitsLVL:int=0;
			[Bindable] private var digitsVOL:int=0;
			[Bindable] private var digitsMASS:int=0;
			[Bindable] private var digitsADTV:int=3;
			
			
			protected function creationCompleteHandler(event:FlexEvent):void
			{
				this.formColumnSettingsMaker.service( "TANK_CONFIGURATION" );
				this.formButtonSettingsMaker.service( "TANK_CONFIGURATION" );
				
				trace ("-------------start creationCompleteHandler");
				pagedRecords = new remoteListService( this.dataGrid, "TankService.getPaged", null, getPageData_resultHandler );
				//resourceManager.localeChain = ['zh_CN'];
				//global.LanguageCode="CHN";
				this.gridColumnSequenceMaker.service( "TANKCONFIGURATION" );
				
				
				var value:String = global.getValueFromSiteConfigSettings( "SITE_AUTO_FILTER_WHEN_OPEN_SCREEN" );
				if ( value == 'Y' )
				{
					this.startFiltering();
				}
				else
				{
					;
				}
				
				this.terminalList.service();
				
				this.baseProductList.service( );
				this.baseClassList.service( );
				
				this.productUnitList.service( );
				
				
				trace ("------------End creationCompleteHandler");
				
				
				//trace("this.grid.scroller1111", this.dataGrid.scroller);
				//trace("this.grid.scroller.verticalScrollBar.value", this.dataGrid.scroller.verticalScrollBar.value);
				this.dataGrid.scroller.verticalScrollBar.addEventListener(Event.CHANGE, verticalScrollBarChanged);
				this.dataGrid.addEventListener(KeyboardEvent.KEY_UP, reportKeyUp);
				this.dataGrid.columnHeaderGroup.addEventListener(GridEvent.GRID_CLICK, headerClickListener);
					
			}
			
			
			
			protected function formColumnSettingsMaker_resultHandler():void
			{
				this._formColumnSettingsString =  formColumnSettingsMaker.dataString;
			}
			
			protected function formButtonSettingsMaker_resultHandler():void
			{
				this._formButtonSettingsString =  formButtonSettingsMaker.dataString;
			}
			
			protected function refTemperatureReader_resultHandler( ):void
			{
				this.defaultRefTempC = refTemperatureReader.dataNumber;
				
				this.adjustRefTemperature( this.defaultRefTempC, 0 );
			}
			
			
			protected function adjustRefTemperature(temp:Number, unit:int):void
			{
				if ( unit == 0 )
				{
					this.refTempC = temp;
					this.refTempF = this.mngr.Temp_C2F( refTempC );
				}
				else
				{
					this.refTempF = temp;
					this.refTempC = this.mngr.Temp_F2C( refTempF );
				}
				
				if ( String(this.refTempC).indexOf('.') < 0 )
				{
					//this.refTempTextC = String(this.refTempC) + 'C';
					this.refTempTextC = String(this.refTempC) + resourceManager.getString('default','UNIT__TEMP_C');
				}
				else
				{
					//this.refTempTextC = tools.roundString(String(this.refTempC), this.digitsTEMP) + 'C';
					this.refTempTextC = tools.roundString(String(this.refTempC), this.digitsTEMP) + resourceManager.getString('default','UNIT__TEMP_C');
				}
				
				if ( String(this.refTempF).indexOf('.') < 0 )
				{
					//this.refTempTextF = String(this.refTempF) + 'F';
					this.refTempTextF = String(this.refTempF) + resourceManager.getString('default','UNIT__TEMP_F');
				}
				else
				{
					//this.refTempTextF = tools.roundString(String(this.refTempF), this.digitsTEMP) + 'F';
					this.refTempTextF = tools.roundString(String(this.refTempF), this.digitsTEMP) + resourceManager.getString('default','UNIT__TEMP_F');
				}
				
				this.refTempText = this.refTempTextC + '/' + this.refTempTextF;
			}
			
			
			protected function startLoadingPages():void
			{
				killBtn.setStyle("chromeColor","0xff0000");
				this.killBtn.includeInLayout=true;
				this.killBtn.visible = true;
				this.killBtn.enabled = true;
				
				resumeBtn.setStyle("chromeColor","0x00ff00");
				this.resumeBtn.includeInLayout=true;
				this.resumeBtn.visible = true;
				this.resumeBtn.enabled = false;
				
				this.btn_create.enabled = false
				this.btn_export.enabled = false;
				this.dataGrid.enabled = false;
				this.toolbar.enabled = false;
				//this.panel.enabled = false;
				
				currentLength=0;
				currentOffset = 0;
				
				//this.exportContents = this.genData.prepExportHeader( dataGrid );
				
				//currentPage=1;
				pagedRecords.currentPage=1;
				pagedRecords.removeAll();
				pagedRecords.refresh();
				this.pb.values(0, 0);
				//this.pagedRecords.service( currentFields, currentTypes, currentSorts, currentOrders, currentPage, currentPageSize );
				this.pagedRecords.listService( currentFields, currentTypes, currentSorts, currentOrders );
			}
			
			protected function endLoadingPages():void
			{
				this.btn_create.enabled = this.canCreate;
				this.btn_export.enabled = true;
				this.dataGrid.enabled = true;
				this.toolbar.enabled = true;
				//this.panel.enabled = true;
				//this.pb.values(totalCount, totalCount);
				this.pb.values(pagedRecords.totalCount, pagedRecords.totalCount, true);
				
				this.killBtn.includeInLayout=true;
				this.killBtn.visible = true;
				this.killBtn.enabled = false;
				
				this.resumeBtn.includeInLayout=true;
				this.resumeBtn.visible = true;
				//if ( totalLength > totalCount )
				if ( pagedRecords.totalLength > pagedRecords.totalCount )
				{
					this.resumeBtn.enabled = true;
				}
				else
				{
					this.resumeBtn.enabled = false;
				}
				
				//this.fltr_tank.setFocus();
				var len:int = this.fltr_tank.text.length;
				this.fltr_tank.selectRange(len, len);
			}
			
			protected function exportCsvHandler(event:MouseEvent):void
			{
				this.confirmReport = new ActionDialog( doExport, cancelExport, resourceManager.getString('default','CONFIRM_REPORT_CSV') );
				
				//this.startLoadingPages();
			}
			
			private function getPageData_resultHandler():void
			{
				// if not finished
				if(pagedRecords.length < pagedRecords.totalCount)
				{
					pb.values(pagedRecords.length,pagedRecords.totalCount)
				}
				else
				{
					pb.values(pagedRecords.length,pagedRecords.totalCount)
					
					this.endLoadingPages();
					
					this.dataGrid.selectedIndex = this.mainListSelection;
					if ( this.mainListSelection >= 0)
					{
						this.dataGrid_selectionChangeHandler(null);
					}
					this.mainListSelection = -1;
					
				}
				
			}
			
			
			public function doExport():void
			{
				//genData.prepOther(dataGrid,'drawerProductlist.csv', this.pagedRecords);
				
				//f.save( this.exportContents, "drawerProductlist.csv" );
				f.save( pagedRecords.exportContents, "tanklist.csv" );
				
				this.endLoadingPages();
			}
			
			
			public function cancelExport():void
			{
				this.endLoadingPages();
				
				//trace( this.exportContents );
			}
			
			public function doNothing():void
			{
			}
			
			
			private function verticalScrollBarChanged(event:Event):void
			{
				if ( this.dataGrid.scroller != null)
				{
					var vs:VScrollBar;
					vs = this.dataGrid.scroller.verticalScrollBar;
					//trace("this.grid.scroller.verticalScrollBar.value", vs.value, vs.maximum, vs.minimum, vs.stepSize, vs.pageSize, vs.	snapInterval);
				}
				else
				{
					trace("grid is changed");
				}
			}
			
			private function reportKeyUp(event:KeyboardEvent):void
			{
				if ( this.dataGrid.scroller != null)
				{
					var vs:VScrollBar;
					vs = this.dataGrid.scroller.verticalScrollBar;
					//trace("this.grid.scroller.verticalScrollBar.value", vs.value, vs.maximum, vs.minimum, vs.stepSize, vs.pageSize, vs.	snapInterval);
				}
				else
				{
					trace("grid is changed");
				}
			}
			
			private function headerClickListener(event:GridEvent):void
			{
				if(event.column.dataField!='prod_items')
				{
					var currentRenderer:IGridItemRenderer;
					var dir:String;
					
					if ( global.sortingBySingleColumn == true )
					{	// sorted by single column only
						for (var i:int=0; i < dataGrid.columns.length; i++)
						{
							currentRenderer = dataGrid.columnHeaderGroup.getHeaderRendererAt(i);
							if ( currentRenderer != null)
							{
								(currentRenderer as DKI_HeaderColumn_Renderer).setImage('');
							}
							//(currentRenderer as DKI_HeaderColumn_Renderer).setImage(''); 
						}
					}
					else
					{	// sorted by multiple columns
						;
					}
					currentRenderer = dataGrid.columnHeaderGroup.getHeaderRendererAt(event.columnIndex);
					
					if( currentSorts.hasOwnProperty(event.column.dataField ) )
					{
						dir = currentSorts[event.column.dataField];
						if( dir=="ASC" )
						{
							dir = "DESC";
						}
						else if ( dir == "DESC" )
						{
							dir = "";
						}
						else if ( dir == "" )
						{
							dir = "ASC";
						}
						else 
						{
							dir = "ASC";
						}
						
						if ( dir != "" )
						{
							currentSorts[event.column.dataField] = dir;	
						}
						else
						{
							delete currentSorts[event.column.dataField];
							delete currentOrders[event.column.dataField];
						}
					}
					else
					{
						if ( global.sortingBySingleColumn == true )
						{	// sorted by single column only
							currentSorts = new Object();
							currentOrders = new Object();
							currentSortSeq = 0;
						}
						else
						{	// sorted by multiple columns
							;
						}
						currentSorts[event.column.dataField] = "ASC";	
						dir = currentSorts[event.column.dataField];
						currentSortSeq += 1;
						currentOrders[event.column.dataField] = currentSortSeq;	
					}
					(currentRenderer as DKI_HeaderColumn_Renderer).setImage(dir);
					this.startFiltering();
				}
			}
			
			
			protected function dataGrid_selectionChangeHandler(event:GridSelectionEvent):void
			{
				if(currentState != 'widget')
				{
					idx=dataGrid.selectedIndex;
					//dataGrid.ensureCellIsVisible(idx+11);
					dataGrid.ensureCellIsVisible(idx);
					
					currentState = "edit";					
					this.btn_save.enabled = this.canUpdate;
					
					this.toggleValidationRequired();
					
					if ( _formColumnSettingsString.length > 0 )
					{
						global.adjustFormFieldSettings( _formColumnSettingsString.substr(1), this );
					}
					
					if ( _formButtonSettingsString.length > 0 )
					{
						global.adjustFormButtonSettings( _formButtonSettingsString.substr(1), this );
					}
					
					// TODO????
					this.density_range.text = "[" + dataGrid.selectedItem.tank_bclass_dens_lo + " - " + dataGrid.selectedItem.tank_bclass_dens_hi + "] " + resourceManager.getString('default','UNIT__DENSITY');
					this.density_range.visible = true;
				}
			}
			
			protected function cancel_clickHandler():void
			{
				clearDetail();
				if ( currentState== "create" )
				{
					dataGrid.enabled=true;
				}
				currentState="normal";
				dataGrid.selectedIndex = -1;
			}			
			
			protected function gridColumnSequenceMaker_resultHandler():void
			{
				this._gridColumnSequenceString =  gridColumnSequenceMaker.dataString;
				
				if ( _gridColumnSequenceString.length > 0 )
				{
					global.adjustGridColumnSequence( _gridColumnSequenceString.substr(1), dataGrid );
				}
				
			}

			
			protected function fltr_tank_keyUpHandler(event:KeyboardEvent):void
			{
				if ( event.keyCode != 13 )
				{
					return;
				}
				if (currentState == "edit") clearDetail();
				startFiltering();
			}
			
			protected function fltr_terminal_changeHandler(event:IndexChangeEvent):void
			{
				if (currentState == "edit") clearDetail();
				startFiltering();
			}
			
			protected function fltr_baseprod_changeHandler(event:IndexChangeEvent):void
			{
				if (currentState == "edit") clearDetail();
				startFiltering();
			}
			
			protected function fltr_baseclass_changeHandler(event:IndexChangeEvent):void
			{
				if (currentState == "edit") clearDetail();
				startFiltering();
			}
			
			private function startFiltering():void
			{
				var tankFilter:String = '';  
				var terminalFilter:String = '';  
				var baseProdFilter:String = '';
				var baseClassFilter:String = '';
				var fields:Object;
				var types:Object;
				
				//interruptor=false;
				pagedRecords.interruptor=false;
				
				fields = new Object();
				types = new Object();
				
				
				if(fltr_tank.text!='')
				{					
					tankFilter = "((UPPER(tank_code) LIKE UPPER('%"+(fltr_tank.text)+"%') ) or "
						+ "(UPPER(tank_name) LIKE UPPER('%"+(fltr_tank.text)+"%') )) ";
					fields["tank_code||tank_name"] = fltr_tank.text+"||"+fltr_tank.text;
				}
				else
				{
					tankFilter = '';
					fields["tank_code||tank_name"] = "";
				}
				types["tank_code||tank_name"] = "STRING||STRING";
				
				
				if (fltr_terminal.selectedIndex > -1) 
				{
					terminalFilter = "tank_terminal='"+terminalList[fltr_terminal.selectedIndex].term_code+"' ";
					fields["tank_terminal"] = terminalList[fltr_terminal.selectedIndex].term_code;
				}
				else
				{
					if ( global.setComboBoxNoSelection == true )
					{
						fltr_terminal.selectedIndex = -1;
					}
					terminalFilter = '';
					fields["tank_terminal"] = "";
				}
				types["tank_terminal"] = "EXACT_STRING";
				
				
				
				if ( this.currentState != "widget" )
				{
					if (fltr_baseprod.selectedIndex > -1) 
					{
						baseProdFilter = "tank_base="+baseProductList[fltr_baseprod.selectedIndex].base_code+" ";
						fields["tank_base"] = baseProductList[fltr_baseprod.selectedIndex].base_code;
					}
					else
					{
						if ( global.setComboBoxNoSelection == true )
						{
							fltr_baseprod.selectedIndex = -1;
						}
						baseProdFilter = '';
						fields["tank_base"] = "";
					}
					types["tank_base"] = "EXACT_STRING";
					
					if (fltr_baseclass.selectedIndex > -1) 
					{
						baseClassFilter = "tank_base_class="+baseClassList[fltr_baseclass.selectedIndex].bclass_no+" ";
						fields["tank_base_class"] = baseClassList[fltr_baseclass.selectedIndex].bclass_no;
					}
					else
					{
						if ( global.setComboBoxNoSelection == true )
						{
							fltr_baseclass.selectedIndex = -1;
						}
						baseClassFilter = '';
						fields["tank_base_class"] = "";
					}
					types["tank_base_class"] = "EXACT_STRING";
				}
				
				currentFilter = "WHERE 1=1 ";
				if ( baseClassFilter.length > 0 )
				{
					currentFilter += "AND " + baseClassFilter;
				}
				if ( tankFilter.length > 0 )
				{
					currentFilter += "AND " + tankFilter;
				}
				if ( terminalFilter.length > 0 )
				{
					currentFilter += "AND " + terminalFilter;
				}
				if ( baseProdFilter.length > 0 )
				{
					currentFilter += "AND " + baseProdFilter;
				}
				
				currentFields = fields;
				currentTypes = types;
				
				this.startLoadingPages();
				
				trace("this.grid.scroller3333", this.dataGrid.scroller);
				trace("this.grid.scroller.verticalScrollBar.value", this.dataGrid.scroller.verticalScrollBar.value);
			}
			
			private function findByPrimaryKey(site:String, tank:String):void
			{
				var fields:Object;
				var types:Object;
				
				fields = new Object();
				types = new Object();
				
				fields["tank_terminal"] = site;
				types["tank_terminal"] = "EXACT_STRING";
				fields["tank_code"] = tank;
				types["tank_code"] = "EXACT_STRING";
				
				//currentPage=1;
				pagedRecords.currentPage=1;
				pagedRecords.removeAll();
				pagedRecords.refresh();
				//this.pagedRecords.service( fields, types, currentSorts, currentOrders, currentPage, currentPageSize );
				this.pagedRecords.listService( fields, types, currentSorts, currentOrders );
			}
			
			protected function filterRecords(event:MouseEvent):void
			{
				if (currentState == "edit") clearDetail();
				this.startFiltering();
			}
			
			protected function refreshRecords(event:MouseEvent):void
			{
				if ( currentState != "widget" )
				{
					currentState = 'normal';
					dataGrid.enabled=true;
				}
				clearDetail();
				fltr_tank.text = "";
				fltr_terminal.selectedIndex = -1;
				if ( currentState != "widget" )
				{
					fltr_baseprod.selectedIndex = -1;
					fltr_baseclass.selectedIndex = -1;
				}
				
				dataGrid.selectedIndex = -1;
				currentFilter = null;
				currentOrder = null;
				currentFields = new Object();
				currentTypes = new Object();
				
				currentSorts = new Object();
				currentOrders = new Object();
				var currentRenderer:IGridItemRenderer;
				for (var i:int=0; i < dataGrid.columns.length; i++)
				{
					currentRenderer = dataGrid.columnHeaderGroup.getHeaderRendererAt(i);
					if ( currentRenderer != null)
					{
						(currentRenderer as DKI_HeaderColumn_Renderer).setImage('');
					}
					//(currentRenderer as DKI_HeaderColumn_Renderer).setImage(''); 
				}
				this.startFiltering();
				//this.startLoadingPages();
				trace("this.grid.scroller2222", this.dataGrid.scroller);
				trace("this.grid.scroller.verticalScrollBar.value", this.dataGrid.scroller.verticalScrollBar.value);
			}
			
			protected function clearDetail(): void
			{
				if (currentState != 'widget')
				{
				}
			}			
			
			private function editRecord():void
			{
				
				if ( this.checkFields() > 0 )
				{
					this.btn_save.enabled = this.canUpdate;
					return;
				}
				
				this.calculateTankDensities();
				
				var obj:Object = new Object();
				
				
				obj.tank_code = tank_code.text;
				obj.tank_name = tank_name.text;
				obj.tank_density = tank_density.text;
				obj.tank_15_density = this.tank_15_density.text;
				obj.tank_api = this.tank_api.text;
				
				obj.tank_dtol_percent = tank_dtol_percent.text;
				obj.tank_dtol_volume = tank_dtol_volume.text;
				obj.tank_mtol_percent = tank_mtol_percent.text;
				obj.tank_mtol_volume = tank_mtol_volume.text;
				
				
				if (tank_terminal.selectedIndex>=0)
				{
					obj.tank_terminal = terminalList[tank_terminal.selectedIndex].term_code;
				}
				else
				{
					obj.tank_terminal = dataGrid.selectedItem.tank_terminal;
				}
				
				if (tank_base.selectedIndex>=0)
				{
					obj.tank_base = baseProductList[tank_base.selectedIndex].base_code;
					obj.tank_bclass_dens_lo = baseProductList[tank_base.selectedIndex].base_class_dens_lo;
					obj.tank_bclass_dens_hi = baseProductList[tank_base.selectedIndex].base_class_dens_hi;
				}
				else
				{
					obj.tank_base = dataGrid.selectedItem.tank_base;
					obj.tank_bclass_dens_lo = dataGrid.selectedItem.tank_bclass_dens_lo;
					obj.tank_bclass_dens_hi = dataGrid.selectedItem.tank_bclass_dens_hi;
				}
				
				updateAction.service( obj );
			}
			
			protected function updateData_resultHandler( ):void
			{
				clearDetail();
				if ( this.updateAction.dataString == "OK" )
				{
					global.msgSuccess(resourceManager.getString('default','MSG_UPDATE__SUCCESS'));
				}
				else
				{
					global.msgFail(resourceManager.getString('default','ERROR_UPDATE__FAILURE'));
				}
				
				var site:String;
				var tank:String;
				site = terminalList[tank_terminal.selectedIndex].term_code;
				tank = tank_code.text;
				
				currentState="normal";
				findByPrimaryKey( site, tank );

				dataGrid.selectedIndex = -1;
				dataGrid.enabled=true;
			}
			
			private function doDelete(): void
			{
				var errors:String="";
				var index:int=0;
				
				
				/*
				TODO - is this product used by other records?
				*/
				if ( index > 0 )
				{
					var errorBox:MessageDialog = new MessageDialog( errors );
				}
				else
				{
					var canDelete:DeleteDialog = new DeleteDialog(deleteRecord, hasPassword);
				}
			}
			
			private function deleteRecord():void
			{
				var obj:Object = new Object();
				
				
				obj.tank_terminal = dataGrid.selectedItem.tank_terminal;
				obj.tank_code = dataGrid.selectedItem.tank_code;
				obj.tank_name = dataGrid.selectedItem.tank_name;
				obj.tank_base = dataGrid.selectedItem.tank_base;
				obj.tank_base_name = dataGrid.selectedItem.tank_base_name;
				obj.tank_density = dataGrid.selectedItem.tank_density;
				obj.tank_dtol_percent = dataGrid.selectedItem.tank_dtol_percent;
				obj.tank_dtol_volume = dataGrid.selectedItem.tank_dtol_volume;
				obj.tank_mtol_percent = dataGrid.selectedItem.tank_mtol_percent;
				obj.tank_mtol_volume = dataGrid.selectedItem.tank_mtol_volume;
				
				//nc.call( 'TankService.delete', deleteData, obj );
				deleteAction.service( obj );
			}
			
			protected function deleteData_resultHandler( ):void
			{
				clearDetail();
				if ( this.deleteAction.dataString == "OK" )
				{
					global.msgSuccess(resourceManager.getString('default','MSG_DELETE__SUCCESS'));
				}
				else
				{
					global.msgFail(resourceManager.getString('default','ERROR_DELETE__FAILURE'));
				}
				
				currentState="normal";
				this.startFiltering();
				dataGrid.selectedIndex = -1;
			}
			
			private function checkTankKey():void
			{
				var obj:Object=new Object();
				
				if (tank_terminal.selectedIndex>=0)
				{
					obj.tank_terminal = terminalList[tank_terminal.selectedIndex].term_code;
				}
				else
				{
					obj.tank_terminal = "-1";
				}
				
				obj.tank_code = this.tank_code.text;
				
				tankKeyChecker.service( obj.tank_terminal, obj.tank_code );
			}
			
			protected function tankKeyChecker_resultHandler( ):void
			{
				if ( tankKeyChecker.dataInteger > 0 )
				{
					global.msgWarning( resourceManager.getString('default','ALERT__TANK_EXIST') );
					this.btn_save.enabled = this.canCreate;
				}
				else
				{
					if ( this._saveButtonClicked == true )
					{
						this.createRecord();
					}
				}
				
				this._saveButtonClicked = false;
				
			}
			
			private function checkFields():int
			{
				var errors:String="";
				var index:int=0;
				
				if ( tank_terminal.selectedIndex == -1 )//< 0 )
				{
					index += 1;
					errors += String(index) + ". " + resourceManager.getString('default','PLEASE')+resourceManager.getString('default','SELECT')+resourceManager.getString('default','TANK_TERMINAL') + "\n";
				}
				if ( tank_base.selectedIndex > -1 )
				{
					var dens_lo:Number = baseProductList[tank_base.selectedIndex].base_class_dens_lo;
					var dens_hi:Number = baseProductList[tank_base.selectedIndex].base_class_dens_hi;
					var dens:Number = Number(this.tank_density.text);
					
					if ( !( dens >= dens_lo && dens <= dens_hi ) )
					{
						index += 1;
						errors += String(index) + ". " + resourceManager.getString('default','ALERT__TANK_DENSITY_OUTLIMIT') + "\n";
					}
						
				}
				if ( StringUtil.trim(tank_dtol_percent.text).length> 0  )
				{
					var pdtol:Number;
					
					pdtol = Number(StringUtil.trim(tank_dtol_percent.text));
					if ( pdtol >= 100 )
					{
						index += 1;
						errors += String(index) + ". " + resourceManager.getString('default','TANK_DTOL_PERCENT') + ": " + resourceManager.getString('default','ALERT__TANK_PERCENT_OUTLIMIT') + "\n";
					}
					
				}
				if ( StringUtil.trim(tank_mtol_percent.text).length> 0  )
				{
					var pmtol:Number;
					
					pmtol = Number(StringUtil.trim(tank_mtol_percent.text));
					if ( pmtol >= 100 )
					{
						index += 1;
						errors += String(index) + ". " + resourceManager.getString('default','TANK_MTOL_PERCENT') + ": "  + resourceManager.getString('default','ALERT__TANK_PERCENT_OUTLIMIT') + "\n";
					}
					
				}
				
				if ( index > 0 )
				{
					var errorBox:MessageDialog = new MessageDialog( errors );
				}
				
				return index;
			}
			
			private function createRecord():void
			{
				var prod_num:int;
				
				prod_num = tankKeyChecker.dataInteger;
				if ( prod_num > 0 )
				{
					var errorBox:MessageDialog = new MessageDialog( resourceManager.getString('default','ALERT__TANK_EXIST') );
					this.btn_save.enabled = this.canCreate;
					return;
				}
				
				if ( this.checkFields() > 0 )
				{
					this.btn_save.enabled = this.canCreate;
					return;
				}
				
				this.calculateTankDensities();
				
				var obj:Object = new Object();
				
				
				obj.tank_code = tank_code.text;
				obj.tank_name = tank_name.text;
				obj.tank_density = tank_density.text;
				obj.tank_15_density = this.tank_15_density.text;
				obj.tank_api = this.tank_api.text;
				
				obj.tank_dtol_percent = tank_dtol_percent.text;
				obj.tank_dtol_volume = tank_dtol_volume.text;
				obj.tank_mtol_percent = tank_mtol_percent.text;
				obj.tank_mtol_volume = tank_mtol_volume.text;
				
				
				if (tank_terminal.selectedIndex>=0)
				{
					obj.tank_terminal = terminalList[tank_terminal.selectedIndex].term_code;
				}
				else
				{
					obj.tank_terminal = terminalList[0].term_code;
				}
				
				if (tank_base.selectedIndex>=0)
				{
					obj.tank_base = baseProductList[tank_base.selectedIndex].base_code;
					obj.tank_bclass_dens_lo = baseProductList[tank_base.selectedIndex].base_class_dens_lo;
					obj.tank_bclass_dens_hi = baseProductList[tank_base.selectedIndex].base_class_dens_hi;
				}
				else
				{
					obj.tank_base = baseProductList[0].base_code;
					obj.tank_bclass_dens_lo = baseProductList[0].base_class_dens_lo;
					obj.tank_bclass_dens_hi = baseProductList[0].base_class_dens_hi;
				}
				
				//nc.call( 'TankService.create', createData, obj );
				createAction.service( obj );
			}
			
			protected function createData_resultHandler( ):void
			{
				clearDetail();
				if ( this.createAction.dataString == "OK" )
				{
					global.msgSuccess(resourceManager.getString('default','MSG_CREATE__SUCCESS'));
				}
				else
				{
					global.msgFail(resourceManager.getString('default','ERROR_CREATE__FAILURE'));
				}
				
				var site:String;
				var tank:String;
				site = terminalList[tank_terminal.selectedIndex].term_code;
				tank = tank_code.text;
				
				currentState="normal";
				findByPrimaryKey( site, tank );
				
				dataGrid.selectedIndex = -1;
				dataGrid.enabled=true;
			}
			
			protected function createNewRecord(event:MouseEvent):void
			{	
				idx=dataGrid.selectedIndex;
				dataGrid.ensureCellIsVisible(idx);
				currentState="create";
				dataGrid.enabled=false;
				this.btn_save.enabled = this.canCreate;
				
				this.toggleValidationRequired();
				
				if ( _formColumnSettingsString.length > 0 )
				{
					global.adjustFormFieldSettings( _formColumnSettingsString.substr(1), this );
				}
				
				if ( _formButtonSettingsString.length > 0 )
				{
					global.adjustFormButtonSettings( _formButtonSettingsString.substr(1), this );
				}
			}
			
			
			public function getArrayCollection(obj:Object):ArrayCollection
			{
				var temp:ArrayCollection = new ArrayCollection;
				temp.addItem( obj );
				return temp;
			}
			
			public function convertDateToLocaleString(dt:String):String
			{
				var dt_string:String;
				var dt_date:Date = new Date();
				
				dt_string = ""; 
				if ((dt!=null) && (dt!='null') && (dt!=''))
				{
					dt_date = DateField.stringToDate(dt,"YYYY-MM-DD");
					dt_string = dateFormatter.format( dt_date);
				}
				//trace ("convertDateToLocale", dt, dt_date, dt_string);
				return dt_string;
			}
			
			public function convertDateToLocale(dt:String):Date
			{
				var dt_date:Date = new Date();
				
				if ((dt!=null) && (dt!='null') && (dt!=''))
				{
					dt_date = DateField.stringToDate(dt,"YYYY-MM-DD");
				}
				//trace ("convertDateToLocale", dt, dt_date, dt_string);
				return dt_date;
			}
			
			public function convertDateToLocaleLong(dt:String):Date
			{
				var dt_date:Date = new Date();
				
				if ((dt!=null) && (dt!='null') && (dt!=''))
				{
					//dt_date = DateField.stringToDate(dt,"YYYY-MM-DD HH:NN:SS");
					dt_date = DateTimeFunc.createDate(
						int(dt.substr(0, 4))
						, int(dt.substr(5, 2))
						, int(dt.substr(8, 2))
						, int(dt.substr(11, 2))
						, int(dt.substr(14, 2))
						, int(dt.substr(17, 2))
					);
				}
				//trace ("convertDateToLocale", dt, dt_date, dt_string);
				return dt_date;
			}
			
			public function getDefaultDate():Date
			{
				var now_date:Date;
				var def_date:Date;
				
				now_date = new Date();
				def_date = DateTimeFunc.dateAdd( "yyyy", 1, now_date );
				
				//trace ("getDefaultDate", now_date, def_date);
				
				return def_date;
			}
			
			protected function view_detailsHandler(event:FlexEvent):void
			{
			}
			
			protected function unitLabelFunction(item:Object, column:GridColumn):String
			{
				var ret:String = 'l(amb)';
				//for each(var obj:Object in lookupDrawerProductUnit.lastResult)
				for each(var obj:Object in this.productUnitList)
				{
					if(obj.unit_id == item [column.dataField]) ret=obj.unit_name;
				}
				return ret;
			}
			
			protected function roundNumberFunction(item:Object, column:GridColumn):String
			{
				var digits:int=0;
				if ( column.dataField == "tank_temp" )
				{
					digits = 2;
				}
				if ( column.dataField == "tank_density" )
				{
					digits = 3;
				}
				
				var ret:String = item [column.dataField];
				ret = tools.roundString( ret, digits );
				
				return ret;
			}
			
			protected function dateLabelFunction(item:Object, column:GridColumn):String
			{
				var ret:String = "";
				
				ret = item [column.dataField];
				return ret;
			}
			
			protected function lookupProductUnit_resultHandler( ):void
			{
				global.prodUnits = this.productUnitList;
			}
			
			protected function save_clickHandler():void
			{
				this.btn_save.enabled = false;
				doSave();
				//this.confirmSave = new ActionDialog( doSave, doNothing, resourceManager.getString('default','CONFIRM_SAVE_RATIOS') );
				
				//this.startLoadingPages();
			}
			
			protected function doSave():void
			{
				if (currentState == "create")
				{
					//createRecord();
					this._saveButtonClicked = true;
					checkTankKey();
				}
				if (currentState == "edit")
				{
					editRecord();
				}
				if (currentState == "detail")
				{
					editRecord();
				}
			}
			
			public function closeDialogHandler():void
			{
				/* this.mainListSelection = this.dataGrid.selectedIndex;
				this.currentState = "normal";
				this.dataGrid.selectedIndex = -1;
				this.startFiltering(); */
			}
			
			
			public function closeErrorDialog():void
			{
				PopUpManager.removePopUp(this.errorDialog.dialog );	
			}
			
			protected function killBtn_clickHandler(event:MouseEvent):void
			{
				//interruptor=true;
				pagedRecords.interruptor=true;
				trace("WTF >>>>>>>>>>");
			}
			
			protected function resumeBtn_clickHandler(event:MouseEvent):void
			{
				//interruptor=false;
				pagedRecords.interruptor=false;
				
				this.resumeLoadingPages();
				trace("RESUME >>>>>>>>>>");
			}
			
			protected function resumeLoadingPages():void
			{
				killBtn.setStyle("chromeColor","0xff0000");
				this.killBtn.includeInLayout=true;
				this.killBtn.visible = true;
				this.killBtn.enabled = true;
				
				resumeBtn.setStyle("chromeColor","0x00ff00");
				this.resumeBtn.includeInLayout=true;
				this.resumeBtn.visible = true;
				this.resumeBtn.enabled = false;
				
				this.btn_create.enabled = false
				this.btn_export.enabled = false;
				this.dataGrid.enabled = false;
				this.toolbar.enabled = false;
				
				//pb.values(pagedRecords.length,totalLength);
				pb.values(pagedRecords.length,pagedRecords.totalLength);
				//currentPage = int(this.pagedRecords.length/currentPageSize) + 1;
				//this.pagedRecords.service( currentFields, currentTypes, currentSorts, currentOrders, currentPage, currentPageSize );
				this.pagedRecords.listService( currentFields, currentTypes, currentSorts, currentOrders );
			}
			
			
			protected function tank_base_changeHandler(event:IndexChangeEvent):void
			{
				if( this.tank_base.selectedIndex >= 0 )
				{
					this.tank_density.enabled = true;
					this.density_range.visible = true;
					this.density_range.text = "[" + this.tank_base.selectedItem.base_class_dens_lo + " - " + this.tank_base.selectedItem.base_class_dens_hi + "] " + resourceManager.getString('default','UNIT__DENSITY');
				}
				else
				{
					this.tank_density.enabled = false;
					this.density_range.visible = false;
					this.density_range.text = "";
				}
				// TODO Auto-generated method stub
				
			}
			
			protected function checkDensityRange():void
			{
				if ( tank_base.selectedIndex > -1 )
				{
					var dens_lo:Number = baseProductList[tank_base.selectedIndex].base_class_dens_lo;
					var dens_hi:Number = baseProductList[tank_base.selectedIndex].base_class_dens_hi;
					var dens:Number = Number(this.tank_density.text);
					
					if ( !( dens >= dens_lo && dens <= dens_hi ) )
					{
						global.msgWarning( resourceManager.getString('default','ALERT__TANK_DENSITY_OUTLIMIT') );
					}
				}
			}
			
			protected function tank_density_changeHandler(event:TextOperationEvent):void
			{
				// TODO Auto-generated method stub
				//checkDensityRange();
			}
			
			protected function tank_density_focusOutHandler(event:FocusEvent):void
			{
				// TODO Auto-generated method stub
				//checkDensityRange();
			}
			
			protected function tank_density_keyUpHandler(event:KeyboardEvent):void
			{
				// TODO Auto-generated method stub
				var keyCode:uint = 0;
				if (event == null)
				{
					keyCode=0;
				}
				else
				{
					keyCode=event.keyCode;
				}
				
				if ( keyCode == 13 )
				{
					//checkDensityRange();
				}
			}
			
			protected function toggleValidationRequired():void
			{
				if( StringUtil.trim( this.tank_dtol_percent.text ).length > 0 )
				{
					this.tank_dtol_percent.required = true;
				}
				else
				{
					this.tank_dtol_percent.required = false;
				}
				
				if( StringUtil.trim( this.tank_dtol_volume.text ).length > 0 )
				{
					this.tank_dtol_volume.required = true;
				}
				else
				{
					this.tank_dtol_volume.required = false;
				}
				
				if( StringUtil.trim( this.tank_mtol_percent.text ).length > 0 )
				{
					this.tank_mtol_percent.required = true;
				}
				else
				{
					this.tank_mtol_percent.required = false;
				}
				
				if( StringUtil.trim( this.tank_mtol_volume.text ).length > 0 )
				{
					this.tank_mtol_volume.required = true;
				}
				else
				{
					this.tank_mtol_volume.required = false;
				}
			}
			
			public function goToTankStatus():void
			{
				this.tankStatusPopup.popupTitle = resourceManager.getString('default','m_tankstatus');
				this.tankStatusPopup.setSecurity( this.readOnly, this.canUpdate, this.canCreate, this.canDelete, this.hasPassword );
				
				this.tankStatusPopup.parentWidth = this.width;
				this.tankStatusPopup.parentHeight = this.height;
				
				trace ( "*******************Pop up a tank status screen!");
				tankStatusPopup.openDialog();
				
				var params:Object=new Object();
				if ( dataGrid.selectedIndex >= 0 )
				{
					params.tank_terminal = dataGrid.selectedItem.tank_terminal;
					params.tank_code = dataGrid.selectedItem.tank_code;
					params.tank_base = dataGrid.selectedItem.tank_base;
					params.tank_base_class = dataGrid.selectedItem.tank_base_class;
				}
				
				tankStatusPopup.setFilters( params ); 
			}
			
			private function calculateTankDensities():void
			{
				this.densityType = "D30C";
				this.densityAmount = Number(this.tank_density.text);
				
				var tank_base_class:int=6;
				if (tank_base.selectedIndex>=0)
				{
					tank_base_class = baseProductList[tank_base.selectedIndex].base_cat;
				}
				
				var txt:String="";
				var txt2:String="";
				var rTmp:Number=this.refTempC;
				// get ref density and API from std density
				if ( tank_base_class != 6 )
				{
					if ( this.densityType == "D15C" )
					{
						txt = String( mngr.DensityXC( this.densityAmount, rTmp ) );
						//txt = String( mngr.Density_Temp( this.densityAmount, rTmp, 'C' ) );
						this.tank_density.text = tools.roundString( txt, this.digitsDENS );
						
						txt = String( mngr.API( mngr.Density60F(this.densityAmount) ) );
						this.tank_api.text = tools.roundString( txt, this.digitsAPI );
					}
					// get std density and API from ref density
					if ( this.densityType == "D30C" )
					{
						txt = String( mngr.Density15CFromXC( this.densityAmount, rTmp, this.digitsDENS ) );
						this.tank_15_density.text = tools.roundString( txt, this.digitsDENS );
						
						txt2 = String( mngr.API( mngr.Density60F(Number(txt)) ) );
						this.tank_api.text = tools.roundString( txt2, this.digitsAPI );
						
					}
					// get std density and ref density from API
					if ( this.densityType == "A60F" )
					{
						txt = String( mngr.Density15C( this.densityAmount ) );
						this.tank_15_density.text = tools.roundString( txt, this.digitsDENS );
						
						txt2 = String( mngr.DensityXC( Number(txt), rTmp ) );
						//txt2 = String( mngr.Density_Temp( Number(txt), rTmp, 'C' ) );
						this.tank_density.text = tools.roundString( txt2, this.digitsDENS );
					}
				}
				else
				{
					if ( this.densityType == "D15C" )
					{
						this.tank_density.text = tools.roundString( String(this.densityAmount), this.digitsDENS );
						
						txt = String( mngr.API( mngr.Density60F(this.densityAmount) ) );
						this.tank_api.text = tools.roundString( txt, this.digitsAPI );
					}
					// get std density and API from ref density
					if ( this.densityType == "D30C" )
					{
						this.tank_15_density.text = tools.roundString( String(this.densityAmount), this.digitsDENS );
						
						txt2 = String( mngr.API( mngr.Density60F(this.densityAmount) ) );
						this.tank_api.text = tools.roundString( txt2, this.digitsAPI );
						
					}
					// get std density and ref density from API
					if ( this.densityType == "A60F" )
					{
						txt = String( mngr.Density15C( this.densityAmount ) );
						this.tank_15_density.text = tools.roundString( txt, this.digitsDENS );
						
						this.tank_density.text = this.tank_15_density.text;
					}
				}
			}
		]]>
	</fx:Script>
	<fx:Declarations>
		<s:DateTimeFormatter id="dateFormatter" locale="{LocaleID.DEFAULT}" dateStyle="short" timeStyle="none"/>
		<s:DateTimeFormatter id="dateConvert" dateTimePattern="yyyy-MM-dd"/>
		<s:DateTimeFormatter id="dateConvertLong" dateTimePattern="yyyy-MM-dd HH:mm:ss"/>
		<components:ValidationGroup id="vg" action="{save_clickHandler}" defaultButton="{btn_save}" isProtected="{hasPassword}"/>
	</fx:Declarations>
	<s:Panel id="panel" width="100%" height="100%"
			 skinClass="skins.WidgetPanelSkin"
			 skinClass.widget="skins.NullSkin">
		<s:layout>
			<s:VerticalLayout/>
		</s:layout>
		<s:VGroup width="100%" id="toolbar"  >
			<s:HGroup gap="5" paddingBottom="2" paddingTop="2" width="100%">
				<components:DKI_ComboBox id="fltr_terminal" width="180" height="100%" enabled="true"
										change="fltr_terminal_changeHandler(event)" cornerRadius="10"
										labelField="term_desc" prompt="{resourceManager.getString('default','TANK_TERMINAL')+resourceManager.getString('default','FILTER')}"
										dataProvider="{terminalList}"/>
				<components:DKI_ValidatorInput id="fltr_tank" validationType="search" minWidth="160" height="{labelHeight}" width="100%"
											   keyUp="fltr_tank_keyUpHandler(event)" 
											   prompt="{resourceManager.getString('default','TANK_TANK')+resourceManager.getString('default','FILTER')}"/>
				
				<components:DKI_DropDownList id="fltr_baseclass" width="180" height="100%"
											 change="fltr_baseclass_changeHandler(event)" cornerRadius="10"
											 labelField="bclass_desc" prompt="{resourceManager.getString('default','TANK_BASE_CLASS')+resourceManager.getString('default','FILTER')}"
											 visible.widget="false" excludeFrom="widget" dataProvider="{baseClassList}"/>
				<components:DKI_DropDownList id="fltr_baseprod" width="180" height="100%"
											 change="fltr_baseprod_changeHandler(event)" cornerRadius="10"
											 labelField="base_text" prompt="{resourceManager.getString('default','TANK_PRODUCT')+resourceManager.getString('default','FILTER')}"
											 visible.widget="false" excludeFrom="widget" dataProvider="{baseProductList}"/>
				
			<!--/s:HGroup>
			<s:HGroup gap="5" paddingBottom="2" paddingTop="2" width="100%"-->
				<s:Spacer width="100%"/>
				<components:DKI_Button id="filterBtn" height="24" noLabel="false" click="filterRecords(event)"
									   type="filteron"/>
				<components:DKI_Button id="resetBtn" height="24" noLabel="false" click="refreshRecords(event)"
									   type="filteroff"/>
				<components:DKI_Button id="btn_export" label="{resourceManager.getString('default','EXPORTDATA')}" type="report" click="exportCsvHandler(event)" includeIn="normal"/>
				<components:DKI_Button id="btn_create" label="{resourceManager.getString('default','CREATE')}" height="24" click="createNewRecord(event)" includeIn="normal" enabled="{this.canCreate}" type="create"/>	
			</s:HGroup>
		</s:VGroup>
			
		
		<s:DataGrid id="dataGrid" width="100%" height="100%" requestedRowCount="4"
					selectionChange="dataGrid_selectionChangeHandler(event)"
					skinClass="skins.DKI_DataGrid_Skin"
					height.widget="100%">
			<s:columns>
				<s:ArrayList>
					<s:source>
						<s:GridColumn dataField="tank_code" headerText="{resourceManager.getString('default','TANK_CODE')}" visible="true"></s:GridColumn>
						<s:GridColumn dataField="tank_name" headerText="{resourceManager.getString('default','TANK_NAME')}" visible="true"></s:GridColumn>
						<s:GridColumn dataField="tank_terminal" headerText="{resourceManager.getString('default','TANK_SITECODE')}" visible="false"></s:GridColumn>
						<s:GridColumn dataField="tank_sitename" headerText="{resourceManager.getString('default','TANK_TERMINAL')}" visible="true"></s:GridColumn>
						<s:GridColumn dataField="tank_base" headerText="{resourceManager.getString('default','TANK_BASE')}" visible="true"></s:GridColumn>
						<s:GridColumn dataField="tank_base_name" headerText="{resourceManager.getString('default','TANK_BASE_NAME')}" visible="true"></s:GridColumn>
						<s:GridColumn dataField="tank_base_group" headerText="{resourceManager.getString('default','TANK_BASE_GROUP')}" visible="false"></s:GridColumn>
						<s:GridColumn dataField="tank_base_class" headerText="{resourceManager.getString('default','TANK_BASE_CLASS')}" visible="false"></s:GridColumn>
						<s:GridColumn dataField="tank_bclass_name" headerText="{resourceManager.getString('default','TANK_BCLASS_NAME')}" visible="true"></s:GridColumn>
						<s:GridColumn dataField="tank_base_tunit" headerText="{resourceManager.getString('default','TANK_BASE_TUNIT')}" visible="false"></s:GridColumn>
						<s:GridColumn dataField="tank_base_rpttemp" headerText="{resourceManager.getString('default','TANK_BASE_RPTTEMP')}" visible="false"></s:GridColumn>
						<s:GridColumn dataField="tank_bclass_dens_lo" headerText="{resourceManager.getString('default','TANK_BCLASS_DENS_LO')+' ['+resourceManager.getString('default','UNIT__DENSITY')+']'}" visible="false"></s:GridColumn>
						<s:GridColumn dataField="tank_bclass_dens_hi" headerText="{resourceManager.getString('default','TANK_BCLASS_DENS_HI')+' ['+resourceManager.getString('default','UNIT__DENSITY')+']'}" visible="false"></s:GridColumn>
						<s:GridColumn dataField="tank_bclass_vcf_alg" headerText="{resourceManager.getString('default','TANK_BCLASS_VCF_ALG')}" visible="false"></s:GridColumn>
						<s:GridColumn dataField="tank_bclass_temp_lo" headerText="{resourceManager.getString('default','TANK_BCLASS_TEMP_LO')}" visible="false"></s:GridColumn>
						<s:GridColumn dataField="tank_bclass_temp_hi" headerText="{resourceManager.getString('default','TANK_BCLASS_TEMP_HI')}" visible="false"></s:GridColumn>
						<s:GridColumn dataField="tank_drv_type" headerText="{resourceManager.getString('default','TANK_DRV_TYPE')}" visible="false"></s:GridColumn>
						<s:GridColumn dataField="tank_drv_aux" headerText="{resourceManager.getString('default','TANK_DRV_AUX')}" visible="false"></s:GridColumn>
						<s:GridColumn dataField="tank_identifier" headerText="{resourceManager.getString('default','TANK_IDENTIFIER')}" visible="false"></s:GridColumn>
						<s:GridColumn dataField="tank_location" headerText="{resourceManager.getString('default','TANK_LOCATION')}" visible="false"></s:GridColumn>
						<s:GridColumn dataField="tank_outflow_ope" headerText="{resourceManager.getString('default','TANK_OUTFLOW_OPE')}" visible="false" itemRenderer="renderers.GridCheckRender"></s:GridColumn>
						<s:GridColumn dataField="tank_inflow_open" headerText="{resourceManager.getString('default','TANK_INFLOW_OPEN')}" visible="false" itemRenderer="renderers.GridCheckRender"></s:GridColumn>
						<s:GridColumn dataField="tank_adhoc_ivrq" headerText="{resourceManager.getString('default','TANK_ADHOC_IVRQ')}" visible="false" itemRenderer="renderers.GridCheckRender"></s:GridColumn>
						<s:GridColumn dataField="tank_inv_needed" headerText="{resourceManager.getString('default','TANK_INV_NEEDED')}" visible="false" itemRenderer="renderers.GridCheckRender"></s:GridColumn>
						<s:GridColumn dataField="tank_dipping_on" headerText="{resourceManager.getString('default','TANK_DIPPING_ON')}" visible="false" itemRenderer="renderers.GridCheckRender"></s:GridColumn>
						<s:GridColumn dataField="tank_leakdtct_on" headerText="{resourceManager.getString('default','TANK_LEAKDTCT_ON')}" visible="false" itemRenderer="renderers.GridCheckRender"></s:GridColumn>
						<s:GridColumn dataField="tank_alarmed" headerText="{resourceManager.getString('default','TANK_ALARMED')}" visible="false" itemRenderer="renderers.GridCheckRender"></s:GridColumn>
						<s:GridColumn dataField="tank_poll_gap" headerText="{resourceManager.getString('default','TANK_POLL_GAP')}" visible="false"></s:GridColumn>
						<s:GridColumn dataField="tank_prod_lvl" headerText="{resourceManager.getString('default','TANK_PROD_LVL')}" visible="false"></s:GridColumn>
						<s:GridColumn dataField="tank_address" headerText="{resourceManager.getString('default','TANK_ADDRESS')}" visible="false"></s:GridColumn>
						<s:GridColumn dataField="tank_rcpts" headerText="{resourceManager.getString('default','TANK_RCPTS')}" visible="false"></s:GridColumn>
						<s:GridColumn dataField="tank_trfs" headerText="{resourceManager.getString('default','TANK_TRFS')}" visible="false"></s:GridColumn>
						<s:GridColumn dataField="tank_no_sbt" headerText="{resourceManager.getString('default','TANK_NO_SBT')}" visible="false"></s:GridColumn>
						<s:GridColumn dataField="tank_versno" headerText="{resourceManager.getString('default','TANK_VERSNO')}" visible="false"></s:GridColumn>
						<s:GridColumn dataField="tank_pakscan_act" headerText="{resourceManager.getString('default','TANK_PAKSCAN_ACT')}" visible="false"></s:GridColumn>
						<s:GridColumn dataField="tank_alarm_state" headerText="{resourceManager.getString('default','TANK_ALARM_STATE')}" visible="false"></s:GridColumn>
						<s:GridColumn dataField="tank_lvl_alarm" headerText="{resourceManager.getString('default','TANK_LVL_ALARM')}" visible="false"></s:GridColumn>
						<s:GridColumn dataField="tank_lvlalarm_desc" headerText="{resourceManager.getString('default','TANK_LVLALARM_DESC')}" visible="false"></s:GridColumn>
						<s:GridColumn dataField="tank_gaugingmthd" headerText="{resourceManager.getString('default','TANK_GAUGINGMTHD')}" visible="false"></s:GridColumn>
						<s:GridColumn dataField="tank_gaugingmthd_desc" headerText="{resourceManager.getString('default','TANK_GAUGINGMTHD_DESC')}" visible="false"></s:GridColumn>
						<s:GridColumn dataField="tank_instance" headerText="{resourceManager.getString('default','TANK_INSTANCE')}" visible="false"></s:GridColumn>
						<s:GridColumn dataField="tank_channel" headerText="{resourceManager.getString('default','TANK_CHANNEL')}" visible="false"></s:GridColumn>
						<s:GridColumn dataField="tank_sbt_ty" headerText="{resourceManager.getString('default','TANK_SBT_TY')}" visible="false"></s:GridColumn>
						<s:GridColumn dataField="tank_eth_content" headerText="{resourceManager.getString('default','TANK_ETH_CONTENT')}" visible="false"></s:GridColumn>
						<s:GridColumn dataField="tank_ltr_close" headerText="{resourceManager.getString('default','TANK_LTR_CLOSE')}" visible="false"></s:GridColumn>
						<s:GridColumn dataField="tank_kg_close" headerText="{resourceManager.getString('default','TANK_KG_CLOSE')}" visible="false"></s:GridColumn>
						<s:GridColumn dataField="tank_close_dens" headerText="{resourceManager.getString('default','TANK_CLOSE_DENS')}" visible="false"></s:GridColumn>
						<s:GridColumn dataField="tank_rptvcfclose" headerText="{resourceManager.getString('default','TANK_RPTVCFCLOSE')}" visible="false"></s:GridColumn>
						<s:GridColumn dataField="tank_inflow_rate" headerText="{resourceManager.getString('default','TANK_INFLOW_RATE')}" visible="false"></s:GridColumn>
						<s:GridColumn dataField="tank_spare_fld1" headerText="{resourceManager.getString('default','TANK_SPARE_FLD1')}" visible="false"></s:GridColumn>
						<s:GridColumn dataField="tank_spare_fld2" headerText="{resourceManager.getString('default','TANK_SPARE_FLD2')}" visible="false"></s:GridColumn>
						<s:GridColumn dataField="tank_rcpt_vol" headerText="{resourceManager.getString('default','TANK_RCPT_VOL')}" visible="false"></s:GridColumn>
						<s:GridColumn dataField="tank_trf_vol" headerText="{resourceManager.getString('default','TANK_TRF_VOL')}" visible="false"></s:GridColumn>
						<s:GridColumn dataField="tank_rcpt_kg" headerText="{resourceManager.getString('default','TANK_RCPT_KG')}" visible="false"></s:GridColumn>
						<s:GridColumn dataField="tank_trf_kg" headerText="{resourceManager.getString('default','TANK_TRF_KG')}" visible="false"></s:GridColumn>
						<s:GridColumn dataField="tank_pump_vol" headerText="{resourceManager.getString('default','TANK_PUMP_VOL')}" visible="false"></s:GridColumn>
						<s:GridColumn dataField="tank_res" headerText="{resourceManager.getString('default','TANK_RES')}" visible="false"></s:GridColumn>
						<s:GridColumn dataField="tank_amb_vol" headerText="{resourceManager.getString('default','TANK_AMB_VOL')}" visible="false"></s:GridColumn>
						<s:GridColumn dataField="tank_cor_vol" headerText="{resourceManager.getString('default','TANK_COR_VOL')}" visible="false"></s:GridColumn>
						<s:GridColumn dataField="tank_vapour_kg" headerText="{resourceManager.getString('default','TANK_VAPOUR_KG')}" visible="false"></s:GridColumn>
						<s:GridColumn dataField="tank_liquid_kg" headerText="{resourceManager.getString('default','TANK_LIQUID_KG')}" visible="false"></s:GridColumn>
						<s:GridColumn dataField="tank_water" headerText="{resourceManager.getString('default','TANK_WATER')}" visible="false"></s:GridColumn>
						<s:GridColumn dataField="tank_water_lvl" headerText="{resourceManager.getString('default','TANK_WATER_LVL')}" visible="false"></s:GridColumn>
						<s:GridColumn dataField="tank_ullage" headerText="{resourceManager.getString('default','TANK_ULLAGE')}" visible="false"></s:GridColumn>
						<s:GridColumn dataField="tank_api" headerText="{resourceManager.getString('default','TANK_API')}" visible="false"></s:GridColumn>
						<s:GridColumn dataField="tank_prod_c_of_e" headerText="{resourceManager.getString('default','TANK_PROD_C_OF_E')}" visible="false"></s:GridColumn>
						<s:GridColumn dataField="tank_60_86_vcf" headerText="{resourceManager.getString('default','TANK_60_86_VCF')}" visible="false"></s:GridColumn>
						<s:GridColumn dataField="tank_density" headerText="{resourceManager.getString('default','TANK_DENSITY')+' ['+resourceManager.getString('default','UNIT__DENSITY')+']'}" visible="true" labelFunction="roundNumberFunction"></s:GridColumn>
						<s:GridColumn dataField="tank_temp" headerText="{resourceManager.getString('default','TANK_TEMP')}" visible="false" labelFunction="roundNumberFunction"></s:GridColumn>
						<s:GridColumn dataField="tank_rptvcf" headerText="{resourceManager.getString('default','TANK_RPTVCF')}" visible="false"></s:GridColumn>
						<s:GridColumn dataField="tank_amb_density" headerText="{resourceManager.getString('default','TANK_AMB_DENSITY')}" visible="false"></s:GridColumn>
						<s:GridColumn dataField="tank_tol_vol" headerText="{resourceManager.getString('default','TANK_TOL_VOL')}" visible="false"></s:GridColumn>
						<s:GridColumn dataField="tank_tol_percent" headerText="{resourceManager.getString('default','TANK_TOL_PERCENT')}" visible="false"></s:GridColumn>
						<s:GridColumn dataField="tank_dtol_volume" headerText="{resourceManager.getString('default','TANK_DTOL_VOLUME')}" visible="true"></s:GridColumn>
						<s:GridColumn dataField="tank_dtol_percent" headerText="{resourceManager.getString('default','TANK_DTOL_PERCENT')}" visible="true"></s:GridColumn>
						<s:GridColumn dataField="tank_mtol_volume" headerText="{resourceManager.getString('default','TANK_MTOL_VOLUME')}" visible="true"></s:GridColumn>
						<s:GridColumn dataField="tank_mtol_percent" headerText="{resourceManager.getString('default','TANK_MTOL_PERCENT')}" visible="true"></s:GridColumn>
						<s:GridColumn dataField="tank_date" headerText="{resourceManager.getString('default','TANK_DATE')}" itemRenderer="renderers.DateRenderer" visible="false"></s:GridColumn>
						<s:GridColumn dataField="tank_group" headerText="{resourceManager.getString('default','TANK_GROUP')}" visible="false"></s:GridColumn>
						
					</s:source>
				</s:ArrayList>
			</s:columns>
			<s:dataProvider>
				<s:AsyncListView id="pgList" list="{pagedRecords}"/>
			</s:dataProvider>
		</s:DataGrid>
		<s:HGroup width="100%">
			<components:Downloader id="pb" width="100%" height="18"/>
			<!--mx:ProgressBar id="pb" width="100%" height="22" visible="false" includeInLayout="false"  mode="manual" source="{this.pgList}" label="{this.currentLength} records shown from {this.currentLength} loaded out of {this.totalLength} found." labelPlacement="center"/-->
			<s:Button id="killBtn" width="18" height="18" label="" cornerRadius="12" visible="false" includeInLayout="false"
					  click="killBtn_clickHandler(event)"/>
			<s:Button id="resumeBtn" width="18" height="18" label="" cornerRadius="12" visible="false" includeInLayout="false"
					  click="resumeBtn_clickHandler(event)"/>
		</s:HGroup>
	</s:Panel>
	
	<s:Panel id="details" includeIn="edit,create,detail" width="100%" height="300"
			 itemCreationPolicy="immediate" skinClass="skins.WidgetPanelSkin">
		<s:layout>
			<s:VerticalLayout/>
			<!--s:TileLayout/-->
		</s:layout>
		
		<s:Spacer height="5"/>
		<s:VGroup width="100%">
			<s:HGroup width="100%">
				<s:HGroup>
					<s:Label width="{labelWidth}" height="{labelHeight}" text="{resourceManager.getString('default','TANK_TERMINAL')}" verticalAlign="middle"/>
					<components:DKI_ValidatorComboBox id="tank_terminal" 
													  dataProvider="{terminalList}" 
													  labelField="term_desc" 
													  selectedItem="{dataGrid.selectedItem.tank_terminal + ' - ' + dataGrid.selectedItem.tank_sitename}" enabled="false" enabled.edit="false" 
													  selectedItem.create="" selectedIndex.create="-1" enabled.create="true" 
													  width="{fieldWidth}" height="{fieldHeight}" 
													  prompt="{resourceManager.getString('default','SELECT')+resourceManager.getString('default','TANK_TERMINAL')}"  
													  required="true" validationGroup="{vg}" automationName="{resourceManager.getString('default','TANK_TERMINAL')}" 
													  />
				</s:HGroup>
				<s:Spacer width="{spaceWidth}" />
				
			</s:HGroup>
			
			<s:Spacer height="{spaceHeight}" />
			
			<s:HGroup>
				<s:HGroup>
					<s:Label width="{labelWidth}" height="{labelHeight}" text="{resourceManager.getString('default','TANK_CODE')}" verticalAlign="middle"/>
					<components:DKI_ValidatorInput id="tank_code" maxChars="12" 
												   width="{fieldWidth}" height="{fieldHeight}" 
												   text="{dataGrid.selectedItem.tank_code}" editable="false" enabled="false" 
												   text.create="" editable.create="true" enabled.create="true" focusOut="checkTankKey()" 
												   required="true" validationType="alphanumeric" validationGroup="{vg}" automationName="{resourceManager.getString('default','TANK_CODE')}" 
												   />
				</s:HGroup>
				<s:Spacer width="{spaceWidth}" />
				<s:HGroup>
					<s:Label width="{labelWidth}" height="{labelHeight}" text="{resourceManager.getString('default','TANK_NAME')}" verticalAlign="middle"/>
					<components:DKI_ValidatorInput id="tank_name" maxChars="30" 
												   width="{fieldWidth}" height="{fieldHeight}" 
												   text="{dataGrid.selectedItem.tank_name}" editable="false" enabled="false" editable.edit="true" enabled.edit="true" 
												   text.create="" editable.create="true" enabled.create="true" 
												   required="true" validationType="document" validationGroup="{vg}" automationName="{resourceManager.getString('default','TANK_NAME')}" 
												   />
				</s:HGroup>
				
			</s:HGroup>
			
			<s:Spacer height="{spaceHeight}" />
			
			<s:HGroup>
				<s:HGroup>
					<s:Label width="{labelWidth}" height="{labelHeight}" text="{resourceManager.getString('default','TANK_PRODUCT')}" verticalAlign="middle"/>
					<components:DKI_ValidatorComboBox id="tank_base" 
													  dataProvider="{baseProductList}" 
													  labelField="base_text" 
													  selectedItem="{dataGrid.selectedItem.tank_base + ' - ' + dataGrid.selectedItem.tank_base_name}" enabled="true" enabled.edit="true"
													  selectedItem.create="" selectedIndex.create="-1" enabled.create="true" 
													  width="{fieldWidth}" height="{fieldHeight}" change="tank_base_changeHandler(event)" 
													  prompt="{resourceManager.getString('default','SELECT')+resourceManager.getString('default','TANK_PRODUCT')}"
													  required="true" validationGroup="{vg}" automationName="{resourceManager.getString('default','TANK_PRODUCT')}" 
													  />
				</s:HGroup>
				<s:Spacer width="{spaceWidth}" />
				<s:HGroup>
					<s:Label width="{labelWidth}" height="{labelHeight}" text="{resourceManager.getString('default','TANK_DENSITY')}" verticalAlign="middle"/>
					<components:DKI_ValidatorInput id="tank_density" 
												   width="{fieldWidth}" height="{fieldHeight}" 
												   text="{tools.roundString(dataGrid.selectedItem.tank_density,3)}" editable="true" enabled="true" 
												   text.create="" editable.create="true" enabled.create="false" keyUp="tank_density_keyUpHandler(event)" focusOut="tank_density_focusOutHandler(event)" 
												   required="true" validationType="numeric_positive" validationGroup="{vg}" automationName="{resourceManager.getString('default','TANK_DENSITY')}" 
												   />
					<s:Label id="density_range" height="{fieldHeight}" text="" visible="{this.tank_base.selectedIndex>=0}" verticalAlign="middle"/>
					<s:Label id="tank_15_density" height="{fieldHeight}" text="" visible="false" includeInLayout="false" verticalAlign="middle"/>
					<s:Label id="tank_api" height="{fieldHeight}" text="" visible="false" includeInLayout="false" verticalAlign="middle"/>
				</s:HGroup>
			</s:HGroup>
			
			<s:Spacer height="{spaceHeight}" />
			
			<s:HGroup>
				<s:HGroup>
					<s:Label width="{labelWidth}" height="{labelHeight}" text="{resourceManager.getString('default','TANK_DTOL_PERCENT')}" verticalAlign="middle"/>
					<components:DKI_ValidatorInput id="tank_dtol_percent" 
												   width="{fieldWidth}" height="{fieldHeight}" 
												   text="{dataGrid.selectedItem.tank_dtol_percent}" editable="true" enabled="true" 
												   text.create="" editable.create="true" enabled.create="true" change="toggleValidationRequired()" 
												   required="false" validationType="numeric_non_negative" validationGroup="{vg}" automationName="{resourceManager.getString('default','TANK_DTOL_PERCENT')}" 
												   />
				</s:HGroup>
				<s:Spacer width="{spaceWidth}" />
				<s:HGroup>
					<s:Label width="{labelWidth}" height="{labelHeight}" text="{resourceManager.getString('default','TANK_DTOL_VOLUME')}" verticalAlign="middle"/>
					<components:DKI_ValidatorInput id="tank_dtol_volume" 
												   width="{fieldWidth}" height="{fieldHeight}" 
												   text="{dataGrid.selectedItem.tank_dtol_volume}" editable="true" enabled="true" 
												   text.create="" editable.create="true" enabled.create="true" change="toggleValidationRequired()"  
												   required="false" validationType="numeric_non_negative" validationGroup="{vg}" automationName="{resourceManager.getString('default','TANK_DTOL_VOLUME')}" 
												   />
					<s:Label height="{labelHeight}" text="{resourceManager.getString('default','UNIT__VOLUME_DEFAULT')}" verticalAlign="middle"/>
				</s:HGroup>
			</s:HGroup>
			
			<s:Spacer height="{spaceHeight}" />
			
			<s:HGroup>
				<s:HGroup>
					<s:Label width="{labelWidth}" height="{labelHeight}" text="{resourceManager.getString('default','TANK_MTOL_PERCENT')}" verticalAlign="middle"/>
					<components:DKI_ValidatorInput id="tank_mtol_percent" 
												   width="{fieldWidth}" height="{fieldHeight}" 
												   text="{dataGrid.selectedItem.tank_mtol_percent}" editable="true" enabled="true" 
												   text.create="" editable.create="true" enabled.create="true" change="toggleValidationRequired()"  
												   required="false" validationType="numeric_non_negative" validationGroup="{vg}" automationName="{resourceManager.getString('default','TANK_MTOL_PERCENT')}" 
												   />
				</s:HGroup>
				<s:Spacer width="{spaceWidth}" />
				<s:HGroup>
					<s:Label width="{labelWidth}" height="{labelHeight}" text="{resourceManager.getString('default','TANK_MTOL_VOLUME')}" verticalAlign="middle"/>
					<components:DKI_ValidatorInput id="tank_mtol_volume" 
												   width="{fieldWidth}" height="{fieldHeight}" 
												   text="{dataGrid.selectedItem.tank_mtol_volume}" editable="true" enabled="true" 
												   text.create="" editable.create="true" enabled.create="true" change="toggleValidationRequired()"  
												   required="false" validationType="numeric_non_negative" validationGroup="{vg}" automationName="{resourceManager.getString('default','TANK_MTOL_VOLUME')}" 
												   />
					<s:Label height="{labelHeight}" text="{resourceManager.getString('default','UNIT__VOLUME_DEFAULT')}" verticalAlign="middle"/>
				</s:HGroup>
			</s:HGroup>
			
			<s:Spacer height="{spaceHeight}" />
			
		</s:VGroup>
		
		<s:Spacer height="{spaceHeight}" />
		
		<s:HGroup width="100%" paddingBottom="4" paddingTop="0" gap="5">
			<components:DKI_Button id="btnTankStatus" label="{resourceManager.getString('default','m_tankstatus')}" height="100%" includeIn="edit,detail" type="default" visible="true" enabled="{this.canUpdate}" includeInLayout="true" click="goToTankStatus();"/>
			
			<s:Spacer width="100%"/>
			<components:DKI_Button id="btn_delete" label="{resourceManager.getString('default','DELETE')}" height="100%" click="doDelete()" includeIn="edit" enabled="{this.canDelete}" type="delete"/>
			<components:DKI_Button id="btn_save" label.create="{resourceManager.getString('default','SAVE')}" label="{resourceManager.getString('default','UPDATE')}" height="100%" includeIn="edit,create,detail" enabled.create="{this.canCreate}" enabled="{this.canUpdate}" type.create="create" type="edit"/>
			<components:DKI_Button id="btn_cancel" label="{resourceManager.getString('default','CANCEL')}" height="100%" click="cancel_clickHandler()" enabled="true" type="cancel"/>
		</s:HGroup>
	</s:Panel>
	
</s:VGroup>
