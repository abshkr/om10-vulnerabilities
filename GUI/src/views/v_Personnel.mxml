<?xml version="1.0" encoding="utf-8"?>
<s:VGroup xmlns:fx="http://ns.adobe.com/mxml/2009"
		  xmlns:s="library://ns.adobe.com/flex/spark"
		  xmlns:mx="library://ns.adobe.com/flex/mx"
		  xmlns:valueObjects="valueObjects.*"
		  xmlns:components="components.*"
		  xmlns:personnelservice="services.personnelservice.*"
		  xmlns:companiesservice="services.companiesservice.*"
		  creationComplete="creationCompleteHandler(event)" gap="2"
		  width="100%" height="100%" xmlns:roleservice="services.roleservice.*">
	
	<s:states>
		<s:State name="normal"/>
		<s:State name="widget"/>
		<s:State name="edit" enterState="
				 callLater(function():void{dataGrid.ensureCellIsVisible(dataGrid.selectedIndex);});"/>
		<s:State name="create"/>
	</s:states>
	
	<fx:Script>
		<![CDATA[
			import flash.globalization.LocaleID;
			
			import mx.collections.ArrayCollection;
			import mx.controls.Alert;
			import mx.controls.DateField;
			import mx.core.FlexGlobals;
			import mx.events.CloseEvent;
			import mx.events.FlexEvent;
			import mx.events.ItemClickEvent;
			import mx.managers.PopUpManager;
			import mx.rpc.events.FaultEvent;
			import mx.rpc.events.ResultEvent;
			import mx.rpc.http.HTTPService;
			import mx.utils.ObjectUtil;
			import mx.utils.StringUtil;
			
			import spark.components.gridClasses.IGridItemRenderer;
			import spark.events.GridEvent;
			import spark.events.GridSelectionEvent;
			import spark.events.IndexChangeEvent;
			
			import components.DKI_CreateRoleDlg;
			import components.DeleteDialog;
			import components.MessageDialog;
			import components.PasswordDialog;
			import components.PersonalDeleteDialog;
			import components.ResetDialog;
			import components.TextInputDialog;
			import components.ViewPopupDlg;
			import components.ExpiryDateDetailsEditorAdv;
			
			import dm.remoteDataService;
			
			import renderers.DKI_HeaderColumn_Renderer;
			import renderers.RoleStringRenderer;
			
			import valueObjects.Gui_Personnel;
			
			[Bindable] public var readOnly:Boolean = false;
			[Bindable] public var canReset:Boolean = false;
			[Bindable] public var canUpdate:Boolean = false;
			[Bindable] public var canCreate:Boolean = false;
			[Bindable] public var canDelete:Boolean = false;
			[Bindable] public var hasPassword:Boolean = false;
			
			[Bindable] public var labelWidth:uint = 100;
			[Bindable] public var labelHeight:uint = 26;
			[Bindable] public var fieldWidth:uint = 200;
			[Bindable] public var fieldHeight:uint = 26;
			[Bindable] public var spaceWidth:uint = 20;
			[Bindable] public var spaceHeight:uint = 2;

			[Bindable] private var filter:String=null;
			private var currentOrder:String='per_code';
			private var currentDirection:String=" ASC";	
			
			private var default_password:String="12345";
			
			[Bindable] private var areaControl:ArrayCollection = new ArrayCollection();
			
			//private var editRecord:String ="edit";
			
			private var currIndex:int=-1;
			private var statIndex:int=1;
			private var indexChanged:Boolean=false;
						
			private var setRecordServce:HTTPService = new HTTPService();
			
			private var currItem:int = 0;
			
			[Bindable] private var personnel_vo:Gui_Personnel = new Gui_Personnel();
			
			private var createDlg:DKI_CreateRoleDlg = new DKI_CreateRoleDlg();

			private var passService:HTTPService = new HTTPService();
			
			private var newRoleCreated:Boolean = false;
			
			private var gridColumnSequenceMaker:remoteDataService = new remoteDataService( "ScreenGridColumnService.lookupGridColumnSequence", null, gridColumnSequenceMaker_resultHandler, 1 );
			private var _gridColumnSequenceString:String="";
			private var formColumnSettingsMaker:remoteDataService = new remoteDataService( "ScreenFormColumnService.lookupFormColumnSettings", null, formColumnSettingsMaker_resultHandler, 1 );
			private var _formColumnSettingsString:String="";
			
			
			private var setPersonnelComment:remoteDataService = new remoteDataService( "PersonnelService.setPersonnelComment", null, setPersonnelComment_resultHandler, 1 );
			
			private var getPersonnelComment:remoteDataService = new remoteDataService( "PersonnelService.getPersonnelComment", null, getPersonnelComment_resultHandler, 1 );
			[Bindable] private var _personnel_comments:String="";
			
			
			private var _saveButtonClicked:Boolean = false;
			
			
			//public var eddPopup:ViewPopupDlg = new ViewPopupDlg( "Expiry Date Details", new v_ExpiryDateDetails(), closeDialogHandler );
			public var eddPopup:ViewPopupDlg = new ViewPopupDlg( "Expiry Date Details", new ExpiryDateDetailsEditorAdv(), closeDialogHandler );
			
			private var expiryDateTargetChecker:remoteDataService = new remoteDataService( "GenericExpiryDateService.isExpiryDateTargetEnabled", null, expiryDateTargetChecker_resultHandler, 2 );
			[Bindable] private var genericPersonExpiryDates:Boolean=false;
			private var edd_old_key:String="";
			private var updateEddKeyAction:remoteDataService = new remoteDataService( "ExpiryDateDetailService.updateExpiryDateDetailKey", null, updateEddKeyData_resultHandler, 1 );
			private var deleteEddKeyAction:remoteDataService = new remoteDataService( "ExpiryDateDetailService.delete", null, deleteEddKeyData_resultHandler, 1 );
			
			
			private function headerClickListener(event:GridEvent):void
			{
				var currentRenderer:IGridItemRenderer;
				
				for (var i:int=0; i<dataGrid.columns.length; i++){
					currentRenderer = dataGrid.columnHeaderGroup.getHeaderRendererAt(i);
					if ( currentRenderer != null)
					{
						(currentRenderer as DKI_HeaderColumn_Renderer).setImage('');
					}
					//(currentRenderer as DKI_HeaderColumn_Renderer).setImage(''); 
				}
				
				currentRenderer = dataGrid.columnHeaderGroup.getHeaderRendererAt(event.columnIndex);
				
				if(event.column.dataField == currentOrder)
				{
					if(currentDirection==" ASC")
					{
						currentDirection=" DESC";
					}
					else
						if(currentDirection==" DESC")
						{
							currentDirection="";
						}
						else
						{
							currentDirection=" ASC";
						}
				}
				else
				{
					currentDirection=" ASC";	
				}
				(currentRenderer as DKI_HeaderColumn_Renderer).setImage(StringUtil.trim(currentDirection));
				if (currentDirection == "")
				{
					currentOrder = "";
				}
				else
				{
					currentOrder = event.column.dataField;
				}
				
				this.startFiltering();
			}
			
			protected function searchText_keyUpHandler(event:KeyboardEvent):void
			{
				if(event.keyCode==13)startFiltering();
			}
			
			private function startFiltering():void
			{
				var arr:Object = new Object();
				var fields:Object;
				var types:Object;
				
				fields = new Object();
				types = new Object();
				
				if (fltr_company.selectedIndex > -1) 
				{
					fields["per_cmpy"] = fltr_company.selectedItem.cmpy_code;
					if ( fields["per_cmpy"] == "ANY" )
					{
						fields["per_cmpy"] = "";
					}
				}
				else
				{
					if ( global.setComboBoxNoSelection == true )
					{
						fltr_company.selectedIndex = -1;
					}
					fields["per_cmpy"] = "";
				}
				types["per_cmpy"] = "EXACT_STRING";
				
				if(searchText.text!='')
				{					
					var encodedTxt:String = this.encodeTextHavingSingleQuotation( searchText.text );
					fields["per_code||per_name"] = encodedTxt+"||"+encodedTxt;
					
					//fields["per_code||per_name"] = searchText.text+"||"+searchText.text;
				}
				else
				{
					fields["per_code||per_name"] = "";
				}
				types["per_code||per_name"] = "STRING||STRING";
				
				arr["fields"] = fields;
				arr["types"] = types;
				
				filter = JSON.stringify( arr );
				trace(filter);
				
				//getPagedResult.token = personnelService.getPaged(filter,null);
				getPagedResult.token = personnelService.getPaged(filter,currentOrder+currentDirection);
				
			}
			
			private function startFiltering2():void
			{
				var companyFilter:String = '';  
				var nameFilter:String = '';
				var fields:Object;
				var types:Object;
				
				fields = new Object();
				types = new Object();
				if (fltr_company.selectedIndex > -1) 
				{
					companyFilter = "per_cmpy='"+fltr_company.selectedItem.cmpy_code+"' ";
					fields["per_cmpy"] = fltr_company.selectedItem.cmpy_code;
					if ( fields["per_cmpy"] == "ANY" )
					{
						companyFilter = '';
						fields["per_cmpy"] = "";
					}
				}
				else
				{
					if ( global.setComboBoxNoSelection == true )
					{
						fltr_company.selectedIndex = -1;
					}
					companyFilter = '';
					fields["per_cmpy"] = "";
				}
				types["per_cmpy"] = "STRING";
				
				if(searchText.text!='')
				{					
					nameFilter = "((UPPER(per_code) LIKE UPPER('%"+(searchText.text)+"%') ) or (UPPER(per_name) LIKE UPPER('%"+(searchText.text)+"%') )) ";
					fields["per_code"] = searchText.text;
					fields["per_name"] = searchText.text;
				}
				else
				{
					nameFilter = '';
					fields["per_code"] = "";
					fields["per_name"] = "";
				}
				types["per_code"] = "STRING";
				types["per_name"] = "STRING";
				
				filter = "WHERE 1=1 and USER_STATUS_FLAG<>3 ";
				if ( nameFilter.length > 0 )
				{
					filter += "AND " + nameFilter;
				}
				if ( companyFilter.length > 0 )
				{
					filter += "AND " + companyFilter;
				}
				//getPagedResult.token = personnelService.getPaged(filter,null);
				getPagedResult.token = personnelService.getPaged(filter,currentOrder+currentDirection);
				
			}
			
			protected function creationCompleteHandler(event:FlexEvent):void
			{
				this.formColumnSettingsMaker.service( "PERSONNEL" );
				
				this.gridColumnSequenceMaker.service( "PERSONNEL" );
				
				getAreasResult.token = personnelService.getAreas();
				getTimeCodeResult.token = personnelService.getTimeCode();
				getRoles.token = roleService.getRoles();
				getPersonnelRolesResult.token = personnelService.getPersonnelRoles();
				dataGrid.selectedIndex = 0;
				dataGrid.columnHeaderGroup.addEventListener(GridEvent.GRID_CLICK, headerClickListener);
				
				this.expiryDateTargetChecker.service("PERSONNEL");
			}
			
			protected function gridColumnSequenceMaker_resultHandler():void
			{
				this._gridColumnSequenceString =  gridColumnSequenceMaker.dataString;
				
				if ( _gridColumnSequenceString.length > 0 )
				{
					global.adjustGridColumnSequence( _gridColumnSequenceString.substr(1), dataGrid );
				}
				
			}
			
			protected function formColumnSettingsMaker_resultHandler():void
			{
				this._formColumnSettingsString =  formColumnSettingsMaker.dataString;
			}
			
			
			protected function getPersonnelComment_resultHandler():void
			{
				this._personnel_comments =  getPersonnelComment.dataString;
				
				if ( _personnel_comments.length > 0 )
				{
					//this._personnel_comments += "....................AMF................";
				}
				
			}
			
			protected function setPersonnelComment_resultHandler():void
			{
				if ( this.setPersonnelComment.dataString == "OK" )
				{
					//global.msgSuccess(resourceManager.getString('default','MSG_UPDATE__SUCCESS'));
					
				}
				else
				{
					global.msgFail(resourceManager.getString('default','PERSONNEL.MESSAGE.FAIL_EDIT_COMMENTS'));
				}
				
			}
			
			
			protected function dataGrid_creationCompleteHandler(event:FlexEvent):void
			{
				this.startFiltering();
			}
			
			
			protected function fltr_company_creationCompleteHandler(event:FlexEvent):void
			{
				lookupResult.token = personnelService.lookup();
			}
			
			protected function refreshRecords(event:MouseEvent):void
			{
				filter = null;
				clearDetail();
				searchText.text = "";
				fltr_company.selectedIndex = -1;
				this.startFiltering();
			}
			
			protected function fltr_company_changeHandler(event:IndexChangeEvent):void
			{
				if (currentState == "edit") clearDetail();
				//filter = " WHERE per_cmpy='"+lookupResult.lastResult[event.newIndex].cmpy_code+"'";
				this.startFiltering();
				
			}
			
			protected function clearDetail(): void
			{
				if (currentState != 'widget' && currentState != 'normal')
				{
					per_nameTextInput.text="";
					dd_companySelect.selectedIndex = -1;					
					per_codeTextInput.text="";
					per_codeTextInput.editable = false;
					per_departmentTextInput.text="";
					rb_unlock.selected=true;
					df_driverLicense.selectedDate=null;
					df_dangerousGoodsLicense.selectedDate=null;
					df_AIP_PassPort.selectedDate=null;
					dd_role.selectedIndex = dd_timecode.selectedIndex = -1;
					rb_status.selection=null;
					personnel_vo.cmpy_code = "";
					personnel_vo.per_code = "";
					personnel_vo.per_name = "";
					personnel_vo.per_cmpy = "";
					personnel_vo.perl_ara = "";
					personnel_vo.per_auth = "";
					personnel_vo.per_department = "";
					personnel_vo.per_licence_no = "";
					if ( personnel_vo.hasOwnProperty( 'per_comments' ) )
					{
						//personnel_vo.per_comments = "";
						personnel_vo['per_comments'] = "";
					}
				}
			}
			
			protected function createRecord(event:MouseEvent):void
			{
				currentState="create";
				//editRecord = "create";
				clearDetail();
				per_codeTextInput.editable = true;
				
				if ( _formColumnSettingsString.length > 0 )
				{
					global.adjustFormFieldSettings( _formColumnSettingsString.substr(1), this );
				}
				
				this.df_driverLicense.enabled = !this.genericPersonExpiryDates;
				this.df_dangerousGoodsLicense.enabled = !this.genericPersonExpiryDates;
				this.df_AIP_PassPort.enabled = !this.genericPersonExpiryDates;
			}
			
			protected function save_clickHandler():void
			{
				if (currentState == "create")
				{
					this._saveButtonClicked = true;
					//createRecord();
					checkPsnlCode();
				}
				if (currentState == "edit")
				{
					updateRecord();
				}
			}
			
			protected function updateRecord():void
			{
				if ( this.currentState=="create" )
				{
					var psnl_num:int;
				
					psnl_num = isPsnlExisted.lastResult;
					if ( psnl_num > 0 )
					{
						var errorBox:MessageDialog = new MessageDialog( resourceManager.getString('default','ALERT__PSNL_CODE_EXIST') );
						return;
					}
				}
				
				personnel_vo.per_code = per_codeTextInput.text;
				//personnel_vo.per_name = this.encodeTextHavingSingleQuotation( per_nameTextInput.text );
				personnel_vo.per_name = per_nameTextInput.text;
				personnel_vo.per_department = per_departmentTextInput.text;
				personnel_vo.per_licence_no = per_licenseTextInput.text;
				if ( personnel_vo.hasOwnProperty( 'per_comments' ) )
				{
					//personnel_vo.per_comments = per_comments.text;
					personnel_vo['per_comments'] = per_comments.text;
				}
				
				if (df_driverLicense.selectedDate == null) 
				{
					personnel_vo.per_exp_d1_dmy = ""
				}
				else
				{
					//personnel_vo.per_exp_d1_dmy = dateConvert.format(df_driverLicense.selectedDate);
					personnel_vo.per_exp_d1_dmy = global.convertDateTimeToIsoString( df_driverLicense.selectedDate, df_driverLicense.timeEnabled, global.gDefaultTimeString ); 
				}
					
				if (df_dangerousGoodsLicense.selectedDate == null)
				{
					personnel_vo.per_exp_d2_dmy = ""
				}
				else
				{
					//personnel_vo.per_exp_d2_dmy = dateConvert.format(df_dangerousGoodsLicense.selectedDate);
					personnel_vo.per_exp_d2_dmy = global.convertDateTimeToIsoString( df_dangerousGoodsLicense.selectedDate, df_dangerousGoodsLicense.timeEnabled, global.gDefaultTimeString ); 
				}

				if (df_AIP_PassPort.selectedDate == null)
				{
					personnel_vo.per_exp_d3_dmy = ""
				}
				else
				{
					//personnel_vo.per_exp_d3_dmy = dateConvert.format(df_AIP_PassPort.selectedDate);
					personnel_vo.per_exp_d3_dmy = global.convertDateTimeToIsoString( df_AIP_PassPort.selectedDate, df_AIP_PassPort.timeEnabled, global.gDefaultTimeString ); 
				}

				personnel_vo.per_passwd = null;
				personnel_vo.per_password = null;
				personnel_vo.per_passconfirm =  null;
				personnel_vo.password_validate = 0;
				personnel_vo.per_cmpy = dd_companySelect.selectedItem.cmpy_code;
				personnel_vo.cmpy_name = dd_companySelect.selectedItem.cmpy_name;
				
				if (this.currentState=="create")
				{
					personnel_vo.perl_ara = "9999";
					personnel_vo.per_passwd = null;
					personnel_vo.per_password = null;
					personnel_vo.per_passconfirm = null;
				}
				
				personnel_vo.per_level_num = "0";
				personnel_vo.per_lock = ((rb_lock.selected==true)?'Y':'N');
				personnel_vo.pt_timecd =  getTimeCodeResult.lastResult[dd_timecode.selectedIndex].TCD_TITLE;
				personnel_vo.role = getPersonnelRolesResult.lastResult[dd_role.selectedIndex].AUTH_LEVEL_ID;
				personnel_vo.per_auth = getPersonnelRolesResult.lastResult[dd_role.selectedIndex].AUTH_LEVEL_ID;
				var arr:ArrayCollection = new ArrayCollection;
				 for (var i:int = 0; i < areaControl.length; i++)
				{
					if (!areaControl[i].checked)
					{	
						var obj:Object = Object(
							{
								perm_area: areaControl[i].code,
								per_psn  : personnel_vo.per_code
							});
						arr.addItem(obj);	
					}	
				}

				//switch(editRecord)
				switch(this.currentState)
				{
					case 'edit':   
									//personnel_vo.user_status_flag = String(this.statIndex);
									personnel_vo.user_status_flag = getRadioButtonSelection();
									updateResult.token = personnelService.update(personnel_vo,arr);
									break;
					case 'create': 	createResult.token = personnelService.create(personnel_vo,arr);
									break;
				}		
			}
			
			private function doReset():void
			{
				var errors:String="";
				var index:int=0;
				
				if ( index > 0 )
				{
					var errorBox:MessageDialog = new MessageDialog( errors );
				}
				else
				{
					//var canReset:ResetDialog = new ResetDialog(userReset,hasPassword);
					var canReset:ResetDialog = new ResetDialog(popupPasswordDialog,hasPassword);
					canReset.rstPass.user.text = personnel_vo.per_code;
					canReset.rstPass.updatePassword = userReset;
				}
			}
			
			private function popupPasswordDialog():void
			{
				return getDefaultPassword("");
				var pswInput:TextInputDialog = new TextInputDialog();
				pswInput.callBack=getDefaultPassword;
				pswInput.msg= "Please let the user enter the initial password. Otherwise system will use the default password";
				pswInput.txt= "";
				pswInput.field_visible=false;
				pswInput.text_hidden=true;
				pswInput.text_uppercase=false;
				//pswInput.img.visible = false;
				//pswInput.cancel_btn.visible=false;
				//dialog.msg= "Do you wish to remove this record?";
				//_callback = value;
				PopUpManager.addPopUp(pswInput, (FlexGlobals.topLevelApplication as DisplayObject), true );
				PopUpManager.centerPopUp(pswInput);
				pswInput.card_txt.setFocus();
			}
			
			private function getDefaultPassword(txt:String):void
			{
				default_password = StringUtil.trim(txt);
				if ( default_password.length == 0 )
				{
					default_password = "12345";
				}
				this.userReset();
			}
			
			private function doDelete():void
			{
				var errors:String="";
				var index:int=0;
				
				if ( isPsnlInLoad.lastResult > 0 )
				{
					index += 1;
					var canDeleteP:PersonalDeleteDialog = new PersonalDeleteDialog(deleteRecord,hasPassword);
					//errors += String(index) + ". " + resourceManager.getString('default','ALERT__PSNL_HAS_LOAD') + "\n";
				}
				
				if ( index > 0 )
				{
					//var errorBox:MessageDialog = new MessageDialog( errors );
				}
				else
				{
					var canDelete:DeleteDialog = new DeleteDialog(deleteRecord,hasPassword);
				}
					//var canDelete:DeleteDialog = new DeleteDialog(deleteRecord,hasPassword);
			}
			
			private function deleteRecord():void
			{
				var obj:Object = new Object();
				
				
				obj.per_code = dataGrid.selectedItem.per_code;
				obj.per_cmpy = dataGrid.selectedItem.per_cmpy;
				
				//removeResult.token = tankersService.delete_method(obj);
				removeResult.token = personnelService.remove(obj);
				/*
				clearDetail();
				currentState="normal";
				this.startFiltering();
				dataGrid.selectedIndex = -1;
				*/
			}
			

			protected function dataGrid_clickHandler(event:MouseEvent):void
			{
				if (dataGrid.selectedIndex != -1)
				{
					
					if (currentState != 'widget')
					{
						this.getPersonnelComment.service( dataGrid.selectedItem.per_code );
						
						currentState = "edit";
						
						if ( _formColumnSettingsString.length > 0 )
						{
							global.adjustFormFieldSettings( _formColumnSettingsString.substr(1), this );
						}
						trace(ObjectUtil.toString(dataGrid.selectedItem));
						var i:int = 0;
						setStatusGroup(dataGrid.selectedItem.user_status_flag as String);
						dd_companySelect.selectedIndex=getCompanyInd(dataGrid.selectedItem.cmpy_code);
						personnel_vo.cmpy_code = dataGrid.selectedItem.cmpy_code;
						personnel_vo.cmpy_name = dataGrid.selectedItem.cmpy_name;
						personnel_vo.per_code = dataGrid.selectedItem.per_code;
						personnel_vo.per_name = dataGrid.selectedItem.per_name;
						personnel_vo.per_cmpy = dataGrid.selectedItem.per_cmpy;
						personnel_vo.perl_ara = dataGrid.selectedItem.perl_ara;
						personnel_vo.per_auth = dataGrid.selectedItem.per_auth;
						personnel_vo.per_department = dataGrid.selectedItem.per_department;
						personnel_vo.per_licence_no = dataGrid.selectedItem.per_licence_no;
						personnel_vo.per_exp_d1_dmy = dataGrid.selectedItem.per_exp_d1_dmy;
						personnel_vo.per_exp_d2_dmy = dataGrid.selectedItem.per_exp_d2_dmy;
						personnel_vo.per_exp_d3_dmy	= dataGrid.selectedItem.per_exp_d3_dmy;	
						personnel_vo.per_lock = dataGrid.selectedItem.per_lock;
						if ( personnel_vo.hasOwnProperty( 'per_comments' ) )
						{
							//personnel_vo.per_comments = dataGrid.selectedItem.per_comments;
							personnel_vo['per_comments'] = dataGrid.selectedItem.per_comments;
						}
						
						this.rb_lock.selected = (personnel_vo.per_lock == 'Y')? true: false;
						this.rb_unlock.selected = (personnel_vo.per_lock != 'Y')? true: false;
						
						
						if (personnel_vo.per_exp_d1_dmy == "" || personnel_vo.per_exp_d1_dmy==null)
							df_driverLicense.selectedDate = null
						else		
							df_driverLicense.selectedDate = convertDateToLocale(personnel_vo.per_exp_d1_dmy);
						
						if (personnel_vo.per_exp_d2_dmy == "" || personnel_vo.per_exp_d2_dmy==null)
							df_dangerousGoodsLicense.selectedDate = null
						else		
							df_dangerousGoodsLicense.selectedDate = convertDateToLocale(personnel_vo.per_exp_d2_dmy);
						
						if (personnel_vo.per_exp_d3_dmy == "" || personnel_vo.per_exp_d3_dmy==null)
							df_AIP_PassPort.selectedDate = null
						else		
							df_AIP_PassPort.selectedDate = convertDateToLocale(personnel_vo.per_exp_d3_dmy);
						
						for (i = 0; i < getTimeCodeResult.lastResult.length; i++)
						{
							if (getTimeCodeResult.lastResult[i].TCD_TITLE == dataGrid.selectedItem.pt_timecd)
							{
								dd_timecode.selectedIndex = i;
								i = getTimeCodeResult.lastResult.length;
							}
						}
						
						for (i = 0; i < getRoles.lastResult.length; i++)
						{
							if (getRoles.lastResult[i].ROLE_ID == dataGrid.selectedItem.per_auth)
							{
								dd_role.selectedIndex = i;
								i = getRoles.lastResult.length;
							}
						}
						
						getAreaAccessResult.token = personnelService.getAreaAccess(dataGrid.selectedItem.per_code);
						isPsnlInLoad.token = personnelService.isPsnlInLoad( dataGrid.selectedItem.per_code );
						
						this.df_driverLicense.enabled = !this.genericPersonExpiryDates;
						this.df_dangerousGoodsLicense.enabled = !this.genericPersonExpiryDates;
						this.df_AIP_PassPort.enabled = !this.genericPersonExpiryDates;
					}
				}
			}
			
			
			protected function getCompanyInd(value:String): int
			{
				var ret:int=-1;
				var i:int=-1;
				for each(var x:Object in dd_companySelect.dataProvider)
				{
					i+=1;
					if(value == x.cmpy_code) ret=i;
				}
				return ret;
			}
			
			protected function setStatusGroup(value:String): void
			{
				switch (value)
				{
					case '0': rb_status.selectedValue='Inactive';
						break;
					case '1': rb_status.selectedValue='Active';
						break;
					case '2': rb_status.selectedValue='Locked';
						break;
					case '3': rb_status.selectedValue='Deleted';
						break;
				}
				//if (value=='0') rb_status.selection=null;
			}
			
			protected function getAreasResult_resultHandler(event:ResultEvent):void
			{
				areaControl.removeAll();
				areaControl.refresh();
				for (var i:int=0;i < event.result.length;i++)
				{	
					var obj:Object = Object(
						{
							checked: true,
							title: event.result[i].area_name,
							code: event.result[i].area_k
						}
					);
					areaControl.addItem(obj);
				}
			}
			
			protected function getAreaAccessResult_resultHandler(event:ResultEvent):void
			{
				
				for (var i:int=0; i < areaControl.length; i++)
				{
					areaControl[i].checked = true;
					for (var j:int=0; j < event.result.length; j++)
					{
						if (areaControl[i].code == event.result[j].perm_area) 
							areaControl[i].checked = false;
					}
				}
				areaControl.refresh();
			}
			
			protected function addPersonnelResult_resultHandler(event:ResultEvent):void
			{
				var res:int = event.result as int;
				//if (res == 0) editRecord = 'edit';
				currentState = "edit";
			}
			

			
			protected function userReset(password:String = "12345"): void
			{
				//var setPass:PasswordDialog = new PasswordDialog(activateUser);
				// MC's more secure way
				global.amfRequest("SecureAuth.updatePassword",
					function(o:Object):void{
						if(o.hasOwnProperty("MSG_CODE")){
							if(o.MSG_CODE == "0"){
								
								/* if( o.hasOwnProperty("MSG_DESC") ){
									global.msgSuccess(o.MSG_DESC);
								}else{
									global.msgSuccess(resourceManager.getString('default','MSG_UPDATE__SUCCESS'));
								} */
								global.msgSuccess(resourceManager.getString('default','USER_PROFILE.ALERT.SUCCESS.CHANGE_DONE'));
								
							}else{
								// Check all these
								if(o.hasOwnProperty("MSG_CODE")){
									switch(o.MSG_CODE){
										//case 2:global.msgFail("Can not change password as it has previously been used");return;
										case 2:global.msgFail( resourceManager.getString('default','USER_PROFILE.ALERT.FAILURE.CANNOT_CHANGE_PASSWORD') );return;
											//case 5:global.msgFail("Password change interval prevented password change");return;
										case 5:global.msgFail( resourceManager.getString('default','USER_PROFILE.ALERT.FAILURE.PASSWORD_INTERVAL') );return;
											//case 6:global.msgFail("You are not permitted to change your password, Contact Administrator");return;
										case 6:global.msgFail( resourceManager.getString('default','USER_PROFILE.ALERT.FAILURE.NOT_PERMIT_CHANGE_PASSWORD') );return;
											//case '100000':case 100000:global.msgFail("Invalid current password");return;
										case '100000':case 100000:global.msgFail( resourceManager.getString('default','USER_PROFILE.ALERT.FAILURE.INVALID_PASSWORD') );return;
									}
								}
								//global.msgFail("Password change failed, Please try again later");
								global.msgFail( resourceManager.getString('default','USER_PROFILE.ALERT.FAILURE.PASSWORD_CHANGE_ERROR') );
							}
						}
					},
					function(o:Object):void{
						trace("FAILED UPDATE",o)
					},
					global.nonsense(personnel_vo.per_code, password),
					global.nonsense(personnel_vo.per_code, password),
					personnel_vo.per_code
				);
				
				if (this.activeRadio.selected == false)
				{
					var arr:Object = new Object();
					var fields:Object;
					var types:Object;
					
					fields = new Object();
					types = new Object();
					
					fields["per_code"] = this.per_codeTextInput.text;
					types["per_code"] = "EXACT_STRING";
					//fields["per_name"] = this.per_nameTextInput.text;
					fields["per_name"] = this.encodeTextHavingSingleQuotation( this.per_nameTextInput.text );
					types["per_name"] = "STRING";
					
					arr["fields"] = fields;
					arr["types"] = types;
					
					filter = JSON.stringify( arr );
					
					currentState="normal";
					
					getPagedResult.token = personnelService.getPaged(filter,currentOrder+currentDirection);
				}
			}

			protected function onPassError(event:FaultEvent):void
			{
				passService.removeEventListener(FaultEvent.FAULT,onPassError);
				passService.removeEventListener(ResultEvent.RESULT,onPassResult);
				global.msgFail(resourceManager.getString('default','PERSONNEL.MESSAGE.FAIL_RESET_PASSWORD'));
			}
			
			protected function onPassResult(event:ResultEvent):void
			{
				global.msgSuccess(resourceManager.getString('default','PERSONNEL.MESSAGE.SUCC_RESET_PASSWORD'));
				
				currentState="normal";
				this.startFiltering();
				dataGrid.selectedIndex = -1;
				//this.refreshRecords(null);
			}
			
			protected function updatePersonnelResult_resultHandler(event:ResultEvent):void
			{
				this.setPersonnelComment.service( this.per_codeTextInput.text, this.per_comments.text );
				
				//global.msgSuccess(global.UpdateSuccess);
				if ( updateResult.lastResult == "0" )
				{
					global.msgSuccess(resourceManager.getString('default','MSG_UPDATE__SUCCESS'));
				}
				else
				{
					global.msgFail(resourceManager.getString('default','ERROR_UPDATE__FAILURE'));
				}
				
				var arr:Object = new Object();
				var fields:Object;
				var types:Object;
				
				fields = new Object();
				types = new Object();
				
				fields["per_code"] = this.per_codeTextInput.text;
				types["per_code"] = "EXACT_STRING";
				//fields["per_name"] = this.per_nameTextInput.text;
				fields["per_name"] = this.encodeTextHavingSingleQuotation( this.per_nameTextInput.text );
				types["per_name"] = "STRING";
				
				arr["fields"] = fields;
				arr["types"] = types;
				
				filter = JSON.stringify( arr );
				
				if (indexChanged)
				{
					indexChanged=false;
					if (statIndex == 0)
						userReset()
					else
					{
						//statusChange(statIndex);	
					}
				}
				
				currentState="normal";
				
				//this.startFiltering();
				
				getPagedResult.token = personnelService.getPaged(filter,currentOrder+currentDirection);
			}
			
			protected function updatePersonnelResult_faultHandler(event:FaultEvent):void
			{
				//global.msgFail(global.UpdateError);
				global.msgFail(resourceManager.getString('default','ERROR_UPDATE__FAILURE'));
			}
			
			private function removeResultHandler(event:Event):void
			{
				clearDetail();
				if ( removeResult.lastResult == "OK" )
				{
					global.msgSuccess(resourceManager.getString('default','MSG_DELETE__SUCCESS'));
				}
				else
				{
					global.msgFail(resourceManager.getString('default','ERROR_DELETE__FAILURE'));
				}
				
				currentState="normal";
				this.startFiltering();
				dataGrid.selectedIndex = -1;
				//dataGrid.enabled=true;
			}
			
			protected function cancel_clickHandler(event:MouseEvent):void
			{
				if ( currentState== "create" )
				{
					deleteEddKey();
				}
				
				currentState="normal";
				indexChanged=false;
				dataGrid.selectedIndex = -1;
				dd_companySelect.selectedIndex = -1;
			}
						
			protected function rb_status_itemClickHandler(event:ItemClickEvent):void
			{
				 if (indexChanged)
				{
					 statIndex=event.index;
					/*indexChanged=false;
					if (event.index == 0)
						userReset()
					else
						statusChange(event.index);*/		
				} 
			}
			
			protected function rb_status_changeHandler(event:Event):void
			{
				indexChanged=true;
			}
			
			protected function onStatusFault(event:FaultEvent):void
			{
				global.msgFail(resourceManager.getString('default','PERSONNEL.MESSAGE.FAIL_CHANGE_STATUS'));
			}
			
			protected function onStatusResult(event:ResultEvent):void
			{
				global.msgSuccess(resourceManager.getString('default','PERSONNEL.MESSAGE.SUCC_CHANGE_STATUS'));
				refreshRecords(null);
				currentState="normal";
			}
			
			protected function createRoleHandler(event:MouseEvent):void
			{
				PopUpManager.addPopUp(createDlg,this,true);
				PopUpManager.centerPopUp(createDlg);
				createDlg.inpName.text = "";
				createDlg.inpNote.text = "";
				createDlg.saveFunction = createRole;
				createDlg.addEventListener(CloseEvent.CLOSE, create_close);
			}
			
			protected function create_close(event:Event):void
			{
				PopUpManager.removePopUp(createDlg);
			}
			
			protected function createRole(): void
			{
				var tmpArr:ArrayCollection=new ArrayCollection([{role:'Role'}]);
				createNewRole.token = roleService.createRole("",createDlg.inpName.text, createDlg.inpNote.text, tmpArr);
			}
			
			protected function createNewRole_resultHandler(event:ResultEvent):void
			{
				if (event.result.length > 2)
				{
					//global.msgSuccess(global.CreateSuccess);
					global.msgSuccess(resourceManager.getString('default','MSG_CREATE__SUCCESS'));
					getRoles.token = roleService.getRoles();
					getPersonnelRolesResult.token = personnelService.getPersonnelRoles();
					newRoleCreated = true;
				}
				else
				{
					//global.msgFail(global.CreateError);
					global.msgFail(resourceManager.getString('default','ERROR_CREATE__FAILURE'));
				}
				PopUpManager.removePopUp(createDlg);
			}
			
			protected function createNewRole_faultHandler(event:FaultEvent):void
			{
				PopUpManager.removePopUp(createDlg);
				//global.msgFail(global.CreateError);
				global.msgFail(resourceManager.getString('default','ERROR_CREATE__FAILURE'));
			}
			
			protected function createResult_resultHandler(event:ResultEvent):void
			{
				this.setPersonnelComment.service( this.per_codeTextInput.text, this.per_comments.text );
				
				//global.msgSuccess(global.CreateSuccess);
				if ( createResult.lastResult == "0" || createResult.lastResult == "OK" || createResult.lastResult == "Success" )
				{
					global.msgSuccess(resourceManager.getString('default','MSG_CREATE__SUCCESS'));
					var newId:String=this.per_codeTextInput.text;
					var cmpy:String="";
					if ( this.dd_companySelect.selectedIndex>=0)
					{
						cmpy = lookupResult.lastResult[dd_companySelect.selectedIndex].cmpy_code;
					}
					updateEddKey(cmpy, newId);
				}
				else
				{
					global.msgFail(resourceManager.getString('default','ERROR_CREATE__FAILURE'));
					deleteEddKey();
				}
				
				var arr:Object = new Object();
				var fields:Object;
				var types:Object;
				
				fields = new Object();
				types = new Object();
				
				fields["per_code"] = this.per_codeTextInput.text;
				types["per_code"] = "EXACT_STRING";
				//fields["per_name"] = this.per_nameTextInput.text;
				fields["per_name"] = this.encodeTextHavingSingleQuotation( this.per_nameTextInput.text );
				types["per_name"] = "STRING";
				
				arr["fields"] = fields;
				arr["types"] = types;
				
				filter = JSON.stringify( arr );
				
				currentState="normal";
				//refreshRecords(null);
				
				getPagedResult.token = personnelService.getPaged(filter,currentOrder+currentDirection);
			}

			public function convertDateToLocale(dt:String):Date
			{
				var dt_date:Date = new Date();
				
				if ((dt!=null) && (dt!='null') && (dt!=''))
				{
					dt_date = DateField.stringToDate(dt,"YYYY-MM-DD");
				}
				else
				{
					dt_date = null;
				}
				return dt_date;
			}
			
			

			
			protected function getRoles_resultHandler(event:ResultEvent):void
			{
				if (newRoleCreated == true)
				{
					newRoleCreated=false;
					dd_role.selectedIndex=getRoles.lastResult.length-1;
				}
				
			}
			
			protected function roleLabelFunc(item:Object, column:GridColumn):String
			{
				var tmpStr:String='';
				for (var i:int=0; i < getRoles.lastResult.length; i++)
				{
				  if(item.per_auth==getRoles.lastResult[i].ROLE_ID) tmpStr=getRoles.lastResult[i].ROLE_TEXT;
				}
				return tmpStr;
			}
			
			
			private function getCode(value:Object):String
			{
				return value.cmpy_code + " - " + value.cmpy_name;
			}
			
			protected function statusFunction(item:Object, column:GridColumn):String
			{
				var tmpStr:String=resourceManager.getString('default','global.lbl.Active');
				switch (item.user_status_flag)
				{
					case '0': tmpStr=resourceManager.getString('default','global.lbl.inactive');
						break;
					case '1': tmpStr=resourceManager.getString('default','global.lbl.Active');
						break;
					case '2': tmpStr=resourceManager.getString('default','global.lbl.locked');
						break;
					case '3': tmpStr=resourceManager.getString('default','global.lbl.deleted');
						break;
					default : tmpStr=resourceManager.getString('default','global.lbl.Active');
				}
				return tmpStr;
			}
			
			private function checkPsnlCode():void
			{
				isPsnlExisted.token = personnelService.isPsnlExisted( this.per_codeTextInput.text );
			}

			
			protected function isPsnlExisted_resultHandler(event:ResultEvent):void
			{
				// TODO Auto-generated method stub
				var psnl_num:int;
				
				psnl_num = isPsnlExisted.lastResult;
				if ( psnl_num > 0 )
				{
					global.msgWarning( resourceManager.getString('default','ALERT__PSNL_CODE_EXIST') );
				}
				else
				{
					if ( this._saveButtonClicked == true )
					{
						this.updateRecord();
					}
				}
				
				this._saveButtonClicked = false;
				
			}
			
			
			private function encodeTextHavingSingleQuotation(txt:String):String
			{
				// data binding in SQL operation will handle any special characters, so do not do any encoding at this stage
				return txt;
				
				/*
				var encoded:String="";
				var arr:Array;
				
				if ( txt.indexOf( "'" ) != -1 )
				{
					//encoded = "q'{" + txt + "}'";
					arr = txt.split( "'" );
					encoded += arr[0];
					for( var i=1; i<arr.length; i++ )
					{
						encoded += "''" + arr[i];
					}
				}
				else
				{
					encoded = txt;
				}
				
				return encoded;
				*/
			}			
			
			private function getRadioButtonSelection():String
			{
				var choice:String='0';
				
				if ( this.inactiveRadio.selected == true )
				{
					choice = '0';
				}
				else if ( this.activeRadio.selected == true )
				{
					choice = '1';
				}
				else if ( this.lockedRadio.selected == true )
				{
					choice = '2';
				}
				else if ( this.deletedRadio.selected == true )
				{
					choice = '3';
				}
				else
				{
					choice = '0';
				}
				
				return choice;
			}
			
			public function goToExpiryDateDetails():void
			{
				
				this.eddPopup.setSecurity( this.readOnly, this.canUpdate, this.canCreate, this.canDelete, this.hasPassword );
				
				this.eddPopup.parentWidth = this.width;
				this.eddPopup.parentHeight = 500;//this.height;
				eddPopup.popupTitle = resourceManager.getString('default','m_personnel') + "::" + resourceManager.getString('default','ED_EXP_DATES');
				
				trace ( "*******************Pop up a screen to manage expiry dates!");
				eddPopup.openDialog();
				
				var params:Object = new Object();
				
				params["ed_target_code"] = "PERSONNEL";
				params["ed_object_id"] = this.per_codeTextInput.text;
				
				var cmpy:String="";
				if (dd_companySelect.selectedIndex>=0)
				{
					cmpy = lookupResult.lastResult[dd_companySelect.selectedIndex].cmpy_code;
				}
				params["ed_cmpy_code"] = cmpy;
				
				this.edd_old_key = params["ed_cmpy_code"] + "__" + params["ed_object_id"]; 
				
				eddPopup.setFilters( params ); 
			}
			
			public function closeDialogHandler():void
			{
				if ( this.eddPopup.popupView.hasOwnProperty('expiryDateDetailLineList') )
				{
					this.df_driverLicense.selectedDate = null;
					this.df_dangerousGoodsLicense.selectedDate = null;
					this.df_AIP_PassPort.selectedDate = null;
					
					var dates:ArrayCollection = eddPopup.popupView.expiryDateDetailLineList;
					for each ( var o:Object in dates )
					{
						if ( o.hasOwnProperty("ed_target_code") && o.ed_target_code == "PERSONNEL" &&  o.hasOwnProperty("ed_exp_date") )
						{
							if ( o.hasOwnProperty("ed_type_code") && o.ed_type_code == "PSNL_EXPIRY_DATE_1" )
							{
								this.df_driverLicense.selectedDate = convertDateToLocale( o.ed_exp_date );
							}
							if ( o.hasOwnProperty("ed_type_code") && o.ed_type_code == "PSNL_EXPIRY_DATE_2" )
							{
								this.df_dangerousGoodsLicense.selectedDate = convertDateToLocale( o.ed_exp_date );
							}
							if ( o.hasOwnProperty("ed_type_code") && o.ed_type_code == "PSNL_EXPIRY_DATE_3" )
							{
								this.df_AIP_PassPort.selectedDate = convertDateToLocale( o.ed_exp_date );
							}
						}
					}
					
					if ( currentState == "edit" && this.dataGrid.selectedIndex>=0 )
					{
						this.dataGrid.selectedItem.per_exp_d1_dmy = global.convertDateTimeToIsoString( df_driverLicense.selectedDate, df_driverLicense.timeEnabled, global.gDefaultTimeString ); 
						this.dataGrid.selectedItem.per_exp_d2_dmy = global.convertDateTimeToIsoString( df_dangerousGoodsLicense.selectedDate, df_dangerousGoodsLicense.timeEnabled, global.gDefaultTimeString ); 
						this.dataGrid.selectedItem.per_exp_d3_dmy = global.convertDateTimeToIsoString( df_AIP_PassPort.selectedDate, df_AIP_PassPort.timeEnabled, global.gDefaultTimeString );
					}
				}
			}
			
			protected function expiryDateTargetChecker_resultHandler():void
			{
				if ( expiryDateTargetChecker.dataInteger > 0 )
				{
					this.genericPersonExpiryDates = true;
				}
				else
				{
					this.genericPersonExpiryDates = false;
				}
			}
			
			protected function updateEddKey(newCmpy:String, newId:String):void
			{
				if ( this.edd_old_key.length > 0 )
				{
					// get the old data
					var oldObj:Object = new Object();
					var arr:Array = edd_old_key.split("__");
					oldObj.ed_target_code = "PERSONNEL";
					oldObj.ed_cmpy_code = arr[0];
					oldObj.ed_object_id = arr[1];
					
					// get the new data
					var newObj:Object = new Object();
					newObj.ed_target_code = "PERSONNEL";
					newObj.ed_cmpy_code = newCmpy;
					newObj.ed_object_id = newId;
					
					this.updateEddKeyAction.service( oldObj, newObj );					
					edd_old_key = "";
				}
			}
			
			protected function updateEddKeyData_resultHandler( ):void
			{
			}
			
			protected function deleteEddKey():void
			{
				if ( this.edd_old_key.length > 0 )
				{
					// get the old data
					var oldObj:Object = new Object();
					var arr:Array = edd_old_key.split("__");
					oldObj.ed_target_code = "PERSONNEL";
					oldObj.ed_cmpy_code = arr[0];
					oldObj.ed_object_id = arr[1];
					
					this.deleteEddKeyAction.service( oldObj );					
					edd_old_key = "";
				}
			}
			
			protected function deleteEddKeyData_resultHandler( ):void
			{
			}
			
		]]>
	</fx:Script>
	
	<fx:Declarations>
		<s:DateTimeFormatter id="dateConvert" dateTimePattern="yyyy-MM-dd"/>
		<s:DateTimeFormatter id="dateFormatter" locale="{LocaleID.DEFAULT}" dateStyle="short" timeStyle="none"/>
		<s:RadioButtonGroup id="rb_status" change="rb_status_changeHandler(event)" itemClick="rb_status_itemClickHandler(event)"/>
		<s:CallResponder id="getPagedResult"/>
		<personnelservice:PersonnelService id="personnelService"  channelSet="{global.channelSet}"
										   fault="Alert.show(event.fault.faultString + '\n' + event.fault.faultDetail)"
										   showBusyCursor="true"/>
		<s:CallResponder id="isPsnlInLoad"/>
		<s:CallResponder id="isPsnlExisted" result="isPsnlExisted_resultHandler(event)"/>
		<s:CallResponder id="getPersonnelRolesResult"/>
		<s:CallResponder id="lookupResult"/>
		<s:CallResponder id="removeResult" result="removeResultHandler(event)" fault="global.msgFail(resourceManager.getString('default','ERROR_DELETE__FAILURE'))"/>
		<s:CallResponder id="updateResult" result="updatePersonnelResult_resultHandler(event)" fault="global.msgFail(resourceManager.getString('default','ERROR_UPDATE__FAILURE'))"/>
		<s:CallResponder id="createResult" result="createResult_resultHandler(event)" fault="global.msgFail(resourceManager.getString('default','ERROR_CREATE__FAILURE'))"/>
		
		<s:CallResponder id="getTimeCodeResult"/>
		<s:CallResponder id="getAreaAccessResult" result="getAreaAccessResult_resultHandler(event)"/>
		<s:CallResponder id="getAreasResult" result="getAreasResult_resultHandler(event)"/>
		<companiesservice:CompaniesService id="companiesService"  channelSet="{global.channelSet}"
										   fault="Alert.show(event.fault.faultString + '\n' + event.fault.faultDetail)"
										   showBusyCursor="true"/>
		<roleservice:RoleService id="roleService" fault="global.msgFail(resourceManager.getString('default','PERSONNEL.MESSAGE.SERVER_ERROR'))"  channelSet="{global.channelSet}"/>
		<s:CallResponder id="createNewRole" result="createNewRole_resultHandler(event)" fault="createNewRole_faultHandler(event)"/>
		<s:CallResponder id="getRoles" result="getRoles_resultHandler(event)"/>
		<components:ValidationGroup id="vg" action="updateRecord" defaultButton="{btn_save}" isProtected="{hasPassword}"/>
	</fx:Declarations>
	
	<s:Panel id="panel" width="100%" height="100%" 
			 skinClass="skins.WidgetPanelSkin" title="Records"
			 skinClass.widget="skins.NullSkin">
		<s:layout>
			<s:VerticalLayout/>
		</s:layout>

		<s:HGroup id="toolbar" width="100%" gap="5" paddingBottom="2" paddingTop="2" enabled="false" enabled.normal="true" enabled.widget="true">
			<s:Label height="100%" text="{resourceManager.getString('default','SEARCH')}" verticalAlign="middle"/>
			<components:DKI_ValidatorInput id="searchText" validationType="search" width="160" height="100%"
						 keyUp="searchText_keyUpHandler(event)"
						 width.widget="140" prompt="{resourceManager.getString('default','SEARCH_CODENAME')}"/>
			<components:DKI_DropDownList id="fltr_company" width="188" height="100%" useVirtualLayout="false"
							change="fltr_company_changeHandler(event)" cornerRadius="10"
							creationComplete="fltr_company_creationCompleteHandler(event)"
							labelField="cmpy_name" prompt="{resourceManager.getString('default','EMPLOYER')+resourceManager.getString('default','FILTER')}"
							width.edit="182" width.widget="100%" labelFunction="getCode">
				<s:AsyncListView list="{lookupResult.lastResult}"/>
			</components:DKI_DropDownList> 
			<components:DKI_Button height="100%" label="{resourceManager.getString('default','REFRESH')}" type="refresh" click="refreshRecords(event)"
					  cornerRadius="{toolbar.height/2}"
					  width.widget="68"/>
			<s:Spacer width="100%" excludeFrom="widget"/>
			<components:DKI_Button label="{resourceManager.getString('default','CREATE')}" height="100%" click="createRecord(event)" includeIn="normal" 
					  cornerRadius="{toolbar.height/2}" enabled="{canCreate}" type="create"/>
		</s:HGroup>
		
		<components:DKI_DataGrid id="dataGrid" width="100%" height="100%" click="dataGrid_clickHandler(event)"
								 creationComplete="dataGrid_creationCompleteHandler(event)"
								 requestedRowCount="4">
			<components:columns>
				<s:ArrayList>
					<s:source>
						<s:GridColumn dataField="per_code" headerText="{resourceManager.getString('default','global.lbl.code')}" width="80"/>
						<s:GridColumn dataField="per_name" headerText="{resourceManager.getString('default','global.lbl.name')}" width="200"/>
						<s:GridColumn dataField="per_cmpy" headerText="{resourceManager.getString('default','datagrid.headercaption.EmployerCode')}" excludeFrom="widget"  width="110"/>
						<s:GridColumn dataField="cmpy_name" headerText="{resourceManager.getString('default','datagrid.headercaption.EmployerName')}" excludeFrom="widget" width="200"/>
						<s:GridColumn dataField="per_auth" labelFunction="roleLabelFunc" headerText="{resourceManager.getString('default','global.lbl.role')}" width="100"/>
						<s:GridColumn dataField="per_licence_no" headerText="{resourceManager.getString('default','PER_LICENCE_NO')}" excludeFrom="widget" width="130"/>
						
						<!--s:GridColumn dataField="per_exp_d1_dmy" headerText="{global.exp4}" width="150" excludeFrom="widget" labelFunction="{function(i:Object, c:GridColumn):String{return dateFormatter.format(convertDateToLocale(i[c.dataField]))}}"/>
						<s:GridColumn dataField="per_exp_d2_dmy" headerText="{global.exp5}" width="150" excludeFrom="widget" labelFunction="{function(i:Object, c:GridColumn):String{return dateFormatter.format(convertDateToLocale(i[c.dataField]))}}"/>
						<s:GridColumn dataField="per_exp_d3_dmy" headerText="{global.exp6}" width="150" excludeFrom="widget" labelFunction="{function(i:Object, c:GridColumn):String{return dateFormatter.format(convertDateToLocale(i[c.dataField]))}}"/-->
						
						<s:GridColumn dataField="per_exp_d1_dmy" headerText="{global.exp4}" width="140" excludeFrom="widget" itemRenderer="renderers.DateRenderer"/>
						<s:GridColumn dataField="per_exp_d2_dmy" headerText="{global.exp5}" width="170" excludeFrom="widget" itemRenderer="renderers.DateRenderer"/>
						<s:GridColumn dataField="per_exp_d3_dmy" headerText="{global.exp6}" width="150" excludeFrom="widget" itemRenderer="renderers.DateRenderer"/>
						
						<s:GridColumn dataField="per_lock" headerText="{resourceManager.getString('default','datagrid.headercaption.areaaccess')}" width="100"  itemRenderer="renderers.GridLockRender"/>
						<s:GridColumn dataField="user_status_flag" headerText="{resourceManager.getString('default','global.lbl.status')}" width="80" labelFunction="statusFunction"/>
						<s:GridColumn dataField="per_department" headerText="{resourceManager.getString('default','global.lbl.department')}" width="80"></s:GridColumn>
						<s:GridColumn dataField="per_last_dmy" headerText="Last Used" width="80" itemRenderer="renderers.DateRenderer" />
						<s:GridColumn dataField="per_terminal" headerText="{resourceManager.getString('default','PER_TERMINAL')}" width="80" visible="false"></s:GridColumn>
						<s:GridColumn dataField="user_login_count" headerText="{resourceManager.getString('default','PER_LOGIN_COUNT')}" width="80" visible="false"></s:GridColumn>
						<s:GridColumn dataField="user_last_reason" headerText="{resourceManager.getString('default','PER_LAST_MODIFIED')}" itemRenderer="renderers.DateRenderer"></s:GridColumn>

						<!--s:GridColumn dataField="per_comments" headerText="{resourceManager.getString('default','PER_COMMENTS')}" width="80" visible="false"></s:GridColumn-->				
					</s:source>
				</s:ArrayList>
			</components:columns>
			<s:AsyncListView list="{getPagedResult.lastResult}"/>
		</components:DKI_DataGrid>
	</s:Panel>
	<s:Panel id="details" title="Personnel Details" width="100%" height="420" skinClass="skins.WidgetPanelSkin" includeIn="edit,create" itemCreationPolicy="immediate">
			<s:layout>
				<s:VerticalLayout/>
			</s:layout>
		<s:HGroup width="100%" height="100%" gap="30" paddingBottom="4" paddingLeft="5"
				  paddingRight="8" paddingTop="8">
			<s:VGroup id="persDetails" height="100%" gap="10">
				<s:HGroup>
					<s:Label width="{labelWidth}" height="100%" text="{resourceManager.getString('default','datagrid.headercaption.Employer')}" verticalAlign="middle"/>
					<components:DKI_ValidatorDropDown id="dd_companySelect" width="{fieldWidth}" labelField="cmpy_name" useVirtualLayout="false" includeIn="edit,create"
									itemCreationPolicy="immediate" prompt="{resourceManager.getString('default','global.prompts.employer')}" valid="false" dataProvider="{lookupResult.lastResult}" required="true"
									 automationName="{resourceManager.getString('default','datagrid.headercaption.Employer')}" validationGroup="{vg}">
					</components:DKI_ValidatorDropDown>
				</s:HGroup>
				<s:HGroup>
					<s:Label width="{labelWidth}" height="100%" text="{resourceManager.getString('default','global.lbl.code')}" verticalAlign="middle"/>
					<components:DKI_ValidatorInput id="per_codeTextInput" width="{fieldWidth}" editable.edit="false" editable.create="true" validationType="alphanumeric"
												   focusOut.create="checkPsnlCode()"
								 text="{personnel_vo.per_code}" maxChars="6" required="true" validationGroup="{vg}" automationName="{resourceManager.getString('default','global.lbl.code')}"/>
				</s:HGroup>
				<s:HGroup>
					<s:Label width="{labelWidth}" height="100%" text="{resourceManager.getString('default','global.lbl.name')}" verticalAlign="middle"/>
					<components:DKI_ValidatorInput id="per_nameTextInput" width="{fieldWidth}" text="{personnel_vo.per_name}" maxChars="49" required="true" 
												   automationName="{resourceManager.getString('default','global.lbl.name')}" validationGroup="{vg}" validationType="document"/>
				</s:HGroup>
				<!--<s:HGroup includeIn="create">
					<s:Label width="{labelWidth}" height="100%" text="{resourceManager.getString('default','PER_PASSWD')}" verticalAlign="middle"/>
					<components:DKI_ValidatorInput id="per_password" width="{fieldWidth}" text="" displayAsPassword="true"/>
				</s:HGroup>-->
				<s:HGroup>
					<s:Label width="{labelWidth}" height="100%" text="{resourceManager.getString('default','global.lbl.department')}" verticalAlign="middle"/>
					<components:DKI_ValidatorInput id="per_departmentTextInput" width="{fieldWidth}"
								 text="{personnel_vo.per_department}" maxChars="16" required="false" 
								 automationName="{resourceManager.getString('default','global.lbl.department')}" validationGroup="{vg}" validationType="document"/>
				</s:HGroup>
				<s:HGroup>
					<s:Label width="{labelWidth}" height="100%" text="{resourceManager.getString('default','global.lbl.role')}" verticalAlign="middle"/>
					<components:DKI_ValidatorDropDown id="dd_role" width="{fieldWidth}" labelField="ROLE_TEXT" useVirtualLayout="false" required="true" 
													  automationName="{resourceManager.getString('default','global.lbl.role')}" validationGroup="{vg}" prompt="{resourceManager.getString('default','global.prompts.selectrole')}">
						<s:AsyncListView list="{getRoles.lastResult}"/>
					</components:DKI_ValidatorDropDown>
					<components:DKI_Button type="create" width="30" height="26" visible="false" includeInLayout="false" toolTip="{resourceManager.getString('default','PERSONNEL.PROMPTS.CREATE_ROLE')}" click="createRoleHandler(event)"/>
				</s:HGroup>
				<s:HGroup>
					<s:Label width="{labelWidth}" height="100%" text="{resourceManager.getString('default','global.lbl.timecode')}" verticalAlign="middle"/>
					<components:DKI_ValidatorDropDown id="dd_timecode" width="{fieldWidth}" labelField="TCD_TITLE" requireSelection="true">
						<s:AsyncListView list="{getTimeCodeResult.lastResult}"/>
					</components:DKI_ValidatorDropDown>
				</s:HGroup>
				<s:HGroup>
					<s:Label width="{labelWidth}" height="100%" text="{resourceManager.getString('default','global.lbl.license')}" verticalAlign="middle"/>
					<components:DKI_ValidatorInput id="per_licenseTextInput" width="{fieldWidth}"
												   text="{personnel_vo.per_licence_no}" maxChars="19"/>
				</s:HGroup>
				<s:HGroup width="185">
					<s:Label text="{resourceManager.getString('default','global.lbl.status')}: " width="{labelWidth}" height="100%" verticalAlign="middle" fontWeight="bold"/>
					<s:RadioButton id="inactiveRadio" label="{resourceManager.getString('default','global.lbl.inactive')}" groupName="rb_status" enabled="false"/>
					<s:RadioButton id="activeRadio" label="{resourceManager.getString('default','global.lbl.Active')}" groupName="rb_status" enabled="false"/>
					<s:RadioButton id="lockedRadio" label="{resourceManager.getString('default','global.lbl.locked')}" groupName="rb_status"/>
					<s:RadioButton id="deletedRadio" label="{resourceManager.getString('default','global.lbl.deleted')}" groupName="rb_status" visible="false"/>
				</s:HGroup>
			</s:VGroup>
			<s:VGroup height="100%" gap="10">
				<s:VGroup paddingLeft="{this.genericPersonExpiryDates?20:0}">
					<s:Rect height="130" width="400" radiusX="0" radiusY="0" includeInLayout="false" visible="{this.genericPersonExpiryDates}">
						<s:stroke>
							<s:SolidColorStroke color="0x888888"/>
						</s:stroke>
					</s:Rect>
					<s:Spacer height="2" visible="{this.genericPersonExpiryDates}" includeInLayout="{this.genericPersonExpiryDates}"/>
					<s:HGroup>
						<s:Label width="{labelWidth}" height="100%" text="{global.exp4}" verticalAlign="middle"/>
						<components:DKI_DateTime id="df_driverLicense" width="{fieldWidth}" timeEnabled="false" enableNull="true"/>
					</s:HGroup>
					<s:HGroup>
						<s:Label width="{labelWidth}" height="100%" text="{global.exp5}"
								 verticalAlign="middle"/>
						<components:DKI_DateTime id="df_dangerousGoodsLicense" width="{fieldWidth}" timeEnabled="false" enableNull="true"/>
					</s:HGroup>
					<s:HGroup>
						<s:Label width="{labelWidth}" height="100%" text="{global.exp6}" verticalAlign="middle"/>
						<components:DKI_DateTime id="df_AIP_PassPort" width="{fieldWidth}" timeEnabled="false" enableNull="true"/>
					</s:HGroup>
					<s:HGroup visible="{this.genericPersonExpiryDates}" includeInLayout="{this.genericPersonExpiryDates}">
						<s:Label width="{labelWidth}" height="100%" text="" verticalAlign="middle"/>
						<components:DKI_Button id="btn_expirydates" label="{resourceManager.getString('default','ED_EXP_DATES')}" width="{fieldWidth}" height="100%" includeIn="edit,create" type="default" 
											   enabled.create="{this.canCreate &amp;&amp; (this.per_codeTextInput.text.length>0)  &amp;&amp; (this.dd_companySelect.selectedIndex>=0)}" enabled.edit="{this.canUpdate}" 
											   visible="{this.genericPersonExpiryDates}" includeInLayout="{this.genericPersonExpiryDates}" click="goToExpiryDateDetails();"/>
					</s:HGroup>
				</s:VGroup>
				
				<s:Spacer height="2"/>
				
				<s:HGroup>
					<s:Label width="{labelWidth}" text="{resourceManager.getString('default','PER_COMMENTS')}"/>
				</s:HGroup>
				<s:HGroup>
					<!--s:TextArea id="per_comments" width="400" text="{dataGrid.selectedItem.per_comments}" height="200" maxChars="800" restrict="A-Z a-z0-9_,.=/\-\\"/-->	
					<!--s:TextArea id="per_comments" width="400" text="{this._personnel_comments}" height="200" maxChars="800" restrict="A-Z a-z0-9_,.=/\-\\"/-->	
					<s:TextArea id="per_comments" width="400" text="{this._personnel_comments}" height="{this.genericPersonExpiryDates?185:220}" maxChars="800"/>	
				</s:HGroup>
			</s:VGroup>
			<s:VGroup height="100%" gap="2">
				<s:Label text="{resourceManager.getString('default','global.lbl.accesscontrol')}" fontWeight="bold"/>
				<s:HGroup>
					<s:Label width="{labelWidth}" height="100%" text="{resourceManager.getString('default','global.lbl.lockout')}" verticalAlign="middle"/>
					<s:RadioButton id="rb_lock" label="{resourceManager.getString('default','YES')}" selected="{personnel_vo.per_lock == 'Y'}"/>
					<s:RadioButton id="rb_unlock" label="{resourceManager.getString('default','NO')}" enabled="true"
								   selected="{personnel_vo.per_lock != 'Y'}"/>
				</s:HGroup>
				<s:List id="list" width="274" height="200" borderVisible="true" contentBackgroundAlpha="0.0" skinClass="skins.PickListSkin"
						dataProvider="{areaControl}" itemRenderer="renderers.AreaControlRender" enabled="{rb_unlock.selected}"/>
			</s:VGroup>
		</s:HGroup>	
		<s:Rect width="100%" height="1">
			<s:fill>
				<s:LinearGradient>
					<s:GradientEntry color="white"/>
					<s:GradientEntry color="blue"/>
					<s:GradientEntry color="white"/>
				</s:LinearGradient>
			</s:fill>
		</s:Rect>
		<s:HGroup width="100%" paddingBottom="4" paddingTop="0" gap="5">
			<!--s:HGroup height="100%">
				<s:Label text="Status:" height="100%" verticalAlign="middle" fontWeight="bold"/>
				<s:RadioButton label="Inactive" groupName="rb_status" enabled="false"/>
				<s:RadioButton label="Active" groupName="rb_status" enabled="false"/>
				<s:RadioButton label="Locked" groupName="rb_status"/>
				<s:RadioButton label="Deleted" groupName="rb_status" visible="false"/>
			</s:HGroup-->
			<components:DKI_Button id="btn_reset" label="{resourceManager.getString('default','RESET_PASSWORD')}" height="100%" click="doReset()" includeIn="edit" enabled="{canUpdate}" type="save"/>
			<s:Spacer width="100%"/>
			<components:DKI_Button id="btn_delete" label="{resourceManager.getString('default','DELETE')}" height="100%" click="doDelete()" includeIn="edit" enabled="{canDelete}" type="delete"/>
			<components:DKI_Button id="btn_save" label.create="{resourceManager.getString('default','SAVE')}" label.edit="{resourceManager.getString('default','UPDATE')}" 
								   height="100%" includeIn="edit,create" 
								   enabled.create="{canCreate}" enabled.edit="{canUpdate}" 
								   type.create="create" type.edit="edit"/>
			<components:DKI_Button id="btn_cancel" label="{resourceManager.getString('default','CANCEL')}" height="100%" click="cancel_clickHandler(event)" enabled="true" type="cancel"/>
		</s:HGroup>		
	</s:Panel>
</s:VGroup>
