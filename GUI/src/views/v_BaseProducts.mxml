<?xml version="1.0" encoding="utf-8"?>
<s:VGroup xmlns:fx="http://ns.adobe.com/mxml/2009"
		  xmlns:s="library://ns.adobe.com/flex/spark"
		  xmlns:mx="library://ns.adobe.com/flex/mx"
		  xmlns:components="components.*"
		  creationComplete="creationCompleteHandler(event)"
		  gap="2" width="100%" height="100%">
	
	<s:states>
		<s:State name="normal" enterState="this.toolbar.enabled=true"/>
		<s:State name="widget" enterState="this.toolbar.enabled=true"/>
		<s:State name="edit" enterState="callLater(function():void{dataGrid.ensureCellIsVisible(idx);});this.toolbar.enabled=false"/>
		<s:State name="create" enterState="this.toolbar.enabled=false"/>
		<s:State name="detail" enterState="view_detailsHandler(event);this.toolbar.enabled=false"/>
	</s:states>
	
	<fx:Script>
		<![CDATA[
			import com.adobe.fiber.runtime.lib.DateTimeFunc;
			
			import components.ActionDialog;
			import components.ConfirmDialog;
			import components.DeleteDialog;
			import components.ErrorDialog;
			import components.ExportData;
			import components.MessageDialog;
			import components.TransactionsDlg;
			import components.VCFManager;
			import components.ViewPopupDlg;
			
			import dm.remoteBulkListService;
			import dm.remoteDataService;
			import dm.remoteListService;
			import dm.utils.tools;
			
			import flash.events.KeyboardEvent;
			import flash.globalization.LocaleID;
			
			import flashx.textLayout.container.ScrollPolicy;
			
			import mx.collections.ArrayCollection;
			import mx.controls.Alert;
			import mx.controls.DateField;
			import mx.events.DropdownEvent;
			import mx.events.FlexEvent;
			import mx.managers.PopUpManager;
			import mx.rpc.events.ResultEvent;
			import mx.utils.ObjectUtil;
			import mx.utils.StringUtil;
			
			import renderers.DKI_HeaderColumn_Renderer;
			
			import spark.components.ToggleButton;
			import spark.components.VScrollBar;
			import spark.components.gridClasses.IGridItemRenderer;
			import spark.events.GridEvent;
			import spark.events.GridSelectionEvent;
			import spark.events.IndexChangeEvent;
			import spark.events.TextOperationEvent;
			
			
			public static const MAIN_WINDOW_WIDTH:int = 1500;
			
			[Bindable] public var readOnly:Boolean = false;
			[Bindable] public var canUpdate:Boolean = false;
			[Bindable] public var canCreate:Boolean = false;
			[Bindable] public var canDelete:Boolean = false;
			[Bindable] public var hasPassword:Boolean = false;
			
			[Bindable] private var isHotVolumeCheckEnabled:Boolean = false;
			
			[Bindable] public var labelWidth:uint = 200;
			[Bindable] public var labelHeight:uint = 26;
			[Bindable] public var fieldWidth:uint = 400;
			[Bindable] public var fieldHeight:uint = 26;
			[Bindable] public var spaceWidth:uint = 15;
			[Bindable] public var spaceHeight:uint = 5;
			
			private var idx:int=-1;
			
			private var currentFilter:String=null;
			private var currentOrder:String='base_code';
			private var currentDirection:String="ASC";
			
			private var currentOffset:int=0;
			private var currentPageSize:int=1000;
			[Bindable] private var totalLength:int=0;
			[Bindable] private var currentLength:int=0;
			
			private var currentFields:Object=new Object();
			private var currentTypes:Object=new Object();
			//private var currentSorts:Object=new Object();
			//private var currentOrders:Object=new Object();
			private var currentSorts:Object={base_code:'ASC'};
			private var currentOrders:Object={base_code:1};
			private var currentSortSeq:int=0;
			
			
			private var confirmReport:ActionDialog;
			private var confirmSave:ActionDialog;
			private var errorDialog:ErrorDialog;
			
			//private var exportContents:String="";
			private var f:FileReference = new FileReference();
			
			
			//private var getData:Responder = new Responder(getData_resultHandler);
			
			//private var pagedRecords:ArrayCollection=new ArrayCollection();
			//private var pagedRecords:remoteDataService = new remoteDataService( "BaseProductService.getPaged", getData, null );
			[Bindable] private var pagedRecords:remoteListService;
			
			private var deleteAction:remoteDataService = new remoteDataService( "BaseProductService.delete", null, deleteData_resultHandler, 1 );
			private var createAction:remoteDataService = new remoteDataService( "BaseProductService.create", null, createData_resultHandler, 1 );
			private var updateAction:remoteDataService = new remoteDataService( "BaseProductService.update", null, updateData_resultHandler, 1 );
			
			private var baseProductKeyChecker:remoteDataService = new remoteDataService( "BaseProductService.isBaseProductKeyUsed", null, baseProductKeyChecker_resultHandler, 2 );
			//private var baseProductKeyCheckerBeforeCreate:remoteDataService = new remoteDataService( "BaseProductService.isBaseProductKeyUsed", null, baseProductKeyCheckerBeforeCreate_resultHandler, 2 );
			
			private var gridColumnSequenceMaker:remoteDataService = new remoteDataService( "ScreenGridColumnService.lookupGridColumnSequence", null, gridColumnSequenceMaker_resultHandler, 1 );
			private var _gridColumnSequenceString:String="";
			private var formColumnSettingsMaker:remoteDataService = new remoteDataService( "ScreenFormColumnService.lookupFormColumnSettings", null, formColumnSettingsMaker_resultHandler, 1 );
			private var _formColumnSettingsString:String="";
			private var formButtonSettingsMaker:remoteDataService = new remoteDataService( "ScreenFormButtonService.lookupFormButtonSettings", null, formButtonSettingsMaker_resultHandler, 1 );
			private var _formButtonSettingsString:String="";
			
			
			[Bindable] private var baseProductGroupList:remoteDataService = new remoteDataService( "ListLibraryService.lookupProductGroup", null, null );
			[Bindable] private var baseProductClassList:remoteDataService = new remoteDataService( "ListLibraryService.lookupBaseClass", null, lookupBaseProductClassList_resultHandler );
			[Bindable] private var baseProductList:remoteDataService = new remoteDataService( "ListLibraryService.lookupBaseProduct", null, null );
			[Bindable] private var temperatureUnitList:remoteDataService = new remoteDataService( "ListLibraryService.lookupTemperatureUnits", null, null );
			[Bindable] private var correctionMethodList:remoteDataService = new remoteDataService( "ListLibraryService.lookupCorrectionMethods", null, lookupCorrectionMethodList_resultHandler );
			[Bindable] private var refTempSpecList:remoteDataService = new remoteDataService( "ListLibraryService.lookupRefTempSpecs", null, null );
			
			private var refTemperatureReader:remoteDataService = new remoteDataService( "TankService.getStandardTemperature", null, refTemperatureReader_resultHandler, 3 );
			
			public var mngr:VCFManager = new VCFManager();
			[Bindable] private var refTempC:Number;
			[Bindable] private var refTempF:Number;
			[Bindable] private var refTempTextC:String;
			[Bindable] private var refTempTextF:String;
			[Bindable] private var refTempText:String;
			
			
			//private var genData:ExportData = new ExportData();
			
			public var mainListSelection:int = -1;
			private var _saveButtonClicked:Boolean=false;

			
			protected function creationCompleteHandler(event:FlexEvent):void
			{
				this.refTemperatureReader.service();
				
				if ( global.getValueFromSiteConfigSettings("SITE_LOAD_SAFEFILL_CHECK_BY_HIGHTEMP") == 'Y' )
				{
					this.isHotVolumeCheckEnabled = true;
				}
				else
				{
					this.isHotVolumeCheckEnabled = false;
				}
				
				this.formColumnSettingsMaker.service( "BASE_PRODUCTS" );
				this.formButtonSettingsMaker.service( "BASE_PRODUCTS" );
				
				trace ("-------------start creationCompleteHandler");
				pagedRecords = new remoteListService( this.dataGrid, "BaseProductService.getPaged", null, getPageData_resultHandler );
				//resourceManager.localeChain = ['zh_CN'];
				//global.LanguageCode="CHN";
				this.gridColumnSequenceMaker.service( "BASE_PRODUCTS" );
				
				
				var value:String = global.getValueFromSiteConfigSettings( "SITE_AUTO_FILTER_WHEN_OPEN_SCREEN" );
				if ( value == 'Y' )
				{
					this.startFiltering();
				}
				else
				{
					;
				}
				
				this.baseProductGroupList.service( );
				this.baseProductClassList.service( );
				this.baseProductList.service( );
				this.temperatureUnitList.service( );
				this.correctionMethodList.service( );
				this.refTempSpecList.service( );
				
				
				trace ("------------End creationCompleteHandler");
				
				
				//trace("this.grid.scroller1111", this.dataGrid.scroller);
				//trace("this.grid.scroller.verticalScrollBar.value", this.dataGrid.scroller.verticalScrollBar.value);
				this.dataGrid.scroller.verticalScrollBar.addEventListener(Event.CHANGE, verticalScrollBarChanged);
				this.dataGrid.addEventListener(KeyboardEvent.KEY_UP, reportKeyUp);
				this.dataGrid.columnHeaderGroup.addEventListener(GridEvent.GRID_CLICK, headerClickListener);
					
			}
			
			
			
			protected function formColumnSettingsMaker_resultHandler():void
			{
				this._formColumnSettingsString =  formColumnSettingsMaker.dataString;
			}
			
			protected function formButtonSettingsMaker_resultHandler():void
			{
				this._formButtonSettingsString =  formButtonSettingsMaker.dataString;
			}
			
			
			protected function lookupBaseProductClassList_resultHandler():void
			{
				for ( var i:int=this.baseProductClassList.length-1; i>=0; i-- ) 
				{
					var o:Object = this.baseProductClassList.getItemAt( i );
					if ( o.bclass_no >= 12 )
					{
						if ( this.isHotVolumeCheckEnabled == false )
						{
							this.baseProductClassList.removeItemAt(i);
						}
					}
				}
			}
			
			protected function lookupCorrectionMethodList_resultHandler():void
			{
				//for ( var i:int=0; i<this.correctionMethodList.length; i++ ) 
				for ( var i:int=this.correctionMethodList.length-1; i>=0; i-- ) 
				{
					var o:Object = this.correctionMethodList.getItemAt( i );
					if ( o.compensation_id == 6 )
					{
						if ( this.isHotVolumeCheckEnabled == false )
						{
							this.correctionMethodList.removeItemAt(i);
						}
					}
				}
			}
			
			protected function refTemperatureReader_resultHandler( ):void
			{
				this.refTempC = refTemperatureReader.dataNumber;
				this.refTempF = this.mngr.Temp_C2F( refTempC );
				
				this.refTempTextC = String(this.refTempC) + resourceManager.getString('default','UNIT__TEMP_C');
				this.refTempTextF = String(this.refTempF) + resourceManager.getString('default','UNIT__TEMP_F');
				
				this.refTempText = this.refTempTextC + '/' + this.refTempTextF;
			}
			
			protected function startLoadingPages():void
			{
				killBtn.setStyle("chromeColor","0xff0000");
				this.killBtn.includeInLayout=true;
				this.killBtn.visible = true;
				this.killBtn.enabled = true;
				
				resumeBtn.setStyle("chromeColor","0x00ff00");
				this.resumeBtn.includeInLayout=true;
				this.resumeBtn.visible = true;
				this.resumeBtn.enabled = false;
				
				this.btn_create.enabled = false
				this.btn_export.enabled = false;
				this.dataGrid.enabled = false;
				this.toolbar.enabled = false;
				//this.panel.enabled = false;
				
				currentLength=0;
				currentOffset = 0;
				
				//this.exportContents = this.genData.prepExportHeader( dataGrid );
				
				//currentPage=1;
				pagedRecords.currentPage=1;
				pagedRecords.removeAll();
				pagedRecords.refresh();
				this.pb.values(0, 0);
				//this.pagedRecords.service( currentFields, currentTypes, currentSorts, currentOrders, currentPage, currentPageSize );
				this.pagedRecords.listService( currentFields, currentTypes, currentSorts, currentOrders );
			}
			
			protected function endLoadingPages():void
			{
				this.btn_create.enabled = this.canCreate;
				this.btn_export.enabled = true;
				this.dataGrid.enabled = true;
				this.toolbar.enabled = true;
				//this.panel.enabled = true;
				//this.pb.values(totalCount, totalCount);
				this.pb.values(pagedRecords.totalCount, pagedRecords.totalCount, true);
				
				this.killBtn.includeInLayout=true;
				this.killBtn.visible = true;
				this.killBtn.enabled = false;
				
				this.resumeBtn.includeInLayout=true;
				this.resumeBtn.visible = true;
				//if ( totalLength > totalCount )
				if ( pagedRecords.totalLength > pagedRecords.totalCount )
				{
					this.resumeBtn.enabled = true;
				}
				else
				{
					this.resumeBtn.enabled = false;
				}
				
				//this.fltr_product.setFocus();
				var len:int = this.fltr_product.text.length;
				this.fltr_product.selectRange(len, len);
			}
			
			protected function exportCsvHandler(event:MouseEvent):void
			{
				this.confirmReport = new ActionDialog( doExport, cancelExport, resourceManager.getString('default','CONFIRM_REPORT_CSV') );
				
				//this.startLoadingPages();
			}
			
			private function getPageData_resultHandler():void
			{
				// if not finished
				if(pagedRecords.length < pagedRecords.totalCount)
				{
					pb.values(pagedRecords.length,pagedRecords.totalCount)
				}
				else
				{
					pb.values(pagedRecords.length,pagedRecords.totalCount)
					
					this.endLoadingPages();
					
					this.dataGrid.selectedIndex = this.mainListSelection;
					if ( this.mainListSelection >= 0)
					{
						this.dataGrid_selectionChangeHandler(null);
					}
					this.mainListSelection = -1;
					
				}
				
			}
			
			
			public function doExport():void
			{
				//genData.prepOther(dataGrid,'baseProductlist.csv', this.pagedRecords);
				
				//f.save( this.exportContents, "baseProductlist.csv" );
				f.save( pagedRecords.exportContents, "baseProductlist.csv" );
				
				this.endLoadingPages();
			}
			
			
			public function cancelExport():void
			{
				this.endLoadingPages();
				
				//trace( this.exportContents );
			}
			
			public function doNothing():void
			{
			}
			
			
			private function verticalScrollBarChanged(event:Event):void
			{
				if ( this.dataGrid.scroller != null)
				{
					var vs:VScrollBar;
					vs = this.dataGrid.scroller.verticalScrollBar;
					//trace("this.grid.scroller.verticalScrollBar.value", vs.value, vs.maximum, vs.minimum, vs.stepSize, vs.pageSize, vs.	snapInterval);
				}
				else
				{
					trace("grid is changed");
				}
			}
			
			private function reportKeyUp(event:KeyboardEvent):void
			{
				if ( this.dataGrid.scroller != null)
				{
					var vs:VScrollBar;
					vs = this.dataGrid.scroller.verticalScrollBar;
					//trace("this.grid.scroller.verticalScrollBar.value", vs.value, vs.maximum, vs.minimum, vs.stepSize, vs.pageSize, vs.	snapInterval);
				}
				else
				{
					trace("grid is changed");
				}
			}
			
			private function headerClickListener(event:GridEvent):void
			{
				if(event.column.dataField!='prod_items')
				{
					var currentRenderer:IGridItemRenderer;
					var dir:String;
					
					if ( global.sortingBySingleColumn == true )
					{	// sorted by single column only
						for (var i:int=0; i < dataGrid.columns.length; i++)
						{
							currentRenderer = dataGrid.columnHeaderGroup.getHeaderRendererAt(i);
							if ( currentRenderer != null)
							{
								(currentRenderer as DKI_HeaderColumn_Renderer).setImage('');
							}
							//(currentRenderer as DKI_HeaderColumn_Renderer).setImage(''); 
						}
					}
					else
					{	// sorted by multiple columns
						;
					}
					currentRenderer = dataGrid.columnHeaderGroup.getHeaderRendererAt(event.columnIndex);
					
					if( currentSorts.hasOwnProperty(event.column.dataField ) )
					{
						dir = currentSorts[event.column.dataField];
						if( dir=="ASC" )
						{
							dir = "DESC";
						}
						else if ( dir == "DESC" )
						{
							dir = "";
						}
						else if ( dir == "" )
						{
							dir = "ASC";
						}
						else 
						{
							dir = "ASC";
						}
						
						if ( dir != "" )
						{
							currentSorts[event.column.dataField] = dir;	
						}
						else
						{
							delete currentSorts[event.column.dataField];
							delete currentOrders[event.column.dataField];
						}
					}
					else
					{
						if ( global.sortingBySingleColumn == true )
						{	// sorted by single column only
							currentSorts = new Object();
							currentOrders = new Object();
							currentSortSeq = 0;
						}
						else
						{	// sorted by multiple columns
							;
						}
						currentSorts[event.column.dataField] = "ASC";	
						dir = currentSorts[event.column.dataField];
						currentSortSeq += 1;
						currentOrders[event.column.dataField] = currentSortSeq;	
					}
					(currentRenderer as DKI_HeaderColumn_Renderer).setImage(dir);
					this.startFiltering();
				}
			}
			
			
			protected function dataGrid_selectionChangeHandler(event:GridSelectionEvent):void
			{
				if(currentState != 'widget')
				{
					idx=dataGrid.selectedIndex;
					//dataGrid.ensureCellIsVisible(idx+11);
					dataGrid.ensureCellIsVisible(idx);
					
					currentState = "edit";					
					
					this.base_color2.initialize();
					this.base_color2.selectedColor = dataGrid.selectedItem.base_color;
					
					this.btn_save.enabled = this.canUpdate;
					
					if ( _formColumnSettingsString.length > 0 )
					{
						global.adjustFormFieldSettings( _formColumnSettingsString.substr(1), this );
					}
					
					if ( _formButtonSettingsString.length > 0 )
					{
						global.adjustFormButtonSettings( _formButtonSettingsString.substr(1), this );
					}
					
					this.class_density_range.text = "[" + dataGrid.selectedItem.base_class_dens_lo + " - " + dataGrid.selectedItem.base_class_dens_hi + "] " + resourceManager.getString('default','UNIT__DENSITY');
					this.class_density_range.visible = true;
				}
			}
			
			protected function cancel_clickHandler():void
			{
				clearDetail();
				if ( currentState== "create" )
				{
					dataGrid.enabled=true;
				}
				currentState="normal";
				dataGrid.selectedIndex = -1;
			}			
			
			protected function gridColumnSequenceMaker_resultHandler():void
			{
				this._gridColumnSequenceString =  gridColumnSequenceMaker.dataString;
				
				if ( _gridColumnSequenceString.length > 0 )
				{
					global.adjustGridColumnSequence( _gridColumnSequenceString.substr(1), dataGrid );
				}
				
			}

			
			protected function fltr_product_keyUpHandler(event:KeyboardEvent):void
			{
				if ( event.keyCode != 13 )
				{
					return;
				}
				if (currentState == "edit") clearDetail();
				startFiltering();
			}
			
			protected function fltr_prodgroup_changeHandler(event:IndexChangeEvent):void
			{
				if (currentState == "edit") clearDetail();
				startFiltering();
			}
			
			protected function fltr_prodclass_changeHandler(event:IndexChangeEvent):void
			{
				if (currentState == "edit") clearDetail();
				startFiltering();
			}
			
			private function startFiltering():void
			{
				var fields:Object;
				var types:Object;
				
				//interruptor=false;
				pagedRecords.interruptor=false;
				
				fields = new Object();
				types = new Object();
				
				
				if(fltr_product.text!='')
				{					
					fields["base_code||base_name"] = fltr_product.text+"||"+fltr_product.text;
				}
				else
				{
					fields["base_code||base_name"] = "";
				}
				types["base_code||base_name"] = "STRING||STRING";
				
				
				if ( this.currentState != "widget" )
				{
					if (fltr_prodgroup.selectedIndex > -1) 
					{
						fields["base_prod_group"] = baseProductGroupList[fltr_prodgroup.selectedIndex].pgr_code;
					}
					else
					{
						if ( global.setComboBoxNoSelection == true )
						{
							fltr_prodgroup.selectedIndex = -1;
						}
						fields["base_prod_group"] = "";
					}
					types["base_prod_group"] = "EXACT_STRING";
					
					if (fltr_prodclass.selectedIndex > -1) 
					{
						fields["base_cat"] = baseProductClassList[fltr_prodclass.selectedIndex].bclass_no;
					}
					else
					{
						if ( global.setComboBoxNoSelection == true )
						{
							fltr_prodclass.selectedIndex = -1;
						}
						fields["base_cat"] = "";
					}
					types["base_cat"] = "EXACT_STRING";
					
				}
				
				currentFilter = "WHERE 1=1 ";
				
				currentFields = fields;
				currentTypes = types;
				
				this.startLoadingPages();
				
				trace("this.grid.scroller3333", this.dataGrid.scroller);
				trace("this.grid.scroller.verticalScrollBar.value", this.dataGrid.scroller.verticalScrollBar.value);
			}
			
			private function findByPrimaryKey(prod:String):void
			{
				var fields:Object;
				var types:Object;
				
				fields = new Object();
				types = new Object();
				
				fields["base_code"] = prod;
				types["base_code"] = "EXACT_STRING";
				
				//currentPage=1;
				pagedRecords.currentPage=1;
				pagedRecords.removeAll();
				pagedRecords.refresh();
				//this.pagedRecords.service( fields, types, currentSorts, currentOrders, currentPage, currentPageSize );
				this.pagedRecords.listService( fields, types, currentSorts, currentOrders );
			}
			
			protected function filterRecords(event:MouseEvent):void
			{
				if (currentState == "edit") clearDetail();
				this.startFiltering();
			}
			
			protected function refreshRecords(event:MouseEvent):void
			{
				if ( currentState != "widget" )
				{
					currentState = 'normal';
					dataGrid.enabled=true;
				}
				clearDetail();
				fltr_product.text = "";
				if ( currentState != "widget" )
				{
					fltr_prodclass.selectedIndex = -1;
					fltr_prodgroup.selectedIndex = -1;
				}
				
				dataGrid.selectedIndex = -1;
				currentFilter = null;
				currentOrder = null;
				currentFields = new Object();
				currentTypes = new Object();
				
				currentSorts = new Object();
				currentOrders = new Object();
				var currentRenderer:IGridItemRenderer;
				for (var i:int=0; i < dataGrid.columns.length; i++)
				{
					currentRenderer = dataGrid.columnHeaderGroup.getHeaderRendererAt(i);
					if ( currentRenderer != null)
					{
						(currentRenderer as DKI_HeaderColumn_Renderer).setImage('');
					}
					//(currentRenderer as DKI_HeaderColumn_Renderer).setImage(''); 
				}
				this.startFiltering();
				//this.startLoadingPages();
				trace("this.grid.scroller2222", this.dataGrid.scroller);
				trace("this.grid.scroller.verticalScrollBar.value", this.dataGrid.scroller.verticalScrollBar.value);
			}
			
			protected function clearDetail(): void
			{
				if (currentState != 'widget')
				{
				}
			}			
			
			private function editRecord():void
			{
				
				if ( this.checkFields() > 0 )
				{
					this.btn_save.enabled = this.canUpdate;
					return;
				}
				
				var obj:Object = new Object();
				
				
				obj.base_code = base_code.text;
				obj.base_name = base_name.text;
				
				if (base_prod_group.selectedIndex>=0)
				{
					obj.base_prod_group = baseProductGroupList[base_prod_group.selectedIndex].pgr_code;
				}
				else
				{
					obj.base_prod_group = dataGrid.selectedItem.base_prod_group;
				}
				
				if (base_cat.selectedIndex>=0)
				{
					obj.base_cat = baseProductClassList[base_cat.selectedIndex].bclass_no;
					obj.base_class_desc = baseProductClassList[base_cat.selectedIndex].bclass_desc;
				}
				else
				{
					obj.base_cat = dataGrid.selectedItem.base_cat;
					obj.base_class_desc = dataGrid.selectedItem.base_class_desc;
				}
				
				obj.base_ref_temp = base_ref_temp.text;

				if (base_ref_tunt.selectedIndex>=0)
				{
					obj.base_ref_tunt = this.temperatureUnitList[base_ref_tunt.selectedIndex].unit_id;
				}
				else
				{
					obj.base_ref_tunt = dataGrid.selectedItem.base_ref_tunt;
				}
				
				if (base_corr_mthd.selectedIndex>=0)
				{
					obj.base_corr_mthd = this.correctionMethodList[base_corr_mthd.selectedIndex].compensation_id;
				}
				else
				{
					obj.base_corr_mthd = dataGrid.selectedItem.base_corr_mthd;
				}
				
				if (base_ref_temp_spec.selectedIndex>=0)
				{
					obj.base_ref_temp_spec = this.refTempSpecList[base_ref_temp_spec.selectedIndex].ref_temp_spec_id;
				}
				else
				{
					obj.base_ref_temp_spec = dataGrid.selectedItem.base_ref_temp_spec;
				}
				
				obj.base_limit_preset_ht = (this.base_limit_preset_ht.selected==true?1:0);
				
				obj.base_dens_lo = base_dens_lo.text;
				obj.base_dens_hi = base_dens_hi.text;
				
				obj.base_color = base_color.text;
				
				updateAction.service( obj );
			}
			
			protected function updateData_resultHandler( ):void
			{
				clearDetail();
				if ( this.updateAction.dataString == "OK" )
				{
					global.msgSuccess(resourceManager.getString('default','MSG_UPDATE__SUCCESS'));
					this.baseProductClassList.service( );
				}
				else
				{
					global.msgFail(resourceManager.getString('default','ERROR_UPDATE__FAILURE'));
				}
				
				var prod:String;
				prod = base_code.text;
				
				currentState="normal";
				findByPrimaryKey( prod );

				dataGrid.selectedIndex = -1;
				dataGrid.enabled=true;
			}
			
			private function doDelete(): void
			{
				var errors:String="";
				var index:int=0;
				
				
				/*
				TODO - is this product used by other records?
				*/
				if ( index > 0 )
				{
					var errorBox:MessageDialog = new MessageDialog( errors );
				}
				else
				{
					var canDelete:DeleteDialog = new DeleteDialog(deleteRecord, hasPassword);
				}
			}
			
			private function deleteRecord():void
			{
				var obj:Object = new Object();
				
				
				obj.base_code = dataGrid.selectedItem.base_code;
				obj.base_name = dataGrid.selectedItem.base_name;
				obj.base_prod_group = dataGrid.selectedItem.base_prod_group;
				obj.base_cat = dataGrid.selectedItem.base_cat;
				obj.base_class_desc = dataGrid.selectedItem.base_class_desc;
				
				deleteAction.service( obj );
			}
			
			protected function deleteData_resultHandler( ):void
			{
				clearDetail();
				if ( this.deleteAction.dataString == "OK" )
				{
					global.msgSuccess(resourceManager.getString('default','MSG_DELETE__SUCCESS'));
					this.baseProductClassList.service( );
				}
				else
				{
					global.msgFail(resourceManager.getString('default','ERROR_DELETE__FAILURE'));
				}
				
				currentState="normal";
				this.startFiltering();
				dataGrid.selectedIndex = -1;
			}
			
			private function checkBaseProductKey():void
			{
				var obj:Object=new Object();
				
				obj.base_code = this.base_code.text;
				
				baseProductKeyChecker.service( obj.base_code );
			}
			
			protected function baseProductKeyChecker_resultHandler( ):void
			{
				if ( baseProductKeyChecker.dataInteger > 0 )
				{
					global.msgWarning( resourceManager.getString('default','ALERT__BASEPRODUCT_EXIST') );
					this.btn_save.enabled = this.canCreate;
				}
				else
				{
					if ( this._saveButtonClicked == true )
					{
						this.createRecord();
					}
				}
				
				this._saveButtonClicked = false;
			}
			
			private function checkFields():int
			{
				var errors:String="";
				var index:int=0;
				
				if ( this.fld__base_dens_lo__base_dens_hi.visible == false )
				{
					return index;
				}
				
				
				var cls_dens_lo:Number = 0;
				var cls_dens_hi:Number = 2000;
				if ( base_cat.selectedIndex > -1 )
				{
					cls_dens_lo = baseProductClassList[base_cat.selectedIndex].bclass_dens_lo;
					cls_dens_hi = baseProductClassList[base_cat.selectedIndex].bclass_dens_hi;
				}
				
				var dens_lo_digital:Boolean = tools.isValueNumeric( this.base_dens_lo.text );
				var dens_hi_digital:Boolean = tools.isValueNumeric( this.base_dens_hi.text );
				var dens_lo:Number = Number(this.base_dens_lo.text);
				var dens_hi:Number = Number(this.base_dens_hi.text);
				var dens_lo_filled:Boolean = StringUtil.trim(this.base_dens_lo.text).length>0?true:false;
				var dens_hi_filled:Boolean = StringUtil.trim(this.base_dens_hi.text).length>0?true:false;
				
				if ( dens_lo_filled && (!dens_lo_digital || dens_lo < 0) )
				{
					index += 1;
					errors += String(index) + ". " + resourceManager.getString('default','ALERT__BASE_DENSITY_LO_ERRTYPE') + "\n";
				}
				if ( dens_hi_filled && (!dens_hi_digital || dens_hi < 0) )
				{
					index += 1;
					errors += String(index) + ". " + resourceManager.getString('default','ALERT__BASE_DENSITY_HI_ERRTYPE') + "\n";
				}
				
				if ( dens_lo_filled && dens_lo_digital && (!( dens_lo >= cls_dens_lo && dens_lo <= cls_dens_hi )) )
				{
					index += 1;
					errors += String(index) + ". " + resourceManager.getString('default','ALERT__BASE_DENSITY_LO_OUTLIMIT') + "\n";
				}
				
				if ( dens_hi_filled && dens_hi_digital && (!( dens_hi >= cls_dens_lo && dens_hi <= cls_dens_hi )) )
				{
					index += 1;
					errors += String(index) + ". " + resourceManager.getString('default','ALERT__BASE_DENSITY_HI_OUTLIMIT') + "\n";
				}
				
				if ( dens_lo_filled && dens_lo_digital && dens_hi_filled && dens_hi_digital && (dens_lo > dens_hi) )
				{
					index += 1;
					errors += String(index) + ". " + resourceManager.getString('default','ALERT__BASE_DENSITY_OUTORDER') + "\n";
				}
				
				
				if ( index > 0 )
				{
					var errorBox:MessageDialog = new MessageDialog( errors );
				}
				
				return index;
			}
/* 			
			private function checkBaseProductKeyBeforeCreate():void
			{
				var obj:Object=new Object();
				
				obj.base_code = this.base_code.text;
				
				baseProductKeyCheckerBeforeCreate.service( obj.base_code );
			}
			
			protected function baseProductKeyCheckerBeforeCreate_resultHandler( ):void
			{
				if ( baseProductKeyCheckerBeforeCreate.dataInteger > 0 )
				{
					global.msgWarning( resourceManager.getString('default','ALERT__BASEPRODUCT_EXIST') );
					//var errorBox:MessageDialog = new MessageDialog( resourceManager.getString('default','ALERT__BASEPRODUCT_EXIST') );
					this.btn_save.enabled = this.canCreate;
				}
				else
				{
					createRecord();
				}
			}
 */			
			private function createRecord():void
			{
				
				if ( this.checkFields() > 0 )
				{
					this.btn_save.enabled = this.canCreate;
					return;
				}
				
				var obj:Object = new Object();
				
				
				obj.base_code = base_code.text;
				obj.base_name = base_name.text;
				
				if (base_prod_group.selectedIndex>=0)
				{
					obj.base_prod_group = baseProductGroupList[base_prod_group.selectedIndex].pgr_code;
				}
				else
				{
					obj.base_prod_group = "";//baseProductGroupList[0].pgr_code;
				}
				
				if (base_cat.selectedIndex>=0)
				{
					obj.base_cat = baseProductClassList[base_cat.selectedIndex].bclass_no;
					obj.base_class_desc = baseProductClassList[base_cat.selectedIndex].bclass_desc;
				}
				else
				{
					obj.base_cat = baseProductClassList[0].bclass_no;
					obj.base_class_desc = baseProductClassList[0].bclass_desc;
				}
				
				obj.base_ref_temp = base_ref_temp.text;
				
				if (base_ref_tunt.selectedIndex>=0)
				{
					obj.base_ref_tunt = this.temperatureUnitList[base_ref_tunt.selectedIndex].unit_id;
				}
				else
				{
					obj.base_ref_tunt = 0;
				}
				
				if (base_corr_mthd.selectedIndex>=0)
				{
					obj.base_corr_mthd = this.correctionMethodList[base_corr_mthd.selectedIndex].compensation_id;
				}
				else
				{
					obj.base_corr_mthd = 0;
				}
				
				if (base_ref_temp_spec.selectedIndex>=0)
				{
					obj.base_ref_temp_spec = this.refTempSpecList[base_ref_temp_spec.selectedIndex].ref_temp_spec_id;
				}
				else
				{
					obj.base_ref_temp_spec = 0;
				}
				
				obj.base_limit_preset_ht = (this.base_limit_preset_ht.selected==true?1:0);
				
				obj.base_dens_lo = base_dens_lo.text;
				obj.base_dens_hi = base_dens_hi.text;
				
				obj.base_color = base_color.text;
				
				createAction.service( obj );
			}
			
			protected function createData_resultHandler( ):void
			{
				clearDetail();
				if ( this.createAction.dataString == "OK" )
				{
					global.msgSuccess(resourceManager.getString('default','MSG_CREATE__SUCCESS'));
					this.baseProductClassList.service( );
				}
				else
				{
					global.msgFail(resourceManager.getString('default','ERROR_CREATE__FAILURE'));
				}
				
				var prod:String;
				prod = base_code.text;
				
				currentState="normal";
				findByPrimaryKey( prod );
				
				dataGrid.selectedIndex = -1;
				dataGrid.enabled=true;
			}
			
			protected function createNewRecord(event:MouseEvent):void
			{	
				idx=dataGrid.selectedIndex;
				dataGrid.ensureCellIsVisible(idx);
				currentState="create";
				this.btn_save.enabled = this.canCreate;
				dataGrid.enabled=false;
				
				this.base_color.text = "";
				this.base_color2.initialize();
				this.base_color2.selectedColor = "";
				
				if ( _formColumnSettingsString.length > 0 )
				{
					global.adjustFormFieldSettings( _formColumnSettingsString.substr(1), this );
				}
				
				if ( _formButtonSettingsString.length > 0 )
				{
					global.adjustFormButtonSettings( _formButtonSettingsString.substr(1), this );
				}
			}
			
			
			public function getArrayCollection(obj:Object):ArrayCollection
			{
				var temp:ArrayCollection = new ArrayCollection;
				temp.addItem( obj );
				return temp;
			}
			
			public function convertDateToLocaleString(dt:String):String
			{
				var dt_string:String;
				var dt_date:Date = new Date();
				
				dt_string = ""; 
				if ((dt!=null) && (dt!='null') && (dt!=''))
				{
					dt_date = DateField.stringToDate(dt,"YYYY-MM-DD");
					dt_string = dateFormatter.format( dt_date);
				}
				//trace ("convertDateToLocale", dt, dt_date, dt_string);
				return dt_string;
			}
			
			public function convertDateToLocale(dt:String):Date
			{
				var dt_date:Date = new Date();
				
				if ((dt!=null) && (dt!='null') && (dt!=''))
				{
					dt_date = DateField.stringToDate(dt,"YYYY-MM-DD");
				}
				//trace ("convertDateToLocale", dt, dt_date, dt_string);
				return dt_date;
			}
			
			public function convertDateToLocaleLong(dt:String):Date
			{
				var dt_date:Date = new Date();
				
				if ((dt!=null) && (dt!='null') && (dt!=''))
				{
					//dt_date = DateField.stringToDate(dt,"YYYY-MM-DD HH:NN:SS");
					dt_date = DateTimeFunc.createDate(
						int(dt.substr(0, 4))
						, int(dt.substr(5, 2))
						, int(dt.substr(8, 2))
						, int(dt.substr(11, 2))
						, int(dt.substr(14, 2))
						, int(dt.substr(17, 2))
					);
				}
				//trace ("convertDateToLocale", dt, dt_date, dt_string);
				return dt_date;
			}
			
			public function getDefaultDate():Date
			{
				var now_date:Date;
				var def_date:Date;
				
				now_date = new Date();
				def_date = DateTimeFunc.dateAdd( "yyyy", 1, now_date );
				
				//trace ("getDefaultDate", now_date, def_date);
				
				return def_date;
			}
			
			protected function view_detailsHandler(event:FlexEvent):void
			{
			}
			
			protected function save_clickHandler():void
			{
				this.btn_save.enabled = false;
				doSave();
				//this.confirmSave = new ActionDialog( doSave, doNothing, resourceManager.getString('default','CONFIRM_SAVE_RATIOS') );
				
				//this.startLoadingPages();
			}
			
			protected function doSave():void
			{
				if (currentState == "create")
				{
					//createRecord();
					this._saveButtonClicked = true;
					checkBaseProductKey();
					//checkBaseProductKeyBeforeCreate();
				}
				if (currentState == "edit")
				{
					editRecord();
				}
				if (currentState == "detail")
				{
					editRecord();
				}
			}
			
			protected function killBtn_clickHandler(event:MouseEvent):void
			{
				//interruptor=true;
				pagedRecords.interruptor=true;
				trace("WTF >>>>>>>>>>");
			}
			
			protected function resumeBtn_clickHandler(event:MouseEvent):void
			{
				//interruptor=false;
				pagedRecords.interruptor=false;
				
				this.resumeLoadingPages();
				trace("RESUME >>>>>>>>>>");
			}
			
			protected function resumeLoadingPages():void
			{
				killBtn.setStyle("chromeColor","0xff0000");
				this.killBtn.includeInLayout=true;
				this.killBtn.visible = true;
				this.killBtn.enabled = true;
				
				resumeBtn.setStyle("chromeColor","0x00ff00");
				this.resumeBtn.includeInLayout=true;
				this.resumeBtn.visible = true;
				this.resumeBtn.enabled = false;
				
				this.btn_create.enabled = false
				this.btn_export.enabled = false;
				this.dataGrid.enabled = false;
				this.toolbar.enabled = false;
				
				//pb.values(pagedRecords.length,totalLength);
				pb.values(pagedRecords.length,pagedRecords.totalLength);
				//currentPage = int(this.pagedRecords.length/currentPageSize) + 1;
				//this.pagedRecords.service( currentFields, currentTypes, currentSorts, currentOrders, currentPage, currentPageSize );
				this.pagedRecords.listService( currentFields, currentTypes, currentSorts, currentOrders );
			}
			
			protected function base_ref_temp_spec_changeHandler(event:IndexChangeEvent):void
			{
				// TODO Auto-generated method stub
//				if ( Number(this.base_ref_temp.text) == 0 && this.base_ref_tunt.selectedIndex<0 )
				{
					if ( this.base_ref_temp_spec.selectedIndex == 0 )
					{
						this.base_ref_temp.text = String(this.refTempC);
						this.base_ref_tunt.selectedIndex = 0;
					}
					else if ( this.base_ref_temp_spec.selectedIndex == 1 )
					{
						this.base_ref_temp.text = '15';
						this.base_ref_tunt.selectedIndex = 0;
					}
					else if ( this.base_ref_temp_spec.selectedIndex == 2 )
					{
						this.base_ref_temp.text = '60';
						this.base_ref_tunt.selectedIndex = 1;
					}
					else
					{
						this.base_ref_temp.text = String(this.refTempC);
						this.base_ref_tunt.selectedIndex = 0;
					}
				}
			}
			
			protected function base_cat_changeHandler(event:IndexChangeEvent):void
			{
				/*
				, bs.BCLASS_DENS_LO
				, bs.BCLASS_DENS_HI

				*/
				// TODO Auto-generated method stub
				if( this.base_cat.selectedIndex >= 0 )
				{
					//this.tank_density.enabled = true;
					this.class_density_range.visible = true;
					this.class_density_range.text = "[" + this.base_cat.selectedItem.bclass_dens_lo + " - " + this.base_cat.selectedItem.bclass_dens_hi + "] " + resourceManager.getString('default','UNIT__DENSITY');
					this.base_dens_lo.text = this.base_cat.selectedItem.bclass_dens_lo;
					this.base_dens_hi.text = this.base_cat.selectedItem.bclass_dens_hi;
				}
				else
				{
					//this.tank_density.enabled = false;
					this.class_density_range.visible = false;
					this.class_density_range.text = "";
					this.base_dens_lo.text = "";
					this.base_dens_hi.text = "";
				}
				
			}
			
			protected function checkDensityRange():void
			{
				if ( this.fld__base_dens_lo__base_dens_hi.visible == false )
				{
					return;
				}
				
				var cls_dens_lo:Number = 0;
				var cls_dens_hi:Number = 2000;
				if ( base_cat.selectedIndex > -1 )
				{
					cls_dens_lo = baseProductClassList[base_cat.selectedIndex].bclass_dens_lo;
					cls_dens_hi = baseProductClassList[base_cat.selectedIndex].bclass_dens_hi;
				}
				
				var dens_lo_digital:Boolean = tools.isValueNumeric( this.base_dens_lo.text );
				var dens_hi_digital:Boolean = tools.isValueNumeric( this.base_dens_hi.text );
				var dens_lo:Number = Number(this.base_dens_lo.text);
				var dens_hi:Number = Number(this.base_dens_hi.text);
				var dens_lo_filled:Boolean = StringUtil.trim(this.base_dens_lo.text).length>0?true:false;
				var dens_hi_filled:Boolean = StringUtil.trim(this.base_dens_hi.text).length>0?true:false;
				var msg:String="";
				
				if ( dens_lo_filled && (!dens_lo_digital || dens_lo < 0) )
				{
					msg += resourceManager.getString('default','ALERT__BASE_DENSITY_LO_ERRTYPE') + "\n";
				}
				if ( dens_hi_filled && (!dens_hi_digital || dens_hi < 0) )
				{
					msg += resourceManager.getString('default','ALERT__BASE_DENSITY_HI_ERRTYPE') + "\n";
				}
				
				if ( dens_lo_filled && dens_lo_digital && (!( dens_lo >= cls_dens_lo && dens_lo <= cls_dens_hi )) )
				{
					msg += resourceManager.getString('default','ALERT__BASE_DENSITY_LO_OUTLIMIT') + "\n";
				}
					
				if ( dens_hi_filled && dens_hi_digital && (!( dens_hi >= cls_dens_lo && dens_hi <= cls_dens_hi )) )
				{
					msg += resourceManager.getString('default','ALERT__BASE_DENSITY_HI_OUTLIMIT') + "\n";
				}
				
				if ( dens_lo_filled && dens_lo_digital && dens_hi_filled && dens_hi_digital && (dens_lo > dens_hi) )
				{
					msg += resourceManager.getString('default','ALERT__BASE_DENSITY_OUTORDER') + "\n";
				}
				
				if ( msg.length > 0 )
				{
					global.msgWarning( msg );
				}
				
			}
			
			protected function base_density_changeHandler(event:TextOperationEvent):void
			{
				// TODO Auto-generated method stub
				//checkDensityRange();
			}
			
			protected function base_density_focusOutHandler(event:FocusEvent):void
			{
				// TODO Auto-generated method stub
				//checkDensityRange();
			}
			
			protected function base_density_keyUpHandler(event:KeyboardEvent):void
			{
				
				if( StringUtil.trim( this.base_dens_lo.text ).length > 0 )
				{
					this.base_dens_lo.required = true;
				}
				else
				{
					this.base_dens_lo.required = false;
				}
				if( StringUtil.trim( this.base_dens_hi.text ).length > 0 )
				{
					this.base_dens_hi.required = true;
				}
				else
				{
					this.base_dens_hi.required = false;
				}
				
				var keyCode:uint = 0;
				if (event == null)
				{
					keyCode=0;
				}
				else
				{
					keyCode=event.keyCode;
				}
				
				if ( keyCode == 13 )
				{
					//checkDensityRange();
				}
			}
			
			protected function base_color_closeHandler(event:DropdownEvent):void
			{
				// TODO Auto-generated method stub
				//global.msgWarning( this.base_color.selectedColor );
				this.base_color.text = this.base_color2.selectedColor;
			}
			
			protected function base_color_changeHandler(event:TextOperationEvent):void
			{
				// TODO Auto-generated method stub
				this.base_color2.selectedColor = this.base_color.text;
			}
			
		]]>
	</fx:Script>
	<fx:Declarations>
		<s:DateTimeFormatter id="dateFormatter" locale="{LocaleID.DEFAULT}" dateStyle="short" timeStyle="none"/>
		<s:DateTimeFormatter id="dateConvert" dateTimePattern="yyyy-MM-dd"/>
		<s:DateTimeFormatter id="dateConvertLong" dateTimePattern="yyyy-MM-dd HH:mm:ss"/>
		<components:ValidationGroup id="vg" action="{save_clickHandler}" defaultButton="{btn_save}" isProtected="{hasPassword}"/>
	</fx:Declarations>
	<s:Panel id="panel" width="100%" height="100%"
			 skinClass="skins.WidgetPanelSkin"
			 skinClass.widget="skins.NullSkin">
		<s:layout>
			<s:VerticalLayout/>
		</s:layout>
		<s:VGroup width="100%" id="toolbar"  >
			<s:HGroup gap="5" paddingBottom="2" paddingTop="2" width="100%">
				<components:DKI_ValidatorInput id="fltr_product" validationType="search" minWidth="160" height="{labelHeight}" width="100%"
											   keyUp="fltr_product_keyUpHandler(event)"  
											   prompt="{resourceManager.getString('default','BASEPROD_TEXT')+resourceManager.getString('default','FILTER')}"/>
				
				<components:DKI_DropDownList id="fltr_prodclass" width="200" height="100%"
												change="fltr_prodclass_changeHandler(event)" cornerRadius="10"
												labelField="bclass_desc" prompt="{resourceManager.getString('default','BASEPROD_CLASS_DESC')+resourceManager.getString('default','FILTER')}"
												visible.widget="false" excludeFrom="widget" dataProvider="{baseProductClassList}"/>
				<components:DKI_DropDownList id="fltr_prodgroup" width="200" height="100%"
											 change="fltr_prodgroup_changeHandler(event)" cornerRadius="10"
											 labelField="pgr_text" prompt="{resourceManager.getString('default','BASEPROD_GROUP_NAME')+resourceManager.getString('default','FILTER')}"
											 visible.widget="false" excludeFrom="widget" dataProvider="{baseProductGroupList}"/>
				
				<s:Spacer width="100%"/>
				<components:DKI_Button id="filterBtn" height="24" noLabel="false" click="filterRecords(event)"
									   type="filteron"/>
				<components:DKI_Button id="resetBtn" height="24" noLabel="false" click="refreshRecords(event)"
									   type="filteroff"/>
				<components:DKI_Button id="btn_export" label="{resourceManager.getString('default','EXPORTDATA')}" type="report" click="exportCsvHandler(event)" includeIn="normal"/>
				<components:DKI_Button id="btn_create" label="{resourceManager.getString('default','CREATE')}" height="24" click="createNewRecord(event)" includeIn="normal" enabled="{this.canCreate}" type="create"/>	
			</s:HGroup>
		</s:VGroup>
			
		
		<s:DataGrid id="dataGrid" width="100%" height="100%" requestedRowCount="4"
					selectionChange="dataGrid_selectionChangeHandler(event)"
					skinClass="skins.DKI_DataGrid_Skin"
					height.widget="100%">
			<s:columns>
				<s:ArrayList>
					<s:source>
						<s:GridColumn dataField="base_code" headerText="{resourceManager.getString('default','BASEPROD_CODE')}" visible="true" width="150"></s:GridColumn>
						<s:GridColumn dataField="base_name" headerText="{resourceManager.getString('default','BASEPROD_NAME')}" visible="true" width="200"></s:GridColumn>
						<s:GridColumn dataField="base_color" headerText="{resourceManager.getString('default','BASEPROD_COLOR')}" visible="true" width="200" itemRenderer="renderers.ColorRectRenderer"></s:GridColumn>
						<s:GridColumn dataField="base_cat" headerText="{resourceManager.getString('default','BASEPROD_CAT')}" visible="true" width="150"></s:GridColumn>
						<s:GridColumn dataField="base_class_desc" headerText="{resourceManager.getString('default','BASEPROD_CLASS_DESC')}" visible="true" width="250"></s:GridColumn>
						<s:GridColumn dataField="base_prod_group" headerText="{resourceManager.getString('default','BASEPROD_PROD_GROUP')}" visible="true" width="200"></s:GridColumn>
						<s:GridColumn dataField="base_group_name" headerText="{resourceManager.getString('default','BASEPROD_GROUP_NAME')}" visible="true" width="250"></s:GridColumn>
						<s:GridColumn dataField="base_rpt_tunt" headerText="{resourceManager.getString('default','BASEPROD_RPT_TUNT')}" visible="false" width="100"></s:GridColumn>
						<s:GridColumn dataField="base_rpt_temp" headerText="{resourceManager.getString('default','BASEPROD_RPT_TEMP')}" visible="false" width="100"></s:GridColumn>
						<s:GridColumn dataField="base_dens_lo" headerText="{resourceManager.getString('default','BASEPROD_DENS_LO')+' ['+resourceManager.getString('default','UNIT__DENSITY')+']'}" visible="true" width="210"></s:GridColumn>
						<s:GridColumn dataField="base_dens_hi" headerText="{resourceManager.getString('default','BASEPROD_DENS_HI')+' ['+resourceManager.getString('default','UNIT__DENSITY')+']'}" visible="true" width="210"></s:GridColumn>
						<s:GridColumn dataField="base_adtv" headerText="{resourceManager.getString('default','BASEPROD_ADTV')}" visible="true" itemRenderer="renderers.GridCheckRender" width="100"></s:GridColumn>
						<s:GridColumn dataField="base_text" headerText="{resourceManager.getString('default','BASEPROD_TEXT')}" visible="false" width="240"></s:GridColumn>
						<s:GridColumn dataField="base_desc" headerText="{resourceManager.getString('default','BASEPROD_DESC')}" visible="false" width="240"></s:GridColumn>
						<s:GridColumn dataField="base_tank_count" headerText="{resourceManager.getString('default','BASEPROD_TANK_COUNT')}" visible="true" width="150"></s:GridColumn>
						<s:GridColumn dataField="base_tank_list" headerText="{resourceManager.getString('default','BASEPROD_TANK_LIST')}" visible="true" width="200"></s:GridColumn>
						<s:GridColumn dataField="base_class_dens_lo" headerText="{resourceManager.getString('default','BASEPROD_CLASS_DENS_LO')+' ['+resourceManager.getString('default','UNIT__DENSITY')+']'}" visible="true" width="240"></s:GridColumn>
						<s:GridColumn dataField="base_class_dens_hi" headerText="{resourceManager.getString('default','BASEPROD_CLASS_DENS_HI')+' ['+resourceManager.getString('default','UNIT__DENSITY')+']'}" visible="true" width="240"></s:GridColumn>
						<s:GridColumn dataField="base_class_vcf_alg" headerText="{resourceManager.getString('default','BASEPROD_CLASS_VCF_ALG')}" visible="false" width="100"></s:GridColumn>
						<s:GridColumn dataField="base_class_temp_lo" headerText="{resourceManager.getString('default','BASEPROD_CLASS_TEMP_LO')+' ['+resourceManager.getString('default','UNIT__TEMP_C')+']'}" visible="true" width="240"></s:GridColumn>
						<s:GridColumn dataField="base_class_temp_hi" headerText="{resourceManager.getString('default','BASEPROD_CLASS_TEMP_HI')+' ['+resourceManager.getString('default','UNIT__TEMP_C')+']'}" visible="true" width="240"></s:GridColumn>
						<s:GridColumn dataField="base_ref_temp" headerText="{resourceManager.getString('default','BASEPROD_REF_TEMP')}" visible="false" width="150"></s:GridColumn>
						<s:GridColumn dataField="base_ref_tunt" headerText="{resourceManager.getString('default','BASEPROD_REF_TUNT')}" visible="false" width="150"></s:GridColumn>
						<s:GridColumn dataField="base_ref_tunt_name" headerText="{resourceManager.getString('default','BASEPROD_REF_TUNT')}" visible="false" width="100"></s:GridColumn>
						<s:GridColumn dataField="base_corr_mthd" headerText="{resourceManager.getString('default','BASE_CORR_MTHD')}" visible="false" width="150"></s:GridColumn>
						<s:GridColumn dataField="base_corr_mthd_name" headerText="{resourceManager.getString('default','BASE_CORR_MTHD')}" visible="true" width="150"></s:GridColumn>
						<s:GridColumn dataField="base_ref_temp_spec" headerText="{resourceManager.getString('default','BASE_REF_TEMP_SPEC')}" visible="false" width="150"></s:GridColumn>
						<s:GridColumn dataField="base_ref_temp_spec_name" headerText="{resourceManager.getString('default','BASE_REF_TEMP_SPEC')}" visible="true" width="150"></s:GridColumn>
						<s:GridColumn dataField="base_limit_preset_ht" headerText="{resourceManager.getString('default','BASE_LIMIT_PRESET_HT')}" visible="{this.isHotVolumeCheckEnabled}" itemRenderer="renderers.GridCheckRender" width="100"></s:GridColumn>
					</s:source>
				</s:ArrayList>
			</s:columns>
			<s:dataProvider>
				<!--s:AsyncListView id="pgList" list="{getPagedResult.lastResult}"/-->
				<s:AsyncListView id="pgList" list="{pagedRecords}"/>
			</s:dataProvider>
		</s:DataGrid>
		<s:HGroup width="100%">
			<components:Downloader id="pb" width="100%" height="18"/>
			<!--mx:ProgressBar id="pb" width="100%" height="22" visible="false" includeInLayout="false"  mode="manual" source="{this.pgList}" label="{this.currentLength} records shown from {this.currentLength} loaded out of {this.totalLength} found." labelPlacement="center"/-->
			<s:Button id="killBtn" width="18" height="18" label="" cornerRadius="12" visible="false" includeInLayout="false"
					  click="killBtn_clickHandler(event)"/>
			<s:Button id="resumeBtn" width="18" height="18" label="" cornerRadius="12" visible="false" includeInLayout="false"
					  click="resumeBtn_clickHandler(event)"/>
		</s:HGroup>
	</s:Panel>
	
	<s:Panel id="details" includeIn="edit,create,detail" width="100%" height="280"
			 itemCreationPolicy="immediate" skinClass="skins.WidgetPanelSkin">
		<s:layout>
			<s:VerticalLayout/>
			<!--s:TileLayout/-->
		</s:layout>
		
		<s:Spacer height="5"/>
		<s:VGroup width="100%">
			<s:HGroup width="100%">
				<s:HGroup id="fld__base_code">
					<s:Label width="{labelWidth}" height="{labelHeight}" text="{resourceManager.getString('default','BASEPROD_CODE')}" verticalAlign="middle"/>
					<components:DKI_ValidatorInput id="base_code" maxChars="10" 
												   width="{fieldWidth}" height="{fieldHeight}" 
												   text="{dataGrid.selectedItem.base_code}" editable="false" enabled="false" 
												   text.create="" editable.create="true" enabled.create="true" focusOut="checkBaseProductKey()" 
												   required="true" validationType="alphanumeric" validationGroup="{vg}" automationName="{resourceManager.getString('default','BASEPROD_CODE')}" 
												   />
				</s:HGroup>
				
				<s:HGroup id="fld__base_limit_preset_ht" visible="{this.isHotVolumeCheckEnabled}" includeInLayout="{this.isHotVolumeCheckEnabled}">
					<s:Spacer width="{spaceWidth}" />
					
					<s:Label width="{labelWidth}" height="16" text="" verticalAlign="middle"/>
					<s:CheckBox id="base_limit_preset_ht" 
								label="{resourceManager.getString('default','BASE_LIMIT_PRESET_HT2')}" fontWeight="bold" 
								selected="{dataGrid.selectedItem.base_limit_preset_ht>0?true:false}" selected.create="false" 
								enabled="false" enabled.edit="{this.isHotVolumeCheckEnabled}" enabled.create="{this.isHotVolumeCheckEnabled}" 
								/>
					
				</s:HGroup>
				
			</s:HGroup>
			
			<s:Spacer height="{this.spaceHeight}" />
			
			<s:HGroup>
				<s:HGroup id="fld__base_name">
					<s:Label width="{labelWidth}" height="{labelHeight}" text="{resourceManager.getString('default','BASEPROD_NAME')}" verticalAlign="middle"/>
					<components:DKI_ValidatorInput id="base_name" maxChars="20" 
												   width="{fieldWidth}" height="{fieldHeight}" 
												   text="{dataGrid.selectedItem.base_name}" editable="false" enabled="false" editable.edit="true" enabled.edit="true"  
												   text.create="" editable.create="true" enabled.create="true" 
												   required="true" validationType="document" validationGroup="{vg}" automationName="{resourceManager.getString('default','BASEPROD_NAME')}" 
												   />
				</s:HGroup>
				
				<s:HGroup id="fld__base_ref_temp_spec">
					<s:Spacer width="{spaceWidth}" />
					
					<s:Label width="{labelWidth}" height="{labelHeight}" text="{resourceManager.getString('default','BASE_REF_TEMP_SPEC')}" verticalAlign="middle"/>
					<components:DKI_ValidatorComboBox id="base_ref_temp_spec" 
													  dataProvider="{this.refTempSpecList}" 
													  labelField="ref_temp_spec_name" 
													  selectedItem="{dataGrid.selectedItem.base_ref_temp_spec_name}" enabled="true" 
													  selectedItem.create="" selectedIndex.create="0" enabled.create="true" 
													  width="{fieldWidth}" height="{fieldHeight}" change="base_ref_temp_spec_changeHandler(event)" 
													  prompt="{resourceManager.getString('default','SELECT')+resourceManager.getString('default','BASE_REF_TEMP_SPEC')}"
													  required="false" validationGroup="{vg}" automationName="{resourceManager.getString('default','BASE_REF_TEMP_SPEC')}" 
													  />
				</s:HGroup>
				
				<s:HGroup visible="false" includeInLayout="false">
					<s:Label width="{labelWidth}" height="{labelHeight}" text="{resourceManager.getString('default','BASEPROD_REF_TEMP')}" verticalAlign="middle"/>
					<components:DKI_ValidatorInput id="base_ref_temp"  
												   width="{fieldWidth/2-6}" height="{fieldHeight}" 
												   text="{dataGrid.selectedItem.base_ref_temp}" editable="false" enabled="false" editable.edit="true" enabled.edit="true"  
												   text.create="{this.refTempC}" editable.create="true" enabled.create="true" 
												   required="false" validationType="numeric" validationGroup="{vg}" automationName="{resourceManager.getString('default','BASEPROD_REF_TEMP')}" 
												   />
					<!--<s:Label width="{labelWidth}" height="{labelHeight}" text="{resourceManager.getString('default','BASEPROD_REF_TUNT')}" verticalAlign="middle"/>-->
					<components:DKI_ValidatorComboBox id="base_ref_tunt" 
													  dataProvider="{this.temperatureUnitList}" 
													  labelField="unit_name" 
													  selectedItem="{dataGrid.selectedItem.base_ref_tunt_name}" enabled="true" 
													  selectedItem.create="" selectedIndex.create="0" enabled.create="true" 
													  width="{fieldWidth/2}" height="{fieldHeight}" 
													  prompt="{resourceManager.getString('default','SELECT')+resourceManager.getString('default','BASEPROD_REF_TUNT')}"
													  required="false" validationGroup="{vg}" automationName="{resourceManager.getString('default','BASEPROD_REF_TUNT')}" 
													  />
				</s:HGroup>
				
			</s:HGroup>
			
			<s:Spacer height="{this.spaceHeight}" />
			
			<s:HGroup>
				<s:HGroup id="fld__base_cat">
					<s:Label width="{labelWidth}" height="{labelHeight}" text="{resourceManager.getString('default','BASEPROD_CLASS_DESC')}" verticalAlign="middle"/>
					<components:DKI_ValidatorComboBox id="base_cat" 
													  dataProvider="{baseProductClassList}" change="base_cat_changeHandler(event)" 
													  labelField="bclass_desc" 
													  selectedItem="{dataGrid.selectedItem.base_class_desc}" enabled="true" 
													  selectedItem.create="" selectedIndex.create="-1" enabled.create="true" 
													  width="{fieldWidth}" height="{fieldHeight}" 
													  prompt="{resourceManager.getString('default','SELECT')+resourceManager.getString('default','BASEPROD_CLASS_DESC')}"
													  required="true" validationGroup="{vg}" automationName="{resourceManager.getString('default','BASEPROD_CLASS_DESC')}" 
													  />
				</s:HGroup>
				
				<s:HGroup id="fld__base_dens_lo__base_dens_hi">
					<s:Spacer width="{spaceWidth}" />
					
					<s:Label width="{labelWidth}" height="{labelHeight}" text="{resourceManager.getString('default','BASEPROD_DENS_RANGE')}" verticalAlign="middle"/>
					<components:DKI_ValidatorInput id="base_dens_lo"  
												   width="{fieldWidth/2-6}" height="{fieldHeight}" toolTip="{resourceManager.getString('default','BASEPROD_DENS_LO')}" 
												   text="{dataGrid.selectedItem.base_dens_lo}" editable="false" enabled="false" editable.edit="true" enabled.edit="true"  
												   text.create="" editable.create="true" enabled.create="true" keyUp="base_density_keyUpHandler(event)" focusOut="base_density_focusOutHandler(event)" 
												   required="false" validationType="numeric_non_negative" validationGroup="{vg}" automationName="{resourceManager.getString('default','BASEPROD_DENS_LO')}" 
												   />
					<components:DKI_ValidatorInput id="base_dens_hi"  
												   width="{fieldWidth/2-6}" height="{fieldHeight}" toolTip="{resourceManager.getString('default','BASEPROD_DENS_HI')}" 
												   text="{dataGrid.selectedItem.base_dens_hi}" editable="false" enabled="false" editable.edit="true" enabled.edit="true"  
												   text.create="" editable.create="true" enabled.create="true" keyUp="base_density_keyUpHandler(event)" focusOut="base_density_focusOutHandler(event)" 
												   required="false" validationType="numeric_non_negative" validationGroup="{vg}" automationName="{resourceManager.getString('default','BASEPROD_DENS_HI')}" 
												   />
					<s:Label id="class_density_range" height="{fieldHeight}" text="" visible="{this.base_cat.selectedIndex>=0}" verticalAlign="middle"/>
				</s:HGroup>
				
			</s:HGroup>
			
			<s:Spacer height="{this.spaceHeight}" />
			
			<s:HGroup>
				<s:HGroup id="fld__base_prod_group">
					<s:Label width="{labelWidth}" height="{labelHeight}" text="{resourceManager.getString('default','BASEPROD_GROUP_NAME')}" verticalAlign="middle"/>
					<components:DKI_ValidatorComboBox id="base_prod_group" 
													  dataProvider="{baseProductGroupList}" 
													  labelField="pgr_text" 
													  selectedItem="{dataGrid.selectedItem.base_prod_group + ' - ' + dataGrid.selectedItem.base_group_name}" enabled="true" 
													  selectedItem.create="" selectedIndex.create="-1" enabled.create="true" 
													  width="{fieldWidth}" height="{fieldHeight}" 
													  prompt="{resourceManager.getString('default','SELECT')+resourceManager.getString('default','BASEPROD_GROUP_NAME')}"
													  required="false" validationGroup="{vg}" automationName="{resourceManager.getString('default','BASEPROD_GROUP_NAME')}" 
													  />
				</s:HGroup>
				
				<s:HGroup id="fld__base_corr_mthd">
					<s:Spacer width="{spaceWidth}" />
					
					<s:Label width="{labelWidth}" height="{labelHeight}" text="{resourceManager.getString('default','BASE_CORR_MTHD')}" verticalAlign="middle"/>
					<components:DKI_ValidatorComboBox id="base_corr_mthd" 
													  dataProvider="{this.correctionMethodList}" 
													  labelField="compensation_name" 
													  selectedItem="{dataGrid.selectedItem.base_corr_mthd_name}" enabled="true" 
													  selectedItem.create="" selectedIndex.create="-1" enabled.create="true" 
													  width="{fieldWidth}" height="{fieldHeight}" 
													  prompt="{resourceManager.getString('default','SELECT')+resourceManager.getString('default','BASE_CORR_MTHD')}"
													  required="false" validationGroup="{vg}" automationName="{resourceManager.getString('default','BASE_CORR_MTHD')}" 
													  />
				</s:HGroup>
				
			</s:HGroup>
			
			<s:Spacer height="{this.spaceHeight}" />
			
			<s:HGroup>
				
				<s:HGroup id="fld__base_color">
					<s:Label width="{labelWidth}" height="{labelHeight}" text="{resourceManager.getString('default','BASEPROD_COLOR')}" verticalAlign="middle"/>
					<components:DKI_ValidatorInput id="base_color" maxChars="32" 
												   width="{fieldWidth/2-6}" height="{fieldHeight}" 
												   text="{dataGrid.selectedItem.base_color}" editable="true" enabled="true" change="base_color_changeHandler(event)" 
												   required="false" validationType="color_value" validationGroup="{vg}" automationName="{resourceManager.getString('default','BASEPROD_COLOR')}" 
												   />
					<components:ColorChooser id="base_color2" width="{fieldWidth/2-6}" height="24" close="base_color_closeHandler(event)"/>
				</s:HGroup>
				
			</s:HGroup>
			
			
			<s:Spacer height="5" />
			
		</s:VGroup>
		
		<s:Spacer height="0" />
		
		<s:HGroup width="100%" paddingBottom="4" paddingTop="0" gap="5">
<!--			<components:DKI_Button id="btnGenericProduct" label="{resourceManager.getString('default','m_genericproducts')}" height="100%" includeIn="create,edit,detail" type="default" visible="true" enabled="{this.canUpdate}" includeInLayout="true" click="goToGenericProducts();"/>
-->			
			<s:Spacer width="100%"/>
			<components:DKI_Button id="btn_delete" label="{resourceManager.getString('default','DELETE')}" height="100%" click="doDelete()" includeIn="edit" enabled="{this.canDelete}" type="delete"/>
			<components:DKI_Button id="btn_save" label.create="{resourceManager.getString('default','SAVE')}" label="{resourceManager.getString('default','UPDATE')}" height="100%" includeIn="edit,create,detail" 
								   enabled.create="{this.canCreate}" enabled="{this.canUpdate}" type.create="create" type="edit" focusEnabled="true" focusEnabled.create="false"/>
			<components:DKI_Button id="btn_cancel" label="{resourceManager.getString('default','CANCEL')}" height="100%" click="cancel_clickHandler()" enabled="true" type="cancel" focusEnabled="true" focusEnabled.create="false"/>
		</s:HGroup>
	</s:Panel>
	
</s:VGroup>
