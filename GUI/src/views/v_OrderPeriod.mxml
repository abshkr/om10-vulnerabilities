<?xml version="1.0" encoding="utf-8"?>
<s:VGroup xmlns:fx="http://ns.adobe.com/mxml/2009"
		  xmlns:s="library://ns.adobe.com/flex/spark"
		  xmlns:mx="library://ns.adobe.com/flex/mx"
		  xmlns:components="components.*"
		  creationComplete="creationCompleteHandler(event)"
		  gap="2" width="100%" height="100%">
	
	<s:states>
		<s:State name="normal"/>
		<s:State name="widget"/>
		<s:State name="edit" enterState="
				 callLater(function():void{dataGrid.ensureCellIsVisible(dataGrid.selectedIndex);});"/>
		<s:State name="create"/>
		<s:State name="detail" enterState="view_detailsHandler(event)"/>
	</s:states>
	
	<fx:Script>
		<![CDATA[
			import com.adobe.fiber.runtime.lib.DateTimeFunc;
			
			import components.ActionDialog;
			import components.ApproveDialog;
			import components.ConfirmDialog;
			import components.DKI_AlertBox;
			import components.DeleteDialog;
			import components.ExportData;
			import components.MessageDialog;
			import components.TransactionsDlg;
			import components.ViewPopupDlg;
			
			import dm.remoteDataService;
			import dm.remoteListService;
			import dm.utils.tools;
			
			import flash.events.KeyboardEvent;
			import flash.globalization.LocaleID;
			
			import mx.collections.ArrayCollection;
			import mx.controls.Alert;
			import mx.controls.DateField;
			import mx.events.FlexEvent;
			import mx.rpc.events.FaultEvent;
			import mx.rpc.events.ResultEvent;
			import mx.rpc.http.HTTPService;
			import mx.utils.ObjectUtil;
			import mx.utils.StringUtil;
			
			import renderers.DKI_HeaderColumn_Renderer;
			
			import spark.components.ToggleButton;
			import spark.components.VScrollBar;
			import spark.components.gridClasses.IGridItemRenderer;
			import spark.events.GridEvent;
			import spark.events.GridSelectionEvent;
			import spark.events.IndexChangeEvent;
			
			/* 			import valueObjects.GUI_ORDERS;
			import valueObjects.GUI_ORDER_ITEMS;
			import valueObjects.GUI_ORDER_PERIODS;
			*/
			public static const MAIN_WINDOW_WIDTH:int = 1500;
			
			[Bindable] public var readOnly:Boolean = false;
			[Bindable] public var canUpdate:Boolean = false;
			[Bindable] public var canCreate:Boolean = false;
			[Bindable] public var canDelete:Boolean = false;
			[Bindable] public var hasPassword:Boolean = false;
			
			[Bindable] public var labelWidth:uint = 80;
			[Bindable] public var labelHeight:uint = 26;
			[Bindable] public var fieldWidth:uint = 185;
			[Bindable] public var fieldHeight:uint = 26;
			[Bindable] public var spaceWidth:uint = 15;
			[Bindable] public var spaceHeight:uint = 2;
			
			private var idx:int=-1;
			
			private var currentFilter:String=null;
			private var currentOrder:String='oprd_cust_no';
			private var currentDirection:String="ASC";
			
			private var currentOffset:int=0;
			private var currentPageSize:int=1000;
			[Bindable] private var totalLength:int=0;
			[Bindable] private var currentLength:int=0;
			
			private var currentFields:Object=new Object();
			private var currentTypes:Object=new Object();
			private var currentSorts:Object=new Object();
			private var currentOrders:Object=new Object();
			private var currentSortSeq:int=0;
			
			private var confirmDelete:DKI_AlertBox;
			
			
			private var confirmReport:ActionDialog;
			
			//private var exportContents:String="";
			private var f:FileReference = new FileReference();
			
			
			[Bindable] private var pagedRecords:remoteListService;
			
			
			private var deleteAction:remoteDataService = new remoteDataService( "OrderPeriodService.delete", null, deleteData_resultHandler, 1 );
			private var createAction:remoteDataService = new remoteDataService( "OrderPeriodService.create", null, createData_resultHandler, 1 );
			private var updateAction:remoteDataService = new remoteDataService( "OrderPeriodService.update", null, updateData_resultHandler, 1 );
			
			private var orderItemPeriodNumberMaker:remoteDataService = new remoteDataService( "OrderPeriodService.getNextOrderItemPeriodNumber", null, getNextOrderItemPeriodNumber_resultHandler, 1 );
			
			[Bindable] private var customerList:remoteDataService = new remoteDataService( "ListLibraryService.lookupCustomer", null, lookupCustomer_resultHandler );
			[Bindable] private var supplierList:remoteDataService = new remoteDataService( "ListLibraryService.lookupCompany", null, lookupSupplier_resultHandler );
			[Bindable] private var productUnitList:remoteDataService = new remoteDataService( "ListLibraryService.lookupProductUnit", null, lookupProductUnit_resultHandler );
			[Bindable] private var productList:remoteDataService = new remoteDataService( "ListLibraryService.lookupProduct", null, lookupProduct_resultHandler );
			[Bindable] private var orderList:remoteDataService = new remoteDataService( "ListLibraryService.lookupOrderDetails", null, lookupOrderDetails_resultHandler );
			
			[Bindable] private var statusTypeList:remoteDataService = new remoteDataService( "ListLibraryService.lookupOrderStatusType", null, null );
			
			
			
			public var parentParams:Object = new Object();
			
			/*
			6 - ORD_EXPIRED: order expired
			0 - ORD_NEW: new order
			5 - ORD_COMPLETED: fully delivered  !!!
			8 - ORD_PARTIALLY_COMPLETED: fully loaded but partially delivered !!!
			3 - ORD_DELIVERY: fully loaded but not delivered yet  !!!
			1 - ORD_FILLING: partially scheduled
			7 - ORD_PARTIALLY_DELIVERY: partially loaded but not all loaded
			2 - ORD_SCHEDULED: fully scheduled
			4 - ORD_OUTSTANDING : other status
			*/
			public static const ORDER_STATUS__NEW:int = 0;
			public static const ORDER_STATUS__FILLING:int = 1;
			public static const ORDER_STATUS__SCHEDULED:int = 2;
			public static const ORDER_STATUS__DELIVERY:int = 3;
			public static const ORDER_STATUS__OUTSTANDING:int = 4;
			public static const ORDER_STATUS__COMPLETED:int = 5;
			public static const ORDER_STATUS__EXPIRED:int = 6;
			public static const ORDER_STATUS__PARTIALLY_DELIVERY:int = 7;
			public static const ORDER_STATUS__PARTIALLY_COMPLETED:int = 8;
			
			//private var genData:ExportData = new ExportData();
			
			public var mainListSelection:int = -1;
			
			
			
			protected function creationCompleteHandler(event:FlexEvent):void
			{
				trace ("-------------start creationCompleteHandler");
				pagedRecords = new remoteListService( this.dataGrid, "OrderPeriodService.getPaged", null, getPageData_resultHandler );
				//resourceManager.localeChain = ['zh_CN'];
				//global.LanguageCode="CHN";
				
				//this.startFiltering();
				//this.startLoadingPages();
				
				this.customerList.service( "-1" );
				this.supplierList.service( 1 );
				this.productList.service( "-1" );
				this.statusTypeList.service( );
				this.productUnitList.service( );
				
				trace ("------------End creationCompleteHandler");
				
				//trace("this.grid.scroller1111", this.dataGrid.scroller);
				//trace("this.grid.scroller.verticalScrollBar.value", this.dataGrid.scroller.verticalScrollBar.value);
				this.dataGrid.scroller.verticalScrollBar.addEventListener(Event.CHANGE, verticalScrollBarChanged);
				this.dataGrid.addEventListener(KeyboardEvent.KEY_UP, reportKeyUp);
				this.dataGrid.columnHeaderGroup.addEventListener(GridEvent.GRID_CLICK, headerClickListener);
			}
			
			
			
			private function getNextOrderItemPeriodNumber_resultHandler( ):void
			{
				if ( currentState != "create" )
				{
					return;
				}
				
				if ( orderItemPeriodNumberMaker.dataString == "ERROR" )
				{
					oprd_period_no.text = "";
				}
				else
				{
					oprd_period_no.text = orderItemPeriodNumberMaker.dataString;
				}
				
			}
			
			private function lookupProduct_resultHandler( ):void
			{
				if ( currentFields.hasOwnProperty( "oprd_prod_code" ) )
				{
					this.fltr_product.selectedIndex = tools.getItemIndexFromCode( currentFields["oprd_prod_code"], productList, "prod_code");
				}
				
			}
			
			private function lookupOrderDetails_resultHandler( ):void
			{
				
				if ( orderList.length > 0 )
				{
					this.fltr_supplier.selectedIndex = tools.getItemIndexFromCode( orderList.source[0].order_supp_code, supplierList, "cmpy_code");
					this.fltr_customer.selectedIndex = tools.getItemIndexFromCode( orderList.source[0].order_cust_acnt, customerList, "cust_acnt");
					
					this.fltr_ordstat.text = orderList.source[0].order_stat_id;
					this.fltr_ordsysno.text = orderList.source[0].order_sys_no
					this.fltr_approved.selected = orderList.source[0].order_approved=='Y'?true:false;
					this.fltr_ordtime.text = orderList.source[0].order_ord_time;
					this.fltr_exptime.text = orderList.source[0].order_exp_time;
					
				}
				
			}
			
			private function lookupSupplier_resultHandler():void
			{
				if ( currentFields.hasOwnProperty( "oprd_supp_code" ) )
				{
					this.fltr_supplier.selectedIndex = tools.getItemIndexFromCode( currentFields["oprd_supp_code"], supplierList, "cmpy_code");
				}
			}
			
			
			protected function lookupCustomer_resultHandler():void
			{
				trace ("--------------Start lookupCustomer_resultHandler");
				
				if ( currentFields.hasOwnProperty( "oprd_cust_acnt" ) )
				{
					this.fltr_customer.selectedIndex = tools.getItemIndexFromCode( currentFields["oprd_cust_acnt"], customerList, "cust_acnt");
				}
				
				trace ("----------------End lookupOrderCustomer_resultHandler");
				
				if (currentState == "edit" || currentState == "detail")
				{
					//this.oprd_cust_acnt.selectedItem = dataGrid.selectedItem.oprd_cust_acnt + ' - ' + dataGrid.selectedItem.oprd_cust_name;
					oprd_cust_acnt.selectedIndex = tools.getItemIndexFromCode( this.dataGrid.selectedItem.oprd_cust_acnt, this.customerList, "cust_acnt");
				}
			}
			
			protected function lookupProductUnit_resultHandler( ):void
			{
				global.prodUnits = this.productUnitList;
			}
			
			
			
			protected function startLoadingPages():void
			{
				killBtn.setStyle("chromeColor","0xff0000");
				this.killBtn.includeInLayout=true;
				this.killBtn.visible = true;
				this.killBtn.enabled = true;
				
				resumeBtn.setStyle("chromeColor","0x00ff00");
				this.resumeBtn.includeInLayout=true;
				this.resumeBtn.visible = true;
				this.resumeBtn.enabled = false;
				
				this.btn_create.enabled = false
				this.btn_export.enabled = false;
				this.dataGrid.enabled = false;
				this.toolbar.enabled = false;
				//this.panel.enabled = false;
				
				currentLength=0;
				currentOffset = 0;
				
				//this.exportContents = this.genData.prepExportHeader( dataGrid );
				
				//currentPage=1;
				pagedRecords.currentPage=1;
				pagedRecords.removeAll();
				pagedRecords.refresh();
				this.pb.values(0, 0);
				//this.pagedRecords.service( currentFields, currentTypes, currentSorts, currentOrders, currentPage, currentPageSize );
				this.pagedRecords.listService( currentFields, currentTypes, currentSorts, currentOrders );
			}
			
			protected function endLoadingPages():void
			{
				this.btn_create.enabled = this.canCreate;
				this.btn_export.enabled = true;
				this.dataGrid.enabled = true;
				this.toolbar.enabled = true;
				//this.panel.enabled = true;
				//this.pb.values(totalCount, totalCount);
				this.pb.values(pagedRecords.totalCount, pagedRecords.totalCount, true);
				
				this.killBtn.includeInLayout=true;
				this.killBtn.visible = true;
				this.killBtn.enabled = false;
				
				this.resumeBtn.includeInLayout=true;
				this.resumeBtn.visible = true;
				//if ( totalLength > totalCount )
				if ( pagedRecords.totalLength > pagedRecords.totalCount )
				{
					this.resumeBtn.enabled = true;
				}
				else
				{
					this.resumeBtn.enabled = false;
				}
			}
			
			protected function exportCsvHandler(event:MouseEvent):void
			{
				this.confirmReport = new ActionDialog( doExport, cancelExport, resourceManager.getString('default','CONFIRM_REPORT_CSV') );
				
				//this.startLoadingPages();
			}
			
			private function getPageData_resultHandler( ):void
			{
				// if not finished
				if(pagedRecords.length < pagedRecords.totalCount)
				{
					pb.values(pagedRecords.length,pagedRecords.totalCount)
				}
				else
				{
					pb.values(pagedRecords.length,pagedRecords.totalCount)
					
					this.endLoadingPages();
					
					this.dataGrid.selectedIndex = this.mainListSelection;
					if ( this.mainListSelection >= 0)
					{
						this.dataGrid_selectionChangeHandler(null);
					}
					this.mainListSelection = -1;
					
				}
			}
			
			
			public function doExport():void
			{
				//genData.prepOther(dataGrid,'orderlist.csv', this.pagedRecords);
				
				f.save( pagedRecords.exportContents, "orderperiods.csv" );
				
				this.endLoadingPages();
			}
			
			
			public function cancelExport():void
			{
				this.endLoadingPages();
				
				trace( pagedRecords.exportContents );
			}
			
			
			
			private function verticalScrollBarChanged(event:Event):void
			{
				if ( this.dataGrid.scroller != null)
				{
					var vs:VScrollBar;
					vs = this.dataGrid.scroller.verticalScrollBar;
					//trace("this.grid.scroller.verticalScrollBar.value", vs.value, vs.maximum, vs.minimum, vs.stepSize, vs.pageSize, vs.	snapInterval);
				}
				else
				{
					trace("grid is changed");
				}
			}
			
			private function reportKeyUp(event:KeyboardEvent):void
			{
				if ( this.dataGrid.scroller != null)
				{
					var vs:VScrollBar;
					vs = this.dataGrid.scroller.verticalScrollBar;
					//trace("this.grid.scroller.verticalScrollBar.value", vs.value, vs.maximum, vs.minimum, vs.stepSize, vs.pageSize, vs.	snapInterval);
				}
				else
				{
					trace("grid is changed");
				}
			}
			
			private function headerClickListener(event:GridEvent):void
			{
				if(event.column.dataField!='oprd_items')
				{
					var currentRenderer:IGridItemRenderer;
					var dir:String;
					
					if ( global.sortingBySingleColumn == true )
					{	// sorted by single column only
						for (var i:int=0; i < dataGrid.columns.length; i++)
						{
							currentRenderer = dataGrid.columnHeaderGroup.getHeaderRendererAt(i);
							if ( currentRenderer != null)
							{
								(currentRenderer as DKI_HeaderColumn_Renderer).setImage('');
							}
							//(currentRenderer as DKI_HeaderColumn_Renderer).setImage(''); 
						}
					}
					else
					{	// sorted by multiple columns
						;
					}
					currentRenderer = dataGrid.columnHeaderGroup.getHeaderRendererAt(event.columnIndex);
					
					if( currentSorts.hasOwnProperty(event.column.dataField ) )
					{
						dir = currentSorts[event.column.dataField];
						if( dir=="ASC" )
						{
							dir = "DESC";
						}
						else if ( dir == "DESC" )
						{
							dir = "";
						}
						else if ( dir == "" )
						{
							dir = "ASC";
						}
						else 
						{
							dir = "ASC";
						}
						
						if ( dir != "" )
						{
							currentSorts[event.column.dataField] = dir;	
						}
						else
						{
							delete currentSorts[event.column.dataField];
							delete currentOrders[event.column.dataField];
						}
					}
					else
					{
						if ( global.sortingBySingleColumn == true )
						{	// sorted by single column only
							currentSorts = new Object();
							currentOrders = new Object();
							currentSortSeq = 0;
						}
						else
						{	// sorted by multiple columns
							;
						}
						currentSorts[event.column.dataField] = "ASC";	
						dir = currentSorts[event.column.dataField];
						currentSortSeq += 1;
						currentOrders[event.column.dataField] = currentSortSeq;	
					}
					(currentRenderer as DKI_HeaderColumn_Renderer).setImage(dir);
					this.startFiltering();
				}
			}
			
			
			protected function dataGrid_selectionChangeHandler(event:GridSelectionEvent):void
			{
				if(currentState != 'widget')
				{
					idx=dataGrid.selectedIndex;
					dataGrid.ensureCellIsVisible(idx);
					
					currentState = "edit";					
					adjustOrderEditability( dataGrid.selectedItem.oprd_approved, dataGrid.selectedItem.oprd_stat_id );
					
					//trace ("dataGrid.selectedItem.oprd_items", dataGrid.selectedItem.oprd_items);
					if ( dataGrid.selectedItem.oprd_stat_id == ORDER_STATUS__NEW && dataGrid.selectedItem.oprd_approved == 'N' )
					{
						currentState = "edit";
					}
					else
					{
						currentState = "detail";
					}
					this.btn_save.enabled = this.canUpdate;
					
					trace("time", ">>>>"+dataGrid.selectedItem.oprd_ord_time+"<<<<", ">>>>"+dataGrid.selectedItem.oprd_exp_time+"<<<<");
					
					// get selectedIndex for company list
					oprd_supp_code.selectedIndex = tools.getItemIndexFromCode( this.dataGrid.selectedItem.oprd_supp_code, this.supplierList, "cmpy_code");
					oprd_cust_acnt.selectedIndex = tools.getItemIndexFromCode( this.dataGrid.selectedItem.oprd_cust_acnt, this.customerList, "cust_acnt");
					
					// adjust status TODO
				}
			}
			
			protected function adjustOrderEditability(apprv:String, stat:int):void
			{
				if ( apprv == "N" && stat != ORDER_STATUS__EXPIRED )
				{
					oprd_prod_code.enabled = false;
					oprd_period_no.enabled = false;
					oprd_period_start.enabled = true;
					oprd_period_end.enabled = true;
					oprd_prod_unit.enabled = true;
					oprd_prod_qty.enabled = true;
				}
				else
				{
					oprd_prod_code.enabled = false;
					oprd_period_no.enabled = false;
					oprd_period_start.enabled = false;
					oprd_period_end.enabled = false;
					oprd_prod_unit.enabled = false;
					oprd_prod_qty.enabled = false;
				}
			}
			
			protected function cancel_clickHandler():void
			{
				clearDetail();
				if ( currentState== "create" )
				{
					dataGrid.enabled=true;
				}
				currentState="normal";
				dataGrid.selectedIndex = -1;
			}			
			
			protected function fltr_ordcustno_keyUpHandler(event:KeyboardEvent):void
			{
				var keyCode:int=0;
				
				if (event == null)
				{
					keyCode=0;
				}
				else
				{
					keyCode=event.keyCode;
				}
				
				if (keyCode == 13)
				{
					var supplier:String;
					
					if ( this.fltr_supplier.selectedIndex < 0 )
					{
						supplier = "-1";
					}
					else
					{
						//supplier = this.supplierList.source[fltr_supplier.selectedIndex].cmpy_code;
						supplier = this.supplierList[fltr_supplier.selectedIndex].cmpy_code;
					}
					
					this.orderList.service( supplier, this.fltr_ordcustno.text );
					
					if (currentState == "edit") clearDetail();
					startFiltering();
				}
				
			}
			
			protected function fltr_supplier_changeHandler(event:IndexChangeEvent):void
			{
				var supplier:String;
				
				if ( this.fltr_supplier.selectedIndex < 0 )
				{
					supplier = "-1";
				}
				else
				{
					supplier = this.supplierList[fltr_supplier.selectedIndex].cmpy_code;
				}
				
				fltr_customer.textInput.text='';
				fltr_customer.selectedIndex = -1;
				
				customerList.service( supplier );
				productList.service( supplier );
				
				//if (currentState == "edit") clearDetail();
				//startFiltering();
			}
			
			protected function fltr_product_changeHandler(event:IndexChangeEvent):void
			{
				//if (currentState == "edit") clearDetail();
				//startFiltering();
			}
			
			protected function fltr_customer_changeHandler(event:IndexChangeEvent):void
			{
				//if (currentState == "edit") clearDetail();
				//startFiltering();
			}
			
			protected function fltr_ordcustno_changeHandler(event:IndexChangeEvent):void
			{
				//if (currentState == "edit") clearDetail();
				//startFiltering();
			}
			
			private function startFiltering():void
			{
				var supplierFilter:String = '';  
				var customerFilter:String = '';  
				var productFilter:String = '';
				var ordcustnoFilter:String = '';
				var fields:Object;
				var types:Object;
				
				//interruptor=false;
				pagedRecords.interruptor=false;
				
				fields = new Object();
				types = new Object();
				
				if (fltr_supplier.selectedIndex > -1) 
				{
					supplierFilter = "oprd_supp_code='"+this.supplierList[fltr_supplier.selectedIndex].cmpy_code+"' ";
					fields["oprd_supp_code"] = this.supplierList[fltr_supplier.selectedIndex].cmpy_code;
					if ( fields["oprd_supp_code"] == "ANY" )
					{
						supplierFilter = '';
						fields["oprd_supp_code"] = "";
					}
				}
				else
				{
					if ( global.setComboBoxNoSelection == true )
					{
						fltr_supplier.selectedIndex = -1;
					}
					supplierFilter = '';
					fields["oprd_supp_code"] = "";
				}
				types["oprd_supp_code"] = "EXACT_STRING";
				
				if (fltr_customer.selectedIndex > -1) 
				{
					customerFilter = "oprd_cust_acnt='"+this.customerList[fltr_customer.selectedIndex].cust_acnt+"' ";
					fields["oprd_cust_acnt"] = this.customerList[fltr_customer.selectedIndex].cust_acnt;
					if ( fields["oprd_cust_acnt"] == "ANY" )
					{
						customerFilter = '';
						fields["oprd_cust_acnt"] = "";
					}
				}
				else
				{
					if ( global.setComboBoxNoSelection == true )
					{
						fltr_customer.selectedIndex = -1;
					}
					customerFilter = '';
					fields["oprd_cust_acnt"] = "";
				}
				types["oprd_cust_acnt"] = "EXACT_STRING";
				
				if ( this.currentState != "widget" )
				{
					
					if(fltr_ordcustno.text!='')
					{					
						ordcustnoFilter = "(UPPER(TO_CHAR(oprd_cust_no)) LIKE UPPER('%"+(fltr_ordcustno.text)+"%') ) ";
						//ordcustnoFilter = "oprd_cust_no = " + fltr_ordcustno.text + " ";
						fields["oprd_cust_no"] = fltr_ordcustno.text;
					}
					else
					{
						ordcustnoFilter = '';
						fields["oprd_cust_no"] = "";
					}
					types["oprd_cust_no"] = "EXACT_STRING";
					//types["oprd_cust_no"] = "NUMBER";
					
					if (fltr_product.selectedIndex > -1) 
					{
						productFilter = "oprd_prod_code='"+this.productList[fltr_product.selectedIndex].prod_code+"' ";
						fields["oprd_prod_code"] = this.productList[fltr_product.selectedIndex].prod_code;
						if ( fields["oprd_prod_code"] == "ANY" )
						{
							productFilter = '';
							fields["oprd_prod_code"] = "";
						}
					}
					else
					{
						if ( global.setComboBoxNoSelection == true )
						{
							fltr_product.selectedIndex = -1;
						}
						productFilter = '';
						fields["oprd_prod_code"] = "";
					}
					types["oprd_prod_code"] = "EXACT_STRING";
				}
				
				currentFilter = "WHERE 1=1 ";
				if ( ordcustnoFilter.length > 0 )
				{
					currentFilter += "AND " + ordcustnoFilter;
				}
				if ( supplierFilter.length > 0 )
				{
					currentFilter += "AND " + supplierFilter;
				}
				if ( customerFilter.length > 0 )
				{
					currentFilter += "AND " + customerFilter;
				}
				if ( productFilter.length > 0 )
				{
					currentFilter += "AND " + productFilter;
				}
				
				if ( fltr_ordcustno.text != "" )
				{
					fields = new Object();
					types = new Object();
					fields["oprd_cust_no"] = fltr_ordcustno.text;
					types["oprd_cust_no"] = "STRING";
					currentFields = fields;
					currentTypes = types;
				}
				else
				{
					currentFields = fields;
					currentTypes = types;
				}
				
				
				this.startLoadingPages();
				
				trace("this.grid.scroller3333", this.dataGrid.scroller);
				trace("this.grid.scroller.verticalScrollBar.value", this.dataGrid.scroller.verticalScrollBar.value);
			}
			
			protected function resetRecords(event:MouseEvent):void
			{
				this.setFilters( this.parentParams );
				return;
			}
			
			protected function filterRecords(event:MouseEvent):void
			{
				if (currentState == "edit") clearDetail();
				this.startFiltering();
			}
			
			protected function refreshRecords(event:MouseEvent):void
			{
				if ( currentState != "widget" )
				{
					currentState = 'normal';
					dataGrid.enabled=true;
				}
				clearDetail();
				fltr_supplier.selectedIndex = -1;
				fltr_customer.textInput.text = '';
				fltr_customer.selectedIndex = -1;
				if ( currentState != "widget" )
				{
					fltr_product.selectedIndex = -1;
					fltr_ordcustno.text = '';
				}
				dataGrid.selectedIndex = -1;
				currentFilter = null;
				currentOrder = null;
				currentFields = new Object();
				currentTypes = new Object();
				
				currentSorts = new Object();
				currentOrders = new Object();
				var currentRenderer:IGridItemRenderer;
				for (var i:int=0; i < dataGrid.columns.length; i++)
				{
					currentRenderer = dataGrid.columnHeaderGroup.getHeaderRendererAt(i);
					if ( currentRenderer != null)
					{
						(currentRenderer as DKI_HeaderColumn_Renderer).setImage('');
					}
					//(currentRenderer as DKI_HeaderColumn_Renderer).setImage(''); 
				}
				//getPagedResult.token = custOrdersService.getPaged( currentFields, currentTypes, currentSorts, currentOrders);
				
				this.startLoadingPages();
				trace("this.grid.scroller2222", this.dataGrid.scroller);
				trace("this.grid.scroller.verticalScrollBar.value", this.dataGrid.scroller.verticalScrollBar.value);
			}
			
			protected function clearDetail(): void
			{
				if (currentState != 'widget')
				{
				}
			}			
			
			private function editRecord():void
			{
				
				if ( this.checkDates() > 0 )
				{
					this.btn_save.enabled = this.canUpdate;
					return;
				}
				if ( this.checkFields() > 0 )
				{
					this.btn_save.enabled = this.canUpdate;
					return;
				}
				
				var obj:Object = new Object();
				
				
				obj.oprd_order_id = this.fltr_ordsysno.text;// oprd_order_id.text;
				obj.oprd_cust_no = oprd_cust_no.text
				
				if (this.oprd_supp_code.selectedIndex>=0)
				{
					obj.oprd_supp_code = this.supplierList[oprd_supp_code.selectedIndex].cmpy_code;
				}
				else
				{
					obj.oprd_supp_code = dataGrid.selectedItem.oprd_supp_code;
				}
				
				if (this.oprd_cust_acnt.selectedIndex>=0)
				{
					obj.oprd_cust_acnt = this.customerList[oprd_cust_acnt.selectedIndex].cust_acnt;
					obj.oprd_cust_code = this.customerList[oprd_cust_acnt.selectedIndex].cust_cmpy_code;
				}
				else
				{
					obj.oprd_cust_acnt = dataGrid.selectedItem.oprd_cust_acnt;
					obj.oprd_cust_code = dataGrid.selectedItem.oprd_cust_code;
				}
				
				
				if (oprd_prod_code.selectedIndex>=0)
				{
					obj.oprd_prod_code = this.productList[oprd_prod_code.selectedIndex].prod_code;
					obj.oprd_prod_cmpy = this.productList[oprd_prod_code.selectedIndex].prod_cmpy;
				}
				else
				{
					obj.oprd_prod_code = dataGrid.selectedItem.oprd_prod_code;
					obj.oprd_prod_cmpy = dataGrid.selectedItem.oprd_prod_cmpy;
				}
				
				obj.oprd_period_no = oprd_period_no.text;
				
				obj.oprd_period_start = dateConvert.format(oprd_period_start.selectedDate);
				obj.oprd_period_end = dateConvert.format(oprd_period_end.selectedDate);
				
				if (oprd_prod_unit.selectedIndex>=0)
				{
					obj.oprd_prod_unit = this.productUnitList[oprd_prod_unit.selectedIndex].unit_id;
				}
				else
				{
					obj.oprd_prod_unit = dataGrid.selectedItem.oprd_prod_unit;
				}
				
				obj.oprd_prod_qty = oprd_prod_qty.text;
				obj.oprd_prod_used = "";
				obj.oprd_price_fixed = "";
				obj.oprd_prod_price = "";
				
				
				//this.doUpdateAction( obj );
				updateAction.service( obj );
				
			}
			
			private function doDelete(): void
			{
				var errors:String="";
				var index:int=0;
				
				if ( index > 0 )
				{
					var errorBox:MessageDialog = new MessageDialog( errors );
				}
				else
				{
					var canDelete:DeleteDialog = new DeleteDialog(deleteRecord, hasPassword);
				}
			}
			
			private function deleteRecord():void
			{
				var obj:Object = new Object();
				
				
				obj.oprd_order_id = this.fltr_ordsysno.text;// oprd_order_id.text;
				obj.oprd_cust_no = oprd_cust_no.text
				
				if (this.oprd_supp_code.selectedIndex>=0)
				{
					obj.oprd_supp_code = this.supplierList[oprd_supp_code.selectedIndex].cmpy_code;
				}
				else
				{
					obj.oprd_supp_code = dataGrid.selectedItem.oprd_supp_code;
				}
				
				if (this.oprd_cust_acnt.selectedIndex>=0)
				{
					obj.oprd_cust_acnt = this.customerList[oprd_cust_acnt.selectedIndex].cust_acnt;
					obj.oprd_cust_code = this.customerList[oprd_cust_acnt.selectedIndex].cust_cmpy_code;
				}
				else
				{
					obj.oprd_cust_acnt = dataGrid.selectedItem.oprd_cust_acnt;
					obj.oprd_cust_code = dataGrid.selectedItem.oprd_cust_code;
				}
				
				
				if (oprd_prod_code.selectedIndex>=0)
				{
					obj.oprd_prod_code = this.productList[oprd_prod_code.selectedIndex].prod_code;
					obj.oprd_prod_cmpy = this.productList[oprd_prod_code.selectedIndex].prod_cmpy;
				}
				else
				{
					obj.oprd_prod_code = dataGrid.selectedItem.oprd_prod_code;
					obj.oprd_prod_cmpy = dataGrid.selectedItem.oprd_prod_cmpy;
				}
				
				obj.oprd_period_no = oprd_period_no.text;
				
				//this.doDeleteAction( obj );
				deleteAction.service( obj );
				
			}
			
			
			private function checkDates():int
			{
				var errors:String="";
				var index:int=0;
				
				if ( (this.oprd_period_start.selectedDate != null)
					&& (this.oprd_period_end.selectedDate != null) 
					&& (this.oprd_period_start.selectedDate > this.oprd_period_end.selectedDate )
				)
				{
					index += 1;
					errors += String(index) + ". " + "Order period start date should not be greater than period end date." + "\n";
				}
				
				if ( (this.oprd_period_start.selectedDate != null)
					&& (this.oprd_period_end.selectedDate != null) 
					&& (this.oprd_period_start.selectedDate < this.oprd_ord_time.selectedDate )
				)
				{
					index += 1;
					errors += String(index) + ". " + "Order period start date should not be less than order date." + "\n";
				}
				
				if ( (this.oprd_period_start.selectedDate != null)
					&& (this.oprd_period_end.selectedDate != null) 
					&& (this.oprd_period_start.selectedDate > this.oprd_exp_time.selectedDate )
				)
				{
					index += 1;
					errors += String(index) + ". " + "Order period start date should not be greater than order expiry date." + "\n";
				}
				
				if ( (this.oprd_period_start.selectedDate != null)
					&& (this.oprd_period_end.selectedDate != null) 
					&& (this.oprd_period_end.selectedDate < this.oprd_ord_time.selectedDate )
				)
				{
					index += 1;
					errors += String(index) + ". " + "Order period end date should not be less than order date." + "\n";
				}
				
				if ( (this.oprd_period_start.selectedDate != null)
					&& (this.oprd_period_end.selectedDate != null) 
					&& (this.oprd_period_end.selectedDate > this.oprd_exp_time.selectedDate )
				)
				{
					index += 1;
					errors += String(index) + ". " + "Order period end date should not be greater than order expiry date." + "\n";
				}
				
				for each( var o:Object in this.pagedRecords )
				{
					if ( o["oprd_period_no"] == this.oprd_period_no.text )
					{
						continue;
					}
					if ( this.convertDateToLocale( o["oprd_period_start"]) <= this.oprd_period_start.selectedDate && this.convertDateToLocale( o["oprd_period_end"]) >= this.oprd_period_start.selectedDate )
					{
						index += 1;
						errors += String(index) + ". " + "Order period start date overlaps with existing periods in order period " + o["oprd_period_no"] + ".\n";
					}
					if ( this.convertDateToLocale( o["oprd_period_start"]) <= this.oprd_period_end.selectedDate && this.convertDateToLocale( o["oprd_period_end"]) >= this.oprd_period_end.selectedDate )
					{
						index += 1;
						errors += String(index) + ". " + "Order period end date overlaps with existing periods in order period " + o["oprd_period_no"] + ".\n";
					}
				}
				
				
				if ( index > 0 )
				{
					var errorBox:MessageDialog = new MessageDialog( errors );
				}
				
				return index;
			}
			
			
			private function checkFields():int
			{
				var errors:String="";
				var index:int=0;
				
				if ( oprd_prod_code.selectedIndex == -1 )//< 0 )
				{
					index += 1;
					errors += String(index) + ". " + resourceManager.getString('default','PLEASE')+resourceManager.getString('default','SELECT')+resourceManager.getString('default','OPRD_PROD_NAME') + "\n";
				}
				if ( oprd_prod_unit.selectedIndex == -1 )//< 0 )
				{
					index += 1;
					errors += String(index) + ". " + resourceManager.getString('default','PLEASE')+resourceManager.getString('default','SELECT')+resourceManager.getString('default','OPRD_UNIT_NAME') + "\n";
				}
				if ( StringUtil.trim(oprd_period_no.text).length == 0 )
				{
					index += 1;
					errors += String(index) + ". " + resourceManager.getString('default','PLEASE')+resourceManager.getString('default','ENTER')+resourceManager.getString('default','OPRD_PERIOD_NO') + "\n";
				}
				//if ( StringUtil.trim(oprd_period_start.currentDate).length == 0 )
				if ( StringUtil.trim(dateConvertLong.format(oprd_period_start.selectedDate)).length == 0 )
				{
					index += 1;
					errors += String(index) + ". " + resourceManager.getString('default','PLEASE')+resourceManager.getString('default','ENTER')+resourceManager.getString('default','OPRD_PERIOD_START') + "\n";
				}
				//if ( StringUtil.trim(oprd_period_end.currentDate).length == 0 )
				if ( StringUtil.trim(dateConvertLong.format(oprd_period_end.selectedDate)).length == 0 )
				{
					index += 1;
					errors += String(index) + ". " + resourceManager.getString('default','PLEASE')+resourceManager.getString('default','ENTER')+resourceManager.getString('default','OPRD_PERIOD_END') + "\n";
				}
				if ( StringUtil.trim(oprd_prod_qty.text).length == 0 )
				{
					index += 1;
					errors += String(index) + ". " + resourceManager.getString('default','PLEASE')+resourceManager.getString('default','ENTER')+resourceManager.getString('default','OPRD_PROD_QTY') + "\n";
				}
				
				if ( index > 0 )
				{
					var errorBox:MessageDialog = new MessageDialog( errors );
				}
				
				return index;
			}
			
			private function createRecord():void
			{
				/* 				var oprd_num:int;
				
				oprd_num = isOrderCustNoUsed.lastResult;
				trace ("isOrderCustNoUsed", oprd_sys_no.text, oprd_cust_no.text, oprd_num);
				if ( oprd_num > 0 )
				{
				var errorBox:MessageDialog = new MessageDialog( resourceManager.getString('default','ALERT__ORDER_CUSTNO_EXIST') );
				return;
				}
				
				oprd_num = isOrderNoUsed.lastResult;
				trace ("isOrderNoUsed", oprd_sys_no.text, oprd_cust_no.text, oprd_num);
				if ( oprd_num > 0 )
				{
				var errorBox2:MessageDialog = new MessageDialog( resourceManager.getString('default','ALERT__ORDER_NO_EXIST') );
				return;
				} */
				
				if ( this.checkDates() > 0 )
				{
					this.btn_save.enabled = this.canCreate;
					return;
				}
				if ( this.checkFields() > 0 )
				{
					this.btn_save.enabled = this.canCreate;
					return;
				}
				
				var obj:Object = new Object();
				
				
				obj.oprd_order_id = this.fltr_ordsysno.text;// oprd_order_id.text;
				obj.oprd_cust_no = oprd_cust_no.text
				
				if (this.oprd_supp_code.selectedIndex>=0)
				{
					obj.oprd_supp_code = this.supplierList[oprd_supp_code.selectedIndex].cmpy_code;
				}
				else
				{
					obj.oprd_supp_code = this.supplierList[0].cmpy_code;
				}
				
				if (this.oprd_cust_acnt.selectedIndex>=0)
				{
					obj.oprd_cust_acnt = this.customerList[oprd_cust_acnt.selectedIndex].cust_acnt;
					obj.oprd_cust_code = this.customerList[oprd_cust_acnt.selectedIndex].cust_cmpy_code;
				}
				else
				{
					obj.oprd_cust_acnt = this.customerList[0].cust_acnt;
					obj.oprd_cust_code = this.customerList[0].cust_cmpy_code;
				}
				
				
				if (oprd_prod_code.selectedIndex>=0)
				{
					obj.oprd_prod_code = this.productList[oprd_prod_code.selectedIndex].prod_code;
					obj.oprd_prod_cmpy = this.productList[oprd_prod_code.selectedIndex].prod_cmpy;
				}
				else
				{
					obj.oprd_prod_code = this.productList[0].prod_code;
					obj.oprd_prod_cmpy = this.productList[0].prod_cmpy;
				}
				
				obj.oprd_period_no = oprd_period_no.text;
				
				obj.oprd_period_start = dateConvert.format(oprd_period_start.selectedDate);
				obj.oprd_period_end = dateConvert.format(oprd_period_end.selectedDate);
				
				if (oprd_prod_unit.selectedIndex>=0)
				{
					obj.oprd_prod_unit = this.productUnitList[oprd_prod_unit.selectedIndex].unit_id;
				}
				else
				{
					obj.oprd_prod_unit = this.productUnitList[0].unit_id;
				}
				
				obj.oprd_prod_qty = oprd_prod_qty.text;
				obj.oprd_prod_used = "";
				obj.oprd_price_fixed = "";
				obj.oprd_prod_price = "";
				
				
				//this.doCreateAction( obj );
				createAction.service( obj );
				
			}
			
			
			protected function createNewRecord(event:MouseEvent):void
			{	
				if ( int(this.fltr_ordstat.text) != ORDER_STATUS__NEW )
				{
					global.msgWarning( "The open order is not new so cannot create periods." );
					return;
				}
				if ( this.fltr_approved.selected != false )
				{
					global.msgWarning( "The open order is approved so cannot create periods." );
					return;
				}
				
				
				if ( this.fltr_ordcustno.text != "" && this.fltr_product.selectedIndex>=0 && this.fltr_supplier.selectedIndex>=0 && this.fltr_customer.selectedIndex>=0 )
				{
					orderItemPeriodNumberMaker.service( this.fltr_ordcustno.text, this.fltr_product.selectedItem.prod_cmpy, this.fltr_product.selectedItem.prod_code );
				}
				else
				{
					var warnMsg:String = "";
					
					if ( this.fltr_ordcustno.text == "" )
					{
						warnMsg += "order number, ";
					}
					if ( this.fltr_product.selectedIndex<0 )
					{
						warnMsg += "product, ";
					}
					if ( this.fltr_supplier.selectedIndex<0 )
					{
						warnMsg += "supplier, ";
					}
					if ( this.fltr_customer.selectedIndex<0 )
					{
						warnMsg += "customer, ";
					}
					
					if ( warnMsg.length > 0 )
					{
						global.msgWarning( "Set the value of " + warnMsg.substring(0, warnMsg.length-2) + " in filters before creating its periods." );
					}
					else
					{
						global.msgWarning( "Find the order product item first before creating its periods." );
					}
					
					return;
				}
				
				idx=dataGrid.selectedIndex;
				dataGrid.ensureCellIsVisible(idx);
				currentState="create";
				this.btn_save.enabled = this.canCreate;
				dataGrid.enabled=false;
				
				trace("this.oprd_stat_id.selectedItem = this.fltr_ordstat.text;  in createNewRecord", ">>>>"+this.fltr_ordstat.text+"<<<<");
				trace("this.oprd_prod_unit.selectedItem = this.fltr_ordstat.text;  in createNewRecord", ">>>>"+this.fltr_ordunit.text+"<<<<");
				trace("time", ">>>>"+this.fltr_ordtime.text+"<<<<", ">>>>"+this.fltr_exptime.text+"<<<<");
				//this.oprd_stat_id.selectedItem = this.fltr_ordstat.text;
				
				this.oprd_stat_id.selectedIndex = tools.getItemIndexFromCode( this.fltr_ordstat.text, statusTypeList, "ordstat_type_id");
				this.oprd_prod_unit.selectedIndex = tools.getItemIndexFromCode( this.fltr_ordunit.text, productUnitList, "unit_id");
				this.oprd_ord_time.selectedDate = convertDateToLocale(this.fltr_ordtime.text);
				this.oprd_exp_time.selectedDate = convertDateToLocale(this.fltr_exptime.text);
				
				this.oprd_period_start.selectedDate = convertDateToLocale(this.fltr_ordtime.text);
				this.oprd_period_end.selectedDate = convertDateToLocale(this.fltr_exptime.text);
				
				//transpEqptTypeLookup.token = custOrdersService.transpEqptTypeLookup('0', '-1');
				//this.equipCmptsList.visible = false;
			}
			
			
			public function getArrayCollection(obj:Object):ArrayCollection
			{
				var temp:ArrayCollection = new ArrayCollection;
				temp.addItem( obj );
				return temp;
			}
			
			public function convertDateToLocaleString(dt:String):String
			{
				var dt_string:String;
				var dt_date:Date = new Date();
				
				dt_string = ""; 
				if ((dt!=null) && (dt!='null') && (dt!=''))
				{
					dt_date = DateField.stringToDate(dt,"YYYY-MM-DD");
					dt_string = dateFormatter.format( dt_date);
				}
				//trace ("convertDateToLocale", dt, dt_date, dt_string);
				return dt_string;
			}
			
			public function convertDateToLocale(dt:String):Date
			{
				var dt_date:Date = new Date();
				
				if ((dt!=null) && (dt!='null') && (dt!=''))
				{
					dt_date = DateField.stringToDate(dt,"YYYY-MM-DD");
				}
				//trace ("convertDateToLocale", dt, dt_date, dt_string);
				return dt_date;
			}
			
			public function convertDateToLocaleLong(dt:String):Date
			{
				var dt_date:Date = new Date();
				
				if ((dt!=null) && (dt!='null') && (dt!=''))
				{
					//dt_date = DateField.stringToDate(dt,"YYYY-MM-DD HH:NN:SS");
					dt_date = DateTimeFunc.createDate(
						int(dt.substr(0, 4))
						, int(dt.substr(5, 2))
						, int(dt.substr(8, 2))
						, int(dt.substr(11, 2))
						, int(dt.substr(14, 2))
						, int(dt.substr(17, 2))
					);
				}
				//trace ("convertDateToLocale", dt, dt_date, dt_string);
				return dt_date;
			}
			
			public function getDefaultDate():Date
			{
				var now_date:Date;
				var def_date:Date;
				
				now_date = new Date();
				def_date = DateTimeFunc.dateAdd( "yyyy", 1, now_date );
				
				//trace ("getDefaultDate", now_date, def_date);
				
				return def_date;
			}
			
			protected function view_detailsHandler(event:FlexEvent):void
			{
			}
			
			protected function unitLabelFunction(item:Object, column:GridColumn):String
			{
				var ret:String = 'l(amb)';
				for each(var obj:Object in this.productUnitList)
				{
					if(obj.unit_id == item [column.dataField]) ret=obj.unit_name;
				}
				return ret;
			}
			
			protected function dateLabelFunction(item:Object, column:GridColumn):String
			{
				var ret:String = "";
				
				ret = item [column.dataField];
				return ret;
			}
			
			protected function save_clickHandler():void
			{
				this.btn_save.enabled = false;
				if (currentState == "create")
				{
					createRecord();
				}
				if (currentState == "edit")
				{
					editRecord();
				}
				if (currentState == "detail")
				{
					editRecord();
				}
			}
			
			public function setFilters( params:*=false ): void
			{
				if ( params == false )
				{
					return;
				}
				
				this.parentParams = params;
				
				currentState = "normal";
				
				trace ("...............................in setFilters");
				tools.pr( params);
				
				this.fltr_ordcustno.text 					= tools.getObjAttribute( params, "oprd_cust_no", "" );
				//this.startFiltering();
				
				var po:Object=new Object();
				po["oprd_order_id"] = tools.getObjAttribute( params, "order_sys_no", "" );
				po["oprd_supp_code"] = tools.getObjAttribute( params, "oprd_supp_code", "" );
				po["oprd_supp_name"] = tools.getObjAttribute( params, "oprd_supp_name", "" );
				po["oprd_cust_acnt"] = tools.getObjAttribute( params, "oprd_cust_acnt", "" );
				po["oprd_cust_code"] = tools.getObjAttribute( params, "oprd_cust_code", "" );
				po["oprd_cust_name"] = tools.getObjAttribute( params, "oprd_cust_name", "" );
				po["oprd_cust_no"] = tools.getObjAttribute( params, "oprd_cust_no", "" );
				po["oprd_stat_id"] = tools.getObjAttribute( params, "oprd_stat_id", "" );
				po["oprd_stat_name"] = tools.getObjAttribute( params, "oprd_stat_name", "" );
				po["oprd_approved"] = tools.getObjAttribute( params, "oprd_approved", "" );
				
				po["oprd_ord_time"] = tools.getObjAttribute( params, "oprd_ord_time", new Date() );
				po["oprd_exp_time"] = tools.getObjAttribute( params, "oprd_exp_time", new Date() );
				
				po["oitem_prod_code"] = tools.getObjAttribute( params, "oitem_prod_code", "" );
				po["oitem_prod_cmpy"] = tools.getObjAttribute( params, "oitem_prod_cmpy", "" );
				po["oitem_prod_name"] = tools.getObjAttribute( params, "oitem_prod_name", "" );
				po["oitem_prod_qty"] = tools.getObjAttribute( params, "oitem_prod_qty", "" );
				po["oitem_prod_unit"] = tools.getObjAttribute( params, "oitem_prod_unit", "" );
				
				var fields:Object;
				var types:Object;
				
				//interruptor=false;
				pagedRecords.interruptor=false;
				
				fields = new Object();
				types = new Object();
				
				fields["oprd_supp_code"] = po["oprd_supp_code"];
				types["oprd_supp_code"] = "EXACT_STRING";
				fields["oprd_cust_acnt"] = po["oprd_cust_acnt"];
				types["oprd_cust_acnt"] = "EXACT_STRING";
				fields["oprd_cust_no"] = po["oprd_cust_no"];
				types["oprd_cust_no"] = "STRING";
				fields["oprd_prod_code"] = po["oitem_prod_code"];
				types["oprd_prod_code"] = "EXACT_STRING";
				
				currentFields = fields;
				currentTypes = types;
				this.startLoadingPages();
				
				//this.fltr_supplier.selectedItem = this.pagedRecords.source[0].oprd_supp_name;
				//this.fltr_product.selectedItem = this.pagedRecords.source[0].oprd_prod_name;
				//this.fltr_customer.selectedItem = this.pagedRecords.source[0].oprd_cust_acnt + ' - ' + this.pagedRecords.source[0].oprd_cust_name
				
				if ( po.hasOwnProperty( "oprd_supp_code" ) )
				{
					this.fltr_supplier.selectedIndex = tools.getItemIndexFromCode( po["oprd_supp_code"], supplierList, "cmpy_code");
				}
				//this.fltr_supplier.selectedItem = po["oprd_supp_name"];
				
				if ( po.hasOwnProperty( "oitem_prod_code" ) && po.hasOwnProperty( "oitem_prod_cmpy" ) )
				{
					this.fltr_product.selectedIndex = tools.getItemIndexFromCode( po["oitem_prod_cmpy"]+" - "+po["oitem_prod_code"], productList, "prod_keys");
				}
				//this.fltr_product.selectedItem = po["oitem_prod_cmpy"] + " - " + po["oitem_prod_code"] + " - " + po["oitem_prod_name"];
				
				if ( po.hasOwnProperty( "oprd_cust_acnt" ) )
				{
					this.fltr_customer.selectedIndex = tools.getItemIndexFromCode( po["oprd_cust_acnt"], customerList, "cust_acnt");
				}
				//this.fltr_customer.selectedItem = po["oprd_cust_acnt"] + ' - ' + po["oprd_cust_name"];
				
				//this.fltr_ordstat.selectedItem = po["oprd_stat_name"];
				this.fltr_ordstat.text = po["oprd_stat_id"];
				this.fltr_ordsysno.text = po["oprd_order_id"];
				this.fltr_approved.selected = po["oprd_approved"]=='Y'?true:false;
				
				this.fltr_ordunit.text = po["oitem_prod_unit"];
				this.fltr_ordtime.text = po["oprd_ord_time"];
				this.fltr_exptime.text = po["oprd_exp_time"];
				
				pb.values(pagedRecords.length,pagedRecords.length)
			}
			
			
			protected function createData_resultHandler( ):void
			{
				clearDetail();
				if ( this.createAction.dataString == "OK" )
				{
					global.msgSuccess(resourceManager.getString('default','MSG_CREATE__SUCCESS'));
				}
				else
				{
					global.msgFail(resourceManager.getString('default','ERROR_CREATE__FAILURE'));
				}
				
				
				currentState="normal";
				
				this.startFiltering();
				dataGrid.selectedIndex = -1;
				dataGrid.enabled=true;
			}
			
			
			protected function updateData_resultHandler( ):void
			{
				clearDetail();
				if ( this.updateAction.dataString == "OK" )
				{
					global.msgSuccess(resourceManager.getString('default','MSG_UPDATE__SUCCESS'));
				}
				else
				{
					global.msgFail(resourceManager.getString('default','ERROR_UPDATE__FAILURE'));
				}
				
				currentState="normal";
				
				this.startFiltering();
				dataGrid.selectedIndex = -1;
				dataGrid.enabled=true;
			}
			
			
			protected function deleteData_resultHandler( ):void
			{
				clearDetail();
				if ( this.deleteAction.dataString == "OK" )
				{
					global.msgSuccess(resourceManager.getString('default','MSG_DELETE__SUCCESS'));
				}
				else
				{
					global.msgFail(resourceManager.getString('default','ERROR_DELETE__FAILURE'));
				}
				
				currentState="normal";
				this.startFiltering();
				dataGrid.selectedIndex = -1;
			}
			
			protected function killBtn_clickHandler(event:MouseEvent):void
			{
				//interruptor=true;
				pagedRecords.interruptor=true;
				trace("WTF >>>>>>>>>>");
			}
			
			protected function resumeBtn_clickHandler(event:MouseEvent):void
			{
				//interruptor=false;
				pagedRecords.interruptor=false;
				
				this.resumeLoadingPages();
				trace("RESUME >>>>>>>>>>");
			}
			
			protected function resumeLoadingPages():void
			{
				killBtn.setStyle("chromeColor","0xff0000");
				this.killBtn.includeInLayout=true;
				this.killBtn.visible = true;
				this.killBtn.enabled = true;
				
				resumeBtn.setStyle("chromeColor","0x00ff00");
				this.resumeBtn.includeInLayout=true;
				this.resumeBtn.visible = true;
				this.resumeBtn.enabled = false;
				
				this.btn_create.enabled = false
				this.btn_export.enabled = false;
				this.dataGrid.enabled = false;
				this.toolbar.enabled = false;
				
				//pb.values(pagedRecords.length,totalLength);
				pb.values(pagedRecords.length,pagedRecords.totalLength);
				//currentPage = int(this.pagedRecords.length/currentPageSize) + 1;
				//this.pagedRecords.service( currentFields, currentTypes, currentSorts, currentOrders, currentPage, currentPageSize );
				this.pagedRecords.listService( currentFields, currentTypes, currentSorts, currentOrders );
			}
			
			
		]]>
	</fx:Script>
	<fx:Declarations>
		<s:DateTimeFormatter id="dateFormatter" locale="{LocaleID.DEFAULT}" dateStyle="short" timeStyle="none"/>
		<s:DateTimeFormatter id="dateConvert" dateTimePattern="yyyy-MM-dd"/>
		<s:DateTimeFormatter id="dateConvertLong" dateTimePattern="yyyy-MM-dd HH:mm:ss"/>
		<components:ValidationGroup id="vg" action="{save_clickHandler}" defaultButton="{btn_save}" isProtected="{hasPassword}"/>
	</fx:Declarations>
	<s:Panel id="panel" width="100%" height="100%"
			 skinClass="skins.WidgetPanelSkin"
			 skinClass.widget="skins.NullSkin">
		<s:layout>
			<s:VerticalLayout/>
		</s:layout>
		
		<s:HGroup id="toolbar" width="100%" gap="5" paddingBottom="2" paddingTop="2">
			<components:DKI_DropDownList id="fltr_supplier" width="170" height="100%"
										 change="fltr_supplier_changeHandler(event)" cornerRadius="10"
										 labelField="cmpy_desc" prompt="{resourceManager.getString('default','ORDER_SUPP_NAME')+resourceManager.getString('default','FILTER')}"
										 width.edit="182" width.widget="160" dataProvider="{this.supplierList}"/>
			<components:DKI_ComboBox id="fltr_customer" width="170" height="100%" enabled="{fltr_supplier.selectedIndex > -1}"
									change="fltr_customer_changeHandler(event)" cornerRadius="10"
									labelField="cust_desc" prompt="{resourceManager.getString('default','ORDER_CUST_ACNT')+resourceManager.getString('default','FILTER')}"
									width.edit="182" width.widget="160" dataProvider="{this.customerList}"/>
			<!--components:DKI_DropDownList id="fltr_ordstat" width="188" height="100%"
			cornerRadius="10"
			labelField="ordstat_type_name" prompt="{resourceManager.getString('default','ORDER_STAT_NAME')+resourceManager.getString('default','FILTER')}"
			width.edit="182" width.widget="160" visible="false" includeInLayout="false" dataProvider="{this.statusTypeList}"/-->
			<components:DKI_ValidatorInput id="fltr_ordcustno" validationType="search" width="160" height="{labelHeight}" enabled="true" 
										   keyUp="fltr_ordcustno_keyUpHandler(event)"  restrict="0-9"
										   excludeFrom="widget" width.widget="140" 
										   prompt="{resourceManager.getString('default','ORDER_CUST_NO')+resourceManager.getString('default','FILTER')}"/>
			
			<components:DKI_ComboBox id="fltr_product" width="170" height="100%" enabled="{fltr_supplier.selectedIndex > -1}"
									change="fltr_product_changeHandler(event)" 
									excludeFrom="widget" cornerRadius="10"
									labelField="prod_name" prompt="{resourceManager.getString('default','OPRD_PROD_NAME')+resourceManager.getString('default','FILTER')}"
									width.edit="182" width.widget="160" dataProvider="{this.productList}"/>
			<s:Label id="fltr_ordstat" text="" visible="false" includeInLayout="false" />
			<s:Label id="fltr_ordsysno" text="" visible="false" includeInLayout="false" />
			<s:Label id="fltr_ordunit" text="" visible="false" includeInLayout="false" />
			<s:Label id="fltr_ordtime" text="" visible="false" includeInLayout="false" />
			<s:Label id="fltr_exptime" text="" visible="false" includeInLayout="false" />
			<s:CheckBox id="fltr_approved" 
						label="{resourceManager.getString('default','ORDER_APPROVED')}" fontWeight="bold" 
						selected="false" enabled="false" visible="false" includeInLayout="false"
						/>
			
			
			<s:Spacer width="100%" excludeFrom="widget"/>
			<components:DKI_Button id="filterBtn" height="24" noLabel="false" click="filterRecords(event)"
								   type="filteron"/>
			<components:DKI_Button id="resetBtn" height="24" noLabel="false" click="refreshRecords(event)"
								   type="filteroff"/>
			<components:DKI_Button height="100%" label="{resourceManager.getString('default','RESET')+resourceManager.getString('default','FILTER')}" click="resetRecords(event)"
								   width.widget="100%" type="refresh"/>
			<components:DKI_Button id="btn_export" label="{resourceManager.getString('default','EXPORTDATA')}" type="report" click="exportCsvHandler(event)" includeIn="normal"/>
			<components:DKI_Button id="btn_create" label="{resourceManager.getString('default','CREATE')}" height="100%" click="createNewRecord(event)" includeIn="normal" enabled="{this.canCreate}" type="create"/>			
		</s:HGroup>
		<s:DataGrid id="dataGrid" width="100%" height="100%" requestedRowCount="4"
					selectionChange="dataGrid_selectionChangeHandler(event)"
					skinClass="skins.DKI_DataGrid_Skin"
					editable="false"
					>
			<s:columns>
				<s:ArrayList>
					<s:source>
						<s:GridColumn dataField="oprd_order_id" headerText="{resourceManager.getString('default','OPRD_ORDER_ID')}" visible="false"></s:GridColumn>
						
						<s:GridColumn dataField="oprd_supp_code" headerText="{resourceManager.getString('default','ORDER_SUPP_CODE')}" visible="true" visible.widget="false"></s:GridColumn>
						<s:GridColumn dataField="oprd_supp_name" headerText="{resourceManager.getString('default','ORDER_SUPP_NAME')}"></s:GridColumn>
						<s:GridColumn dataField="oprd_cust_acnt" headerText="{resourceManager.getString('default','ORDER_CUST_ACNT')}" visible="true" visible.widget="false"></s:GridColumn>
						<s:GridColumn dataField="oprd_cust_code" headerText="{resourceManager.getString('default','ORDER_CUST_CODE')}" visible="true" visible.widget="false"></s:GridColumn>
						<s:GridColumn dataField="oprd_cust_name" headerText="{resourceManager.getString('default','ORDER_CUST_NAME')}"></s:GridColumn>
						<s:GridColumn dataField="oprd_cust_no" headerText="{resourceManager.getString('default','ORDER_CUST_NO')}"></s:GridColumn>
						<s:GridColumn dataField="oprd_stat_id" headerText="{resourceManager.getString('default','ORDER_STAT_ID')}" visible="false"></s:GridColumn>
						<s:GridColumn dataField="oprd_stat_name" headerText="{resourceManager.getString('default','ORDER_STAT_NAME')}"></s:GridColumn>
						<s:GridColumn dataField="oprd_approved" headerText="{resourceManager.getString('default','ORDER_APPROVED')}" itemRenderer="renderers.GridCheckRender"></s:GridColumn>
						
						<s:GridColumn dataField="oprd_ord_time" headerText="{resourceManager.getString('default','ORDER_ORD_TIME')}" itemRenderer="renderers.DateRenderer"></s:GridColumn>
						<s:GridColumn dataField="oprd_exp_time" headerText="{resourceManager.getString('default','ORDER_EXP_TIME')}" itemRenderer="renderers.DateRenderer"></s:GridColumn>
						
						<s:GridColumn dataField="oprd_prod_code" headerText="{resourceManager.getString('default','OPRD_PROD_CODE')}" visible="true" editable="false"></s:GridColumn>
						<s:GridColumn dataField="oprd_prod_name" headerText="{resourceManager.getString('default','OPRD_PROD_NAME')}" visible="true"></s:GridColumn>
						<s:GridColumn dataField="oprd_prod_cmpy" headerText="{resourceManager.getString('default','OPRD_PROD_CMPY')}" visible="true"></s:GridColumn>
						<s:GridColumn dataField="oprd_drwr_name" headerText="{resourceManager.getString('default','OPRD_DRWR_NAME')}" visible="true"></s:GridColumn>
						<s:GridColumn dataField="oprd_period_no" headerText="{resourceManager.getString('default','OPRD_PERIOD_NO')}"  visible="true" editable="false" editable.detail="false"></s:GridColumn>
						<s:GridColumn dataField="oprd_period_start" headerText="{resourceManager.getString('default','OPRD_PERIOD_START')}" visible="true" editable="false" editable.detail="false" itemRenderer="renderers.DateRenderer" itemEditor="itemeditors.DateEditor"></s:GridColumn>
						<s:GridColumn dataField="oprd_period_end" headerText="{resourceManager.getString('default','OPRD_PERIOD_END')}" visible="true" editable="false" editable.detail="false" itemRenderer="renderers.DateRenderer" itemEditor="itemeditors.DateEditor"></s:GridColumn>
						<!--s:GridColumn dataField="oprd_period_start" headerText="{resourceManager.getString('default','OPRD_PERIOD_START')}" visible="true" itemRenderer="renderers.DateRenderer" editable="true" editable.detail="false" ></s:GridColumn>
						<s:GridColumn dataField="oprd_period_end" headerText="{resourceManager.getString('default','OPRD_PERIOD_END')}" visible="true" itemRenderer="renderers.DateRenderer" editable="false" editable.detail="false"></s:GridColumn-->
						<s:GridColumn dataField="oprd_prod_unit" headerText="{resourceManager.getString('default','OPRD_PROD_UNIT')}"  
									  width="100" visible="true" editable="false" editable.detail="false" labelFunction="unitLabelFunction" itemEditor="itemeditors.ProductUnits">
						</s:GridColumn>
						<s:GridColumn dataField="oprd_unit_name" headerText="{resourceManager.getString('default','OPRD_UNIT_NAME')}" visible="false"></s:GridColumn>
						<s:GridColumn dataField="oprd_prod_qty" headerText="{resourceManager.getString('default','OPRD_PROD_QTY')}" visible="true" editable="false" editable.detail="false"></s:GridColumn>
						<s:GridColumn dataField="oprd_prod_used" headerText="{resourceManager.getString('default','OPRD_PROD_USED')}" visible="true" visible.detail="true"></s:GridColumn>
						<s:GridColumn dataField="oprd_price_fixed" headerText="{resourceManager.getString('default','OPRD_PRICE_FIXED')}" visible="false" itemRenderer="renderers.GridCheckRender"></s:GridColumn>
						<s:GridColumn dataField="oprd_prod_price" headerText="{resourceManager.getString('default','OPRD_PROD_PRICE')}" visible="false"></s:GridColumn>
					</s:source>
				</s:ArrayList>
			</s:columns>
			<s:dataProvider>
				<s:AsyncListView id="pgList" list="{this.pagedRecords}"/>
			</s:dataProvider>
		</s:DataGrid>
		<s:HGroup width="100%">
			<components:Downloader id="pb" width="100%" height="18"/>
			<!--mx:ProgressBar id="pb" width="100%" height="22" visible="false" includeInLayout="false"  mode="manual" source="{this.pgList}" label="{this.currentLength} records shown from {this.currentLength} loaded out of {this.totalLength} found." labelPlacement="center"/-->
			<s:Button id="killBtn" width="18" height="18" label="" cornerRadius="12" visible="false" includeInLayout="false"
					  click="killBtn_clickHandler(event)"/>
			<s:Button id="resumeBtn" width="18" height="18" label="" cornerRadius="12" visible="false" includeInLayout="false"
					  click="resumeBtn_clickHandler(event)"/>
		</s:HGroup>
	</s:Panel>
	
	<s:Panel id="details" includeIn="edit,create,detail" width="100%" height="240"
			 itemCreationPolicy="immediate" skinClass="skins.WidgetPanelSkin">
		<s:layout>
			<s:VerticalLayout/>
			<!--s:TileLayout/-->
		</s:layout>
		
		<s:Spacer height="5"/>
		<s:VGroup>
			<s:HGroup>
				<s:HGroup visible="false" includeInLayout="false">
					<s:Label width="{labelWidth}" height="{labelHeight}" text="{resourceManager.getString('default','ORDER_SYS_NO')}" verticalAlign="middle"/>
					<components:DKI_ValidatorInput id="oprd_order_id" 
												   width="{fieldWidth}" height="{fieldHeight}" 
												   text="{dataGrid.selectedItem.oprd_order_id}" editable="false" enabled="false"
												   text.create="{this.fltr_ordsysno.text}" editable.create="false" enabled.create="false"
												   required="false" validationType="integer" validationGroup="{vg}" automationName="{resourceManager.getString('default','ORDER_SYS_NO')}" 
												   />
				</s:HGroup>
				<s:HGroup>
					<s:Label width="{labelWidth}" height="{labelHeight}" text="{resourceManager.getString('default','ORDER_SUPP_NAME')}" verticalAlign="middle"/>
					<components:DKI_ValidatorComboBox  id="oprd_supp_code" 
													   dataProvider="{this.supplierList}" 
													   labelField="cmpy_desc" 
													   selectedItem="" enabled="false" 
													   selectedIndex.create="{this.fltr_supplier.selectedIndex}" enabled.create="false" 
													   width="{fieldWidth}" height="{fieldHeight}" 
													   prompt="{resourceManager.getString('default','SELECT')+resourceManager.getString('default','ORDER_SUPP_NAME')}"  
													   required="false" validationGroup="{vg}" automationName="{resourceManager.getString('default','ORDER_SUPP_NAME')}" 
													   />
				</s:HGroup>
				<s:Spacer width="{spaceWidth}" />
				<s:HGroup>
					<s:Label width="{labelWidth}" height="{labelHeight}" text="{resourceManager.getString('default','ORDER_CUST_ACNT')}" verticalAlign="middle"/>
					<components:DKI_ValidatorComboBox id="oprd_cust_acnt" 
													  dataProvider="{this.customerList}" 
													  labelField="cust_desc" 
													  selectedItem="" enabled="false" 
													  selectedIndex.create="{this.fltr_customer.selectedIndex}" enabled.create="false" 
													  width="{fieldWidth}" height="{fieldHeight}" 
													  prompt="{resourceManager.getString('default','SELECT')+resourceManager.getString('default','ORDER_CUST_ACNT')}"  
													  required="false" validationGroup="{vg}" automationName="{resourceManager.getString('default','ORDER_CUST_ACNT')}" 
													  />
				</s:HGroup>
				<s:Spacer width="{spaceWidth}" />
				<s:HGroup>
					<s:Label width="{labelWidth}" height="{labelHeight}" text="{resourceManager.getString('default','ORDER_CUST_NO')}" verticalAlign="middle"/>
					<components:DKI_ValidatorInput id="oprd_cust_no" 
												   width="{fieldWidth}" height="{fieldHeight}" 
												   text="{dataGrid.selectedItem.oprd_cust_no}" editable="false" enabled="false" 
												   text.create="{this.fltr_ordcustno.text}" editable.create="false" enabled.create="false"
												   required="true" validationType="integer" validationGroup="{vg}" automationName="{resourceManager.getString('default','ORDER_CUST_NO')}" 
												   />
				</s:HGroup>
			</s:HGroup>
			
			
			<s:HGroup>
				<s:HGroup>
					<s:Label width="{labelWidth}" height="{labelHeight}" text="{resourceManager.getString('default','ORDER_ORD_TIME')}" verticalAlign="middle"/>
					<components:DKI_DateTime id="oprd_ord_time" 
											 selectedDate="{convertDateToLocale(dataGrid.selectedItem.oprd_ord_time)}" enabled="false" 
											 selectedDate.create="{convertDateToLocale(this.fltr_ordtime.text)}" enabled.create="false" 
											 width="{fieldWidth}" height="{fieldHeight}" timeEnabled="false"
											 />
				</s:HGroup>
				<s:Spacer width="{spaceWidth}" />
				<s:HGroup>
					<s:Label width="{labelWidth}" height="{labelHeight}" text="{resourceManager.getString('default','ORDER_EXP_TIME')}" verticalAlign="middle"/>
					<components:DKI_DateTime id="oprd_exp_time" 
											 selectedDate="{convertDateToLocale(dataGrid.selectedItem.oprd_exp_time)}" enabled="false" 
											 selectedDate.create="{convertDateToLocale(this.fltr_exptime.text)}" enabled.create="false" 
											 width="{fieldWidth}" height="{fieldHeight}" timeEnabled="false"
											 />
				</s:HGroup>
				<s:Spacer width="{spaceWidth}" />
				<s:HGroup>
					<s:Label width="{labelWidth}" height="{labelHeight}" text="{resourceManager.getString('default','ORDER_STAT_NAME')}" verticalAlign="middle"/>
					<components:DKI_ValidatorComboBox id="oprd_stat_id" 
													  dataProvider="{this.statusTypeList}" 
													  labelField="ordstat_type_name" 
													  selectedItem="{dataGrid.selectedItem.oprd_stat_name}" enabled="false" 
													  selectedIndex.create="{this.fltr_ordstat.text}" enabled.create="false" 
													  width="{fieldWidth}" height="{fieldHeight}" 
													  prompt="{resourceManager.getString('default','SELECT')+resourceManager.getString('default','ORDER_STAT_NAME')}"
													  required="false"  
													  />
				</s:HGroup>
				<s:Spacer width="{spaceWidth}" />
				<s:HGroup>
					<s:CheckBox id="oprd_approved" 
								label="{resourceManager.getString('default','ORDER_APPROVED')}" fontWeight="bold" 
								selected="{dataGrid.selectedItem.oprd_approved=='Y'?true:false}" enabled="false" 
								selected.create="{fltr_approved.selected}"
								/>
				</s:HGroup>
			</s:HGroup>
			
			
			<s:HGroup>
				<s:HGroup>
					<s:Label width="{labelWidth}" height="{labelHeight}" text="{resourceManager.getString('default','OPRD_PROD_NAME')}" verticalAlign="middle"/>
					<components:DKI_ValidatorComboBox id="oprd_prod_code" 
													  dataProvider="{this.productList}" 
													  labelField="prod_desc" 
													  selectedItem="{dataGrid.selectedItem.oprd_prod_cmpy + ' - ' + dataGrid.selectedItem.oprd_prod_code + ' - ' + dataGrid.selectedItem.oprd_prod_name}" enabled="false" 
													  selectedIndex.create="{this.fltr_product.selectedIndex}" enabled.create="false" 
													  width="{fieldWidth}" height="{fieldHeight}" 
													  prompt="{resourceManager.getString('default','SELECT')+resourceManager.getString('default','OPRD_PROD_NAME')}"  
													  required="true" validationGroup="{vg}" automationName="{resourceManager.getString('default','OPRD_PROD_NAME')}" 
													  />
				</s:HGroup>
				<s:Spacer width="{spaceWidth}" />
				<s:HGroup>
					<s:Label width="{labelWidth}" height="{labelHeight}" text="{resourceManager.getString('default','OPRD_UNIT_NAME')}" verticalAlign="middle"/>
					<components:DKI_ValidatorComboBox id="oprd_prod_unit" 
													  dataProvider="{this.productUnitList}" 
													  labelField="unit_name" 
													  selectedItem="{dataGrid.selectedItem.oprd_unit_name}" enabled="true" 
													  selectedItem.create="" selectedIndex.create="0" enabled.create="true" 
													  width="{fieldWidth}" height="{fieldHeight}" 
													  prompt="{resourceManager.getString('default','SELECT')+resourceManager.getString('default','OPRD_UNIT_NAME')}"
													  required="true" validationGroup="{vg}" automationName="{resourceManager.getString('default','OPRD_UNIT_NAME')}" 
													  />
				</s:HGroup>
				<s:Spacer width="{spaceWidth}" />
				<s:HGroup>
					<s:Label width="{labelWidth}" height="{labelHeight}" text="{resourceManager.getString('default','OPRD_PERIOD_NO')}" verticalAlign="middle"/>
					<components:DKI_ValidatorInput id="oprd_period_no" 
												   width="{fieldWidth}" height="{fieldHeight}" 
												   text="{dataGrid.selectedItem.oprd_period_no}" editable="true" enabled="true"
												   text.create="" editable.detail="false" enabled.detail="false" editable.edit="true" enabled.edit="true" 
												   required="true" validationType="integer" validationGroup="{vg}" automationName="{resourceManager.getString('default','OPRD_PERIOD_NO')}"
												   />
				</s:HGroup>
				<s:Spacer width="{spaceWidth}" />
			</s:HGroup>
			
			
			
			<s:HGroup>
				<s:HGroup>
					<s:Label width="{labelWidth}" height="{labelHeight}" text="{resourceManager.getString('default','OPRD_PERIOD_START')}" verticalAlign="middle"/>
					<components:DKI_DateTime id="oprd_period_start" 
											 selectedDate="{convertDateToLocale(dataGrid.selectedItem.oprd_period_start)}" enabled="true" 
											 selectedDate.create="{convertDateToLocale(this.fltr_ordtime.text)}" enabled.create="true" 
											 width="{fieldWidth}" height="{fieldHeight}" timeEnabled="false"
											 />
				</s:HGroup>
				<s:Spacer width="{spaceWidth}" />
				<s:HGroup>
					<s:Label width="{labelWidth}" height="{labelHeight}" text="{resourceManager.getString('default','OPRD_PERIOD_END')}" verticalAlign="middle"/>
					<components:DKI_DateTime id="oprd_period_end" 
											 selectedDate="{convertDateToLocale(dataGrid.selectedItem.oprd_period_end)}" enabled="true" 
											 selectedDate.create="{convertDateToLocale(this.fltr_exptime.text)}" enabled.create="true" 
											 width="{fieldWidth}" height="{fieldHeight}" timeEnabled="false"
											 />
				</s:HGroup>
				<s:Spacer width="{spaceWidth}" />
				<s:HGroup>
					<s:Label width="{labelWidth}" height="{labelHeight}" text="{resourceManager.getString('default','OPRD_PROD_QTY')}" verticalAlign="middle"/>
					<components:DKI_ValidatorInput id="oprd_prod_qty" 
												   width="{fieldWidth}" height="{fieldHeight}" 
												   text="{dataGrid.selectedItem.oprd_prod_qty}" editable="true" enabled="true"
												   text.create="" editable.detail="false" enabled.detail="false" editable.edit="true" enabled.edit="true" 
												   required="true" validationType="integer" validationGroup="{vg}" automationName="{resourceManager.getString('default','OPRD_PROD_QTY')}"
												   />
				</s:HGroup>
			</s:HGroup>
			
			
		</s:VGroup>
		
		<s:Spacer height="0" />
		
		<s:HGroup width="100%" paddingBottom="4" paddingTop="0" gap="5">
			<s:Spacer width="100%"/>
			<components:DKI_Button id="btn_delete" label="{resourceManager.getString('default','DELETE')}" height="100%" click="doDelete()" includeIn="edit" enabled="{this.canDelete}" type="delete"/>
			<components:DKI_Button id="btn_save" label.create="{resourceManager.getString('default','SAVE')}" label="{resourceManager.getString('default','UPDATE')}" height="100%" includeIn="edit,create" enabled.create="{this.canCreate}" enabled="{this.canUpdate}" type.create="create" type="edit"/>
			<components:DKI_Button id="btn_cancel" label="{resourceManager.getString('default','CANCEL')}" height="100%" click="cancel_clickHandler()" enabled="true" type="cancel"/>
		</s:HGroup>
	</s:Panel>
	
</s:VGroup>
