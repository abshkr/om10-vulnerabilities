<?xml version="1.0" encoding="utf-8"?>
<s:VGroup xmlns:fx="http://ns.adobe.com/mxml/2009"
		  xmlns:s="library://ns.adobe.com/flex/spark"
		  xmlns:mx="library://ns.adobe.com/flex/mx"
		  xmlns:components="components.*"
		  creationComplete="creationCompleteHandler(event)"
		  gap="2" width="100%" height="100%">
	
	<s:states>
		<s:State name="normal" enterState="this.toolbar.enabled=true"/>
		<s:State name="widget" enterState="this.toolbar.enabled=true"/>
		<s:State name="edit" enterState="callLater(function():void{dataGrid.ensureCellIsVisible(idx);});this.toolbar.enabled=false"/>
		<s:State name="create" enterState="this.toolbar.enabled=false"/>
		<s:State name="detail" enterState="view_detailsHandler(event);this.toolbar.enabled=false"/>
	</s:states>
	
	<fx:Script>
		<![CDATA[
			import com.adobe.fiber.runtime.lib.DateTimeFunc;
			
			import components.ActionDialog;
			import components.ConfirmDialog;
			import components.DeleteDialog;
			import components.DeliveryLocationCustomersEditor;
			import components.ErrorDialog;
			import components.ExportData;
			import components.MessageDialog;
			import components.TransactionsDlg;
			import components.ViewPopupDlg;
			
			import dm.remoteBulkListService;
			import dm.remoteDataService;
			import dm.remoteListService;
			import dm.utils.tools;
			
			import flash.events.KeyboardEvent;
			import flash.globalization.LocaleID;
			
			import flashx.textLayout.container.ScrollPolicy;
			
			import mx.collections.ArrayCollection;
			import mx.controls.Alert;
			import mx.controls.DateField;
			import mx.events.FlexEvent;
			import mx.managers.PopUpManager;
			import mx.rpc.events.ResultEvent;
			import mx.utils.ObjectUtil;
			import mx.utils.StringUtil;
			
			import renderers.DKI_HeaderColumn_Renderer;
			
			import spark.components.ToggleButton;
			import spark.components.VScrollBar;
			import spark.components.gridClasses.IGridItemRenderer;
			import spark.events.GridEvent;
			import spark.events.GridSelectionEvent;
			import spark.events.IndexChangeEvent;
			
			
			public static const MAIN_WINDOW_WIDTH:int = 1500;
			
			[Bindable] public var readOnly:Boolean = false;
			[Bindable] public var canUpdate:Boolean = false;
			[Bindable] public var canCreate:Boolean = false;
			[Bindable] public var canDelete:Boolean = false;
			[Bindable] public var hasPassword:Boolean = false;
			
			[Bindable] public var labelWidth:uint = 110;
			[Bindable] public var labelHeight:uint = 26;
			[Bindable] public var fieldWidth:uint = 230;
			[Bindable] public var fieldHeight:uint = 26;
			[Bindable] public var spaceWidth:uint = 15;
			[Bindable] public var spaceHeight:uint = 0;
			
			private var idx:int=-1;
			
			private var currentFilter:String=null;
			private var currentOrder:String='delv_codet';
			private var currentDirection:String="ASC";
			
			private var currentOffset:int=0;
			private var currentPageSize:int=1000;
			[Bindable] private var totalLength:int=0;
			[Bindable] private var currentLength:int=0;
			
			private var currentFields:Object=new Object();
			private var currentTypes:Object=new Object();
			//private var currentSorts:Object=new Object();
			//private var currentOrders:Object=new Object();
			private var currentSorts:Object={delv_code:'ASC'};
			private var currentOrders:Object={delv_code:1};
			private var currentSortSeq:int=0;
			
			
			private var confirmReport:ActionDialog;
			private var confirmSave:ActionDialog;
			private var errorDialog:ErrorDialog;
			
			//private var exportContents:String="";
			private var f:FileReference = new FileReference();
			
			
			//private var getData:Responder = new Responder(getData_resultHandler);
			
			//private var pagedRecords:ArrayCollection=new ArrayCollection();
			//private var pagedRecords:remoteDataService = new remoteDataService( "DeliveryLocationService.getPaged", getData, null );
			[Bindable] private var pagedRecords:remoteListService;
			
			private var deleteAction:remoteDataService = new remoteDataService( "DeliveryLocationService.delete", null, deleteData_resultHandler, 1 );
			private var createAction:remoteDataService = new remoteDataService( "DeliveryLocationService.create", null, createData_resultHandler, 1 );
			private var updateAction:remoteDataService = new remoteDataService( "DeliveryLocationService.update", null, updateData_resultHandler, 1 );
			//private var linkAction:remoteDataService = new remoteDataService( "DeliveryLocationService.link2Customer", null, linkData_resultHandler, 1 );
			
			private var delvlocKeyChecker:remoteDataService = new remoteDataService( "DeliveryLocationService.isDeliveryLocationExisted", null, delvlocKeyChecker_resultHandler, 2 );
			private var delvlocCustomerChecker:remoteDataService = new remoteDataService( "DeliveryLocationService.isDeliveryLocationUsed", null, delvlocCustomerChecker_resultHandler, 2 );
			
			private var gridColumnSequenceMaker:remoteDataService = new remoteDataService( "ScreenGridColumnService.lookupGridColumnSequence", null, gridColumnSequenceMaker_resultHandler, 1 );
			private var _gridColumnSequenceString:String="";
			private var formColumnSettingsMaker:remoteDataService = new remoteDataService( "ScreenFormColumnService.lookupFormColumnSettings", null, formColumnSettingsMaker_resultHandler, 1 );
			private var _formColumnSettingsString:String="";
			
			
			[Bindable] private var customerSupplierList:remoteDataService = new remoteDataService( "ListLibraryService.lookupCompany", null, lookupCustomerSupplier_resultHandler );
			[Bindable] private var customerAccountList:remoteDataService = new remoteDataService( "ListLibraryService.lookupCustomerByFilter", null, lookupcustomerAccount_resultHandler );
			[Bindable] private var addressList:remoteDataService = new remoteDataService( "ListLibraryService.lookupAddressContent", null, lookupAddress_resultHandler );
			
			[Bindable] private var qtyTypeList:remoteDataService = new remoteDataService( "ListLibraryService.lookupQtyType", null, null );
			[Bindable] private var trspTypeList:remoteDataService = new remoteDataService( "ListLibraryService.lookupTransportType", null, null );
			[Bindable] private var docTypeList:remoteDataService = new remoteDataService( "ListLibraryService.lookupDocumentType", null, null );
			[Bindable] private var eqptTypeList:remoteDataService = new remoteDataService( "ListLibraryService.lookupEqptType", null, null );
			[Bindable] private var profileList:remoteDataService = new remoteDataService( "ListLibraryService.lookupProfile", null, null );
			
			//private var genData:ExportData = new ExportData();
			
			public var parentParams:Object = new Object();
			public var mainListSelection:int = -1;
			private var _saveButtonClicked:Boolean=false;
			
			public var isPopupWindow:Boolean=false;
			[Bindable] public var isFromCustomerScreen:Boolean=false;
			
			public var addressesPopup:ViewPopupDlg = new ViewPopupDlg( "Addresses", new v_Addresses(), closeAddressDialogHandler );
			public var delvlocCustomersPopup:ViewPopupDlg = new ViewPopupDlg( "Link Delivery Location to Customers", new DeliveryLocationCustomersEditor(), closeDelvlocCustomerDialogHandler );
		
			private var _cust_address:String="";
			private var _cust_category:String="";
			
			
			protected function creationCompleteHandler(event:FlexEvent):void
			{
				this.formColumnSettingsMaker.service( "DELIVERY_LOCATIONS" );
				
				trace ("-------------start creationCompleteHandler");
				pagedRecords = new remoteListService( this.dataGrid, "DeliveryLocationService.getPaged", null, getPageData_resultHandler );
				//resourceManager.localeChain = ['zh_CN'];
				//global.LanguageCode="CHN";
				this.gridColumnSequenceMaker.service( "DELIVERY_LOCATIONS" );
				
				
				var value:String = global.getValueFromSiteConfigSettings( "SITE_AUTO_FILTER_WHEN_OPEN_SCREEN" );
				if ( value == 'Y' )
				{
					if ( this.isPopupWindow == false )
					{
						this.startFiltering();
					}
				}
				else
				{
					;
				}
				
				this.customerSupplierList.service( 1 );
				this.customerAccountList.service( '-1', '-1' );
				this.addressList.service(  );
				
				this.qtyTypeList.service( );
				this.trspTypeList.service( -1 );
				this.docTypeList.service( );
				this.eqptTypeList.service( );
				this.profileList.service();
				
				
				trace ("------------End creationCompleteHandler");
				
				
				//trace("this.grid.scroller1111", this.dataGrid.scroller);
				//trace("this.grid.scroller.verticalScrollBar.value", this.dataGrid.scroller.verticalScrollBar.value);
				this.dataGrid.scroller.verticalScrollBar.addEventListener(Event.CHANGE, verticalScrollBarChanged);
				this.dataGrid.addEventListener(KeyboardEvent.KEY_UP, reportKeyUp);
				this.dataGrid.columnHeaderGroup.addEventListener(GridEvent.GRID_CLICK, headerClickListener);
				
			}
			
			
			private function lookupCustomerSupplier_resultHandler():void
			{
				if ( currentFields.hasOwnProperty( "delv_cust_suppcode" ) )
				{
					this.fltr_supplier.selectedIndex = tools.getItemIndexFromCode( currentFields["delv_cust_suppcode"], customerSupplierList, "cmpy_code");
				}
			}
			
			private function lookupcustomerAccount_resultHandler():void
			{
				if ( currentFields.hasOwnProperty( "delv_cust_acct" ) )
				{
					this.fltr_customer.selectedIndex = tools.getItemIndexFromCode( currentFields["delv_cust_acct"], customerAccountList, "cust_acnt");
				}
			}
			
			protected function lookupAddress_resultHandler():void
			{
				if ( currentState == "create" || currentState == "edit" )
				{
					this.delv_addr_code.selectedIndex = tools.getItemIndexFromCode( _cust_address, addressList, "address_code");
				}
			}
			
			
			protected function formColumnSettingsMaker_resultHandler():void
			{
				this._formColumnSettingsString =  formColumnSettingsMaker.dataString;
			}
			
			
			protected function startLoadingPages():void
			{
				killBtn.setStyle("chromeColor","0xff0000");
				this.killBtn.includeInLayout=true;
				this.killBtn.visible = true;
				this.killBtn.enabled = true;
				
				resumeBtn.setStyle("chromeColor","0x00ff00");
				this.resumeBtn.includeInLayout=true;
				this.resumeBtn.visible = true;
				this.resumeBtn.enabled = false;
				
				this.btn_create.enabled = false
				this.btn_export.enabled = false;
				this.dataGrid.enabled = false;
				this.toolbar.enabled = false;
				//this.panel.enabled = false;
				
				currentLength=0;
				currentOffset = 0;
				
				//this.exportContents = this.genData.prepExportHeader( dataGrid );
				
				//currentPage=1;
				pagedRecords.currentPage=1;
				pagedRecords.removeAll();
				pagedRecords.refresh();
				this.pb.values(0, 0);
				//this.pagedRecords.service( currentFields, currentTypes, currentSorts, currentOrders, currentPage, currentPageSize );
				this.pagedRecords.listService( currentFields, currentTypes, currentSorts, currentOrders );
			}
			
			protected function endLoadingPages():void
			{
				this.btn_create.enabled = this.canCreate;
				this.btn_export.enabled = true;
				this.dataGrid.enabled = true;
				this.toolbar.enabled = true;
				//this.panel.enabled = true;
				//this.pb.values(totalCount, totalCount);
				this.pb.values(pagedRecords.totalCount, pagedRecords.totalCount, true);
				
				this.killBtn.includeInLayout=true;
				this.killBtn.visible = true;
				this.killBtn.enabled = false;
				
				this.resumeBtn.includeInLayout=true;
				this.resumeBtn.visible = true;
				//if ( totalLength > totalCount )
				if ( pagedRecords.totalLength > pagedRecords.totalCount )
				{
					this.resumeBtn.enabled = true;
				}
				else
				{
					this.resumeBtn.enabled = false;
				}
				
				//this.fltr_delvloc.setFocus();
				var len:int = this.fltr_delvloc.text.length;
				this.fltr_delvloc.selectRange(len, len);
			}
			
			protected function exportCsvHandler(event:MouseEvent):void
			{
				this.confirmReport = new ActionDialog( doExport, cancelExport, resourceManager.getString('default','CONFIRM_REPORT_CSV') );
				
				//this.startLoadingPages();
			}
			
			private function getPageData_resultHandler():void
			{
				// if not finished
				if(pagedRecords.length < pagedRecords.totalCount)
				{
					pb.values(pagedRecords.length,pagedRecords.totalCount)
				}
				else
				{
					pb.values(pagedRecords.length,pagedRecords.totalCount)
					
					this.endLoadingPages();
					
					this.dataGrid.selectedIndex = this.mainListSelection;
					if ( this.mainListSelection >= 0)
					{
						this.dataGrid_selectionChangeHandler(null);
					}
					this.mainListSelection = -1;
					
				}
				
			}
			
			
			public function doExport():void
			{
				//genData.prepOther(dataGrid,'customerlist.csv', this.pagedRecords);
				
				//f.save( this.exportContents, "customerlist.csv" );
				f.save( pagedRecords.exportContents, "customerlist.csv" );
				
				this.endLoadingPages();
			}
			
			
			public function cancelExport():void
			{
				this.endLoadingPages();
				
				//trace( this.exportContents );
			}
			
			public function doNothing():void
			{
			}
			
			
			private function verticalScrollBarChanged(event:Event):void
			{
				if ( this.dataGrid.scroller != null)
				{
					var vs:VScrollBar;
					vs = this.dataGrid.scroller.verticalScrollBar;
					//trace("this.grid.scroller.verticalScrollBar.value", vs.value, vs.maximum, vs.minimum, vs.stepSize, vs.pageSize, vs.	snapInterval);
				}
				else
				{
					trace("grid is changed");
				}
			}
			
			private function reportKeyUp(event:KeyboardEvent):void
			{
				if ( this.dataGrid.scroller != null)
				{
					var vs:VScrollBar;
					vs = this.dataGrid.scroller.verticalScrollBar;
					//trace("this.grid.scroller.verticalScrollBar.value", vs.value, vs.maximum, vs.minimum, vs.stepSize, vs.pageSize, vs.	snapInterval);
				}
				else
				{
					trace("grid is changed");
				}
			}
			
			private function headerClickListener(event:GridEvent):void
			{
				if(event.column.dataField!='prod_items')
				{
					var currentRenderer:IGridItemRenderer;
					var dir:String;
					
					if ( global.sortingBySingleColumn == true )
					{	// sorted by single column only
						for (var i:int=0; i < dataGrid.columns.length; i++)
						{
							currentRenderer = dataGrid.columnHeaderGroup.getHeaderRendererAt(i);
							if ( currentRenderer != null)
							{
								(currentRenderer as DKI_HeaderColumn_Renderer).setImage('');
							}
							//(currentRenderer as DKI_HeaderColumn_Renderer).setImage(''); 
						}
					}
					else
					{	// sorted by multiple columns
						;
					}
					currentRenderer = dataGrid.columnHeaderGroup.getHeaderRendererAt(event.columnIndex);
					
					if( currentSorts.hasOwnProperty(event.column.dataField ) )
					{
						dir = currentSorts[event.column.dataField];
						if( dir=="ASC" )
						{
							dir = "DESC";
						}
						else if ( dir == "DESC" )
						{
							dir = "";
						}
						else if ( dir == "" )
						{
							dir = "ASC";
						}
						else 
						{
							dir = "ASC";
						}
						
						if ( dir != "" )
						{
							currentSorts[event.column.dataField] = dir;	
						}
						else
						{
							delete currentSorts[event.column.dataField];
							delete currentOrders[event.column.dataField];
						}
					}
					else
					{
						if ( global.sortingBySingleColumn == true )
						{	// sorted by single column only
							currentSorts = new Object();
							currentOrders = new Object();
							currentSortSeq = 0;
						}
						else
						{	// sorted by multiple columns
							;
						}
						currentSorts[event.column.dataField] = "ASC";	
						dir = currentSorts[event.column.dataField];
						currentSortSeq += 1;
						currentOrders[event.column.dataField] = currentSortSeq;	
					}
					(currentRenderer as DKI_HeaderColumn_Renderer).setImage(dir);
					this.startFiltering();
				}
			}
			
			
			protected function dataGrid_selectionChangeHandler(event:GridSelectionEvent):void
			{
				if(currentState != 'widget')
				{
					idx=dataGrid.selectedIndex;
					//dataGrid.ensureCellIsVisible(idx+11);
					dataGrid.ensureCellIsVisible(idx);
					
					currentState = "edit";					
					this.btn_save.enabled = this.canUpdate;
					
					if ( dataGrid.selectedIndex >= 0 )
					{
						var cust_count:int=0;
						if ( this.isFromCustomerScreen == true )
						{
							cust_count = 1;
						}
						if ( dataGrid.selectedItem.delv_order_count==0 && dataGrid.selectedItem.delv_cust_count<=cust_count )
						{
							this.btn_delete.enabled = this.canDelete;
						}
						else
						{
							this.btn_delete.enabled = false;
						}
					}
					
					
					if ( _formColumnSettingsString.length > 0 )
					{
						global.adjustFormFieldSettings( _formColumnSettingsString.substr(1), this );
					}
				}
			}
			
			protected function cancel_clickHandler():void
			{
				clearDetail();
				if ( currentState== "create" )
				{
					dataGrid.enabled=true;
				}
				currentState="normal";
				dataGrid.selectedIndex = -1;
			}			
			
			protected function gridColumnSequenceMaker_resultHandler():void
			{
				this._gridColumnSequenceString =  gridColumnSequenceMaker.dataString;
				
				if ( _gridColumnSequenceString.length > 0 )
				{
					global.adjustGridColumnSequence( _gridColumnSequenceString.substr(1), dataGrid );
				}
				
			}
			
			
			protected function fltr_delvloc_keyUpHandler(event:KeyboardEvent):void
			{
				if ( event.keyCode != 13 )
				{
					return;
				}
				if (currentState == "edit") clearDetail();
				startFiltering();
			}
			
			protected function fltr_supplier_changeHandler(event:IndexChangeEvent):void
			{
				if (currentState == "edit") clearDetail();
				startFiltering();
			}
			
			protected function fltr_customer_changeHandler(event:IndexChangeEvent):void
			{
				if (currentState == "edit") clearDetail();
				startFiltering();
			}
			
			protected function fltr_transport_changeHandler(event:IndexChangeEvent):void
			{
				if (currentState == "edit") clearDetail();
				startFiltering();
			}
			
			private function startFiltering():void
			{
				var fields:Object;
				var types:Object;
				
				//interruptor=false;
				pagedRecords.interruptor=false;
				
				fields = new Object();
				types = new Object();
				
				
				if(fltr_delvloc.text!='')
				{					
					fields["delv_code||delv_name"] = fltr_delvloc.text+"||"+fltr_delvloc.text;
				}
				else
				{
					fields["delv_code||delv_name"] = "";
				}
				types["delv_code||delv_name"] = "STRING||STRING";
				
				
				if ( this.currentState != "widget" )
				{
					if (fltr_supplier.selectedIndex > -1) 
					{
						fields["delv_cust_suppcode"] = customerSupplierList[fltr_supplier.selectedIndex].cmpy_code;
					}
					else
					{
						if ( global.setComboBoxNoSelection == true )
						{
							fltr_supplier.selectedIndex = -1;
						}
						fields["delv_cust_suppcode"] = "";
					}
					types["delv_cust_suppcode"] = "EXACT_STRING";
					
					if (fltr_customer.selectedIndex > -1) 
					{
						fields["delv_cust_acct"] = customerAccountList[fltr_customer.selectedIndex].cust_acnt;
					}
					else
					{
						if ( global.setComboBoxNoSelection == true )
						{
							fltr_customer.selectedIndex = -1;
						}
						fields["delv_cust_acct"] = "";
					}
					types["delv_cust_acct"] = "EXACT_STRING";
					
					if (fltr_transport.selectedIndex > -1) 
					{
						fields["delv_trsp_typeid"] = trspTypeList[fltr_transport.selectedIndex].trnspt_type_id;
					}
					else
					{
						if ( global.setComboBoxNoSelection == true )
						{
							fltr_transport.selectedIndex = -1;
						}
						fields["delv_trsp_typeid"] = "";
					}
					types["delv_trsp_typeid"] = "NUMBER";
					
				}
				
				currentFilter = "WHERE 1=1 ";
				
				currentFields = fields;
				currentTypes = types;
				
				this.startLoadingPages();
				
				trace("this.grid.scroller3333", this.dataGrid.scroller);
				trace("this.grid.scroller.verticalScrollBar.value", this.dataGrid.scroller.verticalScrollBar.value);
			}
			
			private function findByPrimaryKey(code:String):void
			{
				var fields:Object;
				var types:Object;
				
				fields = new Object();
				types = new Object();
				
				fields["delv_code"] = code;
				types["delv_code"] = "EXACT_STRING";
				
				//currentPage=1;
				pagedRecords.currentPage=1;
				pagedRecords.removeAll();
				pagedRecords.refresh();
				//this.pagedRecords.service( fields, types, currentSorts, currentOrders, currentPage, currentPageSize );
				this.pagedRecords.listService( fields, types, currentSorts, currentOrders );
			}
			
			protected function filterRecords(event:MouseEvent):void
			{
				if (currentState == "edit") clearDetail();
				this.startFiltering();
			}
			
			protected function refreshRecords(event:MouseEvent):void
			{
				if ( currentState != "widget" )
				{
					currentState = 'normal';
					dataGrid.enabled=true;
				}
				clearDetail();
				fltr_delvloc.text = "";
				if ( currentState != "widget" )
				{
					if ( !this.isFromCustomerScreen )
					{
						fltr_supplier.selectedIndex = -1;
						fltr_customer.selectedIndex = -1;
					}
					fltr_transport.selectedIndex = -1;
				}
				
				dataGrid.selectedIndex = -1;
				currentFilter = null;
				currentOrder = null;
				currentFields = new Object();
				currentTypes = new Object();
				
				currentSorts = new Object();
				currentOrders = new Object();
				var currentRenderer:IGridItemRenderer;
				for (var i:int=0; i < dataGrid.columns.length; i++)
				{
					currentRenderer = dataGrid.columnHeaderGroup.getHeaderRendererAt(i);
					if ( currentRenderer != null)
					{
						(currentRenderer as DKI_HeaderColumn_Renderer).setImage('');
					}
					//(currentRenderer as DKI_HeaderColumn_Renderer).setImage(''); 
				}
				this.startFiltering();
				//this.startLoadingPages();
				trace("this.grid.scroller2222", this.dataGrid.scroller);
				trace("this.grid.scroller.verticalScrollBar.value", this.dataGrid.scroller.verticalScrollBar.value);
			}
			
			protected function clearDetail(): void
			{
				if (currentState != 'widget')
				{
				}
			}			
			
			private function editRecord():void
			{
				
				if ( this.checkFields() > 0 )
				{
					this.btn_save.enabled = this.canUpdate;
					return;
				}
				
				var obj:Object = new Object();
				
				
				obj.delv_code 			= delv_code.text;
				obj.delv_name 			= delv_name.text;
				obj.delv_grid 			= delv_grid.text;
				obj.delv_trip_time 		= delv_trip_time.text;
				obj.delv_distance 		= delv_distance.text;
				obj.delv_tarrif 		= delv_tarrif.text;
				obj.delv_contact 		= delv_contact.text;
				obj.delv_phone 			= delv_phone.text;
				
				if (delv_addr_code.selectedIndex>=0)
				{
					obj.delv_addr_code = addressList[delv_addr_code.selectedIndex].address_code;
				}
				else
				{
					obj.delv_addr_code = dataGrid.selectedItem.delv_addr_code;
				}

				if (delv_trsp_typeid.selectedIndex>=0)
				{
					obj.delv_trsp_typeid = trspTypeList[delv_trsp_typeid.selectedIndex].trnspt_type_id;
					obj.delv_trsp_typename = trspTypeList[delv_trsp_typeid.selectedIndex].trnspt_type_name;
				}
				else
				{
					obj.delv_trsp_typeid = dataGrid.selectedItem.delv_trsp_typeid;
					obj.delv_trsp_typename = dataGrid.selectedItem.delv_trsp_typename;
				}
				
				if (delv_doc_typeid.selectedIndex>=0)
				{
					obj.delv_doc_typeid = docTypeList[delv_doc_typeid.selectedIndex].document_id;
					obj.delv_doc_typename = docTypeList[delv_doc_typeid.selectedIndex].document_name;
				}
				else
				{
					obj.delv_doc_typeid = dataGrid.selectedItem.delv_doc_typeid;
					obj.delv_doc_typename = dataGrid.selectedItem.delv_doc_typename;
				}
				
				if (delv_qty_typeid.selectedIndex>=0)
				{
					obj.delv_qty_typeid = qtyTypeList[delv_qty_typeid.selectedIndex].qty_id;
					obj.delv_qty_typename = qtyTypeList[delv_qty_typeid.selectedIndex].qty_name;
				}
				else
				{
					obj.delv_qty_typeid = dataGrid.selectedItem.delv_qty_typeid;
					obj.delv_qty_typename = dataGrid.selectedItem.delv_qty_typename;
				}
				
				if (delv_etyp_id.selectedIndex>=0)
				{
					obj.delv_etyp_id = eqptTypeList[delv_etyp_id.selectedIndex].etyp_id;
					obj.delv_etyp_title = eqptTypeList[delv_etyp_id.selectedIndex].etyp_title;
				}
				else
				{
					obj.delv_etyp_id = dataGrid.selectedItem.delv_etyp_id;
					obj.delv_etyp_title = dataGrid.selectedItem.delv_etyp_title;
				}
				
				if (delv_prf_code.selectedIndex>=0)
				{
					obj.delv_prf_code = profileList[delv_prf_code.selectedIndex].prf_code;
					obj.delv_prf_desc = profileList[delv_prf_code.selectedIndex].prf_desc;
				}
				else
				{
					obj.delv_prf_code = ""; //dataGrid.selectedItem.delv_prf_code;
					obj.delv_prf_desc = ""; //dataGrid.selectedItem.delv_prf_desc;
				}
				
				
				if (fltr_supplier.selectedIndex>=0)
				{
					obj.delv_cust_suppcode = customerSupplierList[fltr_supplier.selectedIndex].cmpy_code;
					obj.delv_cust_suppname = customerSupplierList[fltr_supplier.selectedIndex].cmpy_name;
				}
				else
				{
					obj.delv_cust_suppcode = '-1';
					obj.delv_cust_suppname = '';
				}
				
				if (fltr_customer.selectedIndex>=0)
				{
					obj.delv_cust_acct = customerAccountList[fltr_customer.selectedIndex].cust_acnt;
					obj.delv_cust_acctdesc = customerAccountList[fltr_customer.selectedIndex].cust_desc;
					obj.delv_cust_cmpycode = customerAccountList[fltr_customer.selectedIndex].cust_cmpy_code;
					obj.delv_cust_cmpyname = customerAccountList[fltr_customer.selectedIndex].cust_cmpy_name;
					obj.delv_cust_catgcode = customerAccountList[fltr_customer.selectedIndex].cust_ctgr_code;
					obj.delv_cust_catgtext = customerAccountList[fltr_customer.selectedIndex].cust_ctgr_text;
				}
				else
				{
					obj.delv_cust_acct = '-1';
					obj.delv_cust_acctdesc = '';
					obj.delv_cust_cmpycode = '-1';
					obj.delv_cust_cmpyname = '';
					obj.delv_cust_catgcode = "-1";
					obj.delv_cust_catgtext = "";
				}
				if ( obj.delv_cust_acct == "" || obj.delv_cust_acct == null )
				{
					obj.delv_cust_acct = '-1';
				}
				if ( obj.delv_cust_cmpycode == "" || obj.delv_cust_cmpycode == null )
				{
					obj.delv_cust_cmpycode = '-1';
				}
				if ( obj.delv_cust_catgcode == "" || obj.delv_cust_catgcode == null )
				{
					obj.delv_cust_catgcode = '-1';
				}

				updateAction.service( obj );
			}
			
			protected function updateData_resultHandler( ):void
			{
				clearDetail();
				if ( this.updateAction.dataString == "OK" )
				{
					global.msgSuccess(resourceManager.getString('default','MSG_UPDATE__SUCCESS'));
				}
				else
				{
					global.msgFail(resourceManager.getString('default','ERROR_UPDATE__FAILURE'));
				}
				
				var code:String;
				code = delv_code.text;
				
				currentState="normal";
				findByPrimaryKey( code );
				
				dataGrid.selectedIndex = -1;
				dataGrid.enabled=true;
			}
			
			private function doDelete(): void
			{
				var errors:String="";
				var index:int=0;
				
				
				/*
				TODO - is this product used by other records?
				*/
				if ( index > 0 )
				{
					var errorBox:MessageDialog = new MessageDialog( errors );
				}
				else
				{
					var canDelete:DeleteDialog = new DeleteDialog(deleteRecord, hasPassword);
				}
			}
			
			private function deleteRecord():void
			{
				var obj:Object = new Object();
				
				
				obj.delv_code 			= delv_code.text;
				obj.delv_name 			= delv_name.text;
				obj.delv_grid 			= delv_grid.text;
				obj.delv_trip_time 		= delv_trip_time.text;
				obj.delv_distance 		= delv_distance.text;
				obj.delv_tarrif 		= delv_tarrif.text;
				obj.delv_contact 		= delv_contact.text;
				obj.delv_phone 			= delv_phone.text;
				
				if (delv_addr_code.selectedIndex>=0)
				{
					obj.delv_addr_code = addressList[delv_addr_code.selectedIndex].address_code;
				}
				else
				{
					obj.delv_addr_code = dataGrid.selectedItem.delv_addr_code;
				}
				
				if (delv_trsp_typeid.selectedIndex>=0)
				{
					obj.delv_trsp_typeid = trspTypeList[delv_trsp_typeid.selectedIndex].trnspt_type_id;
					obj.delv_trsp_typename = trspTypeList[delv_trsp_typeid.selectedIndex].trnspt_type_name;
				}
				else
				{
					obj.delv_trsp_typeid = dataGrid.selectedItem.delv_trsp_typeid;
					obj.delv_trsp_typename = dataGrid.selectedItem.delv_trsp_typename;
				}
				
				if (delv_doc_typeid.selectedIndex>=0)
				{
					obj.delv_doc_typeid = docTypeList[delv_doc_typeid.selectedIndex].document_id;
					obj.delv_doc_typename = docTypeList[delv_doc_typeid.selectedIndex].document_name;
				}
				else
				{
					obj.delv_doc_typeid = dataGrid.selectedItem.delv_doc_typeid;
					obj.delv_doc_typename = dataGrid.selectedItem.delv_doc_typename;
				}
				
				if (delv_qty_typeid.selectedIndex>=0)
				{
					obj.delv_qty_typeid = qtyTypeList[delv_qty_typeid.selectedIndex].qty_id;
					obj.delv_qty_typename = qtyTypeList[delv_qty_typeid.selectedIndex].qty_name;
				}
				else
				{
					obj.delv_qty_typeid = dataGrid.selectedItem.delv_qty_typeid;
					obj.delv_qty_typename = dataGrid.selectedItem.delv_qty_typename;
				}
				
				if (delv_etyp_id.selectedIndex>=0)
				{
					obj.delv_etyp_id = eqptTypeList[delv_etyp_id.selectedIndex].etyp_id;
					obj.delv_etyp_title = eqptTypeList[delv_etyp_id.selectedIndex].etyp_title;
				}
				else
				{
					obj.delv_etyp_id = dataGrid.selectedItem.delv_etyp_id;
					obj.delv_etyp_title = dataGrid.selectedItem.delv_etyp_title;
				}
				
				if (delv_prf_code.selectedIndex>=0)
				{
					obj.delv_prf_code = profileList[delv_prf_code.selectedIndex].prf_code;
					obj.delv_prf_desc = profileList[delv_prf_code.selectedIndex].prf_desc;
				}
				else
				{
					obj.delv_prf_code = ""; //dataGrid.selectedItem.delv_prf_code;
					obj.delv_prf_desc = ""; //dataGrid.selectedItem.delv_prf_desc;
				}
				
				
				if (fltr_supplier.selectedIndex>=0)
				{
					obj.delv_cust_suppcode = customerSupplierList[fltr_supplier.selectedIndex].cmpy_code;
					obj.delv_cust_suppname = customerSupplierList[fltr_supplier.selectedIndex].cmpy_name;
				}
				else
				{
					obj.delv_cust_suppcode = '-1';
					obj.delv_cust_suppname = '';
				}
				
				if (fltr_customer.selectedIndex>=0)
				{
					obj.delv_cust_acct = customerAccountList[fltr_customer.selectedIndex].cust_acnt;
					obj.delv_cust_acctdesc = customerAccountList[fltr_customer.selectedIndex].cust_desc;
					obj.delv_cust_cmpycode = customerAccountList[fltr_customer.selectedIndex].cust_cmpy_code;
					obj.delv_cust_cmpyname = customerAccountList[fltr_customer.selectedIndex].cust_cmpy_name;
					obj.delv_cust_catgcode = customerAccountList[fltr_customer.selectedIndex].cust_ctgr_code;
					obj.delv_cust_catgtext = customerAccountList[fltr_customer.selectedIndex].cust_ctgr_text;
				}
				else
				{
					obj.delv_cust_acct = '-1';
					obj.delv_cust_acctdesc = '';
					obj.delv_cust_cmpycode = '-1';
					obj.delv_cust_cmpyname = '';
					obj.delv_cust_catgcode = "-1";
					obj.delv_cust_catgtext = "";
				}
				if ( obj.delv_cust_acct == "" || obj.delv_cust_acct == null )
				{
					obj.delv_cust_acct = '-1';
				}
				if ( obj.delv_cust_cmpycode == "" || obj.delv_cust_cmpycode == null )
				{
					obj.delv_cust_cmpycode = '-1';
				}
				if ( obj.delv_cust_catgcode == "" || obj.delv_cust_catgcode == null )
				{
					obj.delv_cust_catgcode = '-1';
				}
				
				deleteAction.service( obj );
			}
			
			protected function deleteData_resultHandler( ):void
			{
				clearDetail();
				if ( this.deleteAction.dataString == "OK" )
				{
					global.msgSuccess(resourceManager.getString('default','MSG_DELETE__SUCCESS'));
				}
				else
				{
					global.msgFail(resourceManager.getString('default','ERROR_DELETE__FAILURE'));
				}
				
				currentState="normal";
				this.startFiltering();
				dataGrid.selectedIndex = -1;
			}
			
			private function checkDelvlocKey():void
			{
				var obj:Object=new Object();
				
				obj.delv_code = this.delv_code.text;
				
				delvlocKeyChecker.service( obj.delv_code );
			}
			
			protected function delvlocKeyChecker_resultHandler( ):void
			{
				if ( delvlocKeyChecker.dataInteger > 0 )
				{
					global.msgWarning( resourceManager.getString('default','ALERT__DELIVERY_LOCATION_EXIST') );
					this.btn_save.enabled = this.canCreate;
				}
				else
				{
					if ( this._saveButtonClicked == true )
					{
						this.createRecord();
					}
				}
				
				this._saveButtonClicked = false;
			}
			
			private function checkCustomerAccount():void
			{
				var obj:Object=new Object();
				
				if (this.fltr_customer.selectedIndex>=0)
				{
					obj.delv_cust_acct = customerAccountList[this.fltr_customer.selectedIndex].cust_acnt;
				}
				else
				{
					obj.delv_cust_acct = '-1';
				}
				
				obj.delv_code = this.delv_code.text;
				
				delvlocCustomerChecker.service( obj.delv_cust_acct, obj.delv_code );
			}
			
			protected function delvlocCustomerChecker_resultHandler( ):void
			{
				if ( delvlocCustomerChecker.dataInteger > 0 )
				{
					global.msgWarning( resourceManager.getString('default','ALERT__DELIVERY_LOCATION_USED') );
					this.btn_save.enabled = this.canCreate;
				}
				else
				{
					if ( this._saveButtonClicked == true )
					{
						this.createRecord();
					}
				}
				
				this._saveButtonClicked = false;
			}
			
			private function checkFields():int
			{
				var errors:String="";
				var index:int=0;
				
				
				if ( index > 0 )
				{
					var errorBox:MessageDialog = new MessageDialog( errors, 400 );
				}
				
				return index;
			}

			private function createRecord():void
			{
				
				if ( this.checkFields() > 0 )
				{
					this.btn_save.enabled = this.canCreate;
					return;
				}
				
				var obj:Object = new Object();
				
				
				obj.delv_code 			= delv_code.text;
				obj.delv_name 			= delv_name.text;
				obj.delv_grid 			= delv_grid.text;
				obj.delv_trip_time 		= delv_trip_time.text;
				obj.delv_distance 		= delv_distance.text;
				obj.delv_tarrif 		= delv_tarrif.text;
				obj.delv_contact 		= delv_contact.text;
				obj.delv_phone 			= delv_phone.text;
				
				if (delv_addr_code.selectedIndex>=0)
				{
					obj.delv_addr_code = addressList[delv_addr_code.selectedIndex].address_code;
				}
				else
				{
					obj.delv_addr_code = "";
				}
				
				if (delv_trsp_typeid.selectedIndex>=0)
				{
					obj.delv_trsp_typeid = trspTypeList[delv_trsp_typeid.selectedIndex].trnspt_type_id;
					obj.delv_trsp_typename = trspTypeList[delv_trsp_typeid.selectedIndex].trnspt_type_name;
				}
				else
				{
					obj.delv_trsp_typeid = trspTypeList[0].trnspt_type_id;
					obj.delv_trsp_typename = trspTypeList[0].trnspt_type_name;
				}
				
				if (delv_doc_typeid.selectedIndex>=0)
				{
					obj.delv_doc_typeid = docTypeList[delv_doc_typeid.selectedIndex].document_id;
					obj.delv_doc_typename = docTypeList[delv_doc_typeid.selectedIndex].document_name;
				}
				else
				{
					obj.delv_doc_typeid = docTypeList[0].document_id;
					obj.delv_doc_typename = docTypeList[0].document_name;
				}
				
				if (delv_qty_typeid.selectedIndex>=0)
				{
					obj.delv_qty_typeid = qtyTypeList[delv_qty_typeid.selectedIndex].qty_id;
					obj.delv_qty_typename = qtyTypeList[delv_qty_typeid.selectedIndex].qty_name;
				}
				else
				{
					obj.delv_qty_typeid = qtyTypeList[0].qty_id;
					obj.delv_qty_typename = qtyTypeList[0].qty_name;
				}
				
				if (delv_etyp_id.selectedIndex>=0)
				{
					obj.delv_etyp_id = eqptTypeList[delv_etyp_id.selectedIndex].etyp_id;
					obj.delv_etyp_title = eqptTypeList[delv_etyp_id.selectedIndex].etyp_title;
				}
				else
				{
					obj.delv_etyp_id = eqptTypeList[0].etyp_id;
					obj.delv_etyp_title = eqptTypeList[0].etyp_title;
				}
				
				if (delv_prf_code.selectedIndex>=0)
				{
					obj.delv_prf_code = profileList[delv_prf_code.selectedIndex].prf_code;
					obj.delv_prf_desc = profileList[delv_prf_code.selectedIndex].prf_desc;
				}
				else
				{
					obj.delv_prf_code = ""; //dataGrid.selectedItem.delv_prf_code;
					obj.delv_prf_desc = ""; //dataGrid.selectedItem.delv_prf_desc;
				}
				
				
				if (fltr_supplier.selectedIndex>=0)
				{
					obj.delv_cust_suppcode = customerSupplierList[fltr_supplier.selectedIndex].cmpy_code;
					obj.delv_cust_suppname = customerSupplierList[fltr_supplier.selectedIndex].cmpy_name;
				}
				else
				{
					obj.delv_cust_suppcode = '-1';
					obj.delv_cust_suppname = '';
				}
				
				if (fltr_customer.selectedIndex>=0)
				{
					obj.delv_cust_acct = customerAccountList[fltr_customer.selectedIndex].cust_acnt;
					obj.delv_cust_acctdesc = customerAccountList[fltr_customer.selectedIndex].cust_desc;
					obj.delv_cust_cmpycode = customerAccountList[fltr_customer.selectedIndex].cust_cmpy_code;
					obj.delv_cust_cmpyname = customerAccountList[fltr_customer.selectedIndex].cust_cmpy_name;
					obj.delv_cust_catgcode = customerAccountList[fltr_customer.selectedIndex].cust_ctgr_code;
					obj.delv_cust_catgtext = customerAccountList[fltr_customer.selectedIndex].cust_ctgr_text;
				}
				else
				{
					obj.delv_cust_acct = '-1';
					obj.delv_cust_acctdesc = '';
					obj.delv_cust_cmpycode = '-1';
					obj.delv_cust_cmpyname = '';
					obj.delv_cust_catgcode = "-1";
					obj.delv_cust_catgtext = "";
				}
				if ( obj.delv_cust_acct == "" || obj.delv_cust_acct == null )
				{
					obj.delv_cust_acct = '-1';
				}
				if ( obj.delv_cust_cmpycode == "" || obj.delv_cust_cmpycode == null )
				{
					obj.delv_cust_cmpycode = '-1';
				}
				if ( obj.delv_cust_catgcode == "" || obj.delv_cust_catgcode == null )
				{
					obj.delv_cust_catgcode = '-1';
				}
				
				createAction.service( obj );
			}
			
			protected function createData_resultHandler( ):void
			{
				clearDetail();
				if ( this.createAction.dataString == "OK" )
				{
					global.msgSuccess(resourceManager.getString('default','MSG_CREATE__SUCCESS'));
				}
				else
				{
					global.msgFail(resourceManager.getString('default','ERROR_CREATE__FAILURE'));
				}
				
				var code:String;
				code = delv_code.text;
				
				currentState="normal";
				findByPrimaryKey( code );
				
				dataGrid.selectedIndex = -1;
				dataGrid.enabled=true;
			}
			
			protected function createNewRecord(event:MouseEvent):void
			{	
				idx=dataGrid.selectedIndex;
				dataGrid.ensureCellIsVisible(idx);
				currentState="create";
				this.btn_save.enabled = this.canCreate;
				dataGrid.enabled=false;
				
				if ( _formColumnSettingsString.length > 0 )
				{
					global.adjustFormFieldSettings( _formColumnSettingsString.substr(1), this );
				}
			}
			
			
			public function getArrayCollection(obj:Object):ArrayCollection
			{
				var temp:ArrayCollection = new ArrayCollection;
				temp.addItem( obj );
				return temp;
			}
			
			public function convertDateToLocaleString(dt:String):String
			{
				var dt_string:String;
				var dt_date:Date = new Date();
				
				dt_string = ""; 
				if ((dt!=null) && (dt!='null') && (dt!=''))
				{
					dt_date = DateField.stringToDate(dt,"YYYY-MM-DD");
					dt_string = dateFormatter.format( dt_date);
				}
				//trace ("convertDateToLocale", dt, dt_date, dt_string);
				return dt_string;
			}
			
			public function convertDateToLocale(dt:String):Date
			{
				var dt_date:Date = new Date();
				
				if ((dt!=null) && (dt!='null') && (dt!=''))
				{
					dt_date = DateField.stringToDate(dt,"YYYY-MM-DD");
				}
				//trace ("convertDateToLocale", dt, dt_date, dt_string);
				return dt_date;
			}
			
			public function convertDateToLocaleLong(dt:String):Date
			{
				var dt_date:Date = new Date();
				
				if ((dt!=null) && (dt!='null') && (dt!=''))
				{
					//dt_date = DateField.stringToDate(dt,"YYYY-MM-DD HH:NN:SS");
					dt_date = DateTimeFunc.createDate(
						int(dt.substr(0, 4))
						, int(dt.substr(5, 2))
						, int(dt.substr(8, 2))
						, int(dt.substr(11, 2))
						, int(dt.substr(14, 2))
						, int(dt.substr(17, 2))
					);
				}
				//trace ("convertDateToLocale", dt, dt_date, dt_string);
				return dt_date;
			}
			
			public function getDefaultDate():Date
			{
				var now_date:Date;
				var def_date:Date;
				
				now_date = new Date();
				def_date = DateTimeFunc.dateAdd( "yyyy", 1, now_date );
				
				//trace ("getDefaultDate", now_date, def_date);
				
				return def_date;
			}
			
			protected function view_detailsHandler(event:FlexEvent):void
			{
			}
			
			protected function save_clickHandler():void
			{
				this.btn_save.enabled = false;
				doSave();
				//this.confirmSave = new ActionDialog( doSave, doNothing, resourceManager.getString('default','CONFIRM_SAVE_RATIOS') );
				
				//this.startLoadingPages();
			}
			
			protected function doSave():void
			{
				if (currentState == "create")
				{
					//createRecord();
					this._saveButtonClicked = true;
					checkDelvlocKey();
				}
				if (currentState == "edit")
				{
					editRecord();
				}
				if (currentState == "detail")
				{
					editRecord();
				}
			}
			
			protected function killBtn_clickHandler(event:MouseEvent):void
			{
				//interruptor=true;
				pagedRecords.interruptor=true;
				trace("WTF >>>>>>>>>>");
			}
			
			protected function resumeBtn_clickHandler(event:MouseEvent):void
			{
				//interruptor=false;
				pagedRecords.interruptor=false;
				
				this.resumeLoadingPages();
				trace("RESUME >>>>>>>>>>");
			}
			
			protected function resumeLoadingPages():void
			{
				killBtn.setStyle("chromeColor","0xff0000");
				this.killBtn.includeInLayout=true;
				this.killBtn.visible = true;
				this.killBtn.enabled = true;
				
				resumeBtn.setStyle("chromeColor","0x00ff00");
				this.resumeBtn.includeInLayout=true;
				this.resumeBtn.visible = true;
				this.resumeBtn.enabled = false;
				
				this.btn_create.enabled = false
				this.btn_export.enabled = false;
				this.dataGrid.enabled = false;
				this.toolbar.enabled = false;
				
				//pb.values(pagedRecords.length,totalLength);
				pb.values(pagedRecords.length,pagedRecords.totalLength);
				//currentPage = int(this.pagedRecords.length/currentPageSize) + 1;
				//this.pagedRecords.service( currentFields, currentTypes, currentSorts, currentOrders, currentPage, currentPageSize );
				this.pagedRecords.listService( currentFields, currentTypes, currentSorts, currentOrders );
			}
			
			
			public function goToAddresses():void
			{
				
				this.addressesPopup.popupTitle = resourceManager.getString('default','m_addresses');
				this.addressesPopup.setSecurity( this.readOnly, this.canUpdate, this.canCreate, this.canDelete, this.hasPassword );
				
				this.addressesPopup.parentWidth = this.width;
				this.addressesPopup.parentHeight = this.height;
				
				trace ( "*******************Pop up a screen to manage addresses!");
				addressesPopup.openDialog();
				
				var params:Object = new Object();
				
				if ( this.delv_addr_code.selectedIndex >= 0 )
				{
					params["address_code"] = this.delv_addr_code.selectedItem.address_code;
				}
				else
				{
					params["address_code"] = "";
				}
				//params["address_code"] = dataGrid.selectedItem.partner_addr_code;
				
				addressesPopup.setFilters( params ); 
			}
			
			public function closeAddressDialogHandler():void
			{
				if (delv_addr_code.selectedIndex>=0)
				{
					_cust_address = addressList[delv_addr_code.selectedIndex].address_code;
				}
				else
				{
					_cust_address = "";
				}
				
				this.addressList.service();
			}
			
			public function goToDelvlocCustomers():void
			{
				
				this.delvlocCustomersPopup.popupTitle = resourceManager.getString('default','DELVCUST.LABEL.TITLE');
				this.delvlocCustomersPopup.setSecurity( this.readOnly, this.canUpdate, this.canCreate, this.canDelete, this.hasPassword );
				
				this.delvlocCustomersPopup.parentWidth = this.width;
				this.delvlocCustomersPopup.parentHeight = this.height;
				
				trace ( "*******************Pop up a screen to manage delvloc2customers!");
				delvlocCustomersPopup.openDialog();
				
				var params:Object = new Object();
				
				params["delv_code"] = this.delv_code.text;
				params["delv_name"] = this.delv_name.text;
				
				delvlocCustomersPopup.setFilters( params ); 
			}
			
			public function closeDelvlocCustomerDialogHandler():void
			{
				// need refresh the list?
				
				var txt:String;
				txt = this.delv_code.text;
				
				this.mainListSelection = 0;
				currentState="normal";
				this.findByPrimaryKey( txt );
			}
			

			protected function adjustCustomerAccount():void
			{
				var supplier:String;
				
				trace( "adjustCustomerAccount", this.fltr_supplier.selectedIndex );
				
				if ( this.fltr_supplier.selectedIndex < 0 )
				{
					supplier = "-1";
				}
				else
				{
					supplier = customerSupplierList[this.fltr_supplier.selectedIndex].cmpy_code;
				}
				
				this.customerAccountList.service( supplier );
				
			}
			
			protected function delv_flag_changeHandler(event:Event):void
			{
				// TODO Auto-generated method stub
				if ( this.delv_flag.selected == true )
				{
					this.delv_grid.text = "CSTDLV";
					this.delv_grid.enabled = false;
					this.delv_grid.editable = false;
				}
				else
				{
					if (this.delv_grid.text == "CSTDLV")
					{
						this.delv_grid.text = "";
					}
					this.delv_grid.enabled = true;
					this.delv_grid.editable = true;
				}
			}
			
			public function setFilters( params:*=false ): void
			{
				if ( params == false )
				{
					return;
				}
				
				this.parentParams = params;
				
				currentState = "normal";
				
				trace ("...............................in setFilters");
				tools.pr( params);
				
				var po:Object=new Object();
				
				po["delv_cust_suppcode"] = tools.getObjAttribute( params, "delv_cust_suppcode", "" );
				po["delv_cust_acct"] = tools.getObjAttribute( params, "delv_cust_acct", "" );
				if ( tools.getObjAttribute( params, "from_customer", "" ) == 1 )
				{
					this.isFromCustomerScreen = true;
				}
				else
				{
					this.isFromCustomerScreen = false;
				}
				
				var fields:Object;
				var types:Object;
				
				//interruptor=false;
				pagedRecords.interruptor=false;
				
				fields = new Object();
				types = new Object();
				
				fields["delv_cust_suppcode"] = po["delv_cust_suppcode"];
				types["delv_cust_suppcode"] = "EXACT_STRING";
				fields["delv_cust_acct"] = po["delv_cust_acct"];
				types["delv_cust_acct"] = "EXACT_STRING";
				
				currentFields = fields;
				currentTypes = types;
				this.startLoadingPages();
				
				if ( po.hasOwnProperty( "delv_cust_suppcode" ) )
				{
					this.fltr_supplier.selectedIndex = tools.getItemIndexFromCode( po["delv_cust_suppcode"], customerSupplierList, "cmpy_code");
				}
				
				if ( po.hasOwnProperty( "delv_cust_acct" ) )
				{
					this.fltr_customer.selectedIndex = tools.getItemIndexFromCode( po["delv_cust_acct"], customerAccountList, "cust_acnt");
				}
				
				
				pb.values(pagedRecords.length,pagedRecords.length)
			}
			
		]]>
	</fx:Script>
	<fx:Declarations>
		<s:DateTimeFormatter id="dateFormatter" locale="{LocaleID.DEFAULT}" dateStyle="short" timeStyle="none"/>
		<s:DateTimeFormatter id="dateConvert" dateTimePattern="yyyy-MM-dd"/>
		<s:DateTimeFormatter id="dateConvertLong" dateTimePattern="yyyy-MM-dd HH:mm:ss"/>
		<components:ValidationGroup id="vg" action="{save_clickHandler}" defaultButton="{btn_save}" parentScreen="{this}" isProtected="{hasPassword}"/>
	</fx:Declarations>
	<s:Panel id="panel" width="100%" height="100%"
			 skinClass="skins.WidgetPanelSkin"
			 skinClass.widget="skins.NullSkin">
		<s:layout>
			<s:VerticalLayout/>
		</s:layout>
		<s:VGroup width="100%" id="toolbar"  >
			<s:HGroup gap="5" paddingBottom="2" paddingTop="2" width="100%">
				<components:DKI_DropDownList id="fltr_supplier" width="200" height="100%" visible="{this.isFromCustomerScreen}" includeInLayout="{this.isFromCustomerScreen}"
											 change="fltr_supplier_changeHandler(event)" cornerRadius="10" enabled="{!this.isFromCustomerScreen}"
											 labelField="cmpy_desc" prompt="{resourceManager.getString('default','DELVLOC.LABEL.DELV_CUST_SUPPLIER')+resourceManager.getString('default','FILTER')}"
											 visible.widget="false" excludeFrom="widget" dataProvider="{this.customerSupplierList}"/>
				
				<components:DKI_DropDownList id="fltr_customer" width="200" height="100%" visible="{this.isFromCustomerScreen}" includeInLayout="{this.isFromCustomerScreen}"
											 change="fltr_customer_changeHandler(event)" cornerRadius="10" enabled="{!this.isFromCustomerScreen}"
											 labelField="cust_desc" prompt="{resourceManager.getString('default','DELVLOC.LABEL.DELV_CUST_ACCT')+resourceManager.getString('default','FILTER')}"
											 visible.widget="false" excludeFrom="widget" dataProvider="{this.customerAccountList}"/>

				<components:DKI_ValidatorInput id="fltr_delvloc" validationType="search" minWidth="160" height="{labelHeight}" width="100%"
											   keyUp="fltr_delvloc_keyUpHandler(event)"  
											   prompt="{resourceManager.getString('default','DELVLOC.LABEL.DELV_LOCATION')+resourceManager.getString('default','FILTER')}"/>
				
				<components:DKI_DropDownList id="fltr_transport" width="200" height="100%"
											 change="fltr_transport_changeHandler(event)" cornerRadius="10"
											 labelField="trnspt_type_name" prompt="{resourceManager.getString('default','DELVLOC.LABEL.DELV_TRSP_TYPE')+resourceManager.getString('default','FILTER')}"
											 visible.widget="false" excludeFrom="widget" dataProvider="{this.trspTypeList}"/>
				
				<s:Spacer width="100%"/>
				<components:DKI_Button id="filterBtn" height="24" noLabel="false" click="filterRecords(event)"
									   type="filteron"/>
				<components:DKI_Button id="resetBtn" height="24" noLabel="false" click="refreshRecords(event)"
									   type="filteroff"/>
				<components:DKI_Button id="btn_export" label="{resourceManager.getString('default','EXPORTDATA')}" type="report" click="exportCsvHandler(event)" includeIn="normal"/>
				<components:DKI_Button id="btn_create" label="{resourceManager.getString('default','CREATE')}" height="24" click="createNewRecord(event)" includeIn="normal" enabled="{this.canCreate}" type="create"/>	
			</s:HGroup>
		</s:VGroup>
		
		
		<s:DataGrid id="dataGrid" width="100%" height="100%" requestedRowCount="4"
					selectionChange="dataGrid_selectionChangeHandler(event)"
					skinClass="skins.DKI_DataGrid_Skin"
					height.widget="100%">
			<s:columns>
				<s:ArrayList>
					<s:source>
						<s:GridColumn dataField="delv_code" headerText="{resourceManager.getString('default','DELVLOC.LABEL.DELV_CODE')}" visible="true" width="150"></s:GridColumn>
						<s:GridColumn dataField="delv_name" headerText="{resourceManager.getString('default','DELVLOC.LABEL.DELV_NAME')}" visible="true" width="200"></s:GridColumn>
						<s:GridColumn dataField="delv_grid" headerText="{resourceManager.getString('default','DELVLOC.LABEL.DELV_GRID')}" visible="true" width="80"></s:GridColumn>
						<s:GridColumn dataField="delv_addr_code" headerText="{resourceManager.getString('default','DELVLOC.LABEL.DELV_ADDR_CODE')}" visible="false"></s:GridColumn>
						<s:GridColumn dataField="delv_addr_text" headerText="{resourceManager.getString('default','DELVLOC.LABEL.DELV_ADDR')}" visible="false"></s:GridColumn>
						<s:GridColumn dataField="delv_addr_desc" headerText="{resourceManager.getString('default','DELVLOC.LABEL.DELV_ADDR')}" visible="true"></s:GridColumn>
						
						<s:GridColumn dataField="delv_trsp_typeid" headerText="{resourceManager.getString('default','DELVLOC.LABEL.DELV_TRSP_TYPEID')}" visible="false"></s:GridColumn>
						<s:GridColumn dataField="delv_trsp_typename" headerText="{resourceManager.getString('default','DELVLOC.LABEL.DELV_TRSP_TYPE')}" visible="true" width="100"></s:GridColumn>
						<s:GridColumn dataField="delv_doc_typeid" headerText="{resourceManager.getString('default','DELVLOC.LABEL.DELV_DOC_TYPEID')}" visible="false"></s:GridColumn>
						<s:GridColumn dataField="delv_doc_typename" headerText="{resourceManager.getString('default','DELVLOC.LABEL.DELV_DOC_TYPE')}" visible="true" width="100"></s:GridColumn>
						<s:GridColumn dataField="delv_qty_typeid" headerText="{resourceManager.getString('default','DELVLOC.LABEL.DELV_QTY_TYPEID')}" visible="false"></s:GridColumn>
						<s:GridColumn dataField="delv_qty_typename" headerText="{resourceManager.getString('default','DELVLOC.LABEL.DELV_QTY_TYPE')}" visible="true" width="100"></s:GridColumn>
						<s:GridColumn dataField="delv_etyp_id" headerText="{resourceManager.getString('default','DELVLOC.LABEL.DELV_ETYP_ID')}" visible="false"></s:GridColumn>
						<s:GridColumn dataField="delv_etyp_title" headerText="{resourceManager.getString('default','DELVLOC.LABEL.DELV_ETYP')}" visible="true" width="160"></s:GridColumn>
						<s:GridColumn dataField="delv_trip_time" headerText="{resourceManager.getString('default','DELVLOC.LABEL.DELV_TRIP_TIME')}" visible="false"></s:GridColumn>
						<s:GridColumn dataField="delv_distance" headerText="{resourceManager.getString('default','DELVLOC.LABEL.DELV_DISTANCE')}" visible="false"></s:GridColumn>
						<s:GridColumn dataField="delv_tarrif" headerText="{resourceManager.getString('default','DELVLOC.LABEL.DELV_TARRIF')}" visible="false"></s:GridColumn>
						
						<s:GridColumn dataField="delv_contact" headerText="{resourceManager.getString('default','DELVLOC.LABEL.DELV_CONTACT')}" visible="false"></s:GridColumn>
						<s:GridColumn dataField="delv_phone" headerText="{resourceManager.getString('default','DELVLOC.LABEL.DELV_PHONE')}" visible="false"></s:GridColumn>
						<s:GridColumn dataField="delv_prf_code" headerText="{resourceManager.getString('default','DELVLOC.LABEL.DELV_PRF_CODE')}" visible="false"></s:GridColumn>
						<s:GridColumn dataField="delv_prf_desc" headerText="{resourceManager.getString('default','DELVLOC.LABEL.DELV_PRF_DESC')}" visible="false" width="130"></s:GridColumn>
						
						<s:GridColumn dataField="delv_cust_acct" headerText="{resourceManager.getString('default','DELVLOC.LABEL.DELV_CUST_ACCT')}" visible="false" width="130"></s:GridColumn>
						<s:GridColumn dataField="delv_cust_acctdesc" headerText="{resourceManager.getString('default','DELVLOC.LABEL.DELV_CUST_ACCT')}" visible="false" width="130"></s:GridColumn>
						<s:GridColumn dataField="delv_cust_cmpycode" headerText="{resourceManager.getString('default','DELVLOC.LABEL.DELV_CUST_CMPYCODE')}" visible="false" width="160"></s:GridColumn>
						<s:GridColumn dataField="delv_cust_cmpyname" headerText="{resourceManager.getString('default','DELVLOC.LABEL.DELV_CUST_CMPYNAME')}" visible="false" width="240"></s:GridColumn>
						<s:GridColumn dataField="delv_cust_suppcode" headerText="{resourceManager.getString('default','DELVLOC.LABEL.DELV_CUST_SUPPCODE')}" visible="false" width="160"></s:GridColumn>
						<s:GridColumn dataField="delv_cust_suppname" headerText="{resourceManager.getString('default','DELVLOC.LABEL.DELV_CUST_SUPPNAME')}" visible="false" width="240"></s:GridColumn>
						<s:GridColumn dataField="delv_cust_catgcode" headerText="{resourceManager.getString('default','DELVLOC.LABEL.DELV_CUST_CATGCODE')}" visible="false"></s:GridColumn>
						<s:GridColumn dataField="delv_cust_catgtext" headerText="{resourceManager.getString('default','DELVLOC.LABEL.DELV_CUST_CATGTEXT')}" visible="false"></s:GridColumn>
						<s:GridColumn dataField="delv_cust_count" headerText="{resourceManager.getString('default','DELVLOC.LABEL.DELV_CUST_COUNT')}" visible="true" width="110"></s:GridColumn>
						<s:GridColumn dataField="delv_order_count" headerText="{resourceManager.getString('default','CUSTOMER.LABEL.CUST_ORDER_COUNT')}" visible="true" width="100"></s:GridColumn>
					</s:source>
				</s:ArrayList>
			</s:columns>
			<s:dataProvider>
				<!--s:AsyncListView id="pgList" list="{getPagedResult.lastResult}"/-->
				<s:AsyncListView id="pgList" list="{pagedRecords}"/>
			</s:dataProvider>
		</s:DataGrid>
		<s:HGroup width="100%">
			<components:Downloader id="pb" width="100%" height="18"/>
			<!--mx:ProgressBar id="pb" width="100%" height="22" visible="false" includeInLayout="false"  mode="manual" source="{this.pgList}" label="{this.currentLength} records shown from {this.currentLength} loaded out of {this.totalLength} found." labelPlacement="center"/-->
			<s:Button id="killBtn" width="18" height="18" label="" cornerRadius="12" visible="false" includeInLayout="false"
					  click="killBtn_clickHandler(event)"/>
			<s:Button id="resumeBtn" width="18" height="18" label="" cornerRadius="12" visible="false" includeInLayout="false"
					  click="resumeBtn_clickHandler(event)"/>
		</s:HGroup>
	</s:Panel>
	
	<s:Panel id="details" includeIn="edit,create,detail" width="100%" height="300"
			 itemCreationPolicy="immediate" skinClass="skins.WidgetPanelSkin">
		<s:layout>
			<s:VerticalLayout/>
			<!--s:TileLayout/-->
		</s:layout>
		
		<s:Spacer height="5"/>
		<s:VGroup width="100%">
			
			<s:HGroup>
				<s:HGroup>
					<s:Label width="{labelWidth}" height="{labelHeight}" text="  "/>
					<s:CheckBox id="delv_flag" 
								label="{resourceManager.getString('default','DELVLOC.LABEL.DELV_FLAG')}" fontWeight="bold" 
								selected="{dataGrid.selectedItem.delv_grid=='CSTDLV'?true:false}" enabled="false" enabled.edit="true" 
								selected.create="false" enabled.create="true" change="delv_flag_changeHandler(event)"
								/>
				</s:HGroup>
			</s:HGroup>
			
			<s:Spacer height="{this.spaceHeight}" />
			
			<s:HGroup>
				<s:HGroup>
					<s:Label width="{labelWidth}" height="{labelHeight}" text="{resourceManager.getString('default','DELVLOC.LABEL.DELV_CODE')}" verticalAlign="middle"/>
					<components:DKI_ValidatorInput id="delv_code" maxChars="16" 
												   width="{fieldWidth}" height="{fieldHeight}" 
												   text="{dataGrid.selectedItem.delv_code}" editable="false" enabled="false" 
												   text.create="" editable.create="true" enabled.create="true" focusOut="checkDelvlocKey()" 
												   required="true" validationType="alphanumericspecial" validationGroup="{vg}" automationName="{resourceManager.getString('default','DELVLOC.LABEL.DELV_CODE')}" 
												   />
				</s:HGroup>
				
				<s:Spacer width="{this.spaceWidth}" />
				
				<s:HGroup>
					<s:Label width="{labelWidth}" height="{labelHeight}" text="{resourceManager.getString('default','DELVLOC.LABEL.DELV_NAME')}" verticalAlign="middle"/>
					<components:DKI_ValidatorInput id="delv_name" maxChars="100" 
												   width="{fieldWidth}" height="{fieldHeight}" 
												   text="{dataGrid.selectedItem.delv_name}" editable="false" enabled="false" editable.edit="true" enabled.edit="true" 
												   text.create="" editable.create="true" enabled.create="true" focusOut="checkDelvlocKey()" 
												   required="true" validationType="document" validationGroup="{vg}" automationName="{resourceManager.getString('default','DELVLOC.LABEL.DELV_NAME')}" 
												   />
				</s:HGroup>
				
				<s:Spacer width="{this.spaceWidth}" />
				
				<s:HGroup>
					<s:Label width="{labelWidth}" height="{labelHeight}" text="{resourceManager.getString('default','DELVLOC.LABEL.DELV_ADDR')}" verticalAlign="middle"/>
					<components:DKI_ValidatorComboBox id="delv_addr_code" 
													  dataProvider="{addressList}" 
													  labelField="address_text" 
													  selectedItem="{dataGrid.selectedItem.delv_addr_code+'['+String(dataGrid.selectedItem.delv_addr_text)+']'}" enabled="false" enabled.edit="true"
													  selectedItem.create="" selectedIndex.create="-1" enabled.create="true" 
													  width="{fieldWidth}" height="{fieldHeight}" 
													  prompt="{resourceManager.getString('default','SELECT')+resourceManager.getString('default','DELVLOC.LABEL.DELV_ADDR')}"
													  required="true" validationGroup="{vg}" automationName="{resourceManager.getString('default','DELVLOC.LABEL.DELV_ADDR')}" 
													  />
				</s:HGroup>
				
				<s:Spacer width="{this.spaceWidth}" />
				
				<s:HGroup>
					<s:Label width="{labelWidth}" height="{labelHeight}" text="{resourceManager.getString('default','DELVLOC.LABEL.DELV_GRID')}" verticalAlign="middle"/>
					<components:DKI_ValidatorInput id="delv_grid" maxChars="60" 
												   width="{fieldWidth}" height="{fieldHeight}" 
												   text="{dataGrid.selectedItem.delv_grid}" editable="false" enabled="false" editable.edit="{!this.delv_flag.selected}" enabled.edit="{!this.delv_flag.selected}"  
												   text.create="" editable.create="{!this.delv_flag.selected}" enabled.create="{!this.delv_flag.selected}" 
												   required="false" validationType="alphanumeric" validationGroup="{vg}" automationName="{resourceManager.getString('default','DELVLOC.LABEL.DELV_GRID')}" 
												   />
				</s:HGroup>
				
			</s:HGroup>
			
			<s:Spacer height="{this.spaceHeight}" />
			
			<s:HGroup width="100%">
				
				<s:HGroup>
					<s:Label width="{labelWidth}" height="{labelHeight}" text="{resourceManager.getString('default','DELVLOC.LABEL.DELV_TRSP_TYPE')}" verticalAlign="middle"/>
					<components:DKI_ValidatorComboBox id="delv_trsp_typeid" 
													  dataProvider="{trspTypeList}" 
													  labelField="trnspt_type_name" 
													  selectedItem="{dataGrid.selectedItem.delv_trsp_typename}" enabled="false" enabled.edit="true"
													  selectedIndex.create="0" enabled.create="true" 
													  width="{fieldWidth}" height="{fieldHeight}" 
													  prompt="{resourceManager.getString('default','SELECT')+resourceManager.getString('default','DELVLOC.LABEL.DELV_TRSP_TYPE')}"
													  required="true" validationGroup="{vg}" automationName="{resourceManager.getString('default','DELVLOC.LABEL.DELV_TRSP_TYPE')}" 
													  />
				</s:HGroup>
				
				<s:Spacer width="{this.spaceWidth}" />
				
				<s:HGroup>
					<s:Label width="{labelWidth}" height="{labelHeight}" text="{resourceManager.getString('default','DELVLOC.LABEL.DELV_DOC_TYPE')}" verticalAlign="middle"/>
					<components:DKI_ValidatorComboBox id="delv_doc_typeid" 
													  dataProvider="{docTypeList}" 
													  labelField="document_name" 
													  selectedItem="{dataGrid.selectedItem.delv_doc_typename}" enabled="false" enabled.edit="true" 
													  selectedIndex.create="0" enabled.create="true" 
													  width="{fieldWidth}" height="{fieldHeight}" 
													  prompt="{resourceManager.getString('default','SELECT')+resourceManager.getString('default','DELVLOC.LABEL.DELV_DOC_TYPE')}"
													  required="true" validationGroup="{vg}" automationName="{resourceManager.getString('default','DELVLOC.LABEL.DELV_DOC_TYPE')}" 
													  />
				</s:HGroup>
				
				<s:Spacer width="{this.spaceWidth}" />
				
				<s:HGroup>
					<s:Label width="{labelWidth}" height="{labelHeight}" text="{resourceManager.getString('default','DELVLOC.LABEL.DELV_QTY_TYPE')}" verticalAlign="middle"/>
					<components:DKI_ValidatorComboBox id="delv_qty_typeid" 
													  dataProvider="{qtyTypeList}" 
													  labelField="qty_name" 
													  selectedItem="{dataGrid.selectedItem.delv_qty_typename}" enabled="false" enabled.edit="true"
													  selectedIndex.create="0" enabled.create="true" 
													  width="{fieldWidth}" height="{fieldHeight}" 
													  prompt="{resourceManager.getString('default','SELECT')+resourceManager.getString('default','DELVLOC.LABEL.DELV_QTY_TYPE')}"
													  required="true" validationGroup="{vg}" automationName="{resourceManager.getString('default','DELVLOC.LABEL.DELV_QTY_TYPE')}" 
													  />
				</s:HGroup>
				
				<s:Spacer width="{this.spaceWidth}" />
				
				<s:HGroup>
					<s:Label width="{labelWidth}" height="{labelHeight}" text="{resourceManager.getString('default','DELVLOC.LABEL.DELV_ETYP')}" verticalAlign="middle"/>
					<components:DKI_ValidatorComboBox id="delv_etyp_id" 
													  dataProvider="{eqptTypeList}" 
													  labelField="etyp_title" 
													  selectedItem="{dataGrid.selectedItem.delv_etyp_title}" enabled="false" enabled.edit="true"
													  selectedIndex.create="-1" enabled.create="true" 
													  width="{fieldWidth}" height="{fieldHeight}" 
													  prompt="{resourceManager.getString('default','SELECT')+resourceManager.getString('default','DELVLOC.LABEL.DELV_ETYP')}"
													  required="true" validationGroup="{vg}" automationName="{resourceManager.getString('default','DELVLOC.LABEL.DELV_ETYP')}" 
													  />
				</s:HGroup>
				
			</s:HGroup>
			
			<s:Spacer height="{this.spaceHeight}" />
			
			<s:HGroup width="100%">
				
				<s:HGroup>
					<s:Label width="{labelWidth}" height="{labelHeight}" text="{resourceManager.getString('default','DELVLOC.LABEL.DELV_TRIP_TIME')}" verticalAlign="middle"/>
					<components:DKI_ValidatorInput id="delv_trip_time" maxChars="9" 
												   width="{fieldWidth}" height="{fieldHeight}" 
												   text="{dataGrid.selectedItem.delv_trip_time}" editable="false" enabled="false" editable.edit="true" enabled.edit="true"  
												   text.create="0" editable.create="true" enabled.create="true" 
												   required="true" validationType="integer_non_negative" validationGroup="{vg}" automationName="{resourceManager.getString('default','DELVLOC.LABEL.DELV_TRIP_TIME')}" 
												   />
				</s:HGroup>
				
				<s:Spacer width="{this.spaceWidth}" />
				
				<s:HGroup>
					<s:Label width="{labelWidth}" height="{labelHeight}" text="{resourceManager.getString('default','DELVLOC.LABEL.DELV_DISTANCE')}" verticalAlign="middle"/>
					<components:DKI_ValidatorInput id="delv_distance" maxChars="9" 
												   width="{fieldWidth}" height="{fieldHeight}" 
												   text="{dataGrid.selectedItem.delv_distance}" editable="false" enabled="false" editable.edit="true" enabled.edit="true"  
												   text.create="0" editable.create="true" enabled.create="true" 
												   required="true" validationType="integer_non_negative" validationGroup="{vg}" automationName="{resourceManager.getString('default','DELVLOC.LABEL.DELV_DISTANCE')}" 
												   />
				</s:HGroup>
				
				<s:Spacer width="{this.spaceWidth}" />
				
				<s:HGroup>
					<s:Label width="{labelWidth}" height="{labelHeight}" text="{resourceManager.getString('default','DELVLOC.LABEL.DELV_TARRIF')}" verticalAlign="middle"/>
					<components:DKI_ValidatorInput id="delv_tarrif" 
												   width="{fieldWidth}" height="{fieldHeight}" 
												   text="{dataGrid.selectedItem.delv_tarrif}" editable="false" enabled="false" editable.edit="true" enabled.edit="true"  
												   text.create="0" editable.create="true" enabled.create="true" 
												   required="true" validationType="numeric" validationGroup="{vg}" automationName="{resourceManager.getString('default','DELVLOC.LABEL.DELV_TARRIF')}" 
												   />
				</s:HGroup>
				
			</s:HGroup>
			
			<s:Spacer height="{this.spaceHeight}" />
			
			<s:HGroup width="100%">
				
				<s:HGroup>
					<s:Label width="{labelWidth}" height="{labelHeight}" text="{resourceManager.getString('default','DELVLOC.LABEL.DELV_CONTACT')}" verticalAlign="middle"/>
					<components:DKI_ValidatorInput id="delv_contact" maxChars="100" 
												   width="{fieldWidth}" height="{fieldHeight}" 
												   text="{dataGrid.selectedItem.delv_contact}" editable="false" enabled="false" editable.edit="true" enabled.edit="true"  
												   text.create="" editable.create="true" enabled.create="true" 
												   required="false" validationType="document" validationGroup="{vg}" automationName="{resourceManager.getString('default','DELVLOC.LABEL.DELV_CONTACT')}" 
												   />
				</s:HGroup>
				
				<s:Spacer width="{this.spaceWidth}" />
				
				<s:HGroup>
					<s:Label width="{labelWidth}" height="{labelHeight}" text="{resourceManager.getString('default','DELVLOC.LABEL.DELV_PHONE')}" verticalAlign="middle"/>
					<components:DKI_ValidatorInput id="delv_phone" maxChars="40" 
												   width="{fieldWidth}" height="{fieldHeight}" 
												   text="{dataGrid.selectedItem.delv_phone}" editable="false" enabled="false" editable.edit="true" enabled.edit="true"  
												   text.create="" editable.create="true" enabled.create="true" 
												   required="false" validationType="alphanumeric" validationGroup="{vg}" automationName="{resourceManager.getString('default','DELVLOC.LABEL.DELV_PHONE')}" 
												   />
				</s:HGroup>
				
				<s:Spacer width="{this.spaceWidth}" />
				
				<s:HGroup>
					<s:Label width="{labelWidth}" height="{labelHeight}" text="{resourceManager.getString('default','DELVLOC.LABEL.DELV_PROFILE')}" verticalAlign="middle"/>
					<components:DKI_ValidatorComboBox id="delv_prf_code" 
													  dataProvider="{profileList}" 
													  labelField="prf_desc" 
													  selectedItem="{dataGrid.selectedItem.delv_prf_desc}" enabled="false" enabled.edit="true"
													  selectedIndex.create="-1" enabled.create="true" 
													  width="{fieldWidth}" height="{fieldHeight}" 
													  prompt="{resourceManager.getString('default','SELECT')+resourceManager.getString('default','DELVLOC.LABEL.DELV_PROFILE')}"
													  required="false" validationGroup="{vg}" automationName="{resourceManager.getString('default','DELVLOC.LABEL.DELV_PROFILE')}" 
													  />
				</s:HGroup>
				
			</s:HGroup>
			
			
			<s:Spacer height="5" />
			
		</s:VGroup>
		
		<s:Spacer height="0" />
		
		<s:HGroup width="100%" paddingBottom="4" paddingTop="0" gap="5">
			<components:DKI_Button id="btn_addresses" label="{resourceManager.getString('default','m_addresses')}" includeIn="edit,create" type="default" enabled="{this.canUpdate}" visible="{this.canUpdate}" includeInLayout="{this.canUpdate}" click="goToAddresses();"/>
			<components:DKI_Button id="btn_customers" label="{resourceManager.getString('default','DELVCUST.LABEL.LINK2CUST')}" includeIn="edit" type="default" enabled="{this.canUpdate}" visible="{this.canUpdate}" includeInLayout="{this.canUpdate}" click="goToDelvlocCustomers();"/>
			<s:Spacer width="100%"/>
			<components:DKI_Button id="btn_delete" label="{resourceManager.getString('default','DELETE')}" height="100%" click="doDelete()" includeIn="edit" enabled="{this.canDelete}" type="delete"/>
			<components:DKI_Button id="btn_save" label.create="{resourceManager.getString('default','SAVE')}" label="{resourceManager.getString('default','UPDATE')}" height="100%" includeIn="edit,create,detail" 
								   enabled.create="{this.canCreate}" enabled="{this.canUpdate}" type.create="create" type="edit" focusEnabled="true" focusEnabled.create="false"/>
			<components:DKI_Button id="btn_cancel" label="{resourceManager.getString('default','CANCEL')}" height="100%" click="cancel_clickHandler()" enabled="true" type="cancel" focusEnabled="true" focusEnabled.create="false"/>
		</s:HGroup>
	</s:Panel>
	
</s:VGroup>
