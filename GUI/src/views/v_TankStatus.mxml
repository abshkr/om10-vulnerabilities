<?xml version="1.0" encoding="utf-8"?>
<s:VGroup xmlns:fx="http://ns.adobe.com/mxml/2009"
		  xmlns:s="library://ns.adobe.com/flex/spark"
		  xmlns:mx="library://ns.adobe.com/flex/mx"
		  xmlns:components="components.*"
		  creationComplete="creationCompleteHandler(event)"
		  gap="2" width="100%" height="100%">
	
	<s:states>
		<s:State name="normal" enterState="this.toolbar.enabled=true"/>
		<s:State name="widget" enterState="this.toolbar.enabled=true"/>
		<s:State name="detail" enterState="callLater(function():void{dataGrid.ensureCellIsVisible(idx);});this.toolbar.enabled=false"/>
		<!--<s:State name="edit" enterState="callLater(function():void{dataGrid.ensureCellIsVisible(idx);});this.toolbar.enabled=false"/>-->
		<s:State name="editStatus" enterState="callLater(function():void{dataGrid.ensureCellIsVisible(idx);});this.toolbar.enabled=false"/>
		<s:State name="editGauge" enterState="callLater(function():void{dataGrid.ensureCellIsVisible(idx);});this.toolbar.enabled=false"/>
	</s:states>
	
	<fx:Script>
		<![CDATA[
			import com.adobe.fiber.runtime.lib.DateTimeFunc;
			
			import components.ActionDialog;
			import components.ConfirmDialog;
			import components.DeleteDialog;
			import components.ErrorDialog;
			import components.ExportData;
			import components.MessageDialog;
			import components.TransactionsDlg;
			import components.VCFManager;
			import components.ViewPopupDlg;
			
			import dm.remoteBulkListService;
			import dm.remoteDataService;
			import dm.remoteListService;
			import dm.utils.tools;
			
			import flash.events.KeyboardEvent;
			import flash.globalization.LocaleID;
			
			import flashx.textLayout.container.ScrollPolicy;
			
			import mx.collections.ArrayCollection;
			import mx.controls.Alert;
			import mx.controls.DateField;
			import mx.core.BitmapAsset;
			import mx.events.FlexEvent;
			import mx.managers.PopUpManager;
			import mx.rpc.events.ResultEvent;
			import mx.utils.ObjectUtil;
			import mx.utils.StringUtil;
			
			import renderers.DKI_HeaderColumn_Renderer;
			
			import spark.components.ToggleButton;
			import spark.components.VScrollBar;
			import spark.components.gridClasses.IGridItemRenderer;
			import spark.events.GridEvent;
			import spark.events.GridSelectionEvent;
			import spark.events.IndexChangeEvent;
			import spark.events.TextOperationEvent;
			
			import views.v_TankStraps;
			[Embed (source="/assets/icons/status_green.png")]
			[Bindable]
			public var normalStatus:Class;
			
			[Embed (source="/assets/icons/status_red.png")]
			[Bindable]
			public var errorStatus:Class;
			
			[Embed (source="/assets/icons/blank.png")]
			//[Embed (source="/assets/icons/status_grey.png")]
			//[Embed (source="/assets/icons/status_yellow.png")]
			[Bindable]
			public var blankStatus:Class;
			
			private var normalObject:BitmapAsset = new normalStatus() as BitmapAsset;
			private var errorObject:BitmapAsset = new errorStatus() as BitmapAsset;
			private var blankObject:BitmapAsset = new blankStatus() as BitmapAsset;
			
			public static const MAIN_WINDOW_WIDTH:int = 1500;
			
			[Bindable] public var readOnly:Boolean = false;
			[Bindable] public var canUpdate:Boolean = false;
			[Bindable] public var canCreate:Boolean = false;
			[Bindable] public var canDelete:Boolean = false;
			[Bindable] public var hasPassword:Boolean = false;
			[Bindable] public var canCreateGenProd:Boolean = false;
			[Bindable] public var canDeleteGenProd:Boolean = false;
			
			[Bindable] public var panelHeight:uint = 480;
			[Bindable] public var labelWidthPostfix:uint = 120;
			[Bindable] public var labelWidth:uint = 120;
			[Bindable] public var labelHeight:uint = 26;
			[Bindable] public var fieldWidth:uint = 200;
			[Bindable] public var fieldHeight:uint = 26;
			[Bindable] public var spaceWidth:uint = 15;
			[Bindable] public var spaceHeight:uint = 2;
			[Bindable] public var containerSpaceHeight:uint = 0;
			[Bindable] public var groupGap:uint = 6;
			[Bindable] public var labelBackColor:uint=0xEEEEEE;
			[Bindable] public var labelBackAlpha:Number=0.5;
			
			private var idx:int=-1;
			
			private var currentFilter:String=null;
			private var currentOrder:String='tank_code';
			private var currentDirection:String="ASC";
			
			private var currentOffset:int=0;
			private var currentPageSize:int=1000;
			[Bindable] private var totalLength:int=0;
			[Bindable] private var currentLength:int=0;
			
			private var currentFields:Object=new Object();
			private var currentTypes:Object=new Object();
			//private var currentSorts:Object=new Object();
			//private var currentOrders:Object=new Object();
			private var currentSorts:Object={tank_code:'ASC'};
			private var currentOrders:Object={tank_code:1};
			private var currentSortSeq:int=0;
			
			private var  originalItems:ArrayCollection;
			
			
			private var confirmReport:ActionDialog;
			private var confirmSave:ActionDialog;
			private var errorDialog:ErrorDialog;
			
			//private var exportContents:String="";
			private var f:FileReference = new FileReference();
			
			
			[Bindable] private var pagedRecords:remoteListService;
			
			private var updateStatusAction:remoteDataService = new remoteDataService( "TankService.updateTankStatus", null, updateStatusData_resultHandler, 1 );
			private var updateGaugeAction:remoteDataService = new remoteDataService( "TankService.updateTankGauge", null, updateGaugeData_resultHandler, 1 );
			private var recalculateVolumeAction:remoteDataService = new remoteDataService( "TankService.recalculateTankVolumes", null, recalculateVolumeData_resultHandler, 0 );
			private var calculateVolumeAction:remoteDataService = new remoteDataService( "TankService.calculateTankVolumes", null, calculateVolumeData_resultHandler, 1 );
			private var calculateDensityAction:remoteDataService = new remoteDataService( "TankService.calculateTankDensities", null, calculateDensityData_resultHandler, 1 );
			private var calculateLevelAction:remoteDataService = new remoteDataService( "TankService.calculateTankVolumesByLevel", null, calculateLevelData_resultHandler, 1 );
			
			private var gridColumnSequenceMaker:remoteDataService = new remoteDataService( "ScreenGridColumnService.lookupGridColumnSequence", null, gridColumnSequenceMaker_resultHandler, 1 );
			private var _gridColumnSequenceString:String="";
			private var formColumnSettingsMaker:remoteDataService = new remoteDataService( "ScreenFormColumnService.lookupFormColumnSettings", null, formColumnSettingsMaker_resultHandler, 1 );
			private var _formColumnSettingsString:String="";
			private var formButtonSettingsMaker:remoteDataService = new remoteDataService( "ScreenFormButtonService.lookupFormButtonSettings", null, formButtonSettingsMaker_resultHandler, 1 );
			private var _formButtonSettingsString:String="";
			
			
			[Bindable] private var baseClassList:remoteDataService = new remoteDataService( "ListLibraryService.lookupBaseClass", null, lookupBaseClass_resultHandler );
			[Bindable] private var baseProductList:remoteDataService = new remoteDataService( "ListLibraryService.lookupTankBaseProduct", null, lookupBaseProduct_resultHandler );
			[Bindable] private var terminalList:remoteDataService = new remoteDataService( "ListLibraryService.lookupTerminal", null, lookupTerminal_resultHandler );
			[Bindable] private var tankList:remoteDataService = new remoteDataService( "ListLibraryService.lookupTanks", null, null );
			[Bindable] private var levelAlarmList:remoteDataService = new remoteDataService( "ListLibraryService.lookupLevelAlarms", null, null );
			[Bindable] private var tankStatusTypeList:remoteDataService = new remoteDataService( "TankService.lookupTankStatusTypes", null, null );
			[Bindable] private var gaugeMethodList:remoteDataService = new remoteDataService( "ListLibraryService.lookupGaugeMethods", null, null );
			[Bindable] private var areaList:remoteDataService = new remoteDataService( "ListLibraryService.lookupAreas", null, null );
			
			[Bindable] private var productUnitList:remoteDataService = new remoteDataService( "ListLibraryService.lookupProductUnit", null, lookupProductUnit_resultHandler );
			[Bindable] private var allUnitList:remoteDataService = new remoteDataService( "ListLibraryService.lookupUnitScale", null, lookupUnitScale_resultHandler );
			[Bindable] private var tempUnitC:String="ºC";
			[Bindable] private var tempUnitF:String="ºF";
			
			private var refTemperatureReader:remoteDataService = new remoteDataService( "TankService.getStandardTemperature", null, refTemperatureReader_resultHandler, 3 );
			private var digitsSettingsReader:remoteDataService = new remoteDataService( "TankService.getDigitsSettings", null, digitsSettingsReader_resultHandler, 1 );
			private var cofeReader:remoteDataService = new remoteDataService( "TankService.getExpansionCoefficientRange", null, cofeReader_resultHandler, 1 );
			[Bindable] private var COFE_LO:Number=0.000414;
			[Bindable] private var COFE_HI:Number=0.001674;
			
			[Bindable] private var defaultRefTempC:Number;
			[Bindable] private var refTempC:Number;
			[Bindable] private var refTempF:Number;
			[Bindable] private var refTempTextC:String;
			[Bindable] private var refTempTextF:String;
			[Bindable] private var refTempText:String;
			[Bindable] private var stdTempC60F:Number=15.5556;
			[Bindable] private var stdVCF60F:Number;
			
			
			private var volumeType:String="NA";
			private var volumeAmount:Number=0.0;
			private var densityType:String="NA";
			private var densityAmount:Number=0.0;
			public var mngr:VCFManager = new VCFManager();
			
			// the number of digits after decimal point
			[Bindable] private var digitsAPI:int=2;
			[Bindable] private var digitsTEMP:int=2;
			[Bindable] private var digitsDENS:int=3;
			[Bindable] private var digitsLVL:int=0;
			[Bindable] private var digitsVOL:int=0;
			[Bindable] private var digitsMASS:int=0;
			[Bindable] private var digitsADTV:int=3;
			
			
			
			//private var genData:ExportData = new ExportData();
			
			public var mainListSelection:int = -1;
			
			public var isPopupWindow:Boolean=false;
			
			public var tankStrapPopup:ViewPopupDlg = new ViewPopupDlg( "Tank Straps", new v_TankStraps(), closeDialogHandler );
			
			public var requiredFields:Object = {
				tank_location:false
				, tank_density:true
				, tank_prod_c_of_e:false
				, tank_15_density:true
				, tank_api:true
				, tank_liquid_kg:true
				, tank_prod_lvl:true
				, tank_ullage:false
				, tank_sulphur:false
				, tank_flashpoint:false
				, tank_status:false
				, tank_hh_level:false
				, tank_h_level:false
				, tank_l_level:false
				, tank_ll_level:false
				, tank_uh_level:false
				, tank_ul_level:false
				, tank_temp:true
				, tank_amb_vol:true
				, tank_cor_vol:true
				, tank_gaugingmthd:true
				, tank_identifier:true
				, tank_drv_type:false
				, tank_drv_aux:false
				, tank_channel:true
				, tank_instance:true
				, tank_poll_gap:true
				, tank_address:true
			};
			
			
			protected function creationCompleteHandler(event:FlexEvent):void
			{
				this.formColumnSettingsMaker.service( "TANK_STATUS" );
				this.formButtonSettingsMaker.service( "TANK_STATUS" );
				
				this.digitsSettingsReader.service( );
				
				trace ("-------------start creationCompleteHandler");
				pagedRecords = new remoteListService( this.dataGrid, "TankService.getPaged", null, getPageData_resultHandler );
				//resourceManager.localeChain = ['zh_CN'];
				//global.LanguageCode="CHN";
				this.gridColumnSequenceMaker.service( "TANK_STATUS" );
				
				if ( this.isPopupWindow == false )
				{
					var value:String = global.getValueFromSiteConfigSettings( "SITE_AUTO_FILTER_WHEN_OPEN_SCREEN" );
					if ( value == 'Y' )
					{
						this.startFiltering();
					}
					else
					{
						;
					}					
				}
				
				this.cofeReader.service();
				this.terminalList.service();
				this.tankList.service("-1", "-1", "-1");
				
				this.baseProductList.service( );
				this.baseClassList.service( );
				this.levelAlarmList.service( );
				this.gaugeMethodList.service( );
				this.areaList.service();
				this.tankStatusTypeList.service();
					
				
				this.allUnitList.service( );
				this.productUnitList.service( );
				this.refTemperatureReader.service( );
				
				trace ("------------End creationCompleteHandler");
				
				
				//trace("this.grid.scroller1111", this.dataGrid.scroller);
				//trace("this.grid.scroller.verticalScrollBar.value", this.dataGrid.scroller.verticalScrollBar.value);
				this.dataGrid.scroller.verticalScrollBar.addEventListener(Event.CHANGE, verticalScrollBarChanged);
				this.dataGrid.addEventListener(KeyboardEvent.KEY_UP, reportKeyUp);
				this.dataGrid.columnHeaderGroup.addEventListener(GridEvent.GRID_CLICK, headerClickListener);
				
			}
			
			
			protected function digitsSettingsReader_resultHandler( ):void
			{
				var digitsString:String="2|2|3|0|0|0|3";
					
				digitsString =  digitsSettingsReader.dataString;
				
				if ( digitsString.length > 0 )
				{
					var arr:Array = digitsString.split('|');
					if ( arr.length ==7 )
					{
						digitsAPI		= arr[0];
						digitsTEMP		= arr[1];
						digitsDENS		= arr[2];
						digitsLVL		= arr[3];
						digitsVOL		= arr[4];
						digitsMASS		= arr[5];
						digitsADTV		= arr[6];
					}
				}
				
			}
			
			
			
			protected function startLoadingPages():void
			{
				killBtn.setStyle("chromeColor","0xff0000");
				this.killBtn.includeInLayout=true;
				this.killBtn.visible = true;
				this.killBtn.enabled = true;
				
				resumeBtn.setStyle("chromeColor","0x00ff00");
				this.resumeBtn.includeInLayout=true;
				this.resumeBtn.visible = true;
				this.resumeBtn.enabled = false;
				
				//this.btn_create.enabled = false
				this.btn_export.enabled = false;
				this.dataGrid.enabled = false;
				this.toolbar.enabled = false;
				//this.panel.enabled = false;
				
				currentLength=0;
				currentOffset = 0;
				
				//this.exportContents = this.genData.prepExportHeader( dataGrid );
				
				//currentPage=1;
				pagedRecords.currentPage=1;
				pagedRecords.removeAll();
				pagedRecords.refresh();
				this.pb.values(0, 0);
				//this.pagedRecords.service( currentFields, currentTypes, currentSorts, currentOrders, currentPage, currentPageSize );
				this.pagedRecords.listService( currentFields, currentTypes, currentSorts, currentOrders );
			}
			
			protected function endLoadingPages():void
			{
				//this.btn_create.enabled = this.canCreate;
				this.btn_export.enabled = true;
				this.dataGrid.enabled = true;
				this.toolbar.enabled = true;
				//this.panel.enabled = true;
				//this.pb.values(totalCount, totalCount);
				this.pb.values(pagedRecords.totalCount, pagedRecords.totalCount, true);
				
				this.killBtn.includeInLayout=true;
				this.killBtn.visible = true;
				this.killBtn.enabled = false;
				
				this.resumeBtn.includeInLayout=true;
				this.resumeBtn.visible = true;
				//if ( totalLength > totalCount )
				if ( pagedRecords.totalLength > pagedRecords.totalCount )
				{
					this.resumeBtn.enabled = true;
				}
				else
				{
					this.resumeBtn.enabled = false;
				}
				
				//this.fltr_tank.setFocus();
				var len:int = this.fltr_tank.text.length;
				this.fltr_tank.selectRange(len, len);
			}
			
			protected function exportCsvHandler(event:MouseEvent):void
			{
				this.confirmReport = new ActionDialog( doExport, cancelExport, resourceManager.getString('default','CONFIRM_REPORT_CSV') );
				
				//this.startLoadingPages();
			}
			
			private function getPageData_resultHandler():void
			{
				// if not finished
				if(pagedRecords.length < pagedRecords.totalCount)
				{
					pb.values(pagedRecords.length,pagedRecords.totalCount)
				}
				else
				{
					pb.values(pagedRecords.length,pagedRecords.totalCount)
					
					this.endLoadingPages();
					
					this.dataGrid.selectedIndex = this.mainListSelection;
					if ( this.mainListSelection >= 0)
					{
						this.dataGrid_selectionChangeHandler(null);
					}
					this.mainListSelection = -1;
					
				}
				
			}
			
			
			public function doExport():void
			{
				//genData.prepOther(dataGrid,'drawerProductlist.csv', this.pagedRecords);
				
				//f.save( this.exportContents, "drawerProductlist.csv" );
				f.save( pagedRecords.exportContents, "tanklist.csv" );
				
				this.endLoadingPages();
			}
			
			
			public function cancelExport():void
			{
				this.endLoadingPages();
				
				//trace( this.exportContents );
			}
			
			public function doNothing():void
			{
			}
			
			
			private function verticalScrollBarChanged(event:Event):void
			{
				if ( this.dataGrid.scroller != null)
				{
					var vs:VScrollBar;
					vs = this.dataGrid.scroller.verticalScrollBar;
					//trace("this.grid.scroller.verticalScrollBar.value", vs.value, vs.maximum, vs.minimum, vs.stepSize, vs.pageSize, vs.	snapInterval);
				}
				else
				{
					trace("grid is changed");
				}
			}
			
			private function reportKeyUp(event:KeyboardEvent):void
			{
				if ( this.dataGrid.scroller != null)
				{
					var vs:VScrollBar;
					vs = this.dataGrid.scroller.verticalScrollBar;
					//trace("this.grid.scroller.verticalScrollBar.value", vs.value, vs.maximum, vs.minimum, vs.stepSize, vs.pageSize, vs.	snapInterval);
				}
				else
				{
					trace("grid is changed");
				}
			}
			
			private function headerClickListener(event:GridEvent):void
			{
				if(event.column.dataField!='prod_items')
				{
					var currentRenderer:IGridItemRenderer;
					var dir:String;
					
					if ( global.sortingBySingleColumn == true )
					{	// sorted by single column only
						for (var i:int=0; i < dataGrid.columns.length; i++)
						{
							currentRenderer = dataGrid.columnHeaderGroup.getHeaderRendererAt(i);
							if ( currentRenderer != null)
							{
								(currentRenderer as DKI_HeaderColumn_Renderer).setImage('');
							}
							//(currentRenderer as DKI_HeaderColumn_Renderer).setImage(''); 
						}
					}
					else
					{	// sorted by multiple columns
						;
					}
					currentRenderer = dataGrid.columnHeaderGroup.getHeaderRendererAt(event.columnIndex);
					
					if( currentSorts.hasOwnProperty(event.column.dataField ) )
					{
						dir = currentSorts[event.column.dataField];
						if( dir=="ASC" )
						{
							dir = "DESC";
						}
						else if ( dir == "DESC" )
						{
							dir = "";
						}
						else if ( dir == "" )
						{
							dir = "ASC";
						}
						else 
						{
							dir = "ASC";
						}
						
						if ( dir != "" )
						{
							currentSorts[event.column.dataField] = dir;	
						}
						else
						{
							delete currentSorts[event.column.dataField];
							delete currentOrders[event.column.dataField];
						}
					}
					else
					{
						if ( global.sortingBySingleColumn == true )
						{	// sorted by single column only
							currentSorts = new Object();
							currentOrders = new Object();
							currentSortSeq = 0;
						}
						else
						{	// sorted by multiple columns
							;
						}
						currentSorts[event.column.dataField] = "ASC";	
						dir = currentSorts[event.column.dataField];
						currentSortSeq += 1;
						currentOrders[event.column.dataField] = currentSortSeq;	
					}
					(currentRenderer as DKI_HeaderColumn_Renderer).setImage(dir);
					this.startFiltering();
				}
			}
			
			
			protected function dataGrid_selectionChangeHandler(event:GridSelectionEvent):void
			{
				if(currentState != 'widget')
				{
					idx=dataGrid.selectedIndex;
					//dataGrid.ensureCellIsVisible(idx+11);
					dataGrid.ensureCellIsVisible(idx);
					
					currentState = "detail";			
					/*
					if ( this.dataGrid.selectedItem.tank_base_ref_temp != null 
					  && this.dataGrid.selectedItem.tank_base_ref_temp != ""  
					  && this.dataGrid.selectedItem.tank_base_ref_tunt != null 
					  && this.dataGrid.selectedItem.tank_base_ref_tunt != ""  )
					{
						this.adjustRefTemperature( Number(this.dataGrid.selectedItem.tank_base_ref_temp), int(this.dataGrid.selectedItem.tank_base_ref_tunt) );	
					}
					else
					{
						this.adjustRefTemperature( defaultRefTempC, 0 );	
					}
					*/
					this.adjustRefTemperature( defaultRefTempC, 0 );	
					
					// set validation required flags
					this.tank_location.required = false;
					this.tank_density.required = false;
					this.tank_prod_c_of_e.required = false;
					this.tank_api.required = false;
					this.tank_15_density.required = false;
					this.tank_liquid_kg.required = false;
					this.tank_prod_lvl.required = false;
					this.tank_ullage.required = false;
					this.tank_sulphur.required = false;
					this.tank_flashpoint.required = false;
					this.tank_status.required = false;
					this.tank_hh_level.required = false;
					this.tank_h_level.required = false;
					this.tank_l_level.required = false;
					this.tank_ll_level.required = false;
					this.tank_uh_level.required = false;
					this.tank_ul_level.required = false;
					this.tank_temp.required = false;
					this.tank_amb_vol.required = false;
					this.tank_cor_vol.required = false;
					this.tank_gaugingmthd.required = false;
					this.tank_identifier.required = false;
					this.tank_drv_type.required = false;
					this.tank_drv_aux.required = false;
					this.tank_channel.required = false;
					this.tank_instance.required = false;
					this.tank_poll_gap.required = false;
					this.tank_address.required = false;
					
					/*
					this.tank_location.required = this.requiredFields["tank_location"];
					this.tank_density.required = this.requiredFields["tank_density"];
					this.tank_prod_c_of_e.required = this.requiredFields["tank_prod_c_of_e"];
					this.tank_liquid_kg.required = this.requiredFields["tank_liquid_kg"];
					this.tank_prod_lvl.required = this.requiredFields["tank_prod_lvl"];
					this.tank_ullage.required = this.requiredFields["tank_ullage"];
					this.tank_sulphur.required = this.requiredFields["tank_sulphur"];
					this.tank_flashpoint.required = this.requiredFields["tank_flashpoint"];
					this.tank_status.required = this.requiredFields["tank_status"];
					this.tank_hh_level.required = this.requiredFields["tank_hh_level"];
					this.tank_h_level.required = this.requiredFields["tank_h_level"];
					this.tank_l_level.required = this.requiredFields["tank_l_level"];
					this.tank_ll_level.required = this.requiredFields["tank_ll_level"];
					this.tank_uh_level.required = this.requiredFields["tank_uh_level"];
					this.tank_ul_level.required = this.requiredFields["tank_ul_level"];
					this.tank_temp.required = this.requiredFields["tank_temp"];
					this.tank_amb_vol.required = this.requiredFields["tank_amb_vol"];
					this.tank_cor_vol.required = this.requiredFields["tank_cor_vol"];
					this.tank_gaugingmthd.required = this.requiredFields["tank_gaugingmthd"];
					this.tank_identifier.required = this.requiredFields["tank_identifier"];
					this.tank_drv_type.required = this.requiredFields["tank_drv_type"];
					this.tank_drv_aux.required = this.requiredFields["tank_drv_aux"];
					this.tank_channel.required = this.requiredFields["tank_channel"];
					this.tank_instance.required = this.requiredFields["tank_instance"];
					this.tank_poll_gap.required = this.requiredFields["tank_poll_gap"];
					this.tank_address.required = this.requiredFields["tank_address"];
					*/
					if ( idx >= 0 )
					{
						var cofe:String = tools.roundString(dataGrid.selectedItem.tank_prod_c_of_e,6);
						if ( cofe == "0.000000" )
						{
							this.tank_prod_c_of_e.text = "";
						}
						else
						{
							this.tank_prod_c_of_e.text = cofe;
						}
					}
					
					if ( _formColumnSettingsString.length > 0 )
					{
						global.adjustFormFieldSettings( _formColumnSettingsString.substr(1), this );
					}
					
					if ( _formButtonSettingsString.length > 0 )
					{
						global.adjustFormButtonSettings( _formButtonSettingsString.substr(1), this );
					}
					
					if ( this.fld__tank_sulphur__tank_flashpoint.visible == true )
					{
						this.details.height = this.panelHeight + this.fieldHeight + this.groupGap;
						this.tankArea.height = 40 + this.fieldHeight + this.groupGap;
					}
					else
					{
						this.details.height = this.panelHeight;	
						this.tankArea.height = 40;
					}
					if ( this.fld__tank_levels_states.visible == true )
					{
						//this.details.height += this.fieldHeight + this.groupGap;
						this.tankArea.height += this.fieldHeight + this.groupGap;
					}
					this.detailsGrp.height = this.details.height - 78;
				}
			}
			
			protected function cancel_clickHandler():void
			{
				if ( currentState == "detail" )
				{
					clearDetail();
					currentState="normal";
					dataGrid.selectedIndex = -1;
				}
				else
				{
					currentState = "detail";
					this.btn_save.enabled = this.canUpdate;
					
					// disable validators
					this.tank_location.required = false;
					this.tank_density.required = false;
					this.tank_prod_c_of_e.required = false;
					this.tank_api.required = false;
					this.tank_15_density.required = false;
					this.tank_liquid_kg.required = false;
					this.tank_prod_lvl.required = false;
					this.tank_ullage.required = false;
					this.tank_sulphur.required = false;
					this.tank_flashpoint.required = false;
					this.tank_status.required = false;
					this.tank_hh_level.required = false;
					this.tank_h_level.required = false;
					this.tank_l_level.required = false;
					this.tank_ll_level.required = false;
					this.tank_uh_level.required = false;
					this.tank_ul_level.required = false;
					this.tank_temp.required = false;
					this.tank_amb_vol.required = false;
					this.tank_cor_vol.required = false;
					this.tank_gaugingmthd.required = false;
					this.tank_identifier.required = false;
					this.tank_drv_type.required = false;
					this.tank_drv_aux.required = false;
					this.tank_channel.required = false;
					this.tank_instance.required = false;
					this.tank_poll_gap.required = false;
					this.tank_address.required = false;
				}
			}			
			
			protected function formColumnSettingsMaker_resultHandler():void
			{
				this._formColumnSettingsString =  formColumnSettingsMaker.dataString;
			}
			
			protected function formButtonSettingsMaker_resultHandler():void
			{
				this._formButtonSettingsString =  formButtonSettingsMaker.dataString;
			}
			
			protected function gridColumnSequenceMaker_resultHandler():void
			{
				this._gridColumnSequenceString =  gridColumnSequenceMaker.dataString;
				
				if ( _gridColumnSequenceString.length > 0 )
				{
					global.adjustGridColumnSequence( _gridColumnSequenceString.substr(1), dataGrid );
				}
				
			}
			
			private function lookupBaseClass_resultHandler():void
			{
				if ( currentFields.hasOwnProperty( "tank_base_class" ) )
				{
					this.fltr_baseclass.selectedIndex = tools.getItemIndexFromCode( currentFields["tank_base_class"], baseClassList, "bclass_no");
				}
			}
			
			private function lookupBaseProduct_resultHandler():void
			{
				if ( currentFields.hasOwnProperty( "tank_base" ) )
				{
					this.fltr_baseprod.selectedIndex = tools.getItemIndexFromCode( currentFields["tank_base"], baseProductList, "base_code");
				}
			}
			
			private function lookupTerminal_resultHandler():void
			{
				if ( currentFields.hasOwnProperty( "tank_terminal" ) )
				{
					this.fltr_terminal.selectedIndex = tools.getItemIndexFromCode( currentFields["tank_terminal"], terminalList, "term_code");
				}
			}
			
			
			protected function fltr_tank_keyUpHandler(event:KeyboardEvent):void
			{
				if ( event.keyCode != 13 )
				{
					return;
				}
				if (currentState != "normal") clearDetail();
				startFiltering();
			}
			
			protected function fltr_terminal_changeHandler(event:IndexChangeEvent):void
			{
				if (currentState != "normal") clearDetail();
				startFiltering();
			}
			
			protected function fltr_baseprod_changeHandler(event:IndexChangeEvent):void
			{
				if (currentState != "normal") clearDetail();
				startFiltering();
			}
			
			protected function fltr_baseclass_changeHandler(event:IndexChangeEvent):void
			{
				if (currentState != "normal") clearDetail();
				startFiltering();
			}
			
			private function startFiltering():void
			{
				var tankFilter:String = '';  
				var terminalFilter:String = '';  
				var baseProdFilter:String = '';
				var baseClassFilter:String = '';
				var fields:Object;
				var types:Object;
				
				//interruptor=false;
				pagedRecords.interruptor=false;
				
				fields = new Object();
				types = new Object();
				
				
				if(fltr_tank.text!='')
				{					
					tankFilter = "((UPPER(tank_code) LIKE UPPER('%"+(fltr_tank.text)+"%') ) or "
						+ "(UPPER(tank_name) LIKE UPPER('%"+(fltr_tank.text)+"%') )) ";
					fields["tank_code||tank_name"] = fltr_tank.text+"||"+fltr_tank.text;
				}
				else
				{
					tankFilter = '';
					fields["tank_code||tank_name"] = "";
				}
				types["tank_code||tank_name"] = "STRING||STRING";
				
				
				if (fltr_terminal.selectedIndex > -1) 
				{
					terminalFilter = "tank_terminal='"+terminalList[fltr_terminal.selectedIndex].term_code+"' ";
					fields["tank_terminal"] = terminalList[fltr_terminal.selectedIndex].term_code;
				}
				else
				{
					if ( global.setComboBoxNoSelection == true )
					{
						fltr_terminal.selectedIndex = -1;
					}
					terminalFilter = '';
					fields["tank_terminal"] = "";
				}
				types["tank_terminal"] = "EXACT_STRING";
				
				
				
				if ( this.currentState != "widget" )
				{
					if (fltr_baseprod.selectedIndex > -1) 
					{
						baseProdFilter = "tank_base="+baseProductList[fltr_baseprod.selectedIndex].base_code+" ";
						fields["tank_base"] = baseProductList[fltr_baseprod.selectedIndex].base_code;
					}
					else
					{
						if ( global.setComboBoxNoSelection == true )
						{
							fltr_baseprod.selectedIndex = -1;
						}
						baseProdFilter = '';
						fields["tank_base"] = "";
					}
					types["tank_base"] = "EXACT_STRING";
					
					if (fltr_baseclass.selectedIndex > -1) 
					{
						baseClassFilter = "tank_base_class="+baseClassList[fltr_baseclass.selectedIndex].bclass_no+" ";
						fields["tank_base_class"] = baseClassList[fltr_baseclass.selectedIndex].bclass_no;
					}
					else
					{
						if ( global.setComboBoxNoSelection == true )
						{
							fltr_baseclass.selectedIndex = -1;
						}
						baseClassFilter = '';
						fields["tank_base_class"] = "";
					}
					types["tank_base_class"] = "EXACT_STRING";
				}
				
				currentFilter = "WHERE 1=1 ";
				if ( baseClassFilter.length > 0 )
				{
					currentFilter += "AND " + baseClassFilter;
				}
				if ( tankFilter.length > 0 )
				{
					currentFilter += "AND " + tankFilter;
				}
				if ( terminalFilter.length > 0 )
				{
					currentFilter += "AND " + terminalFilter;
				}
				if ( baseProdFilter.length > 0 )
				{
					currentFilter += "AND " + baseProdFilter;
				}
				
				currentFields = fields;
				currentTypes = types;
				
				this.startLoadingPages();
				
				trace("this.grid.scroller3333", this.dataGrid.scroller);
				trace("this.grid.scroller.verticalScrollBar.value", this.dataGrid.scroller.verticalScrollBar.value);
			}
			
			private function findByPrimaryKey(site:String, tank:String):void
			{
				var fields:Object;
				var types:Object;
				
				fields = new Object();
				types = new Object();
				
				fields["tank_terminal"] = site;
				types["tank_terminal"] = "EXACT_STRING";
				fields["tank_code"] = tank;
				types["tank_code"] = "EXACT_STRING";
				
				//currentPage=1;
				pagedRecords.currentPage=1;
				pagedRecords.removeAll();
				pagedRecords.refresh();
				//this.pagedRecords.service( fields, types, currentSorts, currentOrders, currentPage, currentPageSize );
				this.pagedRecords.listService( fields, types, currentSorts, currentOrders );
			}
			
			protected function filterRecords(event:MouseEvent):void
			{
				if (currentState != "normal") clearDetail();
				this.startFiltering();
			}
			
			protected function refreshRecords(event:MouseEvent):void
			{
				if ( currentState != "widget" )
				{
					currentState = 'normal';
					dataGrid.enabled=true;
				}
				clearDetail();
				fltr_tank.text = "";
				fltr_terminal.selectedIndex = -1;
				if ( currentState != "widget" )
				{
					fltr_baseprod.selectedIndex = -1;
					fltr_baseclass.selectedIndex = -1;
				}
				
				dataGrid.selectedIndex = -1;
				currentFilter = null;
				currentOrder = null;
				currentFields = new Object();
				currentTypes = new Object();
				
				currentSorts = new Object();
				currentOrders = new Object();
				var currentRenderer:IGridItemRenderer;
				for (var i:int=0; i < dataGrid.columns.length; i++)
				{
					currentRenderer = dataGrid.columnHeaderGroup.getHeaderRendererAt(i);
					if ( currentRenderer != null)
					{
						(currentRenderer as DKI_HeaderColumn_Renderer).setImage('');
					}
					//(currentRenderer as DKI_HeaderColumn_Renderer).setImage(''); 
				}
				this.startFiltering();
				//this.startLoadingPages();
				trace("this.grid.scroller2222", this.dataGrid.scroller);
				trace("this.grid.scroller.verticalScrollBar.value", this.dataGrid.scroller.verticalScrollBar.value);
			}
			
			protected function clearDetail(): void
			{
				if (currentState != 'widget')
				{
				}
			}			
			
			private function editStatusRecord():void
			{
				
				if ( this.checkFields() > 0 )
				{
					this.btn_save.enabled = this.canUpdate;
					return;
				}
				
				if ( this.checkAlarmLevels() > 0 )
				{
					this.btn_save.enabled = this.canUpdate;
					return;
				}
				
				var obj:Object = new Object();
				
				obj.tank_terminal = dataGrid.selectedItem.tank_terminal;
				obj.tank_code = dataGrid.selectedItem.tank_code;
				
				obj.tank_base = dataGrid.selectedItem.tank_base;
				obj.tank_base_name = dataGrid.selectedItem.tank_base_name;
				obj.tank_lvl_alarm = dataGrid.selectedItem.tank_lvl_alarm;
				obj.tank_leakdtct_on = dataGrid.selectedItem.tank_leakdtct_on;
				obj.tank_bclass_dens_lo = dataGrid.selectedItem.tank_bclass_dens_lo;
				obj.tank_bclass_dens_hi = dataGrid.selectedItem.tank_bclass_dens_hi;
				//obj.tank_prod_c_of_e = dataGrid.selectedItem.tank_prod_c_of_e;
				if ( tank_prod_c_of_e.text == "" )
				{
					obj.tank_prod_c_of_e = 0;
				}
				else
				{
					obj.tank_prod_c_of_e = tank_prod_c_of_e.text;
				}
				obj.tank_group = dataGrid.selectedItem.tank_group;
				
				obj.tank_density = tank_density.text;
				obj.tank_15_density = tank_15_density.text;
				obj.tank_api = tank_api.text;
				//obj.tank_liquid_kg = dataGrid.selectedItem.tank_liquid_kg;
				obj.tank_liquid_kg = tank_liquid_kg.text;
				obj.tank_prod_lvl = tank_prod_lvl.text;
				obj.tank_ullage = tank_ullage.text;
				obj.tank_sulphur = tank_sulphur.text;
				obj.tank_flashpoint = tank_flashpoint.text;
				
				obj.tank_temp = tank_temp.text;
				obj.tank_amb_vol = tank_amb_vol.text;
				//obj.tank_cor_vol = dataGrid.selectedItem.tank_cor_vol;
				obj.tank_cor_vol = tank_cor_vol.text;
				
				if (tank_location.selectedIndex>=0)
				{
					obj.tank_location = areaList[tank_location.selectedIndex].area_name;
				}
				else
				{
					obj.tank_location = dataGrid.selectedItem.tank_location;
				}
				
				if (tank_gaugingmthd.selectedIndex>=0)
				{
					obj.tank_gaugingmthd = gaugeMethodList[tank_gaugingmthd.selectedIndex].gauge_method_id;
				}
				else
				{
					obj.tank_gaugingmthd = dataGrid.selectedItem.tank_gaugingmthd;
				}
				
				obj.tank_hh_level = tank_hh_level.text;
				obj.tank_h_level = tank_h_level.text;
				obj.tank_l_level = tank_l_level.text;
				obj.tank_ll_level = tank_ll_level.text;
				obj.tank_uh_level = tank_uh_level.text;
				obj.tank_ul_level = tank_ul_level.text;
				if (tank_status.selectedIndex>=0)
				{
					obj.tank_status = tankStatusTypeList[tank_status.selectedIndex].tank_status_id;
				}
				else
				{
					obj.tank_status = dataGrid.selectedItem.tank_status;
				}
				
				updateStatusAction.service( obj );
			}
			
			protected function updateStatusData_resultHandler( ):void
			{
				clearDetail();
				if ( this.updateStatusAction.dataString == "OK" )
				{
					global.msgSuccess(resourceManager.getString('default','MSG_UPDATE__SUCCESS'));
				}
				else
				{
					global.msgFail(resourceManager.getString('default','ERROR_UPDATE__FAILURE'));
				}
				
				var site:String;
				var tank:String;
				site = dataGrid.selectedItem.tank_terminal;
				tank = dataGrid.selectedItem.tank_code;
				
				currentState="normal";
				findByPrimaryKey( site, tank );
				
				dataGrid.selectedIndex = -1;
				dataGrid.enabled=true;
			}
			
			private function editGaugeRecord():void
			{
				var obj:Object = new Object();
				
				
				obj.tank_terminal = dataGrid.selectedItem.tank_terminal;
				obj.tank_code = dataGrid.selectedItem.tank_code;
				
				obj.tank_identifier = this.tank_identifier.text;
				obj.tank_drv_type = this.tank_drv_type.text;
				obj.tank_drv_aux = this.tank_drv_aux.text;
				obj.tank_channel = this.tank_channel.text;
				obj.tank_instance = this.tank_instance.text;
				obj.tank_poll_gap = this.tank_poll_gap.text;
				obj.tank_address = this.tank_address.text;
				
				updateGaugeAction.service( obj );
			}
			
			protected function updateGaugeData_resultHandler( ):void
			{
				clearDetail();
				if ( this.updateGaugeAction.dataString == "OK" )
				{
					global.msgSuccess(resourceManager.getString('default','MSG_UPDATE__SUCCESS'));
				}
				else
				{
					global.msgFail(resourceManager.getString('default','ERROR_UPDATE__FAILURE'));
				}
				
				var site:String;
				var tank:String;
				site = dataGrid.selectedItem.tank_terminal;
				tank = dataGrid.selectedItem.tank_code;
				
				currentState="normal";
				findByPrimaryKey( site, tank );
				
				dataGrid.selectedIndex = -1;
				dataGrid.enabled=true;
			}
			
			private function calculateTankDensities():void
			{
				this.btn_save.enabled = this.canUpdate;
				this.btn_recalcDensity.enabled = true;//false;
				
				if ( this.checkFields() > 0 )
				{
					return;
				}
				
				if ( vg.checkValidationOnly() > 0 )
				{
					return;
				}
				
				this.markDensitySource();
				
				var txt:String="";
				var txt2:String="";
				var rTmp:Number=this.refTempC;
				// get ref density and API from std density
				if ( this.dataGrid.selectedItem.tank_base_class != 6 )
				{
					if ( this.densityType == "D15C" )
					{
						txt = String( mngr.DensityXC( this.densityAmount, rTmp ) );
						//txt = String( mngr.Density_Temp( this.densityAmount, rTmp, 'C' ) );
						this.tank_density.text = tools.roundString( txt, this.digitsDENS );
						
						txt = String( mngr.API( mngr.Density60F(this.densityAmount) ) );
						this.tank_api.text = tools.roundString( txt, this.digitsAPI );
					}
					// get std density and API from ref density
					if ( this.densityType == "D30C" )
					{
						txt = String( mngr.Density15CFromXC( this.densityAmount, rTmp, this.digitsDENS ) );
						this.tank_15_density.text = tools.roundString( txt, this.digitsDENS );
						
						txt2 = String( mngr.API( mngr.Density60F(Number(txt)) ) );
						this.tank_api.text = tools.roundString( txt2, this.digitsAPI );
						
					}
					// get std density and ref density from API
					if ( this.densityType == "A60F" )
					{
						txt = String( mngr.Density15C( this.densityAmount ) );
						this.tank_15_density.text = tools.roundString( txt, this.digitsDENS );
						
						txt2 = String( mngr.DensityXC( Number(txt), rTmp ) );
						//txt2 = String( mngr.Density_Temp( Number(txt), rTmp, 'C' ) );
						this.tank_density.text = tools.roundString( txt2, this.digitsDENS );
					}
				}
				else
				{
					if ( this.densityType == "D15C" )
					{
						this.tank_density.text = tools.roundString( String(this.densityAmount), this.digitsDENS );
						
						txt = String( mngr.API( mngr.Density60F(this.densityAmount) ) );
						this.tank_api.text = tools.roundString( txt, this.digitsAPI );
					}
					// get std density and API from ref density
					if ( this.densityType == "D30C" )
					{
						this.tank_15_density.text = tools.roundString( String(this.densityAmount), this.digitsDENS );
						
						txt2 = String( mngr.API( mngr.Density60F(this.densityAmount) ) );
						this.tank_api.text = tools.roundString( txt2, this.digitsAPI );
						
					}
					// get std density and ref density from API
					if ( this.densityType == "A60F" )
					{
						txt = String( mngr.Density15C( this.densityAmount ) );
						this.tank_15_density.text = tools.roundString( txt, this.digitsDENS );
						
						this.tank_density.text = this.tank_15_density.text;
					}
				}
			}
			
			protected function calculateDensityData_resultHandler( ):void
			{
				if ( this.calculateDensityAction.dataString.length == 0 )
				{
					return;
				}
				else
				{
					var tmp:XML = XML(this.calculateDensityAction.dataString);
					
					tank_amb_vol.text  		 	= tools.roundString( String((tmp.REAL_LITRE)), this.digitsVOL );
					tank_cor_vol.text  		 	= tools.roundString( String((tmp.REAL_LITRE15)), this.digitsVOL );
					tank_liquid_kg.text 		= tools.roundString( String((tmp.REAL_KG)), this.digitsMASS );
					
				}
				
			}
			
			private function calculateTankVolumes():void
			{
				this.btn_save.enabled = this.canUpdate;
				this.btn_recalcVolume.enabled = true;//false;
				//this.btn_recalcLevel.enabled = true;//false;
				
				if ( this.checkFields() > 0 )
				{
					return;
				}
				
				if ( vg.checkValidationOnly() > 0 )
				{
					return;
				}
				
				this.markVolumeSource();
				
				var obj:Object = new Object();
				
				
				/*
				'frm_baseCd'=>urlencode($data->tank_base),
				'frm_which_type'=>urlencode($data->tank_qty_type),
				'frm_real_amount'=>urlencode($data->tank_qty_amount),
				'frm_real_temp'=>urlencode($data->tank_temp),
				'frm_real_dens'=>urlencode($data->tank_density)
				*/
				
				obj.tank_terminal = dataGrid.selectedItem.tank_terminal;
				obj.tank_code = dataGrid.selectedItem.tank_code;
				
				obj.tank_base = dataGrid.selectedItem.tank_base;
				obj.tank_bclass_dens_lo = dataGrid.selectedItem.tank_bclass_dens_lo;
				obj.tank_bclass_dens_hi = dataGrid.selectedItem.tank_bclass_dens_hi;
				//obj.tank_prod_c_of_e = dataGrid.selectedItem.tank_prod_c_of_e;
				if ( tank_prod_c_of_e.text == "" )
				{
					obj.tank_prod_c_of_e = 0;
				}
				else
				{
					obj.tank_prod_c_of_e = tank_prod_c_of_e.text;
				}
				
				obj.tank_density = tank_density.text;
				obj.tank_15_density = tank_15_density.text;
				obj.tank_api = tank_api.text;
				//obj.tank_liquid_kg = dataGrid.selectedItem.tank_liquid_kg;
				obj.tank_liquid_kg = tank_liquid_kg.text;
				obj.tank_prod_lvl = tank_prod_lvl.text;
				obj.tank_ullage = tank_ullage.text;
				obj.tank_sulphur = tank_sulphur.text;
				obj.tank_flashpoint = tank_flashpoint.text;
				obj.tank_temp = tank_temp.text;
				obj.tank_amb_vol = tank_amb_vol.text;
				//obj.tank_cor_vol = dataGrid.selectedItem.tank_cor_vol;
				obj.tank_cor_vol = tank_cor_vol.text;
				
				obj.tank_qty_type = volumeType;
				obj.tank_qty_amount = volumeAmount;

				calculateVolumeAction.service( obj );
			}
			
			protected function calculateVolumeData_resultHandler( ):void
			{
				handleCalcResults( this.calculateVolumeAction.dataString );
				/*
				if ( this.calculateVolumeAction.dataString.length == 0 )
				{
					return;
				}
				else
				{
					var tmp:XML = XML(this.calculateVolumeAction.dataString);
					
					tank_amb_vol.text  		 	= tools.roundString( String((tmp.REAL_LITRE)), this.digitsVOL );
					tank_cor_vol.text  		 	= tools.roundString( String((tmp.REAL_LITRE15)), this.digitsVOL );
					tank_liquid_kg.text 		= tools.roundString( String((tmp.REAL_KG)), this.digitsMASS );
					
				}
				*/
			}
			
			private function calculateTankVolumesByLevel():void
			{
				this.btn_save.enabled = this.canUpdate;
				//this.btn_recalcVolume.enabled = true;//false;
				this.btn_recalcLevel.enabled = true;//false;
				
				if ( this.checkFields() > 0 )
				{
					return;
				}
				
				if ( vg.checkValidationOnly() > 0 )
				{
					return;
				}
				
				this.markVolumeSource();
				
				var obj:Object = new Object();
				
				
				/*
				'frm_baseCd'=>urlencode($data->tank_base),
				'frm_which_type'=>urlencode($data->tank_qty_type),
				'frm_real_amount'=>urlencode($data->tank_qty_amount),
				'frm_real_temp'=>urlencode($data->tank_temp),
				'frm_real_dens'=>urlencode($data->tank_density)
				*/
				
				obj.tank_terminal = dataGrid.selectedItem.tank_terminal;
				obj.tank_code = dataGrid.selectedItem.tank_code;
				
				obj.tank_base = dataGrid.selectedItem.tank_base;
				obj.tank_bclass_dens_lo = dataGrid.selectedItem.tank_bclass_dens_lo;
				obj.tank_bclass_dens_hi = dataGrid.selectedItem.tank_bclass_dens_hi;
				//obj.tank_prod_c_of_e = dataGrid.selectedItem.tank_prod_c_of_e;
				if ( tank_prod_c_of_e.text == "" )
				{
					obj.tank_prod_c_of_e = 0;
				}
				else
				{
					obj.tank_prod_c_of_e = tank_prod_c_of_e.text;
				}
				
				obj.tank_density = tank_density.text;
				obj.tank_15_density = tank_15_density.text;
				obj.tank_api = tank_api.text;
				//obj.tank_liquid_kg = dataGrid.selectedItem.tank_liquid_kg;
				obj.tank_liquid_kg = tank_liquid_kg.text;
				obj.tank_prod_lvl = tank_prod_lvl.text;
				obj.tank_ullage = tank_ullage.text;
				obj.tank_sulphur = tank_sulphur.text;
				obj.tank_flashpoint = tank_flashpoint.text;
				obj.tank_temp = tank_temp.text;
				obj.tank_amb_vol = tank_amb_vol.text;
				//obj.tank_cor_vol = dataGrid.selectedItem.tank_cor_vol;
				obj.tank_cor_vol = tank_cor_vol.text;
				
				obj.tank_qty_type = "LT";
				obj.tank_qty_amount = tank_amb_vol.text;
				
				calculateLevelAction.service( obj );
			}
			
			protected function calculateLevelData_resultHandler( ):void
			{
				handleCalcResults( this.calculateLevelAction.dataString );
				markVolumeSource();
			}
			
			protected function handleCalcResults(result:String ):void
			{
				if ( result.length == 0 )
				{
					// blank string
					global.msgWarning(resourceManager.getString('default','ALERT__CALC_QTY'));
				}
				else
				{
					if ( result.indexOf('xml version') >= 0 )
					{
						// xml string
						var tmp:XML = XML(result);
						var errors:String="";
						var index:int=0;
						
						if ( result.indexOf('REAL_LITRE') >= 0 )
						{
							tank_amb_vol.text  		 	= tools.roundString( String((tmp.REAL_LITRE)), this.digitsVOL );
						}
						else
						{
							index += 1;
							errors += String(index) + ". " + resourceManager.getString('default','TANK_AMB_VOL') + ": " + resourceManager.getString('default','FOLIO_SCHEDULING.PLANNER.MSG.FAILED') + "\n";
						}
						if ( result.indexOf('REAL_LITRE15') >= 0 )
						{
							tank_cor_vol.text  		 	= tools.roundString( String((tmp.REAL_LITRE15)), this.digitsVOL );
						}
						else
						{
							index += 1;
							errors += String(index) + ". " + resourceManager.getString('default','TANK_COR_VOL') + ": " + resourceManager.getString('default','FOLIO_SCHEDULING.PLANNER.MSG.FAILED') + "\n";
						}
						if ( result.indexOf('REAL_KG') >= 0 )
						{
							tank_liquid_kg.text 		= tools.roundString( String((tmp.REAL_KG)), this.digitsMASS );
						}
						else
						{
							index += 1;
							errors += String(index) + ". " + resourceManager.getString('default','TANK_LIQUID_KG') + ": " + resourceManager.getString('default','FOLIO_SCHEDULING.PLANNER.MSG.FAILED') + "\n";
						}
						
						if ( index > 0 )
						{
							errors = tmp.MSG_DESC + "\n" + errors;
							var errorBox:MessageDialog = new MessageDialog( errors );
						}
						
					}
					else
					{
						if ( this.calculateLevelAction.dataString == "-1" )
						{
							global.msgWarning(resourceManager.getString('default','ALERT__STRAP_VOLUME_NOT_FOUND'));
						}
						else if ( this.calculateLevelAction.dataString == "-2" )
						{
							global.msgWarning(resourceManager.getString('default','ALERT__STRAP_DATA_NOT_ENOUGH'));
						}
						else
						{
							global.msgWarning(resourceManager.getString('default','ALERT__CALC_QTY'));
						}
					}
					
				}
				
				return;
			}
			
			// not used any more
			private function recalculateTankVolumes(field:String):void
			{
				this.btn_save.enabled = this.canUpdate;
				this.btn_recalcVolume.enabled = true;//false;
				
				if ( this.checkFields() > 0 )
				{
					return;
				}
				
				if ( vg.checkValidationOnly() > 0 )
				{
					return;
				}
				
				var obj:Object = new Object();
				
				
				obj.tank_terminal = dataGrid.selectedItem.tank_terminal;
				obj.tank_code = dataGrid.selectedItem.tank_code;
				
				obj.tank_base = dataGrid.selectedItem.tank_base;
				obj.tank_base_name = dataGrid.selectedItem.tank_base_name;
				obj.tank_lvl_alarm = dataGrid.selectedItem.tank_lvl_alarm;
				obj.tank_leakdtct_on = dataGrid.selectedItem.tank_leakdtct_on;
				obj.tank_bclass_dens_lo = dataGrid.selectedItem.tank_bclass_dens_lo;
				obj.tank_bclass_dens_hi = dataGrid.selectedItem.tank_bclass_dens_hi;
				//obj.tank_prod_c_of_e = dataGrid.selectedItem.tank_prod_c_of_e;
				if ( tank_prod_c_of_e.text == "" )
				{
					obj.tank_prod_c_of_e = 0;
				}
				else
				{
					obj.tank_prod_c_of_e = tank_prod_c_of_e.text;
				}
				obj.tank_group = dataGrid.selectedItem.tank_group;
				
				obj.tank_density = tank_density.text;
				obj.tank_liquid_kg = dataGrid.selectedItem.tank_liquid_kg;
				obj.tank_prod_lvl = tank_prod_lvl.text;
				obj.tank_ullage = tank_ullage.text;
				obj.tank_sulphur = tank_sulphur.text;
				obj.tank_flashpoint = tank_flashpoint.text;
				obj.tank_temp = tank_temp.text;
				obj.tank_amb_vol = tank_amb_vol.text;
				obj.tank_cor_vol = dataGrid.selectedItem.tank_cor_vol;
				
				if (tank_location.selectedIndex>=0)
				{
					obj.tank_location = areaList[tank_location.selectedIndex].area_name;
				}
				else
				{
					obj.tank_location = dataGrid.selectedItem.tank_location;
				}
				
				if (tank_gaugingmthd.selectedIndex>=0)
				{
					obj.tank_gaugingmthd = gaugeMethodList[tank_gaugingmthd.selectedIndex].gauge_method_id;
				}
				else
				{
					obj.tank_gaugingmthd = dataGrid.selectedItem.tank_gaugingmthd;
				}
				
				obj.tank_field_changed = field;
				
				recalculateVolumeAction.service( obj );
			}
			
			// not used any more
			protected function recalculateVolumeData_resultHandler( ):void
			{
				if ( this.recalculateVolumeAction.dataList.length == 0 )
				{
					return;
				}
				else
				{
					var obj:Object = this.recalculateVolumeAction.dataList.getItemAt(0);
					//????
					tank_prod_c_of_e.text = tools.roundString( obj.tank_prod_c_of_e, 6 );
					tank_density.text = tools.roundString( obj.tank_density, this.digitsDENS );
					tank_liquid_kg.text = tools.roundString( obj.tank_liquid_kg, this.digitsMASS );
					tank_prod_lvl.text = tools.roundString( obj.tank_prod_lvl, this.digitsLVL );
					tank_ullage.text = tools.roundString( obj.tank_ullage, this.digitsVOL );
					tank_temp.text = tools.roundString( obj.tank_temp, this.digitsTEMP );
					tank_amb_vol.text = tools.roundString( obj.tank_amb_vol, this.digitsVOL );
					tank_cor_vol.text = tools.roundString( obj.tank_cor_vol, this.digitsVOL );
					tank_temp_label.text = '[' + dataGrid.selectedItem.tank_bclass_temp_lo + ' - ' + dataGrid.selectedItem.tank_bclass_temp_hi + ']'
						+ resourceManager.getString('default','UNIT__TEMP_C') + '      '
						+ tools.roundString( String(this.mngr.Temp_C2F(obj.tank_temp)), this.digitsTEMP ) 
						+ resourceManager.getString('default','UNIT__TEMP_F');
				}
				
			}
			
			
			protected function refTemperatureReader_resultHandler( ):void
			{
				this.defaultRefTempC = refTemperatureReader.dataNumber;
				
				this.adjustRefTemperature( this.defaultRefTempC, 0 );
			}
			
			protected function cofeReader_resultHandler( ):void
			{
				var arr:Array;
				
				arr = cofeReader.dataString.split("~");
				
				if ( arr.length >=2 )
				{
					this.COFE_LO = Number(arr[0]);
					this.COFE_HI = Number(arr[1]);
				}
				else if ( arr.length == 1 )
				{
					this.COFE_LO = Number(arr[0]);
				}
				
			}
			
			
			protected function adjustRefTemperature(temp:Number, unit:int):void
			{
				if ( unit == 0 )
				{
					this.refTempC = temp;
					this.refTempF = this.mngr.Temp_C2F( refTempC );
				}
				else
				{
					this.refTempF = temp;
					this.refTempC = this.mngr.Temp_F2C( refTempF );
				}
				
				if ( String(this.refTempC).indexOf('.') < 0 )
				{
					//this.refTempTextC = String(this.refTempC) + 'C';
					this.refTempTextC = String(this.refTempC) + resourceManager.getString('default','UNIT__TEMP_C');
				}
				else
				{
					//this.refTempTextC = tools.roundString(String(this.refTempC), this.digitsTEMP) + 'C';
					this.refTempTextC = tools.roundString(String(this.refTempC), this.digitsTEMP) + resourceManager.getString('default','UNIT__TEMP_C');
				}
				
				if ( String(this.refTempF).indexOf('.') < 0 )
				{
					//this.refTempTextF = String(this.refTempF) + 'F';
					this.refTempTextF = String(this.refTempF) + resourceManager.getString('default','UNIT__TEMP_F');
				}
				else
				{
					//this.refTempTextF = tools.roundString(String(this.refTempF), this.digitsTEMP) + 'F';
					this.refTempTextF = tools.roundString(String(this.refTempF), this.digitsTEMP) + resourceManager.getString('default','UNIT__TEMP_F');
				}
				
				this.refTempText = this.refTempTextC + '/' + this.refTempTextF;
			}
			
			// unit is the from unit
			protected function convertTemperature( data:Number, unit:String ):Number
			{
				var temp:Number;
				
				if( unit == "C" )
				{
					temp = 1.8*data + 32.0;
				}
				else if( unit == "F" )
				{
					temp = (data - 32.0)/1.8; 
				}
				else
				{
					temp = data;
				}
				
				return temp;
			}
			
			private function checkFields():int
			{
				var errors:String="";
				var index:int=0;
				
				// TODO: need check tank_prod_c_of_e.text????
				
				if ( this.tank_prod_c_of_e.text.length>0 )
				{
					var cofe_lo:Number = this.COFE_LO;
					var cofe_hi:Number = this.COFE_HI;
					var cofe:Number = Number(this.tank_prod_c_of_e.text);
					
					if ( !( cofe >= cofe_lo && cofe <= cofe_hi ) )
					{
						index += 1;
						errors += String(index) + ". " + resourceManager.getString('default','ALERT__TANK_COFE_OUTLIMIT') + "\n";
					}
				}
				
				if ( this.tank_api.text.length>0 )
				{
					var api:Number = Number(this.tank_api.text);
					
					if ( !( int(api) >= 0 && api <= 85 ) )
					{
						index += 1;
						errors += String(index) + ". " + resourceManager.getString('default','ALERT__TANK_API_OUTLIMIT') + "\n";
					}
				}
				
				if ( this.tank_density.text.length>0 )
				{
					var dens_lo:Number = dataGrid.selectedItem.tank_bclass_dens_lo;
					var dens_hi:Number = dataGrid.selectedItem.tank_bclass_dens_hi;
					var dens:Number = Number(this.tank_density.text);
					
					if ( !( dens >= dens_lo && dens <= dens_hi ) )
					{
						index += 1;
						errors += String(index) + ". " + resourceManager.getString('default','ALERT__TANK_DENSITY_OUTLIMIT') + "\n";
					}
				}
				
				if ( this.tank_15_density.text.length>0 )
				{
					var dens_lo:Number = dataGrid.selectedItem.tank_bclass_dens_lo;
					var dens_hi:Number = dataGrid.selectedItem.tank_bclass_dens_hi;
					var dens:Number = Number(this.tank_15_density.text);
					
					if ( !( dens >= dens_lo && dens <= dens_hi ) )
					{
						index += 1;
						errors += String(index) + ". " + resourceManager.getString('default','ALERT__TANK_DENSITY_OUTLIMIT') + " [@15ºC/59ºF]\n";
					}
				}
				
				if ( this.tank_temp.text.length>0 )
				{
					var temp_lo:Number = dataGrid.selectedItem.tank_bclass_temp_lo;
					var temp_hi:Number = dataGrid.selectedItem.tank_bclass_temp_hi;
					var temp:Number = Number(this.tank_temp.text);
					
					if ( !( temp >= temp_lo && temp <= temp_hi ) )
					{
						index += 1;
						errors += String(index) + ". " + resourceManager.getString('default','ALERT__TANK_TEMPERATURE_OUTLIMIT') + "\n";
					}
				}
				
				if ( index > 0 )
				{
					var errorBox:MessageDialog = new MessageDialog( errors );
				}
				
				return index;
			}
			
			private function checkAlarmLevels():int
			{
				var errors:String="";
				var index:int=0;
				var hh:Number=-1;
				var h:Number=-1;
				var l:Number=-1;
				var ll:Number=-1;
				var uh:Number=-1;
				var ul:Number=-1;
				
				// TODO: need check tank_prod_c_of_e.text????
				
				if ( StringUtil.trim(this.tank_ll_level.text).length > 0 )
				{
					ll = Number(this.tank_ll_level.text);
				}
				if ( StringUtil.trim(this.tank_l_level.text).length > 0 )
				{
					l = Number(this.tank_l_level.text);
				}
				if ( StringUtil.trim(this.tank_h_level.text).length > 0 )
				{
					h = Number(this.tank_h_level.text);
				}
				if ( StringUtil.trim(this.tank_hh_level.text).length > 0 )
				{
					hh = Number(this.tank_hh_level.text);
				}
				if ( StringUtil.trim(this.tank_ul_level.text).length > 0 )
				{
					ul = Number(this.tank_ul_level.text);
				}
				if ( StringUtil.trim(this.tank_uh_level.text).length > 0 )
				{
					uh = Number(this.tank_uh_level.text);
				}
				
				// 
				if ( ll >= 0 && l >= 0 && ll >= l )
				{
					index += 1;
					errors += String(index) + ". " + resourceManager.getString('default','ALERT__TANK_LEVEL_SEQ_LL_L') + "\n";
				}
				if ( l >= 0 && h >= 0 && l >= h )
				{
					index += 1;
					errors += String(index) + ". " + resourceManager.getString('default','ALERT__TANK_LEVEL_SEQ_L_H') + "\n";
				}
				if ( h >= 0 && hh >= 0 && h >= hh )
				{
					index += 1;
					errors += String(index) + ". " + resourceManager.getString('default','ALERT__TANK_LEVEL_SEQ_H_HH') + "\n";
				}
				if ( ul >= 0 && uh >= 0 && ul >= uh )
				{
					index += 1;
					errors += String(index) + ". " + resourceManager.getString('default','ALERT__TANK_LEVEL_SEQ_UL_UH') + "\n";
				}
				
				if ( index > 0 )
				{
					var errorBox:MessageDialog = new MessageDialog( errors );
				}
				
				return index;
			}
			
			
			public function getArrayCollection(obj:Object):ArrayCollection
			{
				var temp:ArrayCollection = new ArrayCollection;
				temp.addItem( obj );
				return temp;
			}
			
			public function convertDateToLocaleString(dt:String):String
			{
				var dt_string:String;
				var dt_date:Date = new Date();
				
				dt_string = ""; 
				if ((dt!=null) && (dt!='null') && (dt!=''))
				{
					dt_date = DateField.stringToDate(dt,"YYYY-MM-DD");
					dt_string = dateFormatter.format( dt_date);
				}
				//trace ("convertDateToLocale", dt, dt_date, dt_string);
				return dt_string;
			}
			
			public function convertDateToLocale(dt:String):Date
			{
				var dt_date:Date = new Date();
				
				if ((dt!=null) && (dt!='null') && (dt!=''))
				{
					dt_date = DateField.stringToDate(dt,"YYYY-MM-DD");
				}
				//trace ("convertDateToLocale", dt, dt_date, dt_string);
				return dt_date;
			}
			
			public function convertDateToLocaleLong(dt:String):Date
			{
				var dt_date:Date = new Date();
				
				if ((dt!=null) && (dt!='null') && (dt!=''))
				{
					//dt_date = DateField.stringToDate(dt,"YYYY-MM-DD HH:NN:SS");
					dt_date = DateTimeFunc.createDate(
						int(dt.substr(0, 4))
						, int(dt.substr(5, 2))
						, int(dt.substr(8, 2))
						, int(dt.substr(11, 2))
						, int(dt.substr(14, 2))
						, int(dt.substr(17, 2))
					);
				}
				//trace ("convertDateToLocale", dt, dt_date, dt_string);
				return dt_date;
			}
			
			public function getDefaultDate():Date
			{
				var now_date:Date;
				var def_date:Date;
				
				now_date = new Date();
				def_date = DateTimeFunc.dateAdd( "yyyy", 1, now_date );
				
				//trace ("getDefaultDate", now_date, def_date);
				
				return def_date;
			}
			
			protected function view_detailsHandler(event:FlexEvent):void
			{
			}
			
			protected function unitLabelFunction(item:Object, column:GridColumn):String
			{
				var ret:String = 'l(amb)';
				//for each(var obj:Object in lookupDrawerProductUnit.lastResult)
				for each(var obj:Object in this.productUnitList)
				{
					if(obj.unit_id == item [column.dataField]) ret=obj.unit_name;
				}
				return ret;
			}
			
			protected function roundNumberFunction(item:Object, column:GridColumn):String
			{
				var digits:int=0;
				if ( column.dataField == "tank_temp" )
				{
					digits = this.digitsTEMP;
				}
				if ( column.dataField == "tank_api" )
				{
					digits = this.digitsAPI;
				}
				if ( column.dataField == "tank_density" )
				{
					digits = this.digitsDENS;
				}
				if ( column.dataField == "tank_15_density" )
				{
					digits = this.digitsDENS;
				}
				
				var ret:String = item [column.dataField];
				if ( ret == null )
				{
					ret = "";
				}
				else
				{
					ret = tools.roundString( ret, digits );
				}

				return ret;
			}
			
			protected function temperatureValueFunction(item:Object, column:GridColumn):String
			{
				var digits:int=this.digitsTEMP;
				
				var ret:String = item [column.dataField];
				if ( ret == null )
				{
					ret = "";
				}
				else
				{
					var tempF:Number = this.mngr.Temp_C2F( item [column.dataField] );
					ret = tools.roundString( ret, digits ) + 'ºC/' + tools.roundString( String(tempF), digits ) + 'ºF';
				}
				
				return ret;
			}
			
			protected function dateLabelFunction(item:Object, column:GridColumn):String
			{
				var ret:String = "";
				
				ret = item [column.dataField];
				return ret;
			}
			
			protected function lookupProductUnit_resultHandler( ):void
			{
				global.prodUnits = this.productUnitList;
			}
			
			protected function lookupUnitScale_resultHandler( ):void
			{
				this.tempUnitC = "ºC";
				this.tempUnitF = "ºF";
				
				for each ( var o:Object in this.allUnitList )
				{
					if ( o.hasOwnProperty("unit_id") && int(o.unit_id) == 0 )
					{
						tempUnitC = o.unit_name;
					}
					if ( o.hasOwnProperty("unit_id") && int(o.unit_id) == 1 )
					{
						tempUnitF = o.unit_name;
					}
				}
			}
			
			protected function save_clickHandler():void
			{
				this.btn_save.enabled = false;
				doSave();
				//this.confirmSave = new ActionDialog( doSave, doNothing, resourceManager.getString('default','CONFIRM_SAVE_RATIOS') );
				
				//this.startLoadingPages();
			}
			
			protected function doSave():void
			{
				if (currentState == "editStatus")
				{
					editStatusRecord();
				}
				if (currentState == "editGauge")
				{
					editGaugeRecord();
				}
			}
			
			public function closeDialogHandler():void
			{
				/* this.mainListSelection = this.dataGrid.selectedIndex;
				this.currentState = "normal";
				this.dataGrid.selectedIndex = -1;
				this.startFiltering(); */
			}
			
			
			public function closeErrorDialog():void
			{
				PopUpManager.removePopUp(this.errorDialog.dialog );	
			}
			
			protected function killBtn_clickHandler(event:MouseEvent):void
			{
				//interruptor=true;
				pagedRecords.interruptor=true;
				trace("WTF >>>>>>>>>>");
			}
			
			protected function resumeBtn_clickHandler(event:MouseEvent):void
			{
				//interruptor=false;
				pagedRecords.interruptor=false;
				
				this.resumeLoadingPages();
				trace("RESUME >>>>>>>>>>");
			}
			
			protected function resumeLoadingPages():void
			{
				killBtn.setStyle("chromeColor","0xff0000");
				this.killBtn.includeInLayout=true;
				this.killBtn.visible = true;
				this.killBtn.enabled = true;
				
				resumeBtn.setStyle("chromeColor","0x00ff00");
				this.resumeBtn.includeInLayout=true;
				this.resumeBtn.visible = true;
				this.resumeBtn.enabled = false;
				
				//this.btn_create.enabled = false
				this.btn_export.enabled = false;
				this.dataGrid.enabled = false;
				this.toolbar.enabled = false;
				
				//pb.values(pagedRecords.length,totalLength);
				pb.values(pagedRecords.length,pagedRecords.totalLength);
				//currentPage = int(this.pagedRecords.length/currentPageSize) + 1;
				//this.pagedRecords.service( currentFields, currentTypes, currentSorts, currentOrders, currentPage, currentPageSize );
				this.pagedRecords.listService( currentFields, currentTypes, currentSorts, currentOrders );
			}
			
			
			protected function checkDensityRange():void
			{
				if ( this.tank_density.text.length>0 )
				{
					var dens_lo:Number = dataGrid.selectedItem.tank_bclass_dens_lo;
					var dens_hi:Number = dataGrid.selectedItem.tank_bclass_dens_hi;
					var dens:Number = Number(this.tank_density.text);
					
					if ( !( dens >= dens_lo && dens <= dens_hi ) )
					{
						global.msgWarning( resourceManager.getString('default','ALERT__TANK_DENSITY_OUTLIMIT') );
					}
				}
				
				if ( this.tank_15_density.text.length>0 )
				{
					var dens_lo:Number = dataGrid.selectedItem.tank_bclass_dens_lo;
					var dens_hi:Number = dataGrid.selectedItem.tank_bclass_dens_hi;
					var dens:Number = Number(this.tank_15_density.text);
					
					if ( !( dens >= dens_lo && dens <= dens_hi ) )
					{
						global.msgWarning( resourceManager.getString('default','ALERT__TANK_DENSITY_OUTLIMIT') + "[@15ºC/59ºF]" );
					}
				}
			}
			
			public function setFilters( params:*=false ): void
			{
				if ( this.isPopupWindow == true )
				{
					vg.parentScreen = this;
				}
				
				if ( params == false )
				{
					return;
				}
				
				//this.parentParams = params;
				
				currentState = "normal";
				
				trace ("...............................in setFilters");
				tools.pr( params);
				
				var po:Object=new Object();
				
				po["tank_terminal"] = tools.getObjAttribute( params, "tank_terminal", "" );
				po["tank_code"] = tools.getObjAttribute( params, "tank_code", "" );
				po["tank_base"] = tools.getObjAttribute( params, "tank_base", "" );
				po["tank_base_class"] = tools.getObjAttribute( params, "tank_base_class", "" );
				
				var fields:Object;
				var types:Object;
				
				//interruptor=false;
				pagedRecords.interruptor=false;
				
				fields = new Object();
				types = new Object();
				
				fields["tank_terminal"] = po["tank_terminal"];
				types["tank_terminal"] = "EXACT_STRING";
				fields["tank_code"] = po["tank_code"];
				types["tank_code"] = "EXACT_STRING";
				fields["tank_base"] = po["tank_base"];
				types["tank_base"] = "EXACT_STRING";
				fields["tank_base_class"] = po["tank_base_class"];
				types["tank_base_class"] = "EXACT_STRING";
				
				currentFields = fields;
				currentTypes = types;
				this.startLoadingPages();
				
				if ( po.hasOwnProperty( "tank_terminal" ) )
				{
					this.fltr_terminal.selectedIndex = tools.getItemIndexFromCode( po["tank_terminal"], terminalList, "term_code");
				}
				if ( po.hasOwnProperty( "tank_code" ) )
				{
					this.fltr_tank.text = po["tank_code"];
				}
				if ( po.hasOwnProperty( "tank_base" ) )
				{
					this.fltr_baseprod.selectedIndex = tools.getItemIndexFromCode( po["tank_base"], baseProductList, "base_code");
				}
				if ( po.hasOwnProperty( "tank_base_class" ) )
				{
					this.fltr_baseclass.selectedIndex = tools.getItemIndexFromCode( po["tank_base_class"], baseClassList, "bclass_no");
				}
				
				pb.values(pagedRecords.length,pagedRecords.length)
			}
			
			
			protected function btn_editStatus_clickHandler(event:MouseEvent):void
			{
				// TODO Auto-generated method stub
				currentState = "editStatus";
				this.btn_save.enabled = this.canUpdate;
				this.densityType = "NA";

				this.tank_location.required = this.requiredFields["tank_location"];
				this.tank_gaugingmthd.required = this.requiredFields["tank_gaugingmthd"];
				this.tank_status.required = this.requiredFields["tank_status"];
				
				this.toggleValidationField( tank_density );
				//this.toggleValidationField( tank_prod_c_of_e );
				this.toggleValidationField( tank_15_density );
				this.toggleValidationField( tank_api );
				this.toggleValidationField( tank_liquid_kg );
				this.toggleValidationField( tank_prod_lvl );
				this.toggleValidationField( tank_ullage );
				this.toggleValidationField( tank_sulphur );
				this.toggleValidationField( tank_flashpoint );
				this.toggleValidationField( tank_hh_level );
				this.toggleValidationField( tank_h_level );
				this.toggleValidationField( tank_l_level );
				this.toggleValidationField( tank_ll_level );
				this.toggleValidationField( tank_uh_level );
				this.toggleValidationField( tank_ul_level );
				this.toggleValidationField( tank_temp );
				this.toggleValidationField( tank_amb_vol );
				this.toggleValidationField( tank_cor_vol );
				
				
				this.tank_identifier.required = false;
				this.tank_drv_type.required = false;
				this.tank_drv_aux.required = false;
				this.tank_channel.required = false;
				this.tank_instance.required = false;
				this.tank_poll_gap.required = false;
				this.tank_address.required = false;
				
				if ( this.dataGrid.selectedIndex>=0 )
				{
					//if ( this.dataGrid.selectedItem.tank_base_corr_mthd == 4 || this.dataGrid.selectedItem.tank_base_corr_mthd == 6 )
					if ( this.dataGrid.selectedItem.tank_base_corr_mthd == 4 )
					{
						this.tank_prod_c_of_e.enabled = true;
						this.tank_prod_c_of_e.editable = true;
					}
					else
					{
						if ( this.dataGrid.selectedItem.tank_base_class == 13 )
						{
							this.tank_prod_c_of_e.enabled = true;
							this.tank_prod_c_of_e.editable = true;
						}
						else
						{
							this.tank_prod_c_of_e.enabled = false;
							this.tank_prod_c_of_e.editable = false;
						}
					}
					
					if ( _formColumnSettingsString.length > 0 )
					{
						global.adjustFormFieldSettings( _formColumnSettingsString.substr(1), this );
					}
					
					if ( _formButtonSettingsString.length > 0 )
					{
						global.adjustFormButtonSettings( _formButtonSettingsString.substr(1), this );
					}
				}
			}
			
			protected function btn_editGauge_clickHandler(event:MouseEvent):void
			{
				// TODO Auto-generated method stub
				currentState = "editGauge";
				this.btn_save.enabled = this.canUpdate;
				
				this.tank_location.required = false;
				this.tank_density.required = false;
				this.tank_prod_c_of_e.required = false;
				this.tank_15_density.required = false;
				this.tank_api.required = false;
				this.tank_liquid_kg.required = false;
				this.tank_prod_lvl.required = false;
				this.tank_ullage.required = false;
				this.tank_sulphur.required = false;
				this.tank_flashpoint.required = false;
				this.tank_status.required = false;
				this.tank_hh_level.required = false;
				this.tank_h_level.required = false;
				this.tank_l_level.required = false;
				this.tank_ll_level.required = false;
				this.tank_uh_level.required = false;
				this.tank_ul_level.required = false;
				this.tank_temp.required = false;
				this.tank_amb_vol.required = false;
				this.tank_cor_vol.required = false;
				this.tank_gaugingmthd.required = false;
				
				this.toggleValidationField( tank_identifier );
				this.toggleValidationField( tank_drv_type );
				this.toggleValidationField( tank_drv_aux );
				this.toggleValidationField( tank_channel );
				this.toggleValidationField( tank_instance );
				this.toggleValidationField( tank_poll_gap );
				this.toggleValidationField( tank_address );
				
				if ( _formColumnSettingsString.length > 0 )
				{
					global.adjustFormFieldSettings( _formColumnSettingsString.substr(1), this );
				}
				
				if ( _formButtonSettingsString.length > 0 )
				{
					global.adjustFormButtonSettings( _formButtonSettingsString.substr(1), this );
				}
				
			}
			
			protected function height_changeHandler(event:TextOperationEvent):void
			{
				// TODO Auto-generated method stub
				this.btn_save.enabled = this.canUpdate;
				this.btn_recalcLevel.enabled = true;
				
				this.toggleCalcLevelButton();
			}
			
			protected function volume_changeHandler(event:TextOperationEvent):void
			{
				// TODO Auto-generated method stub
				this.btn_save.enabled = this.canUpdate;
				this.btn_recalcVolume.enabled = true;
				this.btn_recalcLevel.enabled = true;
				
				this.value_changeHandler( event );
			}
			
			protected function markVolumeSource():void
			{
				if ( this.volumeType == "NA" )
				{
					if ( StringUtil.trim( tank_amb_vol.text ).length != 0 && StringUtil.trim( tank_amb_vol.text ) != "0" )
					{
						this.volumeType = "LT";
						this.volumeAmount = Number(this.tank_amb_vol.text);
					}
					else if ( StringUtil.trim( tank_cor_vol.text ).length != 0 && StringUtil.trim( tank_cor_vol.text ) != "0" )
					{
						this.volumeType = "L15";
						this.volumeAmount = Number(this.tank_cor_vol.text);
					}
					else if ( StringUtil.trim( tank_liquid_kg.text ).length != 0 && StringUtil.trim( tank_liquid_kg.text ) != "0" )
					{
						this.volumeType = "KG";
						this.volumeAmount = Number(this.tank_liquid_kg.text);
					}
					else
					{
						//this.volumeType = "LT";
						this.volumeType = "NA";
						this.volumeAmount = Number(this.tank_amb_vol.text);
					}
					/*
					if ( StringUtil.trim( tank_amb_vol.text ).length != 0 && StringUtil.trim( tank_cor_vol.text ).length == 0 && StringUtil.trim( tank_liquid_kg.text ).length == 0 )
					{
						this.volumeType = "LT";
						this.volumeAmount = Number(this.tank_amb_vol.text);
					}
					else if ( StringUtil.trim( tank_amb_vol.text ).length == 0 && StringUtil.trim( tank_cor_vol.text ).length != 0 && StringUtil.trim( tank_liquid_kg.text ).length == 0 )
					{
						this.volumeType = "L15";
						this.volumeAmount = Number(this.tank_cor_vol.text);
					}
					else if ( StringUtil.trim( tank_amb_vol.text ).length == 0 && StringUtil.trim( tank_cor_vol.text ).length == 0 && StringUtil.trim( tank_liquid_kg.text ).length != 0 )
					{
						this.volumeType = "KG";
						this.volumeAmount = Number(this.tank_liquid_kg.text);
					}
					else
					{
						this.volumeType = "LT";
						this.volumeAmount = Number(this.tank_amb_vol.text);
					}
					*/
				}
				
				this.toggleCalcVolumeButton();
				this.toggleCalcLevelButton();
			}
			
			protected function value_changeHandler(event:TextOperationEvent):void
			{
				// TODO Auto-generated method stub
				var currentElement:DKI_ValidatorInput = event.currentTarget as DKI_ValidatorInput;
				
				this.volumeType = "NA";
				
				if( StringUtil.trim( currentElement.text ).length > 0 )
				{
					currentElement.required = true;
					
					if ( currentElement.id == this.tank_amb_vol.id )
					{
						this.volumeType = "LT";
						this.volumeAmount = Number(this.tank_amb_vol.text);
						//this.tank_cor_vol.text = "0";
						//this.tank_liquid_kg.text = "0";
					}
					else if ( currentElement.id == this.tank_cor_vol.id )
					{
						this.volumeType = "L15";
						this.volumeAmount = Number(this.tank_cor_vol.text);
						//this.tank_amb_vol.text = "0";
						//this.tank_liquid_kg.text = "0";
					}
					else if ( currentElement.id == this.tank_liquid_kg.id )
					{
						this.volumeType = "KG";
						this.volumeAmount = Number(this.tank_liquid_kg.text);
						//this.tank_amb_vol.text = "0";
						//this.tank_cor_vol.text = "0";
					}
					else
					{
						this.markVolumeSource();
					}
					
				}
				else
				{
					if ( this.requiredFields.hasOwnProperty( currentElement.id ) )
					{
						currentElement.required = this.requiredFields[ currentElement.id ];
					}
					else
					{
						currentElement.required = false;
					}
				}
				
				this.markVolumeSource();
			}
			
			
			
			protected function density_changeHandler(event:TextOperationEvent):void
			{
				// TODO Auto-generated method stub
				this.btn_save.enabled = this.canUpdate;
				this.btn_recalcDensity.enabled = true;
				
				this.valueDensity_changeHandler( event );
			}
			
			protected function markDensitySource():void
			{
				if ( this.densityType == "NA" )
				{
					if ( StringUtil.trim( tank_15_density.text ).length != 0 && StringUtil.trim( tank_15_density.text ) != "0" )
					{
						this.densityType = "D15C";
						this.densityAmount = Number(this.tank_15_density.text);
					}
					else if ( StringUtil.trim( tank_density.text ).length != 0 && StringUtil.trim( tank_density.text ) != "0" )
					{
						this.densityType = "D30C";
						this.densityAmount = Number(this.tank_density.text);
					}
					else if ( StringUtil.trim( tank_api.text ).length != 0 && StringUtil.trim( tank_api.text ) != "0" )
					{
						this.densityType = "A60F";
						this.densityAmount = Number(this.tank_api.text);
					}
					else
					{
						//this.volumeType = "LT";
						this.densityType = "NA";
						this.densityAmount = Number(this.tank_15_density.text);
					}
				}
				
				this.toggleCalcDensityButton();
				this.toggleCalcVolumeButton();
				this.toggleCalcLevelButton();
			}
			
			protected function valueDensity_changeHandler(event:TextOperationEvent):void
			{
				// TODO Auto-generated method stub
				var currentElement:DKI_ValidatorInput = event.currentTarget as DKI_ValidatorInput;
				
				this.densityType = "NA";
				
				if( StringUtil.trim( currentElement.text ).length > 0 )
				{
					currentElement.required = true;
					
					if ( currentElement.id == this.tank_15_density.id )
					{
						this.densityType = "D15C";
						this.densityAmount = Number(this.tank_15_density.text);
					}
					else if ( currentElement.id == this.tank_density.id )
					{
						this.densityType = "D30C";
						this.densityAmount = Number(this.tank_density.text);
					}
					else if ( currentElement.id == this.tank_api.id )
					{
						this.densityType = "A60F";
						this.densityAmount = Number(this.tank_api.text);
					}
					else
					{
						this.markDensitySource();
					}
					
				}
				else
				{
					if ( this.requiredFields.hasOwnProperty( currentElement.id ) )
					{
						currentElement.required = this.requiredFields[ currentElement.id ];
					}
					else
					{
						currentElement.required = false;
					}
				}
				
				this.markDensitySource();
			}
			
			
			
			
			
			
			protected function toggleValidationField(currentElement:DKI_ValidatorInput):void
			{
				if( StringUtil.trim( currentElement.text ).length > 0 )
				{
					currentElement.required = true;
				}
				else
				{
					if ( this.requiredFields.hasOwnProperty( currentElement.id ) )
					{
						currentElement.required = this.requiredFields[ currentElement.id ];
					}
					else
					{
						currentElement.required = false;
					}
				}
			}
			
			public function goToTankStraps():void
			{
				
				this.tankStrapPopup.popupTitle = resourceManager.getString('default','m_tankstraps');
				this.tankStrapPopup.setSecurity( this.readOnly, this.canUpdate, this.canCreate, this.canDelete, this.hasPassword );
				
				this.tankStrapPopup.parentWidth = this.width;
				this.tankStrapPopup.parentHeight = this.height;
				
				trace ( "*******************Pop up a screen to manage tank straps!");
				tankStrapPopup.openDialog();
				
				var params:Object = new Object();
				
				params["strap_sitecode"] = dataGrid.selectedItem.tank_terminal;
				params["strap_tankcode"] = dataGrid.selectedItem.tank_code;
				params["strap_height_start"] = 0;
				params["strap_height_end"] = 1000;

				
				tankStrapPopup.setFilters( params ); 
			}
			
			protected function toggleCalcDensityButton():void
			{
				if ( this.densityType != "NA" && (StringUtil.trim( tank_15_density.text ).length != 0 || StringUtil.trim( tank_density.text ).length != 0 || StringUtil.trim( tank_api.text ).length != 0) )
				{
					this.btn_recalcDensity.enabled = true;
				}
				else
				{
					this.btn_recalcDensity.enabled = false;
				}
			}
			
			protected function toggleCalcVolumeButton():void
			{
				var dens_txt:String = "";
				if ( this.fld__tank_15_density.visible == true )
				{
					dens_txt = tank_15_density.text;
				}
				else
				{
					dens_txt = tank_density.text;
				}
				
				//if ( this.volumeType != "NA" && StringUtil.trim( tank_15_density.text ).length != 0 && StringUtil.trim( tank_temp.text ).length != 0 )
				if ( this.volumeType != "NA" && StringUtil.trim( dens_txt ).length != 0 && StringUtil.trim( tank_temp.text ).length != 0 )
				{
					this.btn_recalcVolume.enabled = true;
				}
				else
				{
					this.btn_recalcVolume.enabled = false;
				}
			}
			
			protected function toggleCalcLevelButton():void
			{
				var dens_txt:String = "";
				if ( this.fld__tank_15_density.visible == true )
				{
					dens_txt = tank_15_density.text;
				}
				else
				{
					dens_txt = tank_density.text;
				}
				
				//if ( this.volumeType != "NA" && StringUtil.trim( dens_txt ).length != 0 && StringUtil.trim( tank_temp.text ).length != 0 && StringUtil.trim( this.tank_prod_lvl.text ).length != 0 )
				if ( StringUtil.trim( dens_txt ).length != 0 && StringUtil.trim( tank_temp.text ).length != 0 && StringUtil.trim( this.tank_prod_lvl.text ).length != 0 )
				{
					this.btn_recalcLevel.enabled = true;
				}
				else
				{
					this.btn_recalcLevel.enabled = false;
				}
			}
			
			protected function tank_ullage_changeHandler(event:TextOperationEvent):void
			{
				// TODO Auto-generated method stub
				this.toggleValidationField( this.tank_ullage );
			}
			
			protected function tank_sulphur_changeHandler(event:TextOperationEvent):void
			{
				// TODO Auto-generated method stub
				this.toggleValidationField( this.tank_sulphur );
			}
			
			protected function tank_flashpoint_changeHandler(event:TextOperationEvent):void
			{
				// TODO Auto-generated method stub
				this.toggleValidationField( this.tank_flashpoint );
			}
			
			protected function tank_hh_level_changeHandler(event:TextOperationEvent):void
			{
				this.toggleValidationField( this.tank_hh_level );
				if ( StringUtil.trim(this.tank_hh_level.text).length>0 )
				{
					if ( Number(this.tank_prod_lvl.text) >= Number(this.tank_hh_level.text) )
					{
						this.tank_hh_state.source = getTankAlarmStateImage(1);
					}
					else
					{
						this.tank_hh_state.source = getTankAlarmStateImage(0);
					}
				}
				else
				{
					this.tank_hh_state.source = getTankAlarmStateImage(-1);
				}
			}
			
			protected function tank_h_level_changeHandler(event:TextOperationEvent):void
			{
				this.toggleValidationField( this.tank_h_level );
				if ( StringUtil.trim(this.tank_h_level.text).length>0 )
				{
					if ( Number(this.tank_prod_lvl.text) >= Number(this.tank_h_level.text) )
					{
						this.tank_h_state.source = getTankAlarmStateImage(1);
					}
					else
					{
						this.tank_h_state.source = getTankAlarmStateImage(0);
					}
				}
				else
				{
					this.tank_h_state.source = getTankAlarmStateImage(-1);
				}
			}
			
			protected function tank_l_level_changeHandler(event:TextOperationEvent):void
			{
				this.toggleValidationField( this.tank_l_level );
				if ( StringUtil.trim(this.tank_l_level.text).length>0 )
				{
					if ( Number(this.tank_prod_lvl.text) <= Number(this.tank_l_level.text) )
					{
						this.tank_l_state.source = getTankAlarmStateImage(1);
					}
					else
					{
						this.tank_l_state.source = getTankAlarmStateImage(0);
					}
				}
				else
				{
					this.tank_l_state.source = getTankAlarmStateImage(-1);
				}
			}
			
			protected function tank_ll_level_changeHandler(event:TextOperationEvent):void
			{
				this.toggleValidationField( this.tank_ll_level );
				if ( StringUtil.trim(this.tank_ll_level.text).length>0 )
				{
					if ( Number(this.tank_prod_lvl.text) <= Number(this.tank_ll_level.text) )
					{
						this.tank_ll_state.source = getTankAlarmStateImage(1);
					}
					else
					{
						this.tank_ll_state.source = getTankAlarmStateImage(0);
					}
				}
				else
				{
					this.tank_ll_state.source = getTankAlarmStateImage(-1);
				}
			}
			
			protected function tank_uh_level_changeHandler(event:TextOperationEvent):void
			{
				this.toggleValidationField( this.tank_uh_level );
				if ( StringUtil.trim(this.tank_uh_level.text).length>0 )
				{
					if ( Number(this.tank_prod_lvl.text) >= Number(this.tank_uh_level.text) )
					{
						this.tank_uh_state.source = getTankAlarmStateImage(1);
					}
					else
					{
						this.tank_uh_state.source = getTankAlarmStateImage(0);
					}
				}
				else
				{
					this.tank_uh_state.source = getTankAlarmStateImage(-1);
				}
			}
			
			protected function tank_ul_level_changeHandler(event:TextOperationEvent):void
			{
				this.toggleValidationField( this.tank_ul_level );
				if ( StringUtil.trim(this.tank_ul_level.text).length>0 )
				{
					if ( Number(this.tank_prod_lvl.text) <= Number(this.tank_ul_level.text) )
					{
						this.tank_ul_state.source = getTankAlarmStateImage(1);
					}
					else
					{
						this.tank_ul_state.source = getTankAlarmStateImage(0);
					}
				}
				else
				{
					this.tank_ul_state.source = getTankAlarmStateImage(-1);
				}
			}
			
			protected function getTankAlarmStateImage(state:int):BitmapAsset
			{
				var src:BitmapAsset = blankObject;
				
				if ( state == 1 )
				{
					src = errorObject;
				}
				else if ( state == 0 )
				{
					src = normalObject;
				}
				else
				{
					src = blankObject;
				}
				
				return src;
			}
		]]>
	</fx:Script>
	<fx:Declarations>
		<s:DateTimeFormatter id="dateFormatter" locale="{LocaleID.DEFAULT}" dateStyle="short" timeStyle="none"/>
		<s:DateTimeFormatter id="dateConvert" dateTimePattern="yyyy-MM-dd"/>
		<s:DateTimeFormatter id="dateConvertLong" dateTimePattern="yyyy-MM-dd HH:mm:ss"/>
		<components:ValidationGroup id="vg" action="{save_clickHandler}" defaultButton="{btn_save}" isProtected="{hasPassword}"/>
	</fx:Declarations>
	<s:Panel id="panel" width="100%" height="100%"
			 skinClass="skins.WidgetPanelSkin"
			 skinClass.widget="skins.NullSkin">
		<s:layout>
			<s:VerticalLayout/>
		</s:layout>
		<s:VGroup width="100%" id="toolbar"  >
			<s:HGroup gap="5" paddingBottom="2" paddingTop="2" width="100%">
				<components:DKI_ComboBox id="fltr_terminal" width="180" height="100%" enabled="true"
										change="fltr_terminal_changeHandler(event)" cornerRadius="10"
										labelField="term_desc" prompt="{resourceManager.getString('default','TANK_TERMINAL')+resourceManager.getString('default','FILTER')}"
										dataProvider="{terminalList}"/>
				<components:DKI_ValidatorInput id="fltr_tank" validationType="search" minWidth="160" height="{labelHeight}" width="100%"
											   keyUp="fltr_tank_keyUpHandler(event)"  restrict="A-Za-z0-9 \-"
											   prompt="{resourceManager.getString('default','TANK_TANK')+resourceManager.getString('default','FILTER')}"/>
				<!--<components:DKI_ComboBox id="fltr_tanklist" width="180" height="100%"
											 change="fltr_baseclass_changeHandler(event)" cornerRadius="10"
											 labelField="tank_desc" prompt="{resourceManager.getString('default','TANK_BASE_CLASS')+resourceManager.getString('default','FILTER')}"
											 visible.widget="false" excludeFrom="widget" dataProvider="{tankList}"/>-->
				
				<components:DKI_DropDownList id="fltr_baseclass" width="180" height="100%"
											 change="fltr_baseclass_changeHandler(event)" cornerRadius="10"
											 labelField="bclass_desc" prompt="{resourceManager.getString('default','TANK_BASE_CLASS')+resourceManager.getString('default','FILTER')}"
											 visible.widget="false" excludeFrom="widget" dataProvider="{baseClassList}"/>
				<components:DKI_DropDownList id="fltr_baseprod" width="180" height="100%"
											 change="fltr_baseprod_changeHandler(event)" cornerRadius="10"
											 labelField="base_text" prompt="{resourceManager.getString('default','TANK_PRODUCT')+resourceManager.getString('default','FILTER')}"
											 visible.widget="false" excludeFrom="widget" dataProvider="{baseProductList}"/>
				
				<!--/s:HGroup>
				<s:HGroup gap="5" paddingBottom="2" paddingTop="2" width="100%"-->
				<s:Spacer width="100%"/>
				<components:DKI_Button id="filterBtn" height="24" noLabel="false" click="filterRecords(event)"
									   type="filteron"/>
				<components:DKI_Button id="resetBtn" height="24" noLabel="false" click="refreshRecords(event)"
									   type="filteroff"/>
				<components:DKI_Button id="btn_export" label="{resourceManager.getString('default','EXPORTDATA')}" type="report" click="exportCsvHandler(event)" includeIn="normal"/>
				<!--<components:DKI_Button id="btn_create" label="{resourceManager.getString('default','CREATE')}" height="24" click="createNewRecord(event)" includeIn="normal" enabled="{this.canCreate}" type="create"/>-->	
			</s:HGroup>
		</s:VGroup>
		
		
		<s:DataGrid id="dataGrid" width="100%" height="100%" requestedRowCount="4"
					selectionChange="dataGrid_selectionChangeHandler(event)"
					skinClass="skins.DKI_DataGrid_Skin"
					height.widget="100%">
			<s:columns>
				<s:ArrayList>
					<s:source>
						<s:GridColumn dataField="tank_active" headerText="{resourceManager.getString('default','TANK_ONLINE')}" width="60" visible="true" itemRenderer="renderers.GridCheckRender"></s:GridColumn>
						<s:GridColumn dataField="tank_code" headerText="{resourceManager.getString('default','TANK_CODE')}" width="80" visible="true"></s:GridColumn>
						<s:GridColumn dataField="tank_name" headerText="{resourceManager.getString('default','TANK_NAME')}" width="120" visible="true"></s:GridColumn>
						<s:GridColumn dataField="tank_terminal" headerText="{resourceManager.getString('default','TANK_SITECODE')}" visible="false"></s:GridColumn>
						<s:GridColumn dataField="tank_sitename" headerText="{resourceManager.getString('default','TANK_TERMINAL')}" width="120" visible="true"></s:GridColumn>
						<s:GridColumn dataField="tank_base" headerText="{resourceManager.getString('default','TANK_BASE')}" width="100" visible="true"></s:GridColumn>
						<s:GridColumn dataField="tank_base_name" headerText="{resourceManager.getString('default','TANK_BASE_NAME')}" width="160" visible="true"></s:GridColumn>
						<s:GridColumn dataField="tank_base_group" headerText="{resourceManager.getString('default','TANK_BASE_GROUP')}" visible="false"></s:GridColumn>
						<s:GridColumn dataField="tank_base_class" headerText="{resourceManager.getString('default','TANK_BASE_CLASS')}" visible="false"></s:GridColumn>
						<s:GridColumn dataField="tank_bclass_name" headerText="{resourceManager.getString('default','TANK_BCLASS_NAME')}" width="160" visible="true"></s:GridColumn>
						<s:GridColumn dataField="tank_base_tunit" headerText="{resourceManager.getString('default','TANK_BASE_TUNIT')}" visible="false"></s:GridColumn>
						<s:GridColumn dataField="tank_base_rpttemp" headerText="{resourceManager.getString('default','TANK_BASE_RPTTEMP')}" visible="false"></s:GridColumn>
						<s:GridColumn dataField="tank_bclass_dens_lo" headerText="{resourceManager.getString('default','TANK_BCLASS_DENS_LO')+' ['+resourceManager.getString('default','UNIT__DENSITY')+']'}" visible="false"></s:GridColumn>
						<s:GridColumn dataField="tank_bclass_dens_hi" headerText="{resourceManager.getString('default','TANK_BCLASS_DENS_HI')+' ['+resourceManager.getString('default','UNIT__DENSITY')+']'}" visible="false"></s:GridColumn>
						<s:GridColumn dataField="tank_bclass_vcf_alg" headerText="{resourceManager.getString('default','TANK_BCLASS_VCF_ALG')}" visible="false"></s:GridColumn>
						<s:GridColumn dataField="tank_bclass_temp_lo" headerText="{resourceManager.getString('default','TANK_BCLASS_TEMP_LO')}" visible="false"></s:GridColumn>
						<s:GridColumn dataField="tank_bclass_temp_hi" headerText="{resourceManager.getString('default','TANK_BCLASS_TEMP_HI')}" visible="false"></s:GridColumn>
						<s:GridColumn dataField="tank_drv_type" headerText="{resourceManager.getString('default','TANK_DRV_TYPE')}" visible="false"></s:GridColumn>
						<s:GridColumn dataField="tank_drv_aux" headerText="{resourceManager.getString('default','TANK_DRV_AUX')}" visible="false"></s:GridColumn>
						<s:GridColumn dataField="tank_identifier" headerText="{resourceManager.getString('default','TANK_IDENTIFIER')}" visible="false"></s:GridColumn>
						<s:GridColumn dataField="tank_location" headerText="{resourceManager.getString('default','TANK_LOCATION')}" width="100" visible="true"></s:GridColumn>
						<s:GridColumn dataField="tank_outflow_ope" headerText="{resourceManager.getString('default','TANK_OUTFLOW_OPE')}" visible="false" itemRenderer="renderers.GridCheckRender"></s:GridColumn>
						<s:GridColumn dataField="tank_inflow_open" headerText="{resourceManager.getString('default','TANK_INFLOW_OPEN')}" visible="false" itemRenderer="renderers.GridCheckRender"></s:GridColumn>
						<s:GridColumn dataField="tank_adhoc_ivrq" headerText="{resourceManager.getString('default','TANK_ADHOC_IVRQ')}" visible="false" itemRenderer="renderers.GridCheckRender"></s:GridColumn>
						<s:GridColumn dataField="tank_inv_needed" headerText="{resourceManager.getString('default','TANK_INV_NEEDED')}" visible="false" itemRenderer="renderers.GridCheckRender"></s:GridColumn>
						<s:GridColumn dataField="tank_dipping_on" headerText="{resourceManager.getString('default','TANK_DIPPING_ON')}" visible="false" itemRenderer="renderers.GridCheckRender"></s:GridColumn>
						<s:GridColumn dataField="tank_leakdtct_on" headerText="{resourceManager.getString('default','TANK_LEAKDTCT_ON')}" visible="false" itemRenderer="renderers.GridCheckRender"></s:GridColumn>
						<s:GridColumn dataField="tank_alarmed" headerText="{resourceManager.getString('default','TANK_ALARMED')}" visible="false" itemRenderer="renderers.GridCheckRender"></s:GridColumn>
						<s:GridColumn dataField="tank_poll_gap" headerText="{resourceManager.getString('default','TANK_POLL_GAP')}" visible="false"></s:GridColumn>
						<s:GridColumn dataField="tank_prod_lvl" width="120" headerText="{resourceManager.getString('default','TANK_PROD_LVL')+' ['+resourceManager.getString('default','UNIT__LENGTH_MM')+']'}" visible="true"></s:GridColumn>
						<s:GridColumn dataField="tank_address" headerText="{resourceManager.getString('default','TANK_ADDRESS')}" visible="false"></s:GridColumn>
						<s:GridColumn dataField="tank_rcpts" headerText="{resourceManager.getString('default','TANK_RCPTS')}" visible="false"></s:GridColumn>
						<s:GridColumn dataField="tank_trfs" headerText="{resourceManager.getString('default','TANK_TRFS')}" visible="false"></s:GridColumn>
						<s:GridColumn dataField="tank_no_sbt" headerText="{resourceManager.getString('default','TANK_NO_SBT')}" visible="false"></s:GridColumn>
						<s:GridColumn dataField="tank_versno" headerText="{resourceManager.getString('default','TANK_VERSNO')}" visible="false"></s:GridColumn>
						<s:GridColumn dataField="tank_pakscan_act" headerText="{resourceManager.getString('default','TANK_PAKSCAN_ACT')}" visible="false"></s:GridColumn>
						<s:GridColumn dataField="tank_alarm_state" headerText="{resourceManager.getString('default','TANK_ALARM_STATE')}" visible="false"></s:GridColumn>
						<s:GridColumn dataField="tank_lvl_alarm" headerText="{resourceManager.getString('default','TANK_LVL_ALARM')}" visible="false"></s:GridColumn>
						<s:GridColumn dataField="tank_lvlalarm_desc" headerText="{resourceManager.getString('default','TANK_LVLALARM_DESC')}" width="120" visible="true"></s:GridColumn>
						<s:GridColumn dataField="tank_gaugingmthd" headerText="{resourceManager.getString('default','TANK_GAUGINGMTHD')}" visible="false"></s:GridColumn>
						<s:GridColumn dataField="tank_gaugingmthd_desc" headerText="{resourceManager.getString('default','TANK_GAUGINGMTHD_DESC')}" width="120" visible="true"></s:GridColumn>
						<s:GridColumn dataField="tank_instance" headerText="{resourceManager.getString('default','TANK_INSTANCE')}" visible="false"></s:GridColumn>
						<s:GridColumn dataField="tank_channel" headerText="{resourceManager.getString('default','TANK_CHANNEL')}" visible="false"></s:GridColumn>
						<s:GridColumn dataField="tank_sbt_ty" headerText="{resourceManager.getString('default','TANK_SBT_TY')}" visible="false"></s:GridColumn>
						<s:GridColumn dataField="tank_eth_content" headerText="{resourceManager.getString('default','TANK_ETH_CONTENT')}" visible="false"></s:GridColumn>
						<s:GridColumn dataField="tank_ltr_close" headerText="{resourceManager.getString('default','TANK_LTR_CLOSE')}" visible="false"></s:GridColumn>
						<s:GridColumn dataField="tank_kg_close" headerText="{resourceManager.getString('default','TANK_KG_CLOSE')}" visible="false"></s:GridColumn>
						<s:GridColumn dataField="tank_close_dens" headerText="{resourceManager.getString('default','TANK_CLOSE_DENS')}" visible="false"></s:GridColumn>
						<s:GridColumn dataField="tank_rptvcfclose" headerText="{resourceManager.getString('default','TANK_RPTVCFCLOSE')}" visible="false"></s:GridColumn>
						<s:GridColumn dataField="tank_inflow_rate" headerText="{resourceManager.getString('default','TANK_INFLOW_RATE')}" visible="false"></s:GridColumn>
						<s:GridColumn dataField="tank_spare_fld1" headerText="{resourceManager.getString('default','TANK_SPARE_FLD1')}" visible="false"></s:GridColumn>
						<s:GridColumn dataField="tank_spare_fld2" headerText="{resourceManager.getString('default','TANK_SPARE_FLD2')}" visible="false"></s:GridColumn>
						<s:GridColumn dataField="tank_rcpt_vol" headerText="{resourceManager.getString('default','TANK_RCPT_VOL')}" visible="false"></s:GridColumn>
						<s:GridColumn dataField="tank_trf_vol" headerText="{resourceManager.getString('default','TANK_TRF_VOL')}" visible="false"></s:GridColumn>
						<s:GridColumn dataField="tank_rcpt_kg" headerText="{resourceManager.getString('default','TANK_RCPT_KG')}" visible="false"></s:GridColumn>
						<s:GridColumn dataField="tank_trf_kg" headerText="{resourceManager.getString('default','TANK_TRF_KG')}" visible="false"></s:GridColumn>
						<s:GridColumn dataField="tank_pump_vol" headerText="{resourceManager.getString('default','TANK_PUMP_VOL')}" visible="false"></s:GridColumn>
						<s:GridColumn dataField="tank_res" headerText="{resourceManager.getString('default','TANK_RES')}" visible="false"></s:GridColumn>
						<s:GridColumn dataField="tank_amb_vol" width="120" headerText="{resourceManager.getString('default','TANK_AMB_VOL')+' ['+resourceManager.getString('default','UNIT__VOLUME_LITRE')+']'}" visible="true" labelFunction="roundNumberFunction"></s:GridColumn>
						<s:GridColumn dataField="tank_cor_vol" width="120" headerText="{resourceManager.getString('default','TANK_COR_VOL')+' ['+resourceManager.getString('default','UNIT__VOLUME_LITRE')+']'}" visible="true" labelFunction="roundNumberFunction"></s:GridColumn>
						<s:GridColumn dataField="tank_vapour_kg" headerText="{resourceManager.getString('default','TANK_VAPOUR_KG')}" visible="false"></s:GridColumn>
						<s:GridColumn dataField="tank_liquid_kg" width="120" headerText="{resourceManager.getString('default','TANK_LIQUID_KG')+' ['+resourceManager.getString('default','UNIT__MASS_DEFAULT')+']'}" visible="true" labelFunction="roundNumberFunction"></s:GridColumn>
						<s:GridColumn dataField="tank_water" headerText="{resourceManager.getString('default','TANK_WATER')}" visible="false"></s:GridColumn>
						<s:GridColumn dataField="tank_water_lvl" headerText="{resourceManager.getString('default','TANK_WATER_LVL')}" visible="false"></s:GridColumn>
						<s:GridColumn dataField="tank_ullage" width="100" headerText="{resourceManager.getString('default','TANK_ULLAGE')}" visible="false"></s:GridColumn>
						<s:GridColumn dataField="tank_prod_c_of_e" headerText="{resourceManager.getString('default','TANK_PROD_C_OF_E')}" visible="false"></s:GridColumn>
						<s:GridColumn dataField="tank_60_86_vcf" headerText="{resourceManager.getString('default','TANK_60_86_VCF')}" visible="false"></s:GridColumn>
						<s:GridColumn dataField="tank_api" width="120" headerText="{resourceManager.getString('default','TANK_API')}" visible="true" labelFunction="roundNumberFunction"></s:GridColumn>
						<s:GridColumn dataField="tank_density" width="130" headerText="{resourceManager.getString('default','TANK_DENSITY')+' ['+resourceManager.getString('default','UNIT__DENSITY')+']'}" visible="true" labelFunction="roundNumberFunction"></s:GridColumn>
						<s:GridColumn dataField="tank_15_density" width="120" headerText="{resourceManager.getString('default','TANK_15_DENSITY')+' ['+resourceManager.getString('default','UNIT__DENSITY')+']'+'@15ºC/59ºF'}" visible="true" labelFunction="roundNumberFunction"></s:GridColumn>
						<s:GridColumn dataField="tank_temp" width="120" headerText="{resourceManager.getString('default','TANK_TEMP')}" visible="true" labelFunction="temperatureValueFunction"></s:GridColumn>
						<s:GridColumn dataField="tank_rptvcf" headerText="{resourceManager.getString('default','TANK_RPTVCF')}" visible="false"></s:GridColumn>
						<s:GridColumn dataField="tank_amb_density" headerText="{resourceManager.getString('default','TANK_AMB_DENSITY')}" visible="false"></s:GridColumn>
						<s:GridColumn dataField="tank_tol_vol" headerText="{resourceManager.getString('default','TANK_TOL_VOL')}" visible="false"></s:GridColumn>
						<s:GridColumn dataField="tank_tol_percent" headerText="{resourceManager.getString('default','TANK_TOL_PERCENT')}" visible="false"></s:GridColumn>
						<s:GridColumn dataField="tank_dtol_volume" headerText="{resourceManager.getString('default','TANK_DTOL_VOLUME')}" visible="false"></s:GridColumn>
						<s:GridColumn dataField="tank_dtol_percent" headerText="{resourceManager.getString('default','TANK_DTOL_PERCENT')}" visible="false"></s:GridColumn>
						<s:GridColumn dataField="tank_mtol_volume" headerText="{resourceManager.getString('default','TANK_MTOL_VOLUME')}" visible="false"></s:GridColumn>
						<s:GridColumn dataField="tank_mtol_percent" headerText="{resourceManager.getString('default','TANK_MTOL_PERCENT')}" visible="false"></s:GridColumn>
						<s:GridColumn dataField="tank_date" headerText="{resourceManager.getString('default','TANK_DATE')}" width="130" visible="false" itemRenderer="renderers.DateRenderer"></s:GridColumn>
						<s:GridColumn dataField="tank_group" headerText="{resourceManager.getString('default','TANK_GROUP')}" width="100" visible="true"></s:GridColumn>
						<s:GridColumn dataField="tank_base_ref_temp" headerText="{resourceManager.getString('default','BASE_REF_TEMP')}" visible="false"></s:GridColumn>
						<s:GridColumn dataField="tank_base_ref_tunt" headerText="{resourceManager.getString('default','BASE_REF_TUNT')}" visible="false"></s:GridColumn>
						<s:GridColumn dataField="tank_base_corr_mthd" headerText="{resourceManager.getString('default','BASE_CORR_MTHD')}" visible="false"></s:GridColumn>
						<s:GridColumn dataField="tank_base_ref_temp_spec" headerText="{resourceManager.getString('default','BASE_REF_TEMP_SPEC')}" visible="false"></s:GridColumn>
						<s:GridColumn dataField="tank_base_limit_preset_ht" headerText="{resourceManager.getString('default','BASE_LIMIT_PRESET_HT')}" visible="false"></s:GridColumn>
						<s:GridColumn dataField="tank_atg_status" headerText="{resourceManager.getString('default','TANK_ATG_STATUS')}" width="80" visible="true" itemRenderer="renderers.GridStatusRender"></s:GridColumn>
						<s:GridColumn dataField="tank_atg_manchg" headerText="{resourceManager.getString('default','TANK_ATG_MANCHG')}" width="130" visible="false" itemRenderer="renderers.DateRenderer"></s:GridColumn>
						<s:GridColumn dataField="tank_sulphur" width="100" headerText="{resourceManager.getString('default','TANK_SULPHUR')}" visible="false"></s:GridColumn>
						<s:GridColumn dataField="tank_flashpoint" width="120" headerText="{resourceManager.getString('default','TANK_FLASHPOINT')}" visible="false" labelFunction="temperatureValueFunction"></s:GridColumn>
						<s:GridColumn dataField="tank_status" headerText="{resourceManager.getString('default','TANK_STATUS')}" visible="false"></s:GridColumn>
						<s:GridColumn dataField="tank_status_name" headerText="{resourceManager.getString('default','TANK_STATUS_NAME')}" width="120" visible="true"></s:GridColumn>
						<s:GridColumn dataField="tank_hh_level" width="120" headerText="{resourceManager.getString('default','TANK_HH_LEVEL')+' ['+resourceManager.getString('default','UNIT__LENGTH_MM')+']'}" visible="true"></s:GridColumn>
						<s:GridColumn dataField="tank_h_level" width="120" headerText="{resourceManager.getString('default','TANK_H_LEVEL')+' ['+resourceManager.getString('default','UNIT__LENGTH_MM')+']'}" visible="true"></s:GridColumn>
						<s:GridColumn dataField="tank_l_level" width="120" headerText="{resourceManager.getString('default','TANK_L_LEVEL')+' ['+resourceManager.getString('default','UNIT__LENGTH_MM')+']'}" visible="true"></s:GridColumn>
						<s:GridColumn dataField="tank_ll_level" width="120" headerText="{resourceManager.getString('default','TANK_LL_LEVEL')+' ['+resourceManager.getString('default','UNIT__LENGTH_MM')+']'}" visible="true"></s:GridColumn>
						<s:GridColumn dataField="tank_uh_level" width="120" headerText="{resourceManager.getString('default','TANK_UH_LEVEL')+' ['+resourceManager.getString('default','UNIT__LENGTH_MM')+']'}" visible="true"></s:GridColumn>
						<s:GridColumn dataField="tank_ul_level" width="120" headerText="{resourceManager.getString('default','TANK_UL_LEVEL')+' ['+resourceManager.getString('default','UNIT__LENGTH_MM')+']'}" visible="true"></s:GridColumn>
						<s:GridColumn dataField="tank_hh_state" headerText="{resourceManager.getString('default','TANK_HH_STATE')}" width="80" visible="true" itemRenderer="renderers.GridAlarmRender"></s:GridColumn>
						<s:GridColumn dataField="tank_h_state" headerText="{resourceManager.getString('default','TANK_H_STATE')}" width="80" visible="true" itemRenderer="renderers.GridAlarmRender"></s:GridColumn>
						<s:GridColumn dataField="tank_l_state" headerText="{resourceManager.getString('default','TANK_L_STATE')}" width="80" visible="true" itemRenderer="renderers.GridAlarmRender"></s:GridColumn>
						<s:GridColumn dataField="tank_ll_state" headerText="{resourceManager.getString('default','TANK_LL_STATE')}" width="80" visible="true" itemRenderer="renderers.GridAlarmRender"></s:GridColumn>
						<s:GridColumn dataField="tank_uh_state" headerText="{resourceManager.getString('default','TANK_UH_STATE')}" width="80" visible="true" itemRenderer="renderers.GridAlarmRender"></s:GridColumn>
						<s:GridColumn dataField="tank_ul_state" headerText="{resourceManager.getString('default','TANK_UL_STATE')}" width="80" visible="true" itemRenderer="renderers.GridAlarmRender"></s:GridColumn>
					</s:source>
				</s:ArrayList>
			</s:columns>
			<s:dataProvider>
				<s:AsyncListView id="pgList" list="{pagedRecords}"/>
			</s:dataProvider>
		</s:DataGrid>
		<s:HGroup width="100%">
			<components:Downloader id="pb" width="100%" height="18"/>
			<!--mx:ProgressBar id="pb" width="100%" height="22" visible="false" includeInLayout="false"  mode="manual" source="{this.pgList}" label="{this.currentLength} records shown from {this.currentLength} loaded out of {this.totalLength} found." labelPlacement="center"/-->
			<s:Button id="killBtn" width="18" height="18" label="" cornerRadius="12" visible="false" includeInLayout="false"
					  click="killBtn_clickHandler(event)"/>
			<s:Button id="resumeBtn" width="18" height="18" label="" cornerRadius="12" visible="false" includeInLayout="false"
					  click="resumeBtn_clickHandler(event)"/>
		</s:HGroup>
	</s:Panel>
	
	<s:Panel id="details" includeIn="detail,editStatus,editGauge" width="100%" height="{panelHeight}"
			 itemCreationPolicy="immediate" skinClass="skins.WidgetPanelSkin">
		<s:layout>
			<s:VerticalLayout/>
			<!--s:TileLayout/-->
		</s:layout>
		
		<s:Spacer height="5"/>

		<s:Scroller width="100%" height="100%">

		<s:VGroup id="detailsGrp" width="100%" height="{panelHeight}">
			
			<s:BorderContainer id="tankMain" includeIn="detail,editStatus,editGauge" borderColor="0x000000" backgroundAlpha="0" cornerRadius="8" width="100%" height="40">
				<s:VGroup width="100%" paddingLeft="10" paddingTop="6" gap="{groupGap}">
					
					<!--s:Spacer height="{containerSpaceHeight}" /-->
					
					<s:HGroup width="100%">
						<s:HGroup id="fld__tank_terminal">
							<s:Label width="{labelWidth}" height="{labelHeight}" text="{resourceManager.getString('default','TANK_TERMINAL')}" verticalAlign="middle"/>
							<s:Label id="tank_terminal" text="{dataGrid.selectedItem.tank_terminal + ' - ' + dataGrid.selectedItem.tank_sitename}" 
									 width="{fieldWidth}" height="{labelHeight}" backgroundColor="{labelBackColor}" backgroundAlpha="{labelBackAlpha}" verticalAlign="middle"/>
							<s:Spacer width="{spaceWidth}" />
						</s:HGroup>
						<s:HGroup id="fld__tank_code">
							<s:Label width="{labelWidth}" height="{labelHeight}" text="{resourceManager.getString('default','TANK_TANK')}" verticalAlign="middle"/>
							<s:Label id="tank_code" text="{dataGrid.selectedItem.tank_code + ' - ' + dataGrid.selectedItem.tank_name}" 
									 width="{fieldWidth}" height="{labelHeight}" backgroundColor="{labelBackColor}" backgroundAlpha="{labelBackAlpha}" verticalAlign="middle"/>
							<s:Spacer width="{spaceWidth}" />
						</s:HGroup>
						<s:HGroup id="fld__tank_base">
							<s:Label width="{labelWidth}" height="{labelHeight}" text="{resourceManager.getString('default','TANK_BASE')}" verticalAlign="middle"/>
							<s:Label id="tank_base" text="{dataGrid.selectedItem.tank_base}" 
									 width="{fieldWidth}" height="{labelHeight}" backgroundColor="{labelBackColor}" backgroundAlpha="{labelBackAlpha}" verticalAlign="middle"/>
							<s:Spacer width="{spaceWidth}" />
						</s:HGroup>
						<s:HGroup id="fld__tank_base_name">
							<s:Label width="{labelWidth}" height="{labelHeight}" text="{resourceManager.getString('default','TANK_BASE_NAME')}" verticalAlign="middle"/>
							<s:Label id="tank_base_name" text="{dataGrid.selectedItem.tank_base_name}" 
									 width="{fieldWidth}" height="{labelHeight}" backgroundColor="{labelBackColor}" backgroundAlpha="{labelBackAlpha}" verticalAlign="middle"/>
						</s:HGroup>
					</s:HGroup>
					
					<!--s:Spacer height="{containerSpaceHeight}" /-->
					
				</s:VGroup>
			</s:BorderContainer>
			
			<s:Spacer height="10"/>
			
			<s:BorderContainer id="tankArea" includeIn="detail,editStatus" borderColor="0x000000" backgroundAlpha="0" cornerRadius="8" width="100%" height="40">
				<s:VGroup width="100%" paddingLeft="10" paddingTop="6" gap="{groupGap}">
					
					<!--s:Spacer height="{containerSpaceHeight}" /-->
					
					<s:HGroup>
						<s:HGroup id="fld__tank_location">
							<s:Label width="{labelWidth}" height="{labelHeight}" text="{resourceManager.getString('default','TANK_LOCATION')}" verticalAlign="middle"/>
							<components:DKI_ValidatorComboBox id="tank_location" 
															  dataProvider="{areaList}" 
															  labelField="area_name" 
															  selectedItem="{dataGrid.selectedItem.tank_location}" enabled="true" enabled.detail="false"
															  width="{fieldWidth}" height="{fieldHeight}" 
															  prompt="{resourceManager.getString('default','SELECT')+resourceManager.getString('default','TANK_LOCATION')}"
															  required="false" validationGroup="{vg}" automationName="{resourceManager.getString('default','TANK_LOCATION')}" 
															  />
							<s:Spacer width="{spaceWidth}" />
							<!--<s:HGroup>
								<s:Label width="{fieldWidth}" height="{labelHeight}" text="" verticalAlign="middle"/>
								<s:Label width="{labelWidth}" height="{labelHeight}" text="" verticalAlign="middle"/>
								<s:Spacer width="{spaceWidth}" />
							</s:HGroup>-->
						</s:HGroup>
						<s:HGroup id="fld__tank_ullage">
							<s:Label width="{labelWidth}" height="{labelHeight}" text="{resourceManager.getString('default','TANK_ULLAGE')}" verticalAlign="middle"/>
							<components:DKI_ValidatorInput id="tank_ullage" 
														   width="{fieldWidth}" height="{fieldHeight}" 
														   text="{tools.roundString(dataGrid.selectedItem.tank_ullage, this.digitsVOL)}" editable="true" enabled="true" editable.detail="false" enabled.detail="false"
														   change="tank_ullage_changeHandler(event)"
														   required="false" validationType="numeric_non_negative" validationGroup="{vg}" automationName="{resourceManager.getString('default','TANK_ULLAGE')}" 
														   />
							<!--<s:Label width="{labelWidthPostfix}" height="{labelHeight}" text="{resourceManager.getString('default','UNIT__VOLUME_DEFAULT')}" verticalAlign="middle"/>-->
							<s:Spacer width="{spaceWidth}" />
						</s:HGroup>
						<s:HGroup id="fld__tank_std_temp">
							<s:Label width="{labelWidth}" height="{labelHeight}" text="{resourceManager.getString('default','TANK_REF_TEMP')}" verticalAlign="middle"/>
							<s:Label id="tank_std_temp" text="{this.refTempTextC}" 
									 width="{fieldWidth}" height="{labelHeight}" backgroundColor="{labelBackColor}" backgroundAlpha="{labelBackAlpha}" verticalAlign="middle"/>
							<s:Spacer width="{spaceWidth}" />
							<s:HGroup>
								<s:Label width="{fieldWidth}" height="{labelHeight}" text="{this.refTempTextF}" verticalAlign="middle"/>
								<s:Label width="{labelWidth}" height="{labelHeight}" text="" verticalAlign="middle"/>
							</s:HGroup>
						</s:HGroup>
					</s:HGroup>
					
					<!--s:Spacer height="{containerSpaceHeight}" /-->
					
					<s:HGroup id="fld__tank_sulphur__tank_flashpoint">
						
						<s:HGroup id="fld__tank_status">
							<s:Label width="{labelWidth}" height="{labelHeight}" text="{resourceManager.getString('default','TANK_STATUS')}" verticalAlign="middle"/>
							<components:DKI_ValidatorComboBox id="tank_status" 
															  dataProvider="{tankStatusTypeList}" 
															  labelField="tank_status_name" 
															  selectedItem="{dataGrid.selectedItem.tank_status_name}" enabled="true" enabled.detail="false"
															  width="{fieldWidth}" height="{fieldHeight}" 
															  prompt="{resourceManager.getString('default','SELECT')+resourceManager.getString('default','TANK_STATUS')}"
															  required="false" validationGroup="{vg}" automationName="{resourceManager.getString('default','TANK_STATUS')}" 
															  />
							<s:Spacer width="{spaceWidth}" />
						</s:HGroup>
						<s:HGroup id="fld__tank_sulphur">
							<s:Label width="{labelWidth}" height="{labelHeight}" text="{resourceManager.getString('default','TANK_SULPHUR')}" verticalAlign="middle"/>
							<components:DKI_ValidatorInput id="tank_sulphur" 
														   width="{fieldWidth}" height="{fieldHeight}" 
														   text="{dataGrid.selectedItem.tank_sulphur}" editable="true" enabled="true" editable.detail="false" enabled.detail="false"
														   change="tank_sulphur_changeHandler(event)"
														   required="false" validationType="numeric_non_negative" validationGroup="{vg}" automationName="{resourceManager.getString('default','TANK_SULPHUR')}" 
														   />
							<s:Spacer width="{spaceWidth}" />
						</s:HGroup>
						
						<s:HGroup id="fld__tank_flashpoint">
							<s:Label width="{labelWidth}" height="{labelHeight}" text="{resourceManager.getString('default','TANK_FLASHPOINT')}" verticalAlign="middle"/>
							<components:DKI_ValidatorInput id="tank_flashpoint" 
														   width="{fieldWidth}" height="{fieldHeight}" 
														   text="{tools.roundString(dataGrid.selectedItem.tank_flashpoint,this.digitsTEMP)}" editable="true" enabled="true" editable.detail="false" enabled.detail="false"
														   change="tank_flashpoint_changeHandler(event)"
														   required="false" validationType="numeric" validationGroup="{vg}" automationName="{resourceManager.getString('default','TANK_FLASHPOINT')}" 
														   />
							<s:Label id="tank_flashpoint_label" width="{fieldWidth}" height="{labelHeight}" 
									 text="{ resourceManager.getString('default','UNIT__TEMP_C') + '   '
									 + tools.roundString( this.mngr.Temp_C2F(this.tank_flashpoint.text), this.digitsTEMP ) 
									 + resourceManager.getString('default','UNIT__TEMP_F') }" 
									 verticalAlign="middle"/>
							
						</s:HGroup>
						
					</s:HGroup>
					
					<s:HGroup id="fld__tank_levels_states">
						
						<s:HGroup id="fld__tank_hh_level">
							<s:Label width="{fieldWidth}" height="{labelHeight}" text="{resourceManager.getString('default','TANK_LEVELS_STATES')}[{resourceManager.getString('default','UNIT__LENGTH_MM')}]" verticalAlign="middle"/>
							<s:Label width="100%" height="{labelHeight}" text="HH:" verticalAlign="middle"/>
							<components:DKI_ValidatorInput id="tank_hh_level" 
														   width="{fieldWidth/2*1.2}" height="{fieldHeight}" 
														   text="{tools.roundString(dataGrid.selectedItem.tank_hh_level, this.digitsLVL)}" 
														   editable="true" enabled="true" editable.detail="false" enabled.detail="false" 
														   change="tank_hh_level_changeHandler(event)" 
														   prompt="{resourceManager.getString('default','TANK_HH_LEVEL')}"
														   toolTip="{resourceManager.getString('default','TANK_HH_LEVEL')}"
														   required="false" validationType="numeric_non_negative" validationGroup="{vg}" automationName="{resourceManager.getString('default','TANK_HH_LEVEL')}" 
														   />
							<s:Image  id="tank_hh_state" source="{this.getTankAlarmStateImage(dataGrid.selectedItem.tank_hh_state)}" verticalCenter="0" horizontalCenter="0" width="20" height="20"/>
							<s:Spacer width="{spaceWidth}" />
						</s:HGroup>
						
						<s:HGroup id="fld__tank_h_level">
							<s:Label width="100%" height="{labelHeight}" text="H:" verticalAlign="middle"/>
							<components:DKI_ValidatorInput id="tank_h_level" 
														   width="{fieldWidth/2*1.2}" height="{fieldHeight}" 
														   text="{tools.roundString(dataGrid.selectedItem.tank_h_level, this.digitsLVL)}" 
														   editable="true" enabled="true" editable.detail="false" enabled.detail="false" 
														   change="tank_h_level_changeHandler(event)" 
														   prompt="{resourceManager.getString('default','TANK_H_LEVEL')}"
														   toolTip="{resourceManager.getString('default','TANK_H_LEVEL')}"
														   required="false" validationType="numeric_non_negative" validationGroup="{vg}" automationName="{resourceManager.getString('default','TANK_H_LEVEL')}" 
														   />
							<s:Image  id="tank_h_state" source="{this.getTankAlarmStateImage(dataGrid.selectedItem.tank_h_state)}" verticalCenter="0" horizontalCenter="0" width="20" height="20"/>
							<s:Spacer width="{spaceWidth}" />
						</s:HGroup>
						
						<s:HGroup id="fld__tank_l_level">
							<s:Label width="100%" height="{labelHeight}" text="L:" verticalAlign="middle"/>
							<components:DKI_ValidatorInput id="tank_l_level" 
														   width="{fieldWidth/2*1.2}" height="{fieldHeight}" 
														   text="{tools.roundString(dataGrid.selectedItem.tank_l_level, this.digitsLVL)}" 
														   editable="true" enabled="true" editable.detail="false" enabled.detail="false" 
														   change="tank_l_level_changeHandler(event)" 
														   prompt="{resourceManager.getString('default','TANK_L_LEVEL')}"
														   toolTip="{resourceManager.getString('default','TANK_L_LEVEL')}"
														   required="false" validationType="numeric_non_negative" validationGroup="{vg}" automationName="{resourceManager.getString('default','TANK_L_LEVEL')}" 
														   />
							<s:Image  id="tank_l_state" source="{this.getTankAlarmStateImage(dataGrid.selectedItem.tank_l_state)}" verticalCenter="0" horizontalCenter="0" width="20" height="20"/>
							<s:Spacer width="{spaceWidth}" />
						</s:HGroup>
						
						<s:HGroup id="fld__tank_ll_level">
							<s:Label width="100%" height="{labelHeight}" text="LL:" verticalAlign="middle"/>
							<components:DKI_ValidatorInput id="tank_ll_level" 
														   width="{fieldWidth/2*1.2}" height="{fieldHeight}" 
														   text="{tools.roundString(dataGrid.selectedItem.tank_ll_level, this.digitsLVL)}" 
														   editable="true" enabled="true" editable.detail="false" enabled.detail="false" 
														   change="tank_ll_level_changeHandler(event)" 
														   prompt="{resourceManager.getString('default','TANK_LL_LEVEL')}"
														   toolTip="{resourceManager.getString('default','TANK_LL_LEVEL')}"
														   required="false" validationType="numeric_non_negative" validationGroup="{vg}" automationName="{resourceManager.getString('default','TANK_LL_LEVEL')}" 
														   />
							<s:Image  id="tank_ll_state" source="{this.getTankAlarmStateImage(dataGrid.selectedItem.tank_ll_state)}" verticalCenter="0" horizontalCenter="0" width="20" height="20"/>
							<s:Spacer width="{spaceWidth}" />
						</s:HGroup>
						
						<s:HGroup id="fld__tank_uh_level">
							<s:Label width="100%" height="{labelHeight}" text="User H:" verticalAlign="middle"/>
							<components:DKI_ValidatorInput id="tank_uh_level" 
														   width="{fieldWidth/2*1.2}" height="{fieldHeight}" 
														   text="{tools.roundString(dataGrid.selectedItem.tank_uh_level, this.digitsLVL)}" 
														   editable="true" enabled="true" editable.detail="false" enabled.detail="false" 
														   change="tank_uh_level_changeHandler(event)" 
														   prompt="{resourceManager.getString('default','TANK_UH_LEVEL')}"
														   toolTip="{resourceManager.getString('default','TANK_UH_LEVEL')}"
														   required="false" validationType="numeric_non_negative" validationGroup="{vg}" automationName="{resourceManager.getString('default','TANK_UH_LEVEL')}" 
														   />
							<s:Image  id="tank_uh_state" source="{this.getTankAlarmStateImage(dataGrid.selectedItem.tank_uh_state)}" verticalCenter="0" horizontalCenter="0" width="20" height="20"/>
							<s:Spacer width="{spaceWidth}" />
						</s:HGroup>
						
						<s:HGroup id="fld__tank_ul_level">
							<s:Label width="100%" height="{labelHeight}" text="User L:" verticalAlign="middle"/>
							<components:DKI_ValidatorInput id="tank_ul_level" 
														   width="{fieldWidth/2}" height="{fieldHeight}" 
														   text="{tools.roundString(dataGrid.selectedItem.tank_ul_level, this.digitsLVL)}" 
														   editable="true" enabled="true" editable.detail="false" enabled.detail="false" 
														   change="tank_ul_level_changeHandler(event)" 
														   prompt="{resourceManager.getString('default','TANK_UL_LEVEL')}"
														   toolTip="{resourceManager.getString('default','TANK_UL_LEVEL')}"
														   required="false" validationType="numeric_non_negative" validationGroup="{vg}" automationName="{resourceManager.getString('default','TANK_UL_LEVEL')}" 
														   />
							<s:Image  id="tank_ul_state" source="{this.getTankAlarmStateImage(dataGrid.selectedItem.tank_ul_state)}" verticalCenter="0" horizontalCenter="0" width="20" height="20"/>
							<s:Spacer width="{spaceWidth}" />
						</s:HGroup>
						
						
					</s:HGroup>
					
				</s:VGroup>
			</s:BorderContainer>
			
			<s:Spacer height="2"/>
			
			<s:BorderContainer id="tankStat" includeIn="detail,editStatus" borderColor="0x000000" backgroundAlpha="0" cornerRadius="8" width="100%" height="120">
				<s:VGroup width="100%" paddingLeft="10" paddingTop="8" gap="{groupGap}">
					
					<!--s:Spacer height="{containerSpaceHeight}" /-->
					
					<s:HGroup width="100%">
						<s:HGroup id="fld__tank_15_density">
							<s:Label width="{labelWidth}" height="{labelHeight}" text="{resourceManager.getString('default','TANK_15_DENSITY')}" verticalAlign="middle"/>
							<components:DKI_ValidatorInput id="tank_15_density" 
														   width="{fieldWidth}" height="{fieldHeight}" 
														   text="{tools.roundString(dataGrid.selectedItem.tank_15_density,this.digitsDENS)}" editable="true" enabled="true" editable.detail="false" enabled.detail="false"
														   change="density_changeHandler(event)" 
														   required="true" validationType="numeric_positive" validationGroup="{vg}" automationName="{resourceManager.getString('default','TANK_15_DENSITY')}" 
														   />
							<s:Label width="{labelWidthPostfix}" height="{labelHeight+4}" lineBreak="explicit" 
									 text="{'['+dataGrid.selectedItem.tank_bclass_dens_lo+' - '+dataGrid.selectedItem.tank_bclass_dens_hi+']'+resourceManager.getString('default','UNIT__DENSITY') + '\n@15ºC/59ºF'}" verticalAlign="middle"/>
							<s:Spacer width="{spaceWidth}" />
						</s:HGroup>
						<s:HGroup id="fld__tank_density">
							<s:Label width="{labelWidth}" height="{labelHeight}" text="{resourceManager.getString('default','TANK_DENSITY')}" verticalAlign="middle"/>
							<components:DKI_ValidatorInput id="tank_density" 
														   width="{fieldWidth}" height="{fieldHeight}" 
														   text="{tools.roundString(dataGrid.selectedItem.tank_density,this.digitsDENS)}" editable="true" enabled="true" editable.detail="false" enabled.detail="false"
														   change="density_changeHandler(event)" 
														   required="true" validationType="numeric_positive" validationGroup="{vg}" automationName="{resourceManager.getString('default','TANK_DENSITY')}" 
														   />
							<s:Label width="{labelWidthPostfix}" height="{labelHeight+4}" lineBreak="explicit" 
									 text="{'['+dataGrid.selectedItem.tank_bclass_dens_lo+' - '+dataGrid.selectedItem.tank_bclass_dens_hi+']'+resourceManager.getString('default','UNIT__DENSITY') + '\n@' + this.refTempText}" verticalAlign="middle"/>
							<s:Spacer width="{spaceWidth}" />
						</s:HGroup>
						<s:HGroup id="fld__tank_api">
							<!--<s:Label width="{labelWidth}" height="{labelHeight}" text="{resourceManager.getString('default','TANK_API')}" verticalAlign="middle"/>-->
							<s:Label width="{labelWidth}" height="{labelHeight}" text="API" verticalAlign="middle"/>
							<components:DKI_ValidatorInput id="tank_api" 
														   width="{fieldWidth}" height="{fieldHeight}" 
														   text="{tools.roundString(dataGrid.selectedItem.tank_api,this.digitsAPI)}" editable="true" enabled="true" editable.detail="false" enabled.detail="false"
														   change="density_changeHandler(event)" 
														   required="true" validationType="numeric_non_negative" validationGroup="{vg}" automationName="{resourceManager.getString('default','TANK_API')}" 
														   />
							<s:Label width="{labelWidthPostfix}" height="{labelHeight+4}" 
									 text="@60ºF" verticalAlign="middle"/>
						</s:HGroup>
						
					</s:HGroup>
					
					<!--s:Spacer height="{containerSpaceHeight}" /-->
					
					<s:HGroup width="100%">
						<s:HGroup id="fld__tank_prod_lvl">
							<s:Label width="{labelWidth}" height="{labelHeight}" text="{resourceManager.getString('default','TANK_PROD_LVL')}" verticalAlign="middle"/>
							<components:DKI_ValidatorInput id="tank_prod_lvl" 
														   width="{fieldWidth}" height="{fieldHeight}" 
														   text="{tools.roundString(dataGrid.selectedItem.tank_prod_lvl, this.digitsLVL)}" editable="true" enabled="true" editable.detail="false" enabled.detail="false" 
														   change="height_changeHandler(event)" 
														   required="true" validationType="numeric_non_negative" validationGroup="{vg}" automationName="{resourceManager.getString('default','TANK_PROD_LVL')}" 
														   />
							<s:Label width="{labelWidthPostfix}" height="{labelHeight}" text="{resourceManager.getString('default','UNIT__LENGTH_MM')}" verticalAlign="middle"/>
							<s:Spacer width="{spaceWidth}" />
						</s:HGroup>
						<s:HGroup id="fld__tank_prod_c_of_e">
							<s:Label width="{labelWidth}" height="{labelHeight}" text="{resourceManager.getString('default','TANK_PROD_C_OF_E')}" verticalAlign="middle"/>
							<!--<s:Label id="tank_prod_c_of_e" text="{tools.roundString(dataGrid.selectedItem.tank_prod_c_of_e,6)}" 
									 width="{fieldWidth}" height="{labelHeight}" backgroundColor="{labelBackColor}" backgroundAlpha="{labelBackAlpha}" verticalAlign="middle"/>-->
							
							<components:DKI_ValidatorInput id="tank_prod_c_of_e" 
														   width="{fieldWidth}" height="{fieldHeight}" 
														   text="" editable="true" enabled="true" editable.detail="false" enabled.detail="false" 
														   required="false" validationType="numeric_non_negative" validationGroup="{vg}" automationName="{resourceManager.getString('default','TANK_PROD_C_OF_E')}" 
														   />
							
							<s:Label width="{labelWidthPostfix}" height="{labelHeight+4}" lineBreak="explicit" text="{'['+this.COFE_LO+' - '+this.COFE_HI+']'}" verticalAlign="middle" />
							<!--<s:Label width="{labelWidthPostfix}" height="{labelHeight+4}" lineBreak="explicit" text="{'['+this.COFE_LO+' - '+this.COFE_HI+']'}" verticalAlign="middle" visible="{tank_prod_c_of_e.enabled||Number(tank_prod_c_of_e.text)>0}"/>-->
							<s:Spacer width="{spaceWidth}" />
						</s:HGroup>
						<s:HGroup id="fld__tank_temp">
							<s:Label width="{labelWidth}" height="{labelHeight}" text="{resourceManager.getString('default','TANK_TEMP')}" verticalAlign="middle"/>
							<components:DKI_ValidatorInput id="tank_temp" 
														   width="{fieldWidth}" height="{fieldHeight}" 
														   text="{tools.roundString(dataGrid.selectedItem.tank_temp,this.digitsTEMP)}" editable="true" enabled="true" editable.detail="false" enabled.detail="false" 
														   change="volume_changeHandler(event)" 
														   required="true" validationType="numeric" validationGroup="{vg}" automationName="{resourceManager.getString('default','TANK_TEMP')}" 
														   />
							<!--<s:Label id="tank_temp_label" width="{fieldWidth}" height="{labelHeight}" 
									 text="{ '['+dataGrid.selectedItem.tank_bclass_temp_lo+' - '+dataGrid.selectedItem.tank_bclass_temp_hi+']' + 'C   '
									 + tools.roundString( this.mngr.Temp_C2F(dataGrid.selectedItem.tank_temp), this.digitsTEMP ) + 'F' }" 
									 verticalAlign="middle"/>-->
							<s:Label id="tank_temp_label" width="{fieldWidth}" height="{labelHeight}" 
									 text="{ '['+dataGrid.selectedItem.tank_bclass_temp_lo+' - '+dataGrid.selectedItem.tank_bclass_temp_hi+']'
									 + resourceManager.getString('default','UNIT__TEMP_C') + '   '
									 + tools.roundString( this.mngr.Temp_C2F(this.tank_temp.text), this.digitsTEMP ) 
									 + resourceManager.getString('default','UNIT__TEMP_F') }" 
									 verticalAlign="middle"/>
						</s:HGroup>
						
					</s:HGroup>
					
					<!--s:Spacer height="{containerSpaceHeight}" /-->
					
					<s:HGroup width="100%">
						<s:HGroup id="fld__tank_amb_vol">
							<s:Label width="{labelWidth}" height="{labelHeight}" text="{resourceManager.getString('default','TANK_AMB_VOL')}" verticalAlign="middle"/>
							<components:DKI_ValidatorInput id="tank_amb_vol" 
														   width="{fieldWidth}" height="{fieldHeight}" 
														   text="{tools.roundString(dataGrid.selectedItem.tank_amb_vol, this.digitsVOL)}" editable="true" enabled="true" editable.detail="false" enabled.detail="false" 
														   change="volume_changeHandler(event)" 
														   required="true" validationType="numeric_non_negative" validationGroup="{vg}" automationName="{resourceManager.getString('default','TANK_AMB_VOL')}" 
														   />
							<s:Label width="{labelWidthPostfix}" height="{labelHeight}" text="{resourceManager.getString('default','UNIT__VOLUME_DEFAULT')}" verticalAlign="middle"/>
							<s:Spacer width="{spaceWidth}" />
						</s:HGroup>
						<s:HGroup id="fld__tank_cor_vol">
							<s:Label width="{labelWidth}" height="{labelHeight}" text="{resourceManager.getString('default','TANK_COR_VOL')}" verticalAlign="middle"/>
							<components:DKI_ValidatorInput id="tank_cor_vol" 
														   width="{fieldWidth}" height="{fieldHeight}" 
														   text="{tools.roundString(dataGrid.selectedItem.tank_cor_vol, this.digitsVOL)}" editable="true" enabled="true" editable.detail="false" enabled.detail="false" 
														   change="volume_changeHandler(event)" 
														   required="true" validationType="numeric_non_negative" validationGroup="{vg}" automationName="{resourceManager.getString('default','TANK_COR_VOL')}" 
														   />
							<s:Label width="{labelWidthPostfix}" height="{labelHeight}" text="{resourceManager.getString('default','UNIT__VOLUME_DEFAULT')}" verticalAlign="middle"/>
							<s:Spacer width="{spaceWidth}" />
						</s:HGroup>
						<s:HGroup id="fld__tank_liquid_kg">
							<s:Label width="{labelWidth}" height="{labelHeight}" text="{resourceManager.getString('default','TANK_LIQUID_KG')}" verticalAlign="middle"/>
							<components:DKI_ValidatorInput id="tank_liquid_kg" 
														   width="{fieldWidth}" height="{fieldHeight}" 
														   text="{tools.roundString(dataGrid.selectedItem.tank_liquid_kg, this.digitsMASS)}" editable="true" enabled="true" editable.detail="false" enabled.detail="false" 
														   change="volume_changeHandler(event)" 
														   required="true" validationType="numeric_non_negative" validationGroup="{vg}" automationName="{resourceManager.getString('default','TANK_LIQUID_KG')}" 
														   />
							<s:Label width="{labelWidthPostfix}" height="{labelHeight}" text="{resourceManager.getString('default','UNIT__MASS_DEFAULT')}" verticalAlign="middle"/>
						</s:HGroup>
						
					</s:HGroup>
					
					<!--s:Spacer height="{containerSpaceHeight}" /-->
					
				</s:VGroup>
			</s:BorderContainer>
					
			<s:HGroup width="100%" paddingBottom="4" paddingTop="0" gap="5">
				<s:Spacer width="100%"/>
				<components:DKI_Button id="btn_recalcDensity" label="{resourceManager.getString('default','CALCULATE_DENSITY')}" height="100%" includeIn="editStatus" enabled="{this.canUpdate}" type="edit" click="this.calculateTankDensities()"/>
				<components:DKI_Button id="btn_recalcLevel" label="{resourceManager.getString('default','CALCULATE_LEVEL')}" height="100%" includeIn="editStatus" enabled="{this.canUpdate}" type="edit" click="this.calculateTankVolumesByLevel()"/>
				<components:DKI_Button id="btn_recalcVolume" label="{resourceManager.getString('default','CALCULATE_QUANTITY')}" height="100%" includeIn="editStatus" enabled="{this.canUpdate}" type="edit" click="this.calculateTankVolumes()"/>
			</s:HGroup>

			<s:Spacer height="2"/>
			
			<s:BorderContainer id="tankCtrl" includeIn="detail,editStatus" borderColor="0x000000" backgroundAlpha="0" cornerRadius="8" width="100%" height="40">
				<s:VGroup width="100%" paddingLeft="10" paddingTop="6" gap="{groupGap}">
					
					<!--s:Spacer height="{containerSpaceHeight}" /-->
					
					<s:HGroup>
						<s:HGroup id="fld__tank_gaugingmthd">
							<s:Label width="{labelWidth}" height="{labelHeight}" text="{resourceManager.getString('default','TANK_GAUGINGMTHD')}" verticalAlign="middle"/>
							<components:DKI_ValidatorComboBox id="tank_gaugingmthd" 
															  dataProvider="{gaugeMethodList}" 
															  labelField="gauge_method_name" 
															  selectedItem="{dataGrid.selectedItem.tank_gaugingmthd_desc}" enabled="true" enabled.detail="false"
															  width="{fieldWidth}" height="{fieldHeight}" 
															  prompt="{resourceManager.getString('default','SELECT')+resourceManager.getString('default','TANK_GAUGINGMTHD')}"
															  required="true" validationGroup="{vg}" automationName="{resourceManager.getString('default','TANK_GAUGINGMTHD')}" 
															  />
							<s:Spacer width="{spaceWidth}" />
						</s:HGroup>
						<s:HGroup id="fld__tank_lvl_alarm">
							<s:Label width="{labelWidth}" height="{labelHeight}" text="{resourceManager.getString('default','TANK_LVL_ALARM')}" verticalAlign="middle"/>
							<s:Label id="tank_lvl_alarm" text="{dataGrid.selectedItem.tank_lvlalarm_desc}" 
									 width="{fieldWidth}" height="{labelHeight}" backgroundColor="{labelBackColor}" backgroundAlpha="{labelBackAlpha}" verticalAlign="middle"/>
							<s:Spacer width="{spaceWidth}" />
						</s:HGroup>
						<s:HGroup id="fld__tank_leakdtct_on">
							<s:Label width="{labelWidth}" height="{labelHeight}" text="{resourceManager.getString('default','TANK_LEAKDTCT_ON')}" verticalAlign="middle"/>
							<!--<s:CheckBox id="tank_leakdtct_on" width="{fieldWidth}" label="" fontWeight="bold" 
							selected="{dataGrid.selectedItem.tank_leakdtct_on=='Y'?true:false}" enabled="false" />-->
							<s:Label id="tank_leakdtct_on" text="{dataGrid.selectedItem.tank_leakdtct_on}" 
									 width="{fieldWidth}" height="{labelHeight}" backgroundColor="{labelBackColor}" backgroundAlpha="{labelBackAlpha}" verticalAlign="middle"/>
							<s:Spacer width="{spaceWidth}" />
						</s:HGroup>
						<s:HGroup id="fld__tank_group">
							<s:Label width="{labelWidth}" height="{labelHeight}" text="{resourceManager.getString('default','TANK_GROUP')}" verticalAlign="middle"/>
							<s:Label id="tank_group" text="{dataGrid.selectedItem.tank_group}" 
									 width="{fieldWidth}" height="{labelHeight}" backgroundColor="{labelBackColor}" backgroundAlpha="{labelBackAlpha}" verticalAlign="middle"/>
						</s:HGroup>
					
					</s:HGroup>
					<!--s:Spacer height="{containerSpaceHeight}" /-->
					
				</s:VGroup>
			</s:BorderContainer>
			
			<s:Spacer height="10"/>
			
			<s:BorderContainer id="tankGauge" includeIn="detail,editGauge" borderColor="0x000000" backgroundAlpha="0" cornerRadius="8" width="100%" height="80">
				<s:VGroup width="100%" paddingLeft="10" paddingTop="8" gap="{groupGap}">
					
					<!--s:Spacer height="{containerSpaceHeight}" /-->
					
					<s:HGroup width="100%">
						<s:HGroup id="fld__tank_identifier">
							<s:Label width="{labelWidth}" height="{labelHeight}" text="{resourceManager.getString('default','TANK_IDENTIFIER')}" verticalAlign="middle"/>
							<components:DKI_ValidatorInput id="tank_identifier" maxChars="40" 
														   width="{fieldWidth}" height="{fieldHeight}" 
														   text="{dataGrid.selectedItem.tank_identifier}" editable="true" enabled="true" editable.detail="false" enabled.detail="false" 
														   change="value_changeHandler(event)"
														   required="true" validationType="alphanumericmost" validationGroup="{vg}" automationName="{resourceManager.getString('default','TANK_IDENTIFIER')}" 
														   />
							<s:Spacer width="{spaceWidth}" />
						</s:HGroup>
						<s:HGroup id="fld__tank_drv_type">
							<s:Label width="{labelWidth}" height="{labelHeight}" text="{resourceManager.getString('default','TANK_DRV_TYPE')}" verticalAlign="middle"/>
							<components:DKI_ValidatorInput id="tank_drv_type" maxChars="6" 
														   width="{fieldWidth}" height="{fieldHeight}" 
														   text="{dataGrid.selectedItem.tank_drv_type}" editable="true" enabled="true" editable.detail="false" enabled.detail="false" 
														   change="value_changeHandler(event)"
														   required="false" validationType="alphanumericmost" validationGroup="{vg}" automationName="{resourceManager.getString('default','TANK_DRV_TYPE')}" 
														   />
							<s:Spacer width="{spaceWidth}" />
						</s:HGroup>
						<s:HGroup id="fld__tank_drv_aux">
							<s:Label width="{labelWidth}" height="{labelHeight}" text="{resourceManager.getString('default','TANK_DRV_AUX')}" verticalAlign="middle"/>
							<components:DKI_ValidatorInput id="tank_drv_aux" maxChars="40" 
														   width="{fieldWidth}" height="{fieldHeight}" 
														   text="{dataGrid.selectedItem.tank_drv_aux}" editable="true" enabled="true" editable.detail="false" enabled.detail="false" 
														   change="value_changeHandler(event)"
														   required="false" validationType="alphanumericmost" validationGroup="{vg}" automationName="{resourceManager.getString('default','TANK_DRV_AUX')}" 
														   />
						</s:HGroup>
					</s:HGroup>
					
					<!--s:Spacer height="{containerSpaceHeight}" /-->
					
					<s:HGroup width="100%">
						<s:HGroup id="fld__tank_channel">
							<s:Label width="{labelWidth}" height="{labelHeight}" text="{resourceManager.getString('default','TANK_CHANNEL')}" verticalAlign="middle"/>
							<components:DKI_ValidatorInput id="tank_channel" maxChars="2" 
														   width="{fieldWidth}" height="{fieldHeight}" 
														   text="{dataGrid.selectedItem.tank_channel}" editable="true" enabled="true" editable.detail="false" enabled.detail="false" 
														   change="value_changeHandler(event)"
														   required="true" validationType="integer_non_negative" validationGroup="{vg}" automationName="{resourceManager.getString('default','TANK_CHANNEL')}" 
														   />
							<s:Spacer width="{spaceWidth}" />
						</s:HGroup>
						<s:HGroup id="fld__tank_instance">
							<s:Label width="{labelWidth}" height="{labelHeight}" text="{resourceManager.getString('default','TANK_INSTANCE')}" verticalAlign="middle"/>
							<components:DKI_ValidatorInput id="tank_instance" maxChars="2" 
														   width="{fieldWidth}" height="{fieldHeight}" 
														   text="{dataGrid.selectedItem.tank_instance}" editable="true" enabled="true" editable.detail="false" enabled.detail="false" 
														   change="value_changeHandler(event)"
														   required="true" validationType="integer_non_negative" validationGroup="{vg}" automationName="{resourceManager.getString('default','TANK_INSTANCE')}" 
														   />
							<s:Spacer width="{spaceWidth}" />
						</s:HGroup>
						<s:HGroup id="fld__tank_poll_gap">
							<s:Label width="{labelWidth}" height="{labelHeight}" text="{resourceManager.getString('default','TANK_POLL_GAP')}" verticalAlign="middle"/>
							<components:DKI_ValidatorInput id="tank_poll_gap" maxChars="9" 
														   width="{fieldWidth}" height="{fieldHeight}" 
														   text="{dataGrid.selectedItem.tank_poll_gap}" editable="true" enabled="true" editable.detail="false" enabled.detail="false" 
														   change="value_changeHandler(event)"
														   required="true" validationType="integer_non_negative" validationGroup="{vg}" automationName="{resourceManager.getString('default','TANK_POLL_GAP')}" 
														   />
							<s:Spacer width="{spaceWidth}" />
						</s:HGroup>
						<s:HGroup id="fld__tank_address">
							<s:Label width="{labelWidth}" height="{labelHeight}" text="{resourceManager.getString('default','TANK_ADDRESS')}" verticalAlign="middle"/>
							<components:DKI_ValidatorInput id="tank_address" maxChars="9" 
														   width="{fieldWidth}" height="{fieldHeight}" 
														   text="{dataGrid.selectedItem.tank_address}" editable="true" enabled="true" editable.detail="false" enabled.detail="false" 
														   change="value_changeHandler(event)"
														   required="true" validationType="integer_non_negative" validationGroup="{vg}" automationName="{resourceManager.getString('default','TANK_ADDRESS')}" 
														   />
						</s:HGroup>
					</s:HGroup>
					
					<!--s:Spacer height="{containerSpaceHeight}" /-->
					
				</s:VGroup>
			</s:BorderContainer>
			
		</s:VGroup>
		
		</s:Scroller>
		
		<s:Spacer height="10" />
		
		<s:HGroup width="100%" paddingBottom="4" paddingTop="0" gap="5">
			<components:DKI_Button id="btn_tankstrap" label="{resourceManager.getString('default','m_tankstraps')}" height="100%" includeIn="detail" type="default" enabled="{this.canUpdate}" visible="{this.canUpdate}" includeInLayout="{this.canUpdate}" click="goToTankStraps();"/>
			<s:Spacer width="100%"/>
			<components:DKI_Button id="btn_editStatus" label="{resourceManager.getString('default','TANK_UPDATE_STATUS')}" height="100%" includeIn="detail" enabled="{this.canUpdate}" type="edit" click="btn_editStatus_clickHandler(event)"/>
			<components:DKI_Button id="btn_editGauge" label="{resourceManager.getString('default','TANK_UPDATE_GAUGE')}" height="100%" includeIn="detail" enabled="{this.canUpdate}" type="edit" click="btn_editGauge_clickHandler(event)"/>
			<components:DKI_Button id="btn_save" label="{resourceManager.getString('default','UPDATE')}" height="100%" includeIn="editStatus,editGauge" enabled="{this.canUpdate}" type="edit"/>
			<components:DKI_Button id="btn_cancel" label="{resourceManager.getString('default','CANCEL')}" height="100%" click="cancel_clickHandler()" enabled="true" type="cancel"/>
		</s:HGroup>
	</s:Panel>
	
</s:VGroup>
