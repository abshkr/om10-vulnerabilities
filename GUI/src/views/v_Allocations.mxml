<?xml version="1.0" encoding="utf-8"?>
<s:VGroup xmlns:fx="http://ns.adobe.com/mxml/2009"
		  xmlns:s="library://ns.adobe.com/flex/spark"
		  xmlns:mx="library://ns.adobe.com/flex/mx"
		  xmlns:components="components.*"
		  creationComplete="creationCompleteHandler(event)"
		  gap="2" width="100%" height="100%">
	
	<s:states>
		<s:State name="normal" enterState="this.toolbar.enabled=true"/>
		<s:State name="widget" enterState="this.toolbar.enabled=true"/>
		<s:State name="edit" enterState="callLater(function():void{dataGrid.ensureCellIsVisible(idx);});allocationItemGrid.enabled=true;allocationPeriodGrid.enabled=false;this.toolbar.enabled=false"/>
		<s:State name="create" enterState="allocationItemGrid.enabled=true;allocationPeriodGrid.enabled=false;allocationTripGrid.enabled=false;allocationItemTripGrid.enabled=false;this.toolbar.enabled=false"/>
		<s:State name="detail" enterState="view_detailsHandler(event);allocationItemGrid.enabled=true;allocationPeriodGrid.enabled=false;this.toolbar.enabled=false"/>
	</s:states>
	
	<fx:Script>
		<![CDATA[
			import com.adobe.fiber.runtime.lib.DateTimeFunc;
			
			import components.ActionDialog;
			import components.ConfirmDialog;
			import components.DeleteDialog;
			import components.ExportData;
			import components.MessageDialog;
			import components.TransactionsDlg;
			import components.ViewPopupDlg;
			
			import dm.remoteBulkListService;
			import dm.remoteDataService;
			import dm.remoteListService;
			import dm.utils.tools;
			
			import flash.events.KeyboardEvent;
			import flash.globalization.LocaleID;
			
			import flashx.textLayout.container.ScrollPolicy;
			
			import mx.collections.ArrayCollection;
			import mx.controls.Alert;
			import mx.controls.DateField;
			import mx.events.FlexEvent;
			import mx.rpc.events.ResultEvent;
			import mx.utils.ObjectUtil;
			import mx.utils.StringUtil;
			
			import renderers.DKI_HeaderColumn_Renderer;
			
			import spark.components.ToggleButton;
			import spark.components.VScrollBar;
			import spark.components.gridClasses.IGridItemRenderer;
			import spark.events.GridEvent;
			import spark.events.GridSelectionEvent;
			import spark.events.IndexChangeEvent;
			
			import views.v_AllocationPeriod;
			import views.v_LoadSchedules;
			
			public static const MAIN_WINDOW_WIDTH:int = 1500;
			
			[Bindable] public var readOnly:Boolean = false;
			[Bindable] public var canUpdate:Boolean = false;
			[Bindable] public var canCreate:Boolean = false;
			[Bindable] public var canDelete:Boolean = false;
			[Bindable] public var hasPassword:Boolean = false;
			
			[Bindable] public var labelWidth:uint = 80;
			[Bindable] public var labelHeight:uint = 26;
			[Bindable] public var fieldWidth:uint = 185;
			[Bindable] public var fieldHeight:uint = 26;
			[Bindable] public var spaceWidth:uint = 15;
			[Bindable] public var spaceHeight:uint = 2;
			
			private var idx:int=-1;
			
			private var currentFilter:String=null;
			private var currentOrder:String='alloc_cust_no';
			private var currentDirection:String="ASC";
			
			private var currentOffset:int=0;
			private var currentPageSize:int=1000;
			[Bindable] private var totalLength:int=0;
			[Bindable] private var currentLength:int=0;
			
			private var currentFields:Object=new Object();
			private var currentTypes:Object=new Object();
			//private var currentSorts:Object=new Object();
			//private var currentOrders:Object=new Object();
			private var currentSorts:Object={alloc_type:'DESC'};
			private var currentOrders:Object={alloc_type:1};
			private var currentSortSeq:int=0;
			
			private var  originalItems:ArrayCollection;
			
			
			private var confirmReport:ActionDialog;
			
			//private var exportContents:String="";
			private var f:FileReference = new FileReference();
			
			
			//private var getData:Responder = new Responder(getData_resultHandler);
			
			//private var pagedRecords:ArrayCollection=new ArrayCollection();
			//private var pagedRecords:remoteDataService = new remoteDataService( "AllocationService.getPaged", getData, null );
			[Bindable] private var pagedRecords:remoteListService;
			
			[Bindable] private var allocationItemList:remoteDataService = new remoteDataService( "AllocationService.getAllocationItems", null, allocationItemList_resultHandler );
			[Bindable] private var allocationItemInitList:remoteDataService = new remoteDataService( "AllocationService.initAllocationItems", null, allocationItemInitList_resultHandler );
			[Bindable] private var allocationPeriodList:remoteDataService = new remoteDataService( "AllocationService.getAllocationPeriods", null, allocationPeriodList_resultHandler );
			[Bindable] private var allocationTripList:remoteDataService = new remoteDataService( "AllocationService.getAllocationSchedules", null, allocationTripList_resultHandler );
			[Bindable] private var allocationItemTripList:remoteDataService = new remoteDataService( "AllocationService.getAllocationItemSchedules", null, allocationItemTripList_resultHandler );
			
			private var deleteAction:remoteDataService = new remoteDataService( "AllocationService.delete", null, deleteData_resultHandler, 1 );
			private var createAction:remoteDataService = new remoteDataService( "AllocationService.create", null, createData_resultHandler, 1 );
			private var updateAction:remoteDataService = new remoteDataService( "AllocationService.update", null, updateData_resultHandler, 1 );
			private var resetAction:remoteDataService = new remoteDataService( "AllocationService.resetAllocationItem", null, resetData_resultHandler, 1 );
			
			private var allocationKeyChecker:remoteDataService = new remoteDataService( "AllocationService.isAllocationKeyUsed", null, allocationKeyChecker_resultHandler, 2 );
			private var allocationItemKeyChecker:remoteDataService = new remoteDataService( "AllocationService.isAllocationItemKeyUsed", null, allocationItemKeyChecker_resultHandler, 2 );
			private var allocationPeriodNoMaker:remoteDataService = new remoteDataService( "AllocationService.getNextAllocationPeriodNum", null, allocationPeriodNoMaker_resultHandler, 1 );
			
			private var defaultTimeMaker:remoteDataService = new remoteDataService( "AllocationService.getDefaultTimeString", null, defaultTimeMaker_resultHandler, 1 );
			private var _defaultTimeString:String="23:59:59";
			private var gridColumnSequenceMaker:remoteDataService = new remoteDataService( "ScreenGridColumnService.lookupGridColumnSequence", null, gridColumnSequenceMaker_resultHandler, 1 );
			private var _gridColumnSequenceString:String="";
			
			
			[Bindable] private var allocationTypeList:remoteDataService = new remoteDataService( "ListLibraryService.lookupAllocationType", null, lookupAllocationType_resultHandler );
			[Bindable] private var allocationLockTypeList:remoteDataService = new remoteDataService( "ListLibraryService.lookupAllocationLockType", null, null );
			[Bindable] private var allocationPeriodTypeList:remoteDataService = new remoteDataService( "ListLibraryService.lookupAllocationPeriodType", null, null );
			
			[Bindable] private var supplierList:remoteDataService = new remoteDataService( "ListLibraryService.lookupAllocationSupplier", null, lookupSupplier_resultHandler );
			[Bindable] private var companyList:remoteDataService = new remoteDataService( "ListLibraryService.lookupAllocationCompany", null, lookupCompany_resultHandler );
			
			[Bindable] private var productUnitList:remoteDataService = new remoteDataService( "ListLibraryService.lookupProductUnit", null, lookupProductUnit_resultHandler );
			[Bindable] private var productList:remoteDataService = new remoteDataService( "ListLibraryService.lookupProduct", null, null );
			
			
			public var transactionPopup:TransactionsDlg = new TransactionsDlg;
			
			//private var genData:ExportData = new ExportData();
			
			public var parentParams:Object = new Object();
			public var mainListSelection:int = -1;
			private var _saveButtonClicked:Boolean=false;
			
			public var isPopupWindow:Boolean=false;
			
			public var makeTransactionPopup:ViewPopupDlg = new ViewPopupDlg( "Manual transactions for open allocations", new v_ManualTransactions(), closeDialogHandler );
			public var viewSchedulePopup:ViewPopupDlg = new ViewPopupDlg( "Load schedules for open allocations", new v_LoadSchedules(), closeDialogHandler );
			public var allocationPeriodPopup:ViewPopupDlg = new ViewPopupDlg( "Allocation Periods", new v_AllocationPeriod(), closeDialogHandler );
			
			public var defaultColumnForDateFilter:String = "alloc_datetime";
			
			private var _isCompanyAdjust4Create:Boolean = false;
			private var _isSupplierAdjust4Create:Boolean = false;
			
			
			
			protected function creationCompleteHandler(event:FlexEvent):void
			{
				pagedRecords = new remoteListService( this.dataGrid, "AllocationService.getPaged", null, getPageData_resultHandler );
				trace ("-------------start creationCompleteHandler");
				this.gridColumnSequenceMaker.service( "ALLOCATION" );
				trace ("------------End creationCompleteHandler");
			}
			
			protected function gridColumnSequenceMaker_resultHandler():void
			{
				this._gridColumnSequenceString =  gridColumnSequenceMaker.dataString;
				
				if ( _gridColumnSequenceString.length > 0 )
				{
					global.adjustGridColumnSequence( _gridColumnSequenceString.substr(1), dataGrid );
				}
				
				this.startTheWindow();
			}
			
			protected function startTheWindow():void
			{
				trace ("-------------start startTheWindow");
				//pagedRecords = new remoteListService( this.dataGrid, "AllocationService.getPaged", null, getPageData_resultHandler );
				//resourceManager.localeChain = ['zh_CN'];
				//global.LanguageCode="CHN";
				//this.gridColumnSequenceMaker.service( "ALLOCATION" );
				
				//this.fltr_daterange.dateText.text = "";
				//global.resetDateRangeComponent( "SITE_DEFAULT_DATERANGE_CUSTORDER", this.fltr_daterange );
				if ( global.getValueFromSiteConfigSettings("SITE_CLEAR_FILTER_BLANK") == 'Y' )
				{
					this.fltr_daterange.dateText.text = "";
				}
				else
				{
					global.resetDateRangeComponent( "SITE_DEFAULT_DATERANGE_ALLOCATION", this.fltr_daterange );
				}
				
				var value:String = global.getValueFromSiteConfigSettings( "SITE_AUTO_FILTER_WHEN_OPEN_SCREEN" );
				if ( value == 'Y' )
				{
					if ( this.isPopupWindow == false )
					{
						this.startFiltering();
					}
				}
				else
				{
					;
				}
				
				this.allocationItemInitList.service( "-1" );
				
				this.defaultTimeMaker.service();
				
				this.supplierList.service( -1 );
				this.companyList.service( -1 );
				
				this.allocationTypeList.service( global.company );
				this.allocationLockTypeList.service( );
				this.allocationPeriodTypeList.service( );
				
				
				this.productUnitList.service( );
				this.productList.service( "-1" );
				
				
				trace ("------------End startTheWindow");
				
				
				//trace("this.grid.scroller1111", this.dataGrid.scroller);
				//trace("this.grid.scroller.verticalScrollBar.value", this.dataGrid.scroller.verticalScrollBar.value);
				this.dataGrid.scroller.verticalScrollBar.addEventListener(Event.CHANGE, verticalScrollBarChanged);
				this.dataGrid.addEventListener(KeyboardEvent.KEY_UP, reportKeyUp);
				this.dataGrid.columnHeaderGroup.addEventListener(GridEvent.GRID_CLICK, headerClickListener);
				
			}
			
			
			
			protected function startLoadingPages():void
			{
				killBtn.setStyle("chromeColor","0xff0000");
				this.killBtn.includeInLayout=true;
				this.killBtn.visible = true;
				this.killBtn.enabled = true;
				
				resumeBtn.setStyle("chromeColor","0x00ff00");
				this.resumeBtn.includeInLayout=true;
				this.resumeBtn.visible = true;
				this.resumeBtn.enabled = false;
				
				this.btn_create.enabled = false
				this.btn_export.enabled = false;
				this.dataGrid.enabled = false;
				this.toolbar.enabled = false;
				//this.panel.enabled = false;
				
				currentLength=0;
				currentOffset = 0;
				
				//this.exportContents = this.genData.prepExportHeader( dataGrid );
				
				//currentPage=1;
				pagedRecords.currentPage=1;
				pagedRecords.removeAll();
				pagedRecords.refresh();
				this.pb.values(0, 0);
				//this.pagedRecords.service( currentFields, currentTypes, currentSorts, currentOrders, currentPage, currentPageSize );
				this.pagedRecords.listService( currentFields, currentTypes, currentSorts, currentOrders );
			}
			
			protected function endLoadingPages():void
			{
				this.btn_create.enabled = this.canCreate;
				this.btn_export.enabled = true;
				this.dataGrid.enabled = true;
				this.toolbar.enabled = true;
				//this.panel.enabled = true;
				//this.pb.values(totalCount, totalCount);
				this.pb.values(pagedRecords.totalCount, pagedRecords.totalCount, true);
				
				this.killBtn.includeInLayout=true;
				this.killBtn.visible = true;
				this.killBtn.enabled = false;
				
				this.resumeBtn.includeInLayout=true;
				this.resumeBtn.visible = true;
				//if ( totalLength > totalCount )
				if ( pagedRecords.totalLength > pagedRecords.totalCount )
				{
					this.resumeBtn.enabled = true;
				}
				else
				{
					this.resumeBtn.enabled = false;
				}
			}
			
			protected function exportCsvHandler(event:MouseEvent):void
			{
				this.confirmReport = new ActionDialog( doExport, cancelExport, resourceManager.getString('default','CONFIRM_REPORT_CSV') );
				
				//this.startLoadingPages();
			}
			
			private function getPageData_resultHandler():void
			{
				// if not finished
				if(pagedRecords.length < pagedRecords.totalCount)
				{
					pb.values(pagedRecords.length,pagedRecords.totalCount)
				}
				else
				{
					pb.values(pagedRecords.length,pagedRecords.totalCount)
					
					this.endLoadingPages();
					
					this.dataGrid.selectedIndex = this.mainListSelection;
					if ( this.mainListSelection >= 0)
					{
						this.dataGrid_selectionChangeHandler(null);
					}
					this.mainListSelection = -1;
					
				}
				
			}
			
			
			public function doExport():void
			{
				//genData.prepOther(dataGrid,'allocationlist.csv', this.pagedRecords);
				
				//f.save( this.exportContents, "allocationlist.csv" );
				f.save( pagedRecords.exportContents, "allocationlist.csv" );
				
				this.endLoadingPages();
			}
			
			
			public function cancelExport():void
			{
				this.endLoadingPages();
				
				//trace( this.exportContents );
			}
			
			public function doNothing():void
			{
			}
			
			
			
			
			protected function lookupAllocationType_resultHandler():void
			{
				trace ("--------------Start lookupAllocationType_resultHandler");
				trace ("----------------End lookupAllocationType_resultHandler");
				
				if ( currentFields.hasOwnProperty( "alloc_type" ) )
				{
					this.fltr_alloctype.selectedIndex = tools.getItemIndexFromCode( currentFields["alloc_type"], allocationTypeList, "acheck_type");
				}
				
				if (currentState == "edit" || currentState == "detail")
				{
					//this.alloc_cust_acnt.selectedItem = dataGrid.selectedItem.alloc_cust_acnt + ' - ' + dataGrid.selectedItem.alloc_cust_name;
				}
			}
			
			
			private function verticalScrollBarChanged(event:Event):void
			{
				if ( this.dataGrid.scroller != null)
				{
					var vs:VScrollBar;
					vs = this.dataGrid.scroller.verticalScrollBar;
					//trace("this.grid.scroller.verticalScrollBar.value", vs.value, vs.maximum, vs.minimum, vs.stepSize, vs.pageSize, vs.	snapInterval);
				}
				else
				{
					trace("grid is changed");
				}
			}
			
			private function reportKeyUp(event:KeyboardEvent):void
			{
				if ( this.dataGrid.scroller != null)
				{
					var vs:VScrollBar;
					vs = this.dataGrid.scroller.verticalScrollBar;
					//trace("this.grid.scroller.verticalScrollBar.value", vs.value, vs.maximum, vs.minimum, vs.stepSize, vs.pageSize, vs.	snapInterval);
				}
				else
				{
					trace("grid is changed");
				}
			}
			
			private function headerClickListener(event:GridEvent):void
			{
				if(event.column.dataField!='alloc_items')
				{
					var currentRenderer:IGridItemRenderer;
					var dir:String;
					
					if ( global.sortingBySingleColumn == true )
					{	// sorted by single column only
						for (var i:int=0; i < dataGrid.columns.length; i++)
						{
							currentRenderer = dataGrid.columnHeaderGroup.getHeaderRendererAt(i);
							if ( currentRenderer != null)
							{
								(currentRenderer as DKI_HeaderColumn_Renderer).setImage('');
							}
							//(currentRenderer as DKI_HeaderColumn_Renderer).setImage(''); 
						}
					}
					else
					{	// sorted by multiple columns
						;
					}
					currentRenderer = dataGrid.columnHeaderGroup.getHeaderRendererAt(event.columnIndex);
					
					if( currentSorts.hasOwnProperty(event.column.dataField ) )
					{
						dir = currentSorts[event.column.dataField];
						if( dir=="ASC" )
						{
							dir = "DESC";
						}
						else if ( dir == "DESC" )
						{
							dir = "";
						}
						else if ( dir == "" )
						{
							dir = "ASC";
						}
						else 
						{
							dir = "ASC";
						}
						
						if ( dir != "" )
						{
							currentSorts[event.column.dataField] = dir;	
						}
						else
						{
							delete currentSorts[event.column.dataField];
							delete currentOrders[event.column.dataField];
						}
					}
					else
					{
						if ( global.sortingBySingleColumn == true )
						{	// sorted by single column only
							currentSorts = new Object();
							currentOrders = new Object();
							currentSortSeq = 0;
						}
						else
						{	// sorted by multiple columns
							;
						}
						currentSorts[event.column.dataField] = "ASC";	
						dir = currentSorts[event.column.dataField];
						currentSortSeq += 1;
						currentOrders[event.column.dataField] = currentSortSeq;	
					}
					(currentRenderer as DKI_HeaderColumn_Renderer).setImage(dir);
					this.startFiltering();
				}
			}
			
			
			protected function allocationItemInitList_resultHandler( ):void
			{
				trace ("---------------start allocationItemInitList_resultHandler");
				
				if (currentState == "edit")
				{
					trace ("---------------edit allocationItemInitList_resultHandler");
					this.allocationItemGrid.dataProvider = this.mergeAllocationItems();
				}
				if (currentState == "detail")
				{
					trace ("allocationItemInitList_resultHandler", dataGrid,  dataGrid.selectedItem );
					if ( dataGrid.selectedItem != null )
					{
						this.allocationItemGrid.dataProvider = this.allocationItemList;//  dataGrid.selectedItem.alloc_items;
						this.originalItems = new ArrayCollection();
						for each(var x:Object in this.allocationItemList)
						{
							trace( "allocationItemInitList_resultHandler x", x.aitem_prodcode, x.aitem_suppcode, x.aitem_qtylimit );
							this.originalItems.addItem(ObjectUtil.copy(x));
						}
						
					}
				}
				
				trace ("---------------End allocationItemInitList_resultHandler");
			}
			
			protected function allocationItemList_resultHandler():void
			{
				trace ("--------------Start allocationItemList_resultHandler");
				
				if ( allocationItemList.length>0 )
				{
					this.allocationItemGrid.dataProvider = null;
					this.allocationItemGrid.dataProvider = allocationItemList;
				}
				else
				{
					this.allocationItemGrid.dataProvider = null;
				}
				
				this.allocationItemInitList.service( dataGrid.selectedItem.alloc_suppcode ); 
				trace ("----------------End allocationItemList_resultHandler");
			}
			
			protected function allocationTripList_resultHandler( ):void
			{
				trace ("--------------Start allocationTripList_resultHandler");

				if ( allocationTripList.length>0 )
				{
					this.allocationTripGrid.dataProvider = null;
					this.allocationTripGrid.dataProvider = allocationTripList;
				}
				else
				{
					this.allocationTripGrid.dataProvider = null;
				}
				trace ("----------------End allocationTripList_resultHandler");
			}
			
			protected function dataGrid_selectionChangeHandler(event:GridSelectionEvent):void
			{
				if(currentState != 'widget')
				{
					idx=dataGrid.selectedIndex;
					//dataGrid.ensureCellIsVisible(idx+11);
					dataGrid.ensureCellIsVisible(idx);
					
					currentState = "edit";					
					this.btn_save.enabled = this.canUpdate;
					
					// get the allocation details including its periods setting
					
					this.allocationItemList.service( dataGrid.selectedItem.alloc_type, dataGrid.selectedItem.alloc_cmpycode, dataGrid.selectedItem.alloc_suppcode );
					
					this.allocationTripList.removeAll();
					this.allocationItemTripList.removeAll();
					this.allocationPeriodList.removeAll();
				}
			}
			
			private function mergeAllocationItems():ArrayCollection
			{
				var temp:ArrayCollection = new ArrayCollection;
				var used:Boolean;
				var x:Object;
				var y:Object;
				
				this.originalItems = new ArrayCollection( );
				
				trace ("*****************start mergeAllocationItems************");
				
				trace ("dataGrid", dataGrid);
				
				if ( dataGrid==null || dataGrid.selectedItem==null || this.allocationItemList==null || this.allocationItemList.length==0 )
				{
					trace ("*****************dataGrid is null************");
					for each(x in allocationItemInitList)
					{
						x.aitem_defined = 0;
						temp.addItem(x);
						this.originalItems.addItem(ObjectUtil.copy(x));
						trace( "mergeAllocationItems xy", x.aitem_prodcode, x.aitem_suppcode, x.aitem_qtylimit );
					}
					return temp;
				}
				
				trace ("dataGrid.selectedItem", dataGrid.selectedItem);
				trace ("dataGrid.selectedItem.alloc_items", dataGrid.selectedItem.alloc_items);
				for each(x in this.allocationItemList)
				{
					trace( "mergeAllocationItems x", x.aitem_prodcode, x.aitem_suppcode, x.aitem_qtylimit );
					x.aitem_defined = 1;
					temp.addItem(x);
					this.originalItems.addItem(ObjectUtil.copy(x));
				}
				
				for each(x in allocationItemInitList)
				{
					used = false;
					for each(y in allocationItemList)
					{
						if ( y.aitem_prodcode == x.aitem_prodcode && y.aitem_suppcode == x.aitem_suppcode )
						{
							used = true;
							break;
						}
					}
					if ( used == false )
					{
						trace( "mergeAllocationItems y", x.aitem_prodcode, x.aitem_suppcode, x.aitem_qtylimit );
						x.aitem_defined = 0;
						temp.addItem(x);
						this.originalItems.addItem(ObjectUtil.copy(x));
					}
				}
				
				//this.originalItems = new ArrayCollection( temp.source );
				//this.originalItems = ObjectUtil.copy(temp);
				trace ("*****************end of inside mergeAllocationItems************");
				
				return temp;
			}
			
			protected function adjustAllocationEditability(apprv:String, stat:int):void
			{
				//????
			}
			
			protected function allocationItemTripList_resultHandler( ):void
			{
				trace ("--------------Start allocationItemTripList_resultHandler");
				/*
				allocationItemGrid.selectedItem.aitem_schedules = null;
				allocationItemGrid.selectedItem.aitem_schedules = this.allocationItemTripList;
				
				if ( allocationItemGrid.selectedItem.aitem_schedules.length>0 )
				{
				this.allocationItemTripGrid.dataProvider = null;
				this.allocationItemTripGrid.dataProvider = allocationItemGrid.selectedItem.aitem_schedules;
				}
				else
				{
				this.allocationItemTripGrid.dataProvider = null;
				}
				*/
				if ( allocationItemTripList.length>0 )
				{
					this.allocationItemTripGrid.dataProvider = null;
					this.allocationItemTripGrid.dataProvider = allocationItemTripList;
				}
				else
				{
					this.allocationItemTripGrid.dataProvider = null;
				}
				trace ("----------------End allocationItemTripList_resultHandler");
			}
			
			protected function allocationPeriodList_resultHandler( ):void
			{
				trace ("--------------Start allocationPeriodList_resultHandler");
				/*
				allocationItemGrid.selectedItem.aitem_schedules = null;
				allocationItemGrid.selectedItem.aitem_schedules = this.allocationItemTripList;
				
				if ( allocationItemGrid.selectedItem.aitem_schedules.length>0 )
				{
				this.allocationItemTripGrid.dataProvider = null;
				this.allocationItemTripGrid.dataProvider = allocationItemGrid.selectedItem.aitem_schedules;
				}
				else
				{
				this.allocationItemTripGrid.dataProvider = null;
				}
				*/
				if ( allocationPeriodList.length>0 )
				{
					this.allocationPeriodGrid.dataProvider = null;
					this.allocationPeriodGrid.dataProvider = allocationPeriodList;
				}
				else
				{
					this.allocationPeriodGrid.dataProvider = null;
				}
				trace ("----------------End allocationPeriodList_resultHandler");
			}
			
			protected function allocationItemGrid_selectionChangeHandler(event:GridSelectionEvent):void
			{
				if ( allocationItemGrid.selectedIndex < 0 )
				{
					return;
				}
				
				trace( "allocationItemGrid.selectedItem", allocationItemGrid.selectedItem );
				trace( "allocationItemGrid.selectedItem.aitem_periods", allocationItemGrid.selectedItem.aitem_periods );
				if ( allocationItemGrid.selectedItem.aitem_periods != null )
				{
					trace( "allocationItemGrid.selectedItem.aitem_periods.length", allocationItemGrid.selectedItem.aitem_periods.length );
				}
				
				//allocationPeriodGrid.dataProvider = allocationItemGrid.selectedItem.aitem_periods;
				
				//allocationItemTripGrid.dataProvider = allocationItemGrid.selectedItem.aitem_schedules;
				var alloc_type:int;
				var alloc_cmpy:String;
				var prod_code:String;
				var prod_cmpy:String;
				alloc_type = int( allocationItemGrid.selectedItem.aitem_type );
				alloc_cmpy = allocationItemGrid.selectedItem.aitem_cmpycode;
				prod_code = allocationItemGrid.selectedItem.aitem_prodcode;
				prod_cmpy = allocationItemGrid.selectedItem.aitem_suppcode;
				
				allocationItemKeyChecker.service( alloc_type, alloc_cmpy, prod_cmpy, prod_code );
				
				/* if ( this.allocationItemTripGrid.parent.visible == true )
				{
					allocationItemTripList.service( alloc_type, alloc_cmpy, prod_cmpy, prod_code );
				}
				if ( this.allocationPeriodGrid.parent.visible == true )
				{
					allocationPeriodList.service( alloc_type, alloc_cmpy, prod_cmpy, prod_code );
				} */
			}
			
			protected function allocationPeriodGrid_selectionChangeHandler(event:GridSelectionEvent):void
			{
			}
			
			protected function cancel_clickHandler():void
			{
				clearDetail();
				if ( currentState== "create" )
				{
					dataGrid.enabled=true;
				}
				currentState="normal";
				dataGrid.selectedIndex = -1;
			}			
			
			protected function allocationPeriodNoMaker_resultHandler():void
			{
				//alloc_cust_no.enabled = true;
				if ( allocationPeriodNoMaker.dataString == "ERROR" )
				{
					//alloc_cust_no.text = "";
				}
				else
				{
					//alloc_cust_no.text = allocationPeriodNoMaker.dataString;
				}
			}
			
			protected function defaultTimeMaker_resultHandler():void
			{
				this._defaultTimeString = defaultTimeMaker.dataString;
			}
			
			protected function lookupSupplier_resultHandler():void
			{
				if ( currentState == "create" )
				{
					if ( alloc_suppcode.selectedIndex > -1 )
					{
						alloc_suppcode.selectedItem = supplierList[alloc_suppcode.selectedIndex].cmpy_name;
					}
					else
					{
						if ( supplierList.length == 1 )
						{
							alloc_suppcode.selectedItem = supplierList[0].cmpy_name;
						}
					}
				}
				if ( currentState == "edit" || currentState == "detail" )
				{
					alloc_suppcode.selectedItem = dataGrid.selectedItem.alloc_suppname;
				}
				
				
				if ( currentFields.hasOwnProperty( "alloc_suppcode" ) )
				{
					this.fltr_supplier.selectedIndex = tools.getItemIndexFromCode( currentFields["alloc_suppcode"], supplierList, "cmpy_code");
					if ( currentState == "create" )
					{
						if ( _isSupplierAdjust4Create == true && this.fltr_supplier.selectedIndex > -1 )
						{
							alloc_suppcode.selectedIndex = this.fltr_supplier.selectedIndex;
							_isSupplierAdjust4Create = false;
						}
					}
				}
				
				/* if ( currentState == "normal" )
				{
					if ( this.fltr_supplier.selectedIndex > -1 )
					{
						fltr_supplier.selectedItem = supplierList[fltr_supplier.selectedIndex].cmpy_name;
					}
					else
					{
						if ( supplierList.length == 1 )
						{
							//fltr_supplier.selectedItem = supplierList[0].cmpy_name;
							fltr_supplier.selectedIndex = 0;
						}
					}
				} */
			}
			
			protected function lookupCompany_resultHandler():void
			{
				if ( currentState == "create" )
				{
					if ( alloc_cmpycode.selectedIndex > -1 )
					{
						alloc_cmpycode.selectedItem = companyList[alloc_cmpycode.selectedIndex].cmpy_name;
					}
					if ( _isCompanyAdjust4Create == true && this.fltr_company.selectedIndex > -1 )
					{
						alloc_cmpycode.selectedIndex = this.fltr_company.selectedIndex;
						_isCompanyAdjust4Create = false;
					}
				}
				if ( currentState == "edit" || currentState == "detail" )
				{
					alloc_cmpycode.selectedItem = dataGrid.selectedItem.alloc_cmpyname;
				}
				
				if ( currentFields.hasOwnProperty( "alloc_cmpycode" ) )
				{
					this.fltr_company.selectedIndex = tools.getItemIndexFromCode( currentFields["alloc_cmpycode"], companyList, "cmpy_code");
					if ( currentState == "create" )
					{
						if ( _isCompanyAdjust4Create == true && this.fltr_company.selectedIndex > -1 )
						{
							alloc_cmpycode.selectedIndex = this.fltr_company.selectedIndex;
							_isCompanyAdjust4Create = false;
						}
					}
				}
				
				/* if ( currentState == "normal" )
				{
					if ( this.fltr_company.selectedIndex > -1 )
					{
						fltr_company.selectedItem = companyList[fltr_company.selectedIndex].cmpy_name;
					}
				} */
			}
			
			protected function adjustAllocationCompany():void
			{
				var type:int;
				
				trace( "adjustAllocationCompany", this.alloc_type.selectedIndex );
				
				if ( this.alloc_type.selectedIndex < 0 )
				{
					type = -1;
				}
				else
				{
					type = allocationTypeList[alloc_type.selectedIndex].acheck_type;
				}
				
				trace( "adjustAllocationCompany", type, this.alloc_type.selectedIndex );
				
				this.companyList.service( type );
				this.supplierList.service( type );
				
				if ( type == 1 )
				{
					this.productList.service( "BaSePrOd" );
					this.alloc_suppcode.enabled = false;
				}
				else
				{
					this.productList.service( "-1" );
					if ( currentState == "create" )
					{
						this.alloc_suppcode.enabled = true;
					}
					else
					{
						this.alloc_suppcode.enabled = false;
					}
				}
				
			}
			
			protected function adjustSupplerProducts():void
			{
				var supplier:String;
				
				trace( "adjustSupplerProducts", this.alloc_suppcode.selectedIndex );
				
				if ( this.alloc_suppcode.selectedIndex < 0 )
				{
					supplier = "-1";
				}
				else
				{
					supplier = supplierList[alloc_suppcode.selectedIndex].cmpy_code;
				}
				
				trace( "adjustSupplerProducts", supplier, this.alloc_suppcode.selectedIndex );
				
				this.allocationItemInitList.service( supplier );
			}
			
			protected function toggleAllocationPeriodType():void
			{
				this.alloc_period.enabled = false;
				if ( currentState == "edit" || currentState == "detail" )
				{
					this.btnAllocationPeriod.visible = false;
					this.btnAllocationPeriod.includeInLayout = false;
				}
				
				if ( this.alloc_lock.selectedIndex > -1 )
				{
					if ( this.alloc_lock.selectedItem.alloc_lock_id == 3 )
					{
						this.alloc_period.enabled = true;
					}
					
					if ( this.alloc_lock.selectedItem.alloc_lock_id == 4 )
					{
						if ( currentState == "edit" || currentState == "detail" )
						{
							this.btnAllocationPeriod.visible = true;
							this.btnAllocationPeriod.includeInLayout = true;
						}
					}
				}
			}
			
			protected function fltr_supplier_changeHandler(event:IndexChangeEvent):void
			{
				var supplier:String;
				
				trace( "fltr_supplier_changeHandler", this.fltr_supplier.selectedIndex );
				
				if ( this.fltr_supplier.selectedIndex < 0 )
				{
					supplier = "-1";
				}
				else
				{
					supplier = supplierList[fltr_supplier.selectedIndex].cmpy_code;
				}
				
				trace( "fltr_supplier_changeHandler", supplier, this.fltr_supplier.selectedIndex );
				
				this.allocationItemInitList.service( supplier );
				
				if (currentState == "edit") clearDetail();
				startFiltering();
			}
			
			protected function fltr_company_changeHandler(event:IndexChangeEvent):void
			{
				if (currentState == "edit") clearDetail();
				startFiltering();
			}
			
			protected function fltr_alloctype_changeHandler(event:IndexChangeEvent):void
			{
				var type:int;
				
				trace( "fltr_alloctype_changeHandler", this.fltr_alloctype.selectedIndex );
				
				if ( this.fltr_alloctype.selectedIndex < 0 )
				{
					type = -1;
				}
				else
				{
					type = allocationTypeList[fltr_alloctype.selectedIndex].acheck_type;
				}
				
				trace( "fltr_alloctype_changeHandler", type, this.fltr_alloctype.selectedIndex );
				
				this.companyList.service( type );
				this.supplierList.service( type );
				
				if ( type == 1 )
				{
					this.productList.service( "BaSePrOd" );
					this.fltr_supplier.enabled = false;
				}
				else
				{
					this.productList.service( "-1" );
					this.fltr_supplier.enabled = true;
				}
				
				if (currentState == "edit") clearDetail();
				startFiltering();
			}
			
			protected function fltr_locktype_changeHandler(event:IndexChangeEvent):void
			{
				if (currentState == "edit") clearDetail();
				startFiltering();
			}
			
			protected function fltr_periodtype_changeHandler(event:IndexChangeEvent):void
			{
				if (currentState == "edit") clearDetail();
				startFiltering();
			}
			
			private function fltr_daterange_changeHandler():void
			{
				if (currentState == "edit") clearDetail();
				startFiltering();
			}						
			
			private function startFiltering():void
			{
				var supplierFilter:String = '';  
				var companyFilter:String = '';  
				var allocTypeFilter:String = '';
				var periodTypeFilter:String = '';
				var lockTypeFilter:String = '';
				var fields:Object;
				var types:Object;
				
				//interruptor=false;
				pagedRecords.interruptor=false;
				
				fields = new Object();
				types = new Object();
				
				if (fltr_supplier.selectedIndex > -1) 
				{
					supplierFilter = "alloc_suppcode='"+supplierList[fltr_supplier.selectedIndex].cmpy_code+"' ";
					fields["alloc_suppcode"] = supplierList[fltr_supplier.selectedIndex].cmpy_code;
					if ( fields["alloc_suppcode"] == "ANY" )
					{
						supplierFilter = '';
						fields["alloc_suppcode"] = "";
					}
				}
				else
				{
					if ( global.setComboBoxNoSelection == true )
					{
						fltr_supplier.selectedIndex = -1;
					}
					supplierFilter = '';
					fields["alloc_suppcode"] = "";
				}
				types["alloc_suppcode"] = "EXACT_STRING";
				
				if (fltr_company.selectedIndex > -1) 
				{
					companyFilter = "alloc_cmpycode='"+companyList[fltr_company.selectedIndex].cmpy_code+"' ";
					fields["alloc_cmpycode"] = companyList[fltr_company.selectedIndex].cmpy_code;
					if ( fields["alloc_cmpycode"] == "ANY" )
					{
						companyFilter = '';
						fields["alloc_cmpycode"] = "";
					}
				}
				else
				{
					if ( global.setComboBoxNoSelection == true )
					{
						fltr_company.selectedIndex = -1;
					}
					companyFilter = '';
					fields["alloc_cmpycode"] = "";
				}
				types["alloc_cmpycode"] = "EXACT_STRING";
				
				if ( this.fltr_daterange.dateText.text.length > 0 )
				{
					if(this.fltr_daterange.sDate != null) 
					{
						fields[this.defaultColumnForDateFilter]=dateConvertLong.format(fltr_daterange.sDate) + "~~" + dateConvertLong.format(fltr_daterange.eDate);
						types[this.defaultColumnForDateFilter]="DATETIME";
					}
				}
				
				
				if ( this.currentState != "widget" )
				{
					if (fltr_alloctype.selectedIndex > -1) 
					{
						allocTypeFilter = "alloc_type="+allocationTypeList[fltr_alloctype.selectedIndex].acheck_type+" ";
						fields["alloc_type"] = allocationTypeList[fltr_alloctype.selectedIndex].acheck_type;
					}
					else
					{
						if ( global.setComboBoxNoSelection == true )
						{
							fltr_alloctype.selectedIndex = -1;
						}
						allocTypeFilter = '';
						fields["alloc_type"] = "";
					}
					types["alloc_type"] = "NUMBER";
					
					if (fltr_locktype.selectedIndex > -1) 
					{
						lockTypeFilter = "alloc_lock="+allocationLockTypeList[fltr_locktype.selectedIndex].alloc_lock_id+" ";
						fields["alloc_lock"] = allocationLockTypeList[fltr_locktype.selectedIndex].alloc_lock_id;
					}
					else
					{
						if ( global.setComboBoxNoSelection == true )
						{
							fltr_locktype.selectedIndex = -1;
						}
						lockTypeFilter = '';
						fields["alloc_lock"] = "";
					}
					types["alloc_lock"] = "NUMBER";
					
					if (fltr_periodtype.selectedIndex > -1) 
					{
						periodTypeFilter = "alloc_period="+allocationPeriodTypeList[fltr_periodtype.selectedIndex].alloc_period_id+" ";
						fields["alloc_period"] = allocationPeriodTypeList[fltr_periodtype.selectedIndex].alloc_period_id;
					}
					else
					{
						if ( global.setComboBoxNoSelection == true )
						{
							fltr_periodtype.selectedIndex = -1;
						}
						periodTypeFilter = '';
						fields["alloc_period"] = "";
					}
					types["alloc_period"] = "NUMBER";
					
				}
				
				currentFilter = "WHERE 1=1 ";
				if ( lockTypeFilter.length > 0 )
				{
					currentFilter += "AND " + lockTypeFilter;
				}
				if ( periodTypeFilter.length > 0 )
				{
					currentFilter += "AND " + periodTypeFilter;
				}
				if ( supplierFilter.length > 0 )
				{
					currentFilter += "AND " + supplierFilter;
				}
				if ( companyFilter.length > 0 )
				{
					currentFilter += "AND " + companyFilter;
				}
				if ( allocTypeFilter.length > 0 )
				{
					currentFilter += "AND " + allocTypeFilter;
				}
				
				currentFields = fields;
				currentTypes = types;
				
				this.startLoadingPages();
				
				trace("this.grid.scroller3333", this.dataGrid.scroller);
				trace("this.grid.scroller.verticalScrollBar.value", this.dataGrid.scroller.verticalScrollBar.value);
			}
			
			private function findByPrimaryKey(type:int, cmpy:String, supp:String):void
			{
				var fields:Object;
				var types:Object;
				
				fields = new Object();
				types = new Object();
				
				fields["alloc_type"] = type;
				types["alloc_type"] = "NUMBER";
				fields["alloc_cmpycode"] = cmpy;
				types["alloc_cmpycode"] = "EXACT_STRING";
				fields["alloc_suppcode"] = supp;
				types["alloc_suppcode"] = "EXACT_STRING";
				
				//currentPage=1;
				pagedRecords.currentPage=1;
				pagedRecords.removeAll();
				pagedRecords.refresh();
				//this.pagedRecords.service( fields, types, currentSorts, currentOrders, currentPage, currentPageSize );
				this.pagedRecords.listService( fields, types, currentSorts, currentOrders );
			}
			
			protected function filterRecords(event:MouseEvent):void
			{
				if (currentState == "edit") clearDetail();
				this.startFiltering();
			}
			
			protected function refreshRecords(event:MouseEvent):void
			{
				if ( currentState != "widget" )
				{
					currentState = 'normal';
					dataGrid.enabled=true;
				}
				clearDetail();
				fltr_supplier.selectedIndex = -1;
				fltr_company.selectedIndex = -1;
				if ( currentState != "widget" )
				{
					fltr_alloctype.selectedIndex = -1;
					fltr_periodtype.selectedIndex = -1;
					fltr_locktype.selectedIndex = -1;
				}
				
				if ( global.getValueFromSiteConfigSettings("SITE_CLEAR_FILTER_BLANK") == 'Y' )
				{
					this.fltr_daterange.dateText.text = "";
				}
				else
				{
					global.resetDateRangeComponent( "SITE_DEFAULT_DATERANGE_ALLOCATION", this.fltr_daterange );
				}
				
				
				dataGrid.selectedIndex = -1;
				currentFilter = null;
				currentOrder = null;
				currentFields = new Object();
				currentTypes = new Object();
				
				currentSorts = new Object();
				currentOrders = new Object();
				var currentRenderer:IGridItemRenderer;
				for (var i:int=0; i < dataGrid.columns.length; i++)
				{
					currentRenderer = dataGrid.columnHeaderGroup.getHeaderRendererAt(i);
					if ( currentRenderer != null)
					{
						(currentRenderer as DKI_HeaderColumn_Renderer).setImage('');
					}
					//(currentRenderer as DKI_HeaderColumn_Renderer).setImage(''); 
				}
				this.startFiltering();
				//this.startLoadingPages();
				trace("this.grid.scroller2222", this.dataGrid.scroller);
				trace("this.grid.scroller.verticalScrollBar.value", this.dataGrid.scroller.verticalScrollBar.value);
			}
			
			protected function clearDetail(): void
			{
				if (currentState != 'widget')
				{
				}
			}			
			
			private function editRecord():void
			{
				
				if ( this.checkFields() > 0 )
				{
					this.btn_save.enabled = this.canUpdate;
					return;
				}
				
				if ( this.checkItemFields() == false )
				{
					this.btn_save.enabled = this.canUpdate;
					return;
				}
				
				var obj:Object = new Object();
				
				
				if (alloc_type.selectedIndex>=0)
				{
					obj.alloc_type = allocationTypeList[alloc_type.selectedIndex].acheck_type;
				}
				else
				{
					obj.alloc_type = dataGrid.selectedItem.alloc_type;
				}
				
				if (alloc_cmpycode.selectedIndex>=0)
				{
					obj.alloc_cmpycode = companyList[alloc_cmpycode.selectedIndex].cmpy_code;
				}
				else
				{
					obj.alloc_cmpycode = dataGrid.selectedItem.alloc_cmpycode;
				}
				
				if (alloc_suppcode.selectedIndex>=0)
				{
					obj.alloc_suppcode = supplierList[alloc_suppcode.selectedIndex].cmpy_code;
				}
				else
				{
					obj.alloc_suppcode = dataGrid.selectedItem.alloc_suppcode;
				}
				
				if (alloc_lock.selectedIndex>=0)
				{
					obj.alloc_lock = allocationLockTypeList[alloc_lock.selectedIndex].alloc_lock_id;
				}
				else
				{
					obj.alloc_lock = dataGrid.selectedItem.alloc_lock;
				}
				
				if (alloc_period.selectedIndex>=0)
				{
					obj.alloc_period = allocationPeriodTypeList[alloc_period.selectedIndex].alloc_period_id;
				}
				else
				{
					obj.alloc_period = dataGrid.selectedItem.alloc_period;
				}
				
				obj.has_items = 0;
				var items:ArrayCollection=new ArrayCollection();
				var x:Object;
				var y:Object;
				var actions:ArrayCollection=new ArrayCollection();
				var action:Object;
				var match_found:Boolean=false;
				for each ( x in this.allocationItemGrid.dataProvider)
				{
					action = new Object();
					action.option = 0;  // do nothing
					trace( "********X", x.aitem_prodcode, x.aitem_qtylimit);
					match_found = false;
					for each ( y in this.originalItems )
					{
						if ( x.aitem_prodcode == y.aitem_prodcode && x.aitem_suppcode == y.aitem_suppcode )
						{
							if ( x.aitem_qtylimit == y.aitem_qtylimit )
							{
								if ( x.aitem_qtylimit>0 && x.aitem_produnit != y.aitem_produnit )
								{
									action.option = 2; // update qty
								}
								else
								{
									action.option = 0;
								}
							}
							else
							{
								if (x.aitem_qtylimit > 0 && y.aitem_qtylimit > 0 )
								{
									action.option = 2; // update qty
								}
								else if (x.aitem_qtylimit > 0 && y.aitem_qtylimit == 0 )
								{
									if ( y.aitem_defined == 1 )
									{
										action.option = 2; //update
									}
									else
									{
										action.option = 1; // insert qty
									}
								}
								else if (x.aitem_qtylimit == 0 && y.aitem_qtylimit > 0 )
								{
									action.option = 3; // delete qty
								}
								else
								{
									action.option = 0;
								}
							}
							
							match_found = true;
						}
						if ( match_found == true )
						{
							trace( "********Y found", y.aitem_prodcode, y.aitem_qtylimit, action.option);
							break;
						}
						//trace( "********Y", y.aitem_prodcode, y.aitem_qtylimit, action.option);
					}
					actions.addItem(action);
					items.addItem(Object(x));
					obj.has_items = 1;
					trace( "********X", x.aitem_prodcode, x.aitem_qtylimit, "***********action", action.option);
				}
				obj.alloc_items = items.source;
				obj.actions = actions.source;
				
				//nc.call( 'AllocationService.update', updateData, obj );
				updateAction.service( obj );
			}
			
			protected function updateData_resultHandler( ):void
			{
				clearDetail();
				if ( this.updateAction.dataString == "OK" )
				{
					global.msgSuccess(resourceManager.getString('default','MSG_UPDATE__SUCCESS'));
				}
				else
				{
					global.msgFail(resourceManager.getString('default','ERROR_UPDATE__FAILURE'));
				}
				
				var type:int;
				var cmpy:String;
				var supp:String;
				type = this.allocationTypeList[alloc_type.selectedIndex].acheck_type;
				cmpy = companyList[alloc_cmpycode.selectedIndex].cmpy_code;
				supp = supplierList[alloc_suppcode.selectedIndex].cmpy_code;
				
				currentState="normal";
				findByPrimaryKey( type, cmpy, supp );

				dataGrid.selectedIndex = -1;
				dataGrid.enabled=true;
			}
			
			private function doDelete(): void
			{
				var errors:String="";
				var index:int=0;
				/*
				//if ( eqpt_lock.selected == true )
				if ( dataGrid.selectedItem.eqpt_lock == "Y" )
				{
				index += 1;
				errors += String(index) + ". " + resourceManager.getString('default','ALERT__LOCKED_EQPT_CANNOT_BE_DELETED') + "\n";
				}
				//if ( eqp_must_tare_in.selected == true )
				if ( dataGrid.selectedItem.eqp_must_tare_in == "Y" )
				{
				index += 1;
				errors += String(index) + ". " + resourceManager.getString('default','ALERT__TAREIN_EQPT_CANNOT_BE_DELETED') + "\n";
				}
				
				trace ( "isEqptUsedByTanker", eqpt_code.text, dataGrid.selectedItem.eqpt_code, isEqptUsedByTanker.lastResult);
				if ( isEqptUsedByTanker.lastResult > 0 )
				{
				index += 1;
				errors += String(index) + ". " + resourceManager.getString('default','ALERT__EQPT_HAS_TANKER') + "\n";
				}
				*/
				if ( index > 0 )
				{
					var errorBox:MessageDialog = new MessageDialog( errors );
				}
				else
				{
					var canDelete:DeleteDialog = new DeleteDialog(deleteRecord, hasPassword);
				}
			}
			
			private function deleteRecord():void
			{
				var obj:Object = new Object();
				
				
				obj.alloc_type = dataGrid.selectedItem.alloc_type;
				obj.alloc_cmpycode = dataGrid.selectedItem.alloc_cmpycode;
				obj.alloc_suppcode = dataGrid.selectedItem.alloc_suppcode;
				obj.alloc_lock = dataGrid.selectedItem.alloc_lock;
				obj.alloc_period = dataGrid.selectedItem.alloc_period;
				
				obj.alloc_items = this.allocationItemGrid.dataProvider.toArray();
				
				//nc.call( 'AllocationService.delete', deleteData, obj );
				deleteAction.service( obj );
			}
			
			protected function deleteData_resultHandler( ):void
			{
				clearDetail();
				if ( this.deleteAction.dataString == "OK" )
				{
					global.msgSuccess(resourceManager.getString('default','MSG_DELETE__SUCCESS'));
				}
				else
				{
					global.msgFail(resourceManager.getString('default','ERROR_DELETE__FAILURE'));
				}
				
				currentState="normal";
				this.startFiltering();
				dataGrid.selectedIndex = -1;
			}
			
			private function doReset():void
			{
				if ( this.allocationItemGrid.selectedIndex < 0 )
				{
					var errorBox:MessageDialog = new MessageDialog( resourceManager.getString('default','ERROR_RESET_ALLOCATION_SELECT') );
					return;
				}
				
				if ( this.allocationItemGrid.selectedItem.aitem_qtylimit == this.allocationItemGrid.selectedItem.aitem_qtyleft )
				{
					var errorBox2:MessageDialog = new MessageDialog( resourceManager.getString('default','ERROR_RESET_ALLOCATION_AMOUNT') );
					return;
				}
				
				var canReset:ActionDialog = new ActionDialog( resetRecord, doNothing, resourceManager.getString('default','CONFIRM_RESET_ALLOCATION') );
			}
			
			private function resetRecord():void
			{
				
				var obj:Object = new Object();
				
				
				if (alloc_type.selectedIndex>=0)
				{
					obj.aitem_type = allocationTypeList[alloc_type.selectedIndex].acheck_type;
				}
				else
				{
					obj.aitem_type = dataGrid.selectedItem.alloc_type;
				}
				
				if (alloc_cmpycode.selectedIndex>=0)
				{
					obj.aitem_cmpycode = companyList[alloc_cmpycode.selectedIndex].cmpy_code;
				}
				else
				{
					obj.aitem_cmpycode = dataGrid.selectedItem.alloc_cmpycode;
				}
				
				if (alloc_suppcode.selectedIndex>=0)
				{
					obj.aitem_suppcode = supplierList[alloc_suppcode.selectedIndex].cmpy_code;
				}
				else
				{
					obj.aitem_suppcode = dataGrid.selectedItem.alloc_suppcode;
				}
				
				obj.aitem_prodcode = this.allocationItemGrid.selectedItem.aitem_prodcode;
				obj.aitem_qtyused = this.allocationItemGrid.selectedItem.aitem_qtyused;
				
				resetAction.service( obj );
			}
			
			protected function resetData_resultHandler( ):void
			{
				clearDetail();
				if ( this.resetAction.dataString == "OK" )
				{
					global.msgSuccess(resourceManager.getString('default','MSG_UPDATE__SUCCESS'));
				}
				else
				{
					global.msgFail(resourceManager.getString('default','ERROR_UPDATE__FAILURE'));
				}
				
				this.allocationItemList.service( dataGrid.selectedItem.alloc_type, dataGrid.selectedItem.alloc_cmpycode, dataGrid.selectedItem.alloc_suppcode );
				
				/*
				this.mainListSelection = this.dataGrid.selectedIndex;
				
				var type:int;
				var cmpy:String;
				var supp:String;
				type = this.allocationTypeList[alloc_type.selectedIndex].acheck_type;
				cmpy = companyList[alloc_cmpycode.selectedIndex].cmpy_code;
				supp = supplierList[alloc_suppcode.selectedIndex].cmpy_code;
				
				currentState="normal";
				findByPrimaryKey( type, cmpy, supp );
				
				dataGrid.selectedIndex = -1;
				dataGrid.enabled=true;
				*/
			}
			
			private function checkAllocationKey():void
			{
				var obj:Object=new Object();
				if (alloc_type.selectedIndex>=0)
				{
					obj.alloc_type = allocationTypeList[alloc_type.selectedIndex].acheck_type;
				}
				else
				{
					obj.alloc_type = -1;
				}
				
				if (alloc_cmpycode.selectedIndex>=0)
				{
					obj.alloc_cmpycode = companyList[alloc_cmpycode.selectedIndex].cmpy_code;
				}
				else
				{
					obj.alloc_cmpycode = "-1";
				}
				
				if (alloc_suppcode.selectedIndex>=0)
				{
					obj.alloc_suppcode = supplierList[alloc_suppcode.selectedIndex].cmpy_code;
				}
				else
				{
					obj.alloc_suppcode = "-1";
				}
				
				allocationKeyChecker.service( obj.alloc_type, obj.alloc_cmpycode, obj.alloc_suppcode );
			}
			
			protected function allocationKeyChecker_resultHandler( ):void
			{
				if ( allocationKeyChecker.dataInteger > 0 )
				{
					global.msgWarning( resourceManager.getString('default','ALERT__ALLOCATION_EXIST') );
					this.btn_save.enabled = this.canCreate;
				}
			}
			
			private function checkAllocationItemKey(prod:String):void
			{
				var obj:Object=new Object();
				if (alloc_type.selectedIndex>=0)
				{
					obj.alloc_type = allocationTypeList[alloc_type.selectedIndex].acheck_type;
				}
				else
				{
					obj.alloc_type = -1;
				}
				
				if (alloc_cmpycode.selectedIndex>=0)
				{
					obj.alloc_cmpycode = companyList[alloc_cmpycode.selectedIndex].cmpy_code;
				}
				else
				{
					obj.alloc_cmpycode = "-1";
				}
				
				if (alloc_suppcode.selectedIndex>=0)
				{
					obj.alloc_suppcode = supplierList[alloc_suppcode.selectedIndex].cmpy_code;
				}
				else
				{
					obj.alloc_suppcode = "-1";
				}
				
				obj.alloc_prodcode = prod;
				
				allocationKeyChecker.service( obj.alloc_type, obj.alloc_cmpycode, obj.alloc_suppcode );
				allocationItemKeyChecker.service( obj.alloc_type, obj.alloc_cmpycode, obj.alloc_suppcode, obj.alloc_prodcode );
			}
			
			protected function allocationItemKeyChecker_resultHandler( ):void
			{
				if ( allocationItemKeyChecker.dataInteger > 0 )
				{
					//global.msgWarning( resourceManager.getString('default','ALERT__ALLOCATION_ITEM_EXIST') );
				}
			}
			
			private function checkFields():int
			{
				var errors:String="";
				var index:int=0;
				
				if ( alloc_type.selectedIndex == -1 )//< 0 )
				{
					index += 1;
					errors += String(index) + ". " + resourceManager.getString('default','PLEASE')+resourceManager.getString('default','SELECT')+resourceManager.getString('default','ALLOC_TTYP_ID') + "\n";
				}
				if ( alloc_cmpycode.selectedIndex == -1 )//< 0 )
				{
					index += 1;
					errors += String(index) + ". " + resourceManager.getString('default','PLEASE')+resourceManager.getString('default','SELECT')+resourceManager.getString('default','ALLOC_CMPYCODE') + "\n";
				}
				if ( alloc_suppcode.selectedIndex == -1 )//< 0 )
				{
					index += 1;
					errors += String(index) + ". " + resourceManager.getString('default','PLEASE')+resourceManager.getString('default','SELECT')+resourceManager.getString('default','ALLOC_SUPPCODE') + "\n";
				}
				if ( alloc_lock.selectedIndex == -1 )//< 0 )
				{
					index += 1;
					errors += String(index) + ". " + resourceManager.getString('default','PLEASE')+resourceManager.getString('default','SELECT')+resourceManager.getString('default','ALLOC_LOCK') + "\n";
				}
				if ( alloc_lock.selectedIndex >=0 && this.alloc_lock.selectedItem.alloc_lock_id==3 && alloc_period.selectedIndex == -1 )
				{
					index += 1;
					errors += String(index) + ". " + resourceManager.getString('default','PLEASE')+resourceManager.getString('default','SELECT')+resourceManager.getString('default','ALLOC_PERIOD') + "\n";
				}
				
				if ( index > 0 )
				{
					var errorBox:MessageDialog = new MessageDialog( errors );
				}
				
				return index;
			}
			
			private function createRecord():void
			{
				var alloc_num:int;
				
				alloc_num = allocationKeyChecker.dataInteger;
				if ( alloc_num > 0 )
				{
					var errorBox:MessageDialog = new MessageDialog( resourceManager.getString('default','ALERT__ALLOCATION_EXIST') );
					this.btn_save.enabled = this.canCreate;
					return;
				}
				
				if ( this.checkFields() > 0 )
				{
					this.btn_save.enabled = this.canCreate;
					return;
				}
				
				if ( this.checkItemFields() == false )
				{
					this.btn_save.enabled = this.canCreate;
					return;
				}
				
				var obj:Object = new Object();
				
				
				if (alloc_type.selectedIndex>=0)
				{
					obj.alloc_type = allocationTypeList[alloc_type.selectedIndex].acheck_type;
				}
				else
				{
					obj.alloc_type = allocationTypeList[0].acheck_type;
				}
				
				if (alloc_cmpycode.selectedIndex>=0)
				{
					obj.alloc_cmpycode = companyList[alloc_cmpycode.selectedIndex].cmpy_code;
				}
				else
				{
					obj.alloc_cmpycode = companyList[0].cmpy_code;
				}
				
				if (alloc_suppcode.selectedIndex>=0)
				{
					obj.alloc_suppcode = supplierList[alloc_suppcode.selectedIndex].cmpy_code;
				}
				else
				{
					obj.alloc_suppcode = supplierList[0].cmpy_code;
				}
				
				if (alloc_lock.selectedIndex>=0)
				{
					obj.alloc_lock = allocationLockTypeList[alloc_lock.selectedIndex].alloc_lock_id;
				}
				else
				{
					obj.alloc_lock = allocationLockTypeList[0].alloc_lock_id;
				}
				
				if (alloc_period.selectedIndex>=0)
				{
					obj.alloc_period = allocationPeriodTypeList[alloc_period.selectedIndex].alloc_period_id;
				}
				else
				{
					obj.alloc_period = allocationPeriodTypeList[0].alloc_period_id;
				}
				
				obj.has_items = 0;
				var items:ArrayCollection=new ArrayCollection();
				var x:Object;
				for each ( x in this.allocationItemGrid.dataProvider)
				{
					trace( "********X", x.aitem_prodcode, x.aitem_qtylimit);
					if ( x.aitem_qtylimit > 0 )
					{
						/* var opobj:Object = new Object();
						opobj["aitem_suppcode"] = x.aitem_suppcode;
						opobj["aitem_prodcode"] = x.aitem_prodcode;
						opobj["aitem_qtylimit"] = x.aitem_qtylimit;
						opobj["aitem_produnit"] = x.aitem_produnit;
						items.addItem(opobj); */
						items.addItem(x);
						obj.has_items = 1;
					}
				}
				obj.alloc_items = items.source;
				
				//nc.call( 'AllocationService.create', createData, obj );
				createAction.service( obj );
			}
			
			protected function createData_resultHandler( ):void
			{
				clearDetail();
				if ( this.createAction.dataString == "OK" )
				{
					global.msgSuccess(resourceManager.getString('default','MSG_CREATE__SUCCESS'));
				}
				else
				{
					global.msgFail(resourceManager.getString('default','ERROR_CREATE__FAILURE'));
				}
				
				var type:int;
				var cmpy:String;
				var supp:String;
				type = this.allocationTypeList[alloc_type.selectedIndex].acheck_type;
				cmpy = companyList[alloc_cmpycode.selectedIndex].cmpy_code;
				supp = supplierList[alloc_suppcode.selectedIndex].cmpy_code;
				
				currentState="normal";
				findByPrimaryKey( type, cmpy, supp );
				
				dataGrid.selectedIndex = -1;
				dataGrid.enabled=true;
			}
			
			protected function createNewRecord(event:MouseEvent):void
			{	
				idx=dataGrid.selectedIndex;
				dataGrid.ensureCellIsVisible(idx);
				currentState="create";
				this.btn_save.enabled = this.canCreate;
				dataGrid.enabled=false;
				//this.equipCmptsList.visible = false;
				
				_isCompanyAdjust4Create = true;
				_isSupplierAdjust4Create = true;
				
				this.alloc_type.selectedIndex = this.fltr_alloctype.selectedIndex;
				this.alloc_cmpycode.selectedIndex = this.fltr_company.selectedIndex;
				this.alloc_suppcode.selectedIndex = this.fltr_supplier.selectedIndex;
			}
			
			
			public function getArrayCollection(obj:Object):ArrayCollection
			{
				var temp:ArrayCollection = new ArrayCollection;
				temp.addItem( obj );
				return temp;
			}
			
			public function convertDateToLocaleString(dt:String):String
			{
				var dt_string:String;
				var dt_date:Date = new Date();
				
				dt_string = ""; 
				if ((dt!=null) && (dt!='null') && (dt!=''))
				{
					dt_date = DateField.stringToDate(dt,"YYYY-MM-DD");
					dt_string = dateFormatter.format( dt_date);
				}
				//trace ("convertDateToLocale", dt, dt_date, dt_string);
				return dt_string;
			}
			
			public function convertDateToLocale(dt:String):Date
			{
				var dt_date:Date = new Date();
				
				if ((dt!=null) && (dt!='null') && (dt!=''))
				{
					dt_date = DateField.stringToDate(dt,"YYYY-MM-DD");
				}
				//trace ("convertDateToLocale", dt, dt_date, dt_string);
				return dt_date;
			}
			
			public function convertDateToLocaleLong(dt:String):Date
			{
				var dt_date:Date = new Date();
				
				if ((dt!=null) && (dt!='null') && (dt!=''))
				{
					//dt_date = DateField.stringToDate(dt,"YYYY-MM-DD HH:NN:SS");
					dt_date = DateTimeFunc.createDate(
						int(dt.substr(0, 4))
						, int(dt.substr(5, 2))
						, int(dt.substr(8, 2))
						, int(dt.substr(11, 2))
						, int(dt.substr(14, 2))
						, int(dt.substr(17, 2))
					);
				}
				//trace ("convertDateToLocale", dt, dt_date, dt_string);
				return dt_date;
			}
			
			public function getDefaultDate():Date
			{
				var now_date:Date;
				var def_date:Date;
				
				now_date = new Date();
				def_date = DateTimeFunc.dateAdd( "yyyy", 1, now_date );
				
				//trace ("getDefaultDate", now_date, def_date);
				
				return def_date;
			}
			
			protected function view_detailsHandler(event:FlexEvent):void
			{
			}
			
			protected function unitLabelFunction(item:Object, column:GridColumn):String
			{
				var ret:String = 'l(amb)';
				//for each(var obj:Object in lookupAllocationUnit.lastResult)
				for each(var obj:Object in this.productUnitList)
				{
					if(obj.unit_id == item [column.dataField]) ret=obj.unit_name;
				}
				return ret;
			}
			
			protected function dateLabelFunction(item:Object, column:GridColumn):String
			{
				var ret:String = "";
				
				ret = item [column.dataField];
				return ret;
			}
			
			protected function lookupProductUnit_resultHandler( ):void
			{
				global.prodUnits = this.productUnitList;
			}
			
			protected function save_clickHandler():void
			{
				this.btn_save.enabled = false;
				if (currentState == "create")
				{
					createRecord();
				}
				if (currentState == "edit")
				{
					editRecord();
				}
				if (currentState == "detail")
				{
					editRecord();
				}
			}
			
			public function goToTransaction():void
			{
				if ( this.allocationTripGrid.selectedIndex < 0 )
				{
					var errorBox:MessageDialog = new MessageDialog( resourceManager.getString('default','global.msg.selecttrip4transaction') );
				}
				else
				{
					transactionPopup.openDialog();
					var params:Object = new Object();
					//params["supplier"] = view.mainList.selectedItem.payload.SUPPLIER_CODE;
					//params["trip"] = view.mainList.selectedItem.payload.SHLS_TRIP_NO;
					//params["drawer"] = view.mainList.selectedItem.payload.drawer_code;
					//params["carrier"] = view.mainList.selectedItem.payload.carrier_code;
					//params["driver"] = view.mainList.selectedItem.payload.driver;
					params["supplier"] = this.allocationTripGrid.selectedItem.schd_supp_code;
					params["trip"] = this.allocationTripGrid.selectedItem.schd_trip_no;
					params["drawer"] = null;
					params["carrier"] = this.allocationTripGrid.selectedItem.schd_carr_code;
					params["driver"] = null;
					
					transactionPopup.setParams(params);
				}
			}
			
			public function closeDialogHandler():void
			{
				
				var type:int;
				var cmpy:String;
				var supp:String;
				type = this.allocationTypeList[alloc_type.selectedIndex].acheck_type;
				cmpy = companyList[alloc_cmpycode.selectedIndex].cmpy_code;
				supp = supplierList[alloc_suppcode.selectedIndex].cmpy_code;
				
				this.mainListSelection = 0;
				currentState="normal";
				findByPrimaryKey( type, cmpy, supp );
				
				
				/* this.mainListSelection = this.dataGrid.selectedIndex;
				this.currentState = "normal";
				this.dataGrid.selectedIndex = -1;
				this.startFiltering(); */
			}
			
			public function goToMakeTransaction():void
			{
				this.makeTransactionPopup.popupTitle = resourceManager.getString('default','BUTTON__OO_MAKE_TRANSACTIONS');
				this.makeTransactionPopup.setSecurity( this.readOnly, this.canUpdate, this.canCreate, this.canDelete, this.hasPassword );
				
				this.makeTransactionPopup.parentWidth = this.width;
				this.makeTransactionPopup.parentHeight = this.height;
				
				trace ( "*******************Pop up a screen to make manual transactions!");
				makeTransactionPopup.openDialog();
				
				var params:Object = new Object();
				
				if (alloc_suppcode.selectedIndex>=0)
				{
					params["supplier"] = supplierList[alloc_suppcode.selectedIndex].cmpy_code;
				}
				else
				{
					params["supplier"] = dataGrid.selectedItem.alloc_suppcode;
				}
				/* if (alloc_cust_acnt.selectedIndex>=0)
				{
					params["customer"] = customerList[alloc_cust_acnt.selectedIndex].cust_acnt;
					params["cust_cmpy"] = customerList[alloc_cust_acnt.selectedIndex].cust_cmpy_code;
				}
				else
				{
					params["customer"] = dataGrid.selectedItem.alloc_cust_acnt;
					params["cust_cmpy"] = dataGrid.selectedItem.alloc_cust_code;
				}
				
				if (alloc_carr_code.selectedIndex>=0)
				{
					params["carrier"] = carrierList[alloc_carr_code.selectedIndex].cmpy_code;
				}
				else
				{
					params["carrier"] = dataGrid.selectedItem.alloc_carr_code;
				}
				
				params["alloc_sys_no"] = alloc_sys_no.text;
				params["alloc_cust_no"] = alloc_cust_no.text; */
				
				params["repost"] = false;
				params["transType"] = 1;//0; //"N";
				
				makeTransactionPopup.setFilters( params );
			}
			
			public function goToViewSchedule():void
			{
				this.viewSchedulePopup.popupTitle = resourceManager.getString('default','BUTTON__OO_VIEW_SCHEDULES');
				this.viewSchedulePopup.setSecurity( this.readOnly, this.canUpdate, this.canCreate, this.canDelete, this.hasPassword );
				
				this.viewSchedulePopup.parentWidth = this.width;
				this.viewSchedulePopup.parentHeight = this.height;
				
				trace ( "*******************Pop up a screen to make manual transactions!");
				viewSchedulePopup.openDialog();
				
				var params:Object = new Object();
				
				//params["alloc_sys_no"] = alloc_sys_no.text;
				//params["alloc_cust_no"] = alloc_cust_no.text;
				
				if ( this.allocationTripGrid.selectedIndex >= 0 )
				{
					params["supplier"] = this.allocationTripGrid.selectedItem.schd_supp_code;
					params["trip"] = this.allocationTripGrid.selectedItem.schd_trip_no;
				}
				else
				{
					if (alloc_suppcode.selectedIndex>=0)
					{
						params["supplier"] = supplierList[alloc_suppcode.selectedIndex].cmpy_code;
					}
					else
					{
						params["supplier"] = dataGrid.selectedItem.alloc_suppcode;
					}
					params["trip"] = "";
				}
				
				viewSchedulePopup.initFilters( params );
			}
			
			public function goToAllocationPeriod():void
			{
				if ( this.allocationItemGrid.selectedIndex < 0 )
				{
					var errorBox:MessageDialog = new MessageDialog( resourceManager.getString('default','ALERT__ALLOCATION_ITEM_SELECT_FOR_PERIOD') );
					return;
				}
				
				if ( this.allocationItemKeyChecker.dataInteger <= 0 )
				{
					var errorBox:MessageDialog = new MessageDialog( resourceManager.getString('default','ALERT__ALLOCATION_ITEM_NONEXIST') );
					return;
				}
				
				this.allocationPeriodPopup.popupTitle = resourceManager.getString('default','m_allocation_periods');
				this.allocationPeriodPopup.setSecurity( this.readOnly, this.canUpdate, this.canCreate, this.canDelete, this.hasPassword );
				
				this.allocationPeriodPopup.parentWidth = this.width;
				this.allocationPeriodPopup.parentHeight = this.height;
				
				trace ( "*******************Pop up a screen to make allocation periods!");
				allocationPeriodPopup.openDialog();
				
				var params:Object = new Object();
				
				params["aiprd_alloctype"] = this.alloc_type.selectedItem.acheck_type;
				params["aiprd_cmpycode"] = this.alloc_cmpycode.selectedItem.cmpy_code;
				params["aiprd_suppcode"] = this.alloc_suppcode.selectedItem.cmpy_code;
				
				params["aiprd_prodcode"] = this.allocationItemGrid.selectedItem.aitem_prodcode;
				params["aiprd_prodname"] = this.allocationItemGrid.selectedItem.aitem_prodname;
				params["aiprd_qtylimit"] = this.allocationItemGrid.selectedItem.aitem_qtylimit;
				params["aiprd_produnit"] = this.allocationItemGrid.selectedItem.aitem_produnit;
				
				params["aiprd_locktype"] = this.alloc_lock.selectedItem.alloc_lock_id;
				
				allocationPeriodPopup.setFilters( params ); 
			}
			
			public function checkItemFields():Boolean
			{
				var x:Object;
				
				for each ( x in this.allocationItemGrid.dataProvider)
				{
					trace( "********X", x.aitem_prodcode, x.aitem_qtylimit);
					if ( tools.isValueNumeric( x.aitem_qtylimit ) == false )
					{
						global.msgFail("Please enter the number for 'Prod Qty' of '" + x.aitem_prodcode + " - " + x.aitem_prodname + "'");
						return false;
					}
					else
					{
						if ( Number( x.aitem_qtylimit ) < 0 || x.aitem_qtylimit.search("-")>=0 )
							//if ( int( x.aitem_qtylimit ) < 0  )
						{
							global.msgFail("Please enter the number greater than zero for 'Prod Qty' of '" + x.aitem_prodcode + " - " + x.aitem_prodname + "'");
							return false;
						}
						
						var qty_gone:Number;
						qty_gone = Number( x.aitem_qtyused );
						if ( Number(x.aitem_qtylimit) < qty_gone )
						{
							global.msgFail("The number should not be less than "+ qty_gone + " [quantity scheduled or loaded already] for 'Prod Qty' of '" + x.aitem_prodcode + " - " + x.aitem_prodname + "'");
							return false;
						}
					}
				}
				
				return true;
			}
			
			protected function killBtn_clickHandler(event:MouseEvent):void
			{
				//interruptor=true;
				pagedRecords.interruptor=true;
				trace("WTF >>>>>>>>>>");
			}
			
			protected function resumeBtn_clickHandler(event:MouseEvent):void
			{
				//interruptor=false;
				pagedRecords.interruptor=false;
				
				this.resumeLoadingPages();
				trace("RESUME >>>>>>>>>>");
			}
			
			protected function resumeLoadingPages():void
			{
				killBtn.setStyle("chromeColor","0xff0000");
				this.killBtn.includeInLayout=true;
				this.killBtn.visible = true;
				this.killBtn.enabled = true;
				
				resumeBtn.setStyle("chromeColor","0x00ff00");
				this.resumeBtn.includeInLayout=true;
				this.resumeBtn.visible = true;
				this.resumeBtn.enabled = false;
				
				this.btn_create.enabled = false
				this.btn_export.enabled = false;
				this.dataGrid.enabled = false;
				this.toolbar.enabled = false;
				
				//pb.values(pagedRecords.length,totalLength);
				pb.values(pagedRecords.length,pagedRecords.totalLength);
				//currentPage = int(this.pagedRecords.length/currentPageSize) + 1;
				//this.pagedRecords.service( currentFields, currentTypes, currentSorts, currentOrders, currentPage, currentPageSize );
				this.pagedRecords.listService( currentFields, currentTypes, currentSorts, currentOrders );
			}
			
			public function setFilters( params:*=false ): void
			{
				if ( params == false )
				{
					return;
				}
				
				this.parentParams = params;
				
				currentState = "normal";
				
				trace ("...............................in setFilters");
				tools.pr( params);
				
				var po:Object=new Object();
				
				po["alloc_suppcode"] = tools.getObjAttribute( params, "alloc_suppcode", "" );
				po["alloc_cmpycode"] = tools.getObjAttribute( params, "alloc_cmpycode", "" );
				po["alloc_type"] = tools.getObjAttribute( params, "alloc_type", "" );
				
				var fields:Object;
				var types:Object;
				
				//interruptor=false;
				pagedRecords.interruptor=false;
				
				fields = new Object();
				types = new Object();
				
				fields["alloc_cmpycode"] = po["alloc_cmpycode"];
				types["alloc_cmpycode"] = "EXACT_STRING";
				fields["alloc_suppcode"] = po["alloc_suppcode"];
				types["alloc_suppcode"] = "EXACT_STRING";
				fields["alloc_type"] = po["alloc_type"];
				types["alloc_type"] = "EXACT_STRING";
				
				currentFields = fields;
				currentTypes = types;
				this.startLoadingPages();
				
				if ( po.hasOwnProperty( "alloc_cmpycode" ) )
				{
					this.fltr_company.selectedIndex = tools.getItemIndexFromCode( po["alloc_cmpycode"], companyList, "cmpy_code");
				}
				
				if ( po.hasOwnProperty( "alloc_suppcode" ) )
				{
					this.fltr_supplier.selectedIndex = tools.getItemIndexFromCode( po["alloc_suppcode"], supplierList, "cmpy_code");
				}
				
				if ( po.hasOwnProperty( "alloc_type" ) )
				{
					this.fltr_alloctype.selectedIndex = tools.getItemIndexFromCode( po["alloc_type"], allocationTypeList, "acheck_type");
				}
				
				
				pb.values(pagedRecords.length,pagedRecords.length)
			}
		]]>
	</fx:Script>
	<fx:Declarations>
		<s:DateTimeFormatter id="dateFormatter" locale="{LocaleID.DEFAULT}" dateStyle="short" timeStyle="none"/>
		<s:DateTimeFormatter id="dateConvert" dateTimePattern="yyyy-MM-dd"/>
		<s:DateTimeFormatter id="dateConvertLong" dateTimePattern="yyyy-MM-dd HH:mm:ss"/>
		<components:ValidationGroup id="vg" action="{save_clickHandler}" defaultButton="{btn_save}" isProtected="{hasPassword}"/>
	</fx:Declarations>
	<s:Panel id="panel" width="100%" height="100%"
			 skinClass="skins.WidgetPanelSkin"
			 skinClass.widget="skins.NullSkin">
		<s:layout>
			<s:VerticalLayout/>
		</s:layout>
		<s:VGroup width="100%" id="toolbar"  >
			<s:HGroup gap="5" paddingBottom="2" paddingTop="2" width="100%">
				<components:DKI_DropDownList id="fltr_alloctype" width="130" height="100%"
											 change="fltr_alloctype_changeHandler(event)" cornerRadius="10"
											 labelField="acheck_name" prompt="{resourceManager.getString('default','ALLOC_TYPENAME')+resourceManager.getString('default','FILTER')}"
											 visible.widget="false" excludeFrom="widget" dataProvider="{allocationTypeList}"/>
				<components:DKI_ComboBox id="fltr_company" width="180" height="100%" enabled="{fltr_alloctype.selectedIndex > -1}"
										change="fltr_company_changeHandler(event)" cornerRadius="10"
										labelField="cmpy_name" prompt="{resourceManager.getString('default','ALLOC_CMPYNAME')+resourceManager.getString('default','FILTER')}"
										dataProvider="{companyList}"/>
				<components:DKI_DropDownList id="fltr_supplier" width="180" height="100%"
											 change="fltr_supplier_changeHandler(event)" cornerRadius="10"
											 labelField="cmpy_name" prompt="{resourceManager.getString('default','ALLOC_SUPPNAME')+resourceManager.getString('default','FILTER')}"
											 dataProvider="{supplierList}"/>
				<components:DKI_DropDownList id="fltr_locktype" width="130" height="100%"
											 change="fltr_locktype_changeHandler(event)" cornerRadius="10"
											 labelField="alloc_lock_name" prompt="{resourceManager.getString('default','ALLOC_LOCKNAME')+resourceManager.getString('default','FILTER')}"
											 visible.widget="false" excludeFrom="widget" dataProvider="{allocationLockTypeList}"/>
				<components:DKI_DropDownList id="fltr_periodtype" width="150" height="100%" includeInLayout="false" visible="false"
											 change="fltr_periodtype_changeHandler(event)" cornerRadius="10"
											 labelField="alloc_period_name" prompt="{resourceManager.getString('default','ALLOC_PERIODNAME')+resourceManager.getString('default','FILTER')}"
											 visible.widget="false" excludeFrom="widget" dataProvider="{allocationPeriodTypeList}"/>
				
				
				<components:DKI_DateRange id="fltr_daterange" minWidth="220"  height="{labelHeight}" width="300"
										  dateChange="fltr_daterange_changeHandler" defaultDays="7"
										  timeEnabled="true"/>					
				
				
			<!--/s:HGroup>
			<s:HGroup gap="5" paddingBottom="2" paddingTop="2" width="100%"-->
				<s:Spacer width="100%"/>
				<components:DKI_Button id="filterBtn" height="24" noLabel="false" click="filterRecords(event)"
									   type="filteron"/>
				<components:DKI_Button id="resetBtn" height="24" noLabel="false" click="refreshRecords(event)"
									   type="filteroff"/>
				<components:DKI_Button id="btn_export" label="{resourceManager.getString('default','EXPORTDATA')}" type="report" click="exportCsvHandler(event)" includeIn="normal"/>
				<components:DKI_Button id="btn_create" label="{resourceManager.getString('default','CREATE')}" height="24" click="createNewRecord(event)" includeIn="normal" enabled="{this.canCreate}" type="create"/>	
			</s:HGroup>
		</s:VGroup>
			
		
		<s:DataGrid id="dataGrid" width="100%" height="100%" requestedRowCount="4"
					selectionChange="dataGrid_selectionChangeHandler(event)"
					skinClass="skins.DKI_DataGrid_Skin"
					height.widget="100%">
			<s:columns>
				<s:ArrayList>
					<s:source>
						<s:GridColumn dataField="alloc_type" headerText="{resourceManager.getString('default','ALLOC_TYPE')}" visible="true"></s:GridColumn>
						<s:GridColumn dataField="alloc_typename" headerText="{resourceManager.getString('default','ALLOC_TYPENAME')}" visible="true"></s:GridColumn>
						<s:GridColumn dataField="alloc_cmpycode" headerText="{resourceManager.getString('default','ALLOC_CMPYCODE')}" visible="true"></s:GridColumn>
						<s:GridColumn dataField="alloc_cmpyname" headerText="{resourceManager.getString('default','ALLOC_CMPYNAME')}" visible="true"></s:GridColumn>
						<s:GridColumn dataField="alloc_suppcode" headerText="{resourceManager.getString('default','ALLOC_SUPPCODE')}" visible="true"></s:GridColumn>
						<s:GridColumn dataField="alloc_suppname" headerText="{resourceManager.getString('default','ALLOC_SUPPNAME')}" visible="true"></s:GridColumn>
						<s:GridColumn dataField="alloc_lock" headerText="{resourceManager.getString('default','ALLOC_LOCK')}" visible="true"></s:GridColumn>
						<s:GridColumn dataField="alloc_lockname" headerText="{resourceManager.getString('default','ALLOC_LOCKNAME')}" visible="true"></s:GridColumn>
						<s:GridColumn dataField="alloc_period" headerText="{resourceManager.getString('default','ALLOC_PERIOD')}" visible="true"></s:GridColumn>
						<s:GridColumn dataField="alloc_periodname" headerText="{resourceManager.getString('default','ALLOC_PERIODNAME')}" visible="true"></s:GridColumn>
						<s:GridColumn dataField="alloc_datetime" headerText="{resourceManager.getString('default','ALLOC_DATETIME')}" visible="true" itemRenderer="renderers.DateRenderer"></s:GridColumn>
					</s:source>
				</s:ArrayList>
			</s:columns>
			<s:dataProvider>
				<!--s:AsyncListView id="pgList" list="{getPagedResult.lastResult}"/-->
				<s:AsyncListView id="pgList" list="{pagedRecords}"/>
			</s:dataProvider>
		</s:DataGrid>
		<s:HGroup width="100%">
			<components:Downloader id="pb" width="100%" height="18"/>
			<!--mx:ProgressBar id="pb" width="100%" height="22" visible="false" includeInLayout="false"  mode="manual" source="{this.pgList}" label="{this.currentLength} records shown from {this.currentLength} loaded out of {this.totalLength} found." labelPlacement="center"/-->
			<s:Button id="killBtn" width="18" height="18" label="" cornerRadius="12" visible="false" includeInLayout="false"
					  click="killBtn_clickHandler(event)"/>
			<s:Button id="resumeBtn" width="18" height="18" label="" cornerRadius="12" visible="false" includeInLayout="false"
					  click="resumeBtn_clickHandler(event)"/>
		</s:HGroup>
	</s:Panel>
	
	<s:Panel id="details" includeIn="edit,create,detail" width="100%" height="420"
			 itemCreationPolicy="immediate" skinClass="skins.WidgetPanelSkin">
		<s:layout>
			<s:VerticalLayout/>
			<!--s:TileLayout/-->
		</s:layout>
		
		<s:Spacer height="5"/>
		<s:VGroup width="100%">
			<s:HGroup width="100%">
				<s:HGroup>
					<s:Label width="{labelWidth}" height="{labelHeight}" text="{resourceManager.getString('default','ALLOC_TYPENAME')}" verticalAlign="middle"/>
					<components:DKI_ValidatorComboBox id="alloc_type" 
													  dataProvider="{allocationTypeList}" 
													  labelField="acheck_name" 
													  selectedItem="{dataGrid.selectedItem.alloc_typename}" enabled="false" enabled.edit="false"
													  selectedItem.create="" selectedIndex.create="-1" enabled.create="true" 
													  width="{fieldWidth}" height="{fieldHeight}" 
													  prompt="{resourceManager.getString('default','SELECT')+resourceManager.getString('default','ALLOC_TYPENAME')}"
													  change="adjustAllocationCompany();checkAllocationKey()" valueCommit="adjustAllocationCompany()"
													  required="true" validationGroup="{vg}" automationName="{resourceManager.getString('default','ALLOC_TYPENAME')}" 
													  />
				</s:HGroup>
				<s:Spacer width="{spaceWidth}" />
				<s:HGroup>
					<s:Label width="{labelWidth}" height="{labelHeight}" text="{resourceManager.getString('default','ALLOC_CMPYNAME')}" verticalAlign="middle"/>
					<components:DKI_ValidatorComboBox id="alloc_cmpycode" 
													  dataProvider="{companyList}" 
													  labelField="cmpy_name" 
													  selectedItem="{dataGrid.selectedItem.alloc_cmpyname}" enabled="false" enabled.edit="false" 
													  selectedItem.create="" selectedIndex.create="-1" enabled.create="{this.alloc_type.selectedIndex>-1}" 
													  width="{fieldWidth}" height="{fieldHeight}" change="checkAllocationKey()" 
													  prompt="{resourceManager.getString('default','SELECT')+resourceManager.getString('default','ALLOC_CMPYNAME')}"  
													  required="true" validationGroup="{vg}" automationName="{resourceManager.getString('default','ALLOC_CMPYNAME')}" 
													  />
				</s:HGroup>
				<s:Spacer width="{spaceWidth}" />
				<s:HGroup>
					<s:Label width="{labelWidth}" height="{labelHeight}" text="{resourceManager.getString('default','ALLOC_SUPPNAME')}" verticalAlign="middle"/>
					<components:DKI_ValidatorComboBox  id="alloc_suppcode" 
													   dataProvider="{supplierList}" 
													   labelField="cmpy_name" 
													   selectedItem="{dataGrid.selectedItem.alloc_suppname}" enabled="false" 
													   selectedItem.create="" selectedIndex.create="-1" enabled.create="true" 
													   width="{fieldWidth}" height="{fieldHeight}" 
													   prompt="{resourceManager.getString('default','SELECT')+resourceManager.getString('default','ALLOC_SUPPNAME')}"  
													   change="adjustSupplerProducts();checkAllocationKey()" valueCommit="adjustSupplerProducts()"
													   required="true" validationGroup="{vg}" automationName="{resourceManager.getString('default','ALLOC_SUPPNAME')}" 
													   />
				</s:HGroup>
				<s:Spacer width="{spaceWidth}" />
				<s:HGroup>
					<s:Label width="{labelWidth}" height="{labelHeight}" text="{resourceManager.getString('default','ALLOC_LOCKNAME')}" verticalAlign="middle"/>
					<components:DKI_ValidatorComboBox id="alloc_lock" 
													  dataProvider="{allocationLockTypeList}" 
													  labelField="alloc_lock_name" 
													  selectedItem="{dataGrid.selectedItem.alloc_lockname}" enabled="true" 
													  selectedItem.create="" selectedIndex.create="-1" enabled.create="true" 
													  width="{fieldWidth}" height="{fieldHeight}" 
													  prompt="{resourceManager.getString('default','SELECT')+resourceManager.getString('default','ALLOC_LOCKNAME')}"
													  change="toggleAllocationPeriodType()" valueCommit="toggleAllocationPeriodType()"
													  required="true" validationGroup="{vg}" automationName="{resourceManager.getString('default','ALLOC_LOCKNAME')}" 
													  />
				</s:HGroup>
				<s:Spacer width="{spaceWidth}" />
				<s:HGroup>
					<s:Label width="{labelWidth}" height="{labelHeight}" text="{resourceManager.getString('default','ALLOC_PERIODNAME')}" verticalAlign="middle"/>
					<components:DKI_ValidatorComboBox id="alloc_period" 
													  dataProvider="{allocationPeriodTypeList}" 
													  labelField="alloc_period_name" 
													  selectedItem="{dataGrid.selectedItem.alloc_periodname}" enabled="false" 
													  selectedItem.create="" selectedIndex.create="-1" enabled.create="false" 
													  width="{fieldWidth}" height="{fieldHeight}" 
													  prompt="{resourceManager.getString('default','SELECT')+resourceManager.getString('default','ALLOC_PERIODNAME')}"
													  required="false" validationGroup="{vg}" automationName="{resourceManager.getString('default','ALLOC_PERIODNAME')}" 
													  />
				</s:HGroup>
				<!--<s:Spacer width="{spaceWidth}" />
				<s:HGroup>
					<s:Label width="{labelWidth}" height="{labelHeight}" text="{resourceManager.getString('default','ALLOC_DATETIME')}" verticalAlign="middle"/>
					<components:DKI_DateTime id="alloc_datetime" 
											 selectedDate="{convertDateToLocale(dataGrid.selectedItem.alloc_datetime)}" enabled="true" 
											 selectedDate.create="{new Date()}" enabled.create="true" 
											 width="{fieldWidth}" height="{fieldHeight}" timeEnabled="false"
											 />
				</s:HGroup>-->
				
			</s:HGroup>
			<s:Spacer height="5" />
			<s:HGroup width="100%">
				
				<s:VGroup width="25%" visible="false" includeInLayout="false">
					<s:DataGrid id="allocationTripGrid" width="100%" height="210" requestedRowCount="4" excludeFrom="widget,normal"
								skinClass="skins.DKI_DataGrid_Skin" 
								editable="false" enabled="true"
								dataProvider="{this.allocationTripList}"
								>
						<s:columns>
							<s:ArrayList>
								<s:source>
									<s:GridColumn dataField="schd_alloc_id" headerText="{resourceManager.getString('default','SCHD_ALLOC_ID')}" visible="false"></s:GridColumn>
									<s:GridColumn dataField="schd_supp_code" headerText="{resourceManager.getString('default','SCHD_SUPP_CODE')}" visible="false"></s:GridColumn>
									<s:GridColumn dataField="schd_supplier" headerText="{resourceManager.getString('default','SCHD_SUPPLIER')}" visible="true"></s:GridColumn>
									<s:GridColumn dataField="schd_trip_no" headerText="{resourceManager.getString('default','SCHD_TRIP_NO')}" visible="true"></s:GridColumn>
									<s:GridColumn dataField="schd_carr_code" headerText="{resourceManager.getString('default','SCHD_CARR_CODE')}" visible="false"></s:GridColumn>
									<s:GridColumn dataField="schd_carrier" headerText="{resourceManager.getString('default','SCHD_CARRIER')}" visible="true"></s:GridColumn>
									<s:GridColumn dataField="schd_tnkr_code" headerText="{resourceManager.getString('default','SCHD_TNKR_CODE')}" visible="true"></s:GridColumn>
									<s:GridColumn dataField="schd_tanker" headerText="{resourceManager.getString('default','SCHD_TANKER')}" visible="false"></s:GridColumn>
									<s:GridColumn dataField="schd_date" headerText="{resourceManager.getString('default','SCHD_DATE')}" visible="true" itemRenderer="renderers.DateRenderer"></s:GridColumn>
									<s:GridColumn dataField="schd_status_code" headerText="{resourceManager.getString('default','SCHD_STATUS_CODE')}" visible="false"></s:GridColumn>
									<s:GridColumn dataField="schd_status" headerText="{resourceManager.getString('default','SCHD_STATUS')}" visible="true"></s:GridColumn>
								</s:source>
							</s:ArrayList>
						</s:columns>
					</s:DataGrid>
				</s:VGroup>
				
				<s:VGroup width="100%">
					<s:DataGrid id="allocationItemGrid" width="100%" height="300" requestedRowCount="4" excludeFrom="widget,normal"
								selectionChange="allocationItemGrid_selectionChangeHandler(event)"
								skinClass="skins.DKI_DataGrid_Skin" visible="true"
								editable="true" editable.detail="false"
								dataProvider.create="{this.allocationItemInitList}" dataProvider="{this.mergeAllocationItems()}"
								>
						<s:columns>
							<s:ArrayList>
								<s:source>
									<s:GridColumn dataField="aitem_type" headerText="{resourceManager.getString('default','AITEM_TYPE')}" visible="false" editable="false"></s:GridColumn>
									<s:GridColumn dataField="aitem_typename" headerText="{resourceManager.getString('default','AITEM_TYPENAME')}" visible="false" editable="false"></s:GridColumn>
									<s:GridColumn dataField="aitem_cmpycode" headerText="{resourceManager.getString('default','AITEM_CMPYCODE')}" visible="false" editable="false"></s:GridColumn>
									<s:GridColumn dataField="aitem_cmpyname" headerText="{resourceManager.getString('default','AITEM_CMPYNAME')}" visible="false" editable="false"></s:GridColumn>
									<s:GridColumn dataField="aitem_suppcode" headerText="{resourceManager.getString('default','AITEM_SUPPCODE')}" visible="false" editable="false"></s:GridColumn>
									<s:GridColumn dataField="aitem_suppname" headerText="{resourceManager.getString('default','AITEM_SUPPNAME')}" visible="false" editable="false"></s:GridColumn>
									<s:GridColumn dataField="aitem_prodcode" headerText="{resourceManager.getString('default','AITEM_PRODCODE')}" visible="true" editable="false"></s:GridColumn>
									<s:GridColumn dataField="aitem_prodname" headerText="{resourceManager.getString('default','AITEM_PRODNAME')}" visible="true" editable="false"></s:GridColumn>
									<s:GridColumn dataField="aitem_qtylimit" headerText="{resourceManager.getString('default','AITEM_QTYLIMIT')}" visible="true" editable="true"></s:GridColumn>
									<s:GridColumn dataField="aitem_qtyused" headerText="{resourceManager.getString('default','AITEM_QTYUSED')}" visible="true" editable="false"></s:GridColumn>
									<s:GridColumn dataField="aitem_qtyleft" headerText="{resourceManager.getString('default','AITEM_QTYLEFT')}" visible="true" editable="false"></s:GridColumn>
									<s:GridColumn dataField="aitem_produnit" headerText="{resourceManager.getString('default','AITEM_UNITNAME')}" 
												  visible="true" editable="false" editable.create="true" labelFunction="unitLabelFunction" itemEditor="itemeditors.ProductUnits"></s:GridColumn>
									<s:GridColumn dataField="aitem_unitname" headerText="{resourceManager.getString('default','AITEM_UNITNAME')}" visible="false" editable="false"></s:GridColumn>
									<s:GridColumn dataField="aitem_perchild" headerText="{resourceManager.getString('default','AITEM_PERCHILD')}" visible="true" editable="false"></s:GridColumn>
								</s:source>
							</s:ArrayList>
						</s:columns>
					</s:DataGrid>
				</s:VGroup>
				
				<s:VGroup width="25%" visible="false" includeInLayout="false">
					<s:DataGrid id="allocationItemTripGrid" width="100%" height="300" requestedRowCount="4" excludeFrom="widget,normal"
								skinClass="skins.DKI_DataGrid_Skin" 
								editable="false" enabled="true"
								dataProvider="{this.allocationTripList}"
								>
						<s:columns>
							<s:ArrayList>
								<s:source>
									<s:GridColumn dataField="adjst_type" headerText="{resourceManager.getString('default','ADJST_TYPE')}" visible="false"></s:GridColumn>
									<s:GridColumn dataField="adjst_typename" headerText="{resourceManager.getString('default','ADJST_TYPENAME')}" visible="false"></s:GridColumn>
									<s:GridColumn dataField="adjst_cmpycode" headerText="{resourceManager.getString('default','ADJST_CMPYCODE')}" visible="false"></s:GridColumn>
									<s:GridColumn dataField="adjst_cmpyname" headerText="{resourceManager.getString('default','ADJST_CMPYNAME')}" visible="false"></s:GridColumn>
									<s:GridColumn dataField="adjst_prodcode" headerText="{resourceManager.getString('default','ADJST_PRODCODE')}" visible="false"></s:GridColumn>
									<s:GridColumn dataField="adjst_prodname" headerText="{resourceManager.getString('default','ADJST_PRODNAME')}" visible="true"></s:GridColumn>
									<s:GridColumn dataField="adjst_suppcode" headerText="{resourceManager.getString('default','ADJST_SUPPCODE')}" visible="false"></s:GridColumn>
									<s:GridColumn dataField="adjst_suppname" headerText="{resourceManager.getString('default','ADJST_SUPPNAME')}" visible="false"></s:GridColumn>
									<s:GridColumn dataField="adjst_qtyused" headerText="{resourceManager.getString('default','ADJST_QTYUSED')}" visible="true"></s:GridColumn>
									<s:GridColumn dataField="adjst_produnit" headerText="{resourceManager.getString('default','ADJST_PRODUNIT')}" visible="false"></s:GridColumn>
									<s:GridColumn dataField="adjst_unitname" headerText="{resourceManager.getString('default','ADJST_UNITNAME')}" visible="true"></s:GridColumn>
									<s:GridColumn dataField="adjst_loadid" headerText="{resourceManager.getString('default','ADJST_LOADID')}" visible="true"></s:GridColumn>
									<s:GridColumn dataField="adjst_terminal" headerText="{resourceManager.getString('default','ADJST_TERMINAL')}" visible="true"></s:GridColumn>
									<s:GridColumn dataField="adjst_tanker" headerText="{resourceManager.getString('default','ADJST_TANKER')}" visible="true"></s:GridColumn>
									<s:GridColumn dataField="adjst_carrier" headerText="{resourceManager.getString('default','ADJST_CARRIER')}" visible="true"></s:GridColumn>
									<s:GridColumn dataField="adjst_tripno" headerText="{resourceManager.getString('default','ADJST_TRIPNO')}" visible="true"></s:GridColumn>
									<s:GridColumn dataField="adjst_tripsupp" headerText="{resourceManager.getString('default','ADJST_TRIPSUPP')}" visible="true"></s:GridColumn>
									<s:GridColumn dataField="adjst_loadend" headerText="{resourceManager.getString('default','ADJST_LOADEND')}" visible="true" itemRenderer="renderers.DateRenderer"></s:GridColumn>
									<s:GridColumn dataField="adjst_schddate" headerText="{resourceManager.getString('default','ADJST_SCHDDATE')}" visible="true" itemRenderer="renderers.DateRenderer"></s:GridColumn>
								</s:source>
							</s:ArrayList>
						</s:columns>
					</s:DataGrid>
				</s:VGroup>
				
				<s:VGroup width="50%" visible="false" includeInLayout="false">
					<s:DataGrid id="allocationPeriodGrid" width="100%" height="210" requestedRowCount="4" excludeFrom="widget,normal"
								selectionChange="allocationPeriodGrid_selectionChangeHandler(event)"
								skinClass="skins.DKI_DataGrid_Skin"
								editable="true" editable.detail="false"
								dataProvider="{this.allocationPeriodList}"
								>
						<s:columns>
							<s:ArrayList>
								<s:source>
									<s:GridColumn dataField="aiprd_type" headerText="{resourceManager.getString('default','AIPRD_TYPE')}" visible="true"></s:GridColumn>
									<s:GridColumn dataField="aiprd_typename" headerText="{resourceManager.getString('default','AIPRD_TYPENAME')}" visible="true"></s:GridColumn>
									<s:GridColumn dataField="aiprd_cmpycode" headerText="{resourceManager.getString('default','AIPRD_CMPYCODE')}" visible="true"></s:GridColumn>
									<s:GridColumn dataField="aiprd_cmpyname" headerText="{resourceManager.getString('default','AIPRD_CMPYNAME')}" visible="true"></s:GridColumn>
									<s:GridColumn dataField="aiprd_prodcode" headerText="{resourceManager.getString('default','AIPRD_PRODCODE')}" visible="true"></s:GridColumn>
									<s:GridColumn dataField="aiprd_prodname" headerText="{resourceManager.getString('default','AIPRD_PRODNAME')}" visible="true"></s:GridColumn>
									<s:GridColumn dataField="aiprd_suppcode" headerText="{resourceManager.getString('default','AIPRD_SUPPCODE')}" visible="true"></s:GridColumn>
									<s:GridColumn dataField="aiprd_suppname" headerText="{resourceManager.getString('default','AIPRD_SUPPNAME')}" visible="true"></s:GridColumn>
									<s:GridColumn dataField="aiprd_index" headerText="{resourceManager.getString('default','AIPRD_INDEX')}" visible="true"></s:GridColumn>
									<s:GridColumn dataField="aiprd_daystart" headerText="{resourceManager.getString('default','AIPRD_DAYSTART')}" visible="true" itemRenderer="renderers.DateRenderer"></s:GridColumn>
									<s:GridColumn dataField="aiprd_dayend" headerText="{resourceManager.getString('default','AIPRD_DAYEND')}" visible="true" itemRenderer="renderers.DateRenderer"></s:GridColumn>
									<s:GridColumn dataField="aiprd_produnit" headerText="{resourceManager.getString('default','AIPRD_PRODUNIT')}" 
												  visible="true" labelFunction="unitLabelFunction" itemEditor="itemeditors.ProductUnits"></s:GridColumn>
									<s:GridColumn dataField="aiprd_unitname" headerText="{resourceManager.getString('default','AIPRD_UNITNAME')}" visible="true"></s:GridColumn>
									<s:GridColumn dataField="aiprd_qtylimit" headerText="{resourceManager.getString('default','AIPRD_QTYLIMIT')}" visible="true"></s:GridColumn>
									<s:GridColumn dataField="aiprd_qtyused" headerText="{resourceManager.getString('default','AIPRD_QTYUSED')}" visible="true"></s:GridColumn>
									<s:GridColumn dataField="aiprd_qtyleft" headerText="{resourceManager.getString('default','AIPRD_QTYLEFT')}" visible="true"></s:GridColumn>
								</s:source>
							</s:ArrayList>
						</s:columns>
						<!--s:dataProvider>
						<s:AsyncListView list="{allocationItemGrid.selectedItem.aitem_periods}"/>
						</s:dataProvider-->
					</s:DataGrid>
				</s:VGroup>
				
			</s:HGroup>
			
		</s:VGroup>
		
		<s:Spacer height="0" />
		
		<s:HGroup width="100%" paddingBottom="4" paddingTop="0" gap="5">
			<s:Spacer width="100%"/>
			<components:DKI_Button id="btnAllocationPeriod" label="{resourceManager.getString('default','m_allocation_periods')}" height="100%" includeIn="edit,detail" type="default" visible="false" enabled="{this.canUpdate}" includeInLayout="false" click="goToAllocationPeriod();"/>
			<components:DKI_Button id="btnSchedule" label="View Schedule" height="100%" includeIn="edit,detail" type="default" visible="false" includeInLayout="false" click="goToViewSchedule();"/>
			<components:DKI_Button id="btnMakeTransaction" label="Make Transaction" height="100%" includeIn="edit,detail" type="default" visible="false" includeInLayout="false" enabled="{this.canCreate}" click="goToMakeTransaction();"/>
			<components:DKI_Button id="btn_transaction" label="View Transactions" height="100%" click="goToTransaction()" includeIn="detail" enabled="true" visible="false" includeInLayout="false" type="report"/>
			<components:DKI_Button id="btn_reset" label="{resourceManager.getString('default','RESET')}" height="100%" click="doReset()" includeIn="edit" enabled="{this.canUpdate}" type="save"/>
			<components:DKI_Button id="btn_delete" label="{resourceManager.getString('default','DELETE')}" height="100%" click="doDelete()" includeIn="edit" enabled="{this.canDelete}" type="delete"/>
			<components:DKI_Button id="btn_save" label.create="{resourceManager.getString('default','SAVE')}" label="{resourceManager.getString('default','UPDATE')}" height="100%" includeIn="edit,create,detail" enabled.create="{this.canCreate}" enabled="{this.canUpdate}" type.create="create" type="edit"/>
			<components:DKI_Button id="btn_cancel" label="{resourceManager.getString('default','CANCEL')}" height="100%" click="cancel_clickHandler()" enabled="true" type="cancel"/>
		</s:HGroup>
	</s:Panel>
	
</s:VGroup>
