<?xml version="1.0" encoding="utf-8"?>
<s:VGroup xmlns:fx="http://ns.adobe.com/mxml/2009"
		  xmlns:s="library://ns.adobe.com/flex/spark"
		  xmlns:mx="library://ns.adobe.com/flex/mx"
		  xmlns:skins="skins.*"
		  xmlns:components="components.*"
		  xmlns:domainservice="services.domainservice.*"
		  xmlns:rolebasedaccesscontrolservice="services.rolebasedaccesscontrolservice.*"
		  width="850" height="600" creationComplete="vGroup_creationCompleteHandler(event)"
		  currentState="widget"
		  width.widget="100%" height.widget="100%" paddingBottom="2" paddingLeft="2" paddingRight="2" paddingTop="2" >
	
	<s:states>
		<s:State name="widget"/>
		<s:State name="normal"/>
	</s:states>
	
	<fx:Script>
		<![CDATA[
			import com.adobe.serializers.utility.TypeUtility;
			
			import mx.collections.ArrayCollection;
			import mx.collections.HierarchicalData;
			import mx.controls.Alert;
			import mx.events.AdvancedDataGridEvent;
			import mx.events.CollectionEvent;
			import mx.events.DataGridEvent;
			import mx.events.FlexEvent;
			import mx.rpc.events.ResultEvent;
			import mx.rpc.xml.SimpleXMLEncoder;
			
			import spark.events.GridSelectionEvent;
			import spark.events.IndexChangeEvent;
			
			[Bindable] private var secureArr:ArrayCollection = new ArrayCollection();
			[Bindable] private var moduleArr:ArrayCollection = new ArrayCollection();
			[Bindable] private var widgetArr:ArrayCollection = new ArrayCollection();
			[Bindable] private var roleArr:ArrayCollection = new ArrayCollection();
			
			private var domain:String="";
			private var module:String="";
			
			[Bindable] public var readOnly:Boolean = false;
			[Bindable] public var canUpdate:Boolean = false;
			[Bindable] public var canCreate:Boolean = false;
			[Bindable] public var canDelete:Boolean = false;
			[Bindable] public var hasPassword:Boolean = false;
			
			private var selectedRole:ArrayCollection = new ArrayCollection();
			
			private var si:int=-1;
			private var objectID:String;
			
			protected function vGroup_creationCompleteHandler(event:FlexEvent):void
			{
				moduleArr.filterFunction = module_filterFunc;
				widgetArr.filterFunction = widget_filterFunc;
				roleArr.filterFunction = role_filterFunc;
				secureArr.addEventListener(CollectionEvent.COLLECTION_CHANGE,secureArr_Changed);
				getMenuMainResult.token = domainService.getMenuMain();
				addEventListener('privilegeChanged',changePrivileges);
			}
			
			protected function getMenuMainResult_resultHandler(event:ResultEvent):void
			{
				for (var i:int=0; i < getMenuMainResult.lastResult.length; i++)
				{
					var obj:Object = 
						{
							object_id: getMenuMainResult.lastResult[i].object_id,
								domain_id:getMenuMainResult.lastResult[i].domain_id,
								object_text:getMenuMainResult.lastResult[i].object_text,
								object_parent_id:getMenuMainResult.lastResult[i].object_parent_id,
								modules:Object,
								priv_create:false,
								priv_read:false,
								priv_update:false,
								priv_delete:false,
								priv_protect:false
						}
					secureArr.addItem(obj);
				}
				getMenuItemsResult.token = domainService.getMenuItems();
				trace("--->menu fetched");
			}
			
			protected function getMenuItemsResult_resultHandler(event:ResultEvent):void
			{
				moduleArr.source = getMenuItemsResult.lastResult.source;
				widgetArr.source = getMenuItemsResult.lastResult.source;
				for(var i:int=0; i < secureArr.length; i++)
				{
					domain=secureArr[i].domain_id;
					moduleArr.refresh();
					secureArr[i].modules=new ArrayCollection();
					for(var j:int=0;j < moduleArr.length;j++)
					{
						var objModule:Object = 
							{
								domain_id:domain,
								object_id:moduleArr[j].object_id,
									object_text:moduleArr[j].object_text,
									modules:new ArrayCollection(),
									priv_create:false,
									priv_read:false,
									priv_update:false,
									priv_delete:false,
									priv_protect:false
							}
						
						module = moduleArr[j].object_id;
						widgetArr.refresh();
						for(var k:int=0;k < widgetArr.length; k++)
						{
							var objWidget:Object =
								{
									domain_id:domain,
									object_id:widgetArr[k].object_id,
										object_text:widgetArr[k].object_text,
										priv_create:false,
										priv_read:false,
										priv_update:false,
										priv_delete:false,
										priv_protect:false
								}
							objModule.modules.addItem(objWidget);
						}
						secureArr[i].modules.addItem(objModule);
					}
				}
				
				secureArr.refresh();		
			}
			
			protected function module_filterFunc(item:Object):Boolean
			{
				if (item.domain_id == domain && item.object_parent_id == 0)                
				{ 
					return true     
				}
				else
					return false;
			}
			
			protected function widget_filterFunc(item:Object):Boolean
			{
				if (item.object_parent_id == module)                
				{ 
					return true     
				}
				else
					return false;
			}
			
			protected function savePrivileges(): void
			{
				var role_code:String = rc.text;
				var role_name:String = ta.text;
				var role_note:String = "Davids Test";
				var privileges:Object = Object({domainprivileges:new ArrayCollection()});
				
				for (var i:int=0; i < secureArr.length; i++)
				{
					var privArr: Object = getPrivArr(secureArr[i]);
					privArr.domain_id =	secureArr[i].domain_id;
					privArr.object_id =	secureArr[i].object_id;
					privileges.domainprivileges.addItem(privArr);
					
					for (var j:int=0; j < secureArr[i].modules.length; j++)
					{
						var privArr1: Object = getPrivArr(secureArr[i].modules[j]);
						privArr1.domain_id =	secureArr[i].modules[j].domain_id;
						privArr1.object_id =	secureArr[i].modules[j].object_id;
						privileges.domainprivileges.addItem(privArr1);
						for (var k:int=0; k < secureArr[i].modules[j].modules.length; k++)
						{
							var privArr2: Object = getPrivArr(secureArr[i].modules[j].modules[k]);
							privArr2.domain_id =	secureArr[i].modules[j].modules[k].domain_id;
							privArr2.object_id =	secureArr[i].modules[j].modules[k].object_id;
							privileges.domainprivileges.addItem(privArr2);
						}
					}
				}
				
				//createRoleResult.token = roleBasedAccessControlService.createRole(role_code,role_name, role_note, privileges);
				trace("roles done:"+String(privileges.length));
			}
			
			private function getPrivArr(param:Object):Object
			{
				var obj:Object =
					{
						priv_protect: (param.priv_protect == true)?1:0,
							priv_view: (param.priv_view == true)?1:0,
							priv_update: (param.priv_update == true)?1:0,
							priv_create: (param.priv_create == true)?1:0,
							priv_delete: (param.priv_delete == true)?1:0,
							domain_id:'',
							object_id:''
					}
				return obj;
			}
			
			protected function button3_clickHandler(event:MouseEvent):void
			{
				savePrivileges();
			}
			
			
			protected function list_creationCompleteHandler(event:FlexEvent):void
			{
				//getRolesResult.token = roleBasedAccessControlService.getRoles();
			}
			
			protected function createRoleResult_resultHandler(event:ResultEvent):void
			{
				Alert.show(event.result as String,"Message");
				//getRolesResult.token = roleBasedAccessControlService.getRoles();
			}
			
			protected function changePrivileges(event:TextEvent):void
			{
				secureArr.refresh();
			}
			
			protected function adg1_sortHandler(event:AdvancedDataGridEvent):void
			{
				event.stopImmediatePropagation();
				var privCondition:Boolean = false;
				if (si != -1)
				{	
					var fieldName:String = "null";
					switch(event.columnIndex)
					{
						case 1: fieldName = 'priv_create';
							break;
						case 2: fieldName = 'priv_view';
							break;
						case 3: fieldName = 'priv_update';
							break;
						case 4: fieldName = 'priv_delete';
							break;
						case 5: fieldName = 'priv_protect';
							break;
					}
					
					if (fieldName != 'null')
					{	
						hd.source = null;
						privCondition = secureArr[si][fieldName];
						secureArr[si][fieldName] = !privCondition;
						for (var j:int=0; j < secureArr[si].modules.length; j++)
						{
							secureArr[si].modules[j][fieldName] = !privCondition;
							for (var k:int=0; k < secureArr[si].modules[j].modules.length; k++)
								secureArr[si].modules[j].modules[k][fieldName] = !privCondition;
						}
						hd.source = secureArr;
					}
				}
			}
			
			protected function secureArr_Changed(event:CollectionEvent):void
			{
				var obj:Object = adg1.selectedItem;
			}
			
			protected function button5_clickHandler(event:MouseEvent):void
			{
				//getRoleDataResult.token = roleBasedAccessControlService.getRoleData("R000030");
			}
			
			
			protected function hGroup_creationCompleteHandler(event:FlexEvent):void
			{
			}
			
			protected function getRoleDataResult_resultHandler(event:ResultEvent):void
			{
				roleArr.source = event.result.domainprivilege.source;
				setRole();
				trace("role retrieved");
			}
			
			
			protected function role_filterFunc(item:Object):Boolean
			{
				if (item.object_id == objectID)                
				{ 
					return true     
				}
				else
					return false;
			}
			
			protected function setRole(): void
			{
				for(var i:int=0; i < secureArr.length; i++)
				{
					objectID=secureArr[i].object_id;
					roleArr.refresh();
					if (roleArr.length != 0)
					{
						secureArr[i].priv_create = roleArr[0].priv_create;
						secureArr[i].priv_view = roleArr[0].priv_view;
						secureArr[i].priv_delete = roleArr[0].priv_delete;
						secureArr[i].priv_update = roleArr[0].priv_update;
						secureArr[i].priv_protect = roleArr[0].priv_protect;
					}
					else
					{
						secureArr[i].priv_create = false;
						secureArr[i].priv_view = false;
						secureArr[i].priv_delete = false;
						secureArr[i].priv_update = false;
						secureArr[i].priv_protect = false;
					}
					for(var j:int=0;j < secureArr[i].modules.length;j++)
					{
						objectID=secureArr[i].modules[j].object_id;
						roleArr.refresh();
						if (roleArr.length != 0)
						{
							secureArr[i].modules[j].priv_create = roleArr[0].priv_create;
							secureArr[i].modules[j].priv_view = roleArr[0].priv_view;
							secureArr[i].modules[j].priv_delete = roleArr[0].priv_delete;
							secureArr[i].modules[j].priv_update = roleArr[0].priv_update;
							secureArr[i].modules[j].priv_protect = roleArr[0].priv_protect;
						}
						else
						{
							secureArr[i].modules[j].priv_create = false;
							secureArr[i].modules[j].priv_view = false;
							secureArr[i].modules[j].priv_delete = false;
							secureArr[i].modules[j].priv_update = false;
							secureArr[i].modules[j].priv_protect = false;
						}
						for(var k:int=0;k < secureArr[i].modules[j].modules.length; k++)
						{
							objectID=secureArr[i].modules[j].modules[k].object_id;
							roleArr.refresh();
							if (roleArr.length != 0)
							{
								secureArr[i].modules[j].modules[k].priv_create = roleArr[0].priv_create;
								secureArr[i].modules[j].modules[k].priv_view = roleArr[0].priv_view;
								secureArr[i].modules[j].modules[k].priv_delete = roleArr[0].priv_delete;
								secureArr[i].modules[j].modules[k].priv_update = roleArr[0].priv_update;
								secureArr[i].modules[j].modules[k].priv_protect = roleArr[0].priv_protect;
							}
							else
							{
								secureArr[i].modules[j].modules[k].priv_create = false;
								secureArr[i].modules[j].modules[k].priv_view = false;
								secureArr[i].modules[j].modules[k].priv_delete = false;
								secureArr[i].modules[j].modules[k].priv_update = false;
								secureArr[i].modules[j].modules[k].priv_protect = false;
							}
						}
					}
				}
				
			}
			
		]]>
	</fx:Script>
	
	<fx:Declarations>
		<domainservice:DomainService id="domainService"
									 fault="Alert.show(event.fault.faultString + '\n' + event.fault.faultDetail)"
									 showBusyCursor="true"/>
		<s:CallResponder id="getMenuMainResult" result="getMenuMainResult_resultHandler(event)"/>
		<s:CallResponder id="getMenuItemsResult" result="getMenuItemsResult_resultHandler(event)"/>
		
	</fx:Declarations>
	
	<s:VGroup width="100%" height="100%">
		<s:HGroup width="100%" height="100%">
			<s:List id="list" width="250" height="100%" labelField="ROLE_TEXT">
				<!--<s:AsyncListView list="{getRolesResult.lastResult}"/>-->
			</s:List>
			<s:VGroup width="100%" height="100%">
				<mx:AdvancedDataGrid id="adg1" width="100%" height="400" sortExpertMode="true" sortableColumns="true" sort="adg1_sortHandler(event)" change="si=adg1.selectedIndex">
					<mx:dataProvider>
						<mx:HierarchicalData id="hd" source="{secureArr}" childrenField="modules"/>
					</mx:dataProvider>        
					<mx:columns>
						<mx:AdvancedDataGridColumn dataField="object_text" headerText="Configurable Items"/>
						<mx:AdvancedDataGridColumn width="70" headerText="create" dataField="priv_create" itemRenderer="renderers.RoleGridRenderer"/>
						<mx:AdvancedDataGridColumn width="70" headerText="read" dataField="priv_view" itemRenderer="renderers.RoleGridRenderer"/>
						<mx:AdvancedDataGridColumn width="70" headerText="update" dataField="priv_update" itemRenderer="renderers.RoleGridRenderer"/>
						<mx:AdvancedDataGridColumn width="70" headerText="delete" dataField="priv_delete" itemRenderer="renderers.RoleGridRenderer"/>
						<mx:AdvancedDataGridColumn width="70" headerText="password" dataField="priv_protect" itemRenderer="renderers.RoleGridRenderer"/>
					</mx:columns>
				</mx:AdvancedDataGrid>
			</s:VGroup>
		</s:HGroup>
		<s:HGroup id="hGroup" width="100%" height="22"
				  creationComplete="hGroup_creationCompleteHandler(event)">
			<s:Label height="100%" text="User ID" verticalAlign="middle"/>
			<s:TextInput id="ta1" prompt="9999" />
			<s:Spacer width="100%"/>
			<s:TextInput id="rc" text="R000012"/>
			<s:Label height="100%" text="Role Name" verticalAlign="middle"/>
			<s:TextInput id="ta" prompt="enter role name" />
			<s:Button label="Button" click="button5_clickHandler(event)"/>
			<s:Button label="Create" click="button3_clickHandler(event)"/>
		</s:HGroup>
	</s:VGroup>
</s:VGroup>
