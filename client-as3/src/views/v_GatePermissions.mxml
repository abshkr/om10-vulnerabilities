<?xml version="1.0" encoding="utf-8"?>
<s:VGroup xmlns:fx="http://ns.adobe.com/mxml/2009"
		  xmlns:s="library://ns.adobe.com/flex/spark"
		  xmlns:mx="library://ns.adobe.com/flex/mx"
		  xmlns:components="components.*"
		  creationComplete="creationCompleteHandler(event)"
		  gap="2" width="100%" height="100%">
	
	<s:states>
		<s:State name="normal" enterState="this.toolbar.enabled=true"/>
		<s:State name="widget" enterState="this.toolbar.enabled=true"/>
		<s:State name="edit" enterState="callLater(function():void{dataGrid.ensureCellIsVisible(idx);});ruleGrid.enabled=true;this.toolbar.enabled=false"/>
		<s:State name="create" enterState="ruleGrid.enabled=false;this.toolbar.enabled=false"/>
		<s:State name="detail" enterState="view_detailsHandler(event);ruleGrid.enabled=true;this.toolbar.enabled=false"/>
	</s:states>
	
	<fx:Script>
		<![CDATA[
			import com.adobe.fiber.runtime.lib.DateTimeFunc;
			
			import components.ActionDialog;
			import components.ConfirmDialog;
			import components.DeleteDialog;
			import components.ErrorDialog;
			import components.ExportData;
			import components.MessageDialog;
			import components.TransactionsDlg;
			import components.ViewPopupDlg;
			
			import dm.remoteBulkListService;
			import dm.remoteDataService;
			import dm.remoteListService;
			import dm.utils.tools;
			
			import flash.events.KeyboardEvent;
			import flash.globalization.LocaleID;
			
			import flashx.textLayout.container.ScrollPolicy;
			
			import mx.collections.ArrayCollection;
			import mx.controls.Alert;
			import mx.controls.DateField;
			import mx.events.FlexEvent;
			import mx.managers.PopUpManager;
			import mx.rpc.events.ResultEvent;
			import mx.utils.ObjectUtil;
			import mx.utils.StringUtil;
			import mx.validators.RegExpValidator;
			
			import renderers.DKI_HeaderColumn_Renderer;
			
			import spark.components.ToggleButton;
			import spark.components.VScrollBar;
			import spark.components.gridClasses.IGridItemRenderer;
			import spark.events.GridEvent;
			import spark.events.GridItemEditorEvent;
			import spark.events.GridSelectionEvent;
			import spark.events.IndexChangeEvent;
			
			
			public static const MAIN_WINDOW_WIDTH:int = 1500;
			public static const GP_PERSONNEL:String         			= "PERSONNEL|DEFAULT_PERSONNEL|PRM_PRSSNL";
			public static const GP_EQUIPMENT:String         			= "EQUIPMENT|DEFAULT_EQUIP|PRM_EQPT";
			public static const GP_EQPT_ANY:int=-999;
			
			
			[Bindable] public var readOnly:Boolean = false;
			[Bindable] public var canUpdate:Boolean = false;
			[Bindable] public var canCreate:Boolean = false;
			[Bindable] public var canDelete:Boolean = false;
			[Bindable] public var hasPassword:Boolean = false;
			
			[Bindable] public var labelWidth:uint = 140;
			[Bindable] public var labelHeight:uint = 26;
			[Bindable] public var fieldWidth:uint = 240;
			[Bindable] public var fieldHeight:uint = 26;
			[Bindable] public var spaceWidth:uint = 15;
			[Bindable] public var spaceHeight:uint = 2;
			
			private var idx:int=-1;
			
			private var currentFilter:String=null;
			private var currentOrder:String='prmssn_id';
			private var currentDirection:String="ASC";
			
			private var currentOffset:int=0;
			private var currentPageSize:int=1000;
			[Bindable] private var totalLength:int=0;
			[Bindable] private var currentLength:int=0;
			
			private var currentFields:Object=new Object();
			private var currentTypes:Object=new Object();
			//private var currentSorts:Object=new Object();
			//private var currentOrders:Object=new Object();
			private var currentSorts:Object={prmssn_id:'ASC'};
			private var currentOrders:Object={prmssn_id:1};
			private var currentSortSeq:int=0;
			
			
			private var confirmReport:ActionDialog;
			private var confirmSave:ActionDialog;
			private var errorDialog:ErrorDialog;
			
			//private var exportContents:String="";
			private var f:FileReference = new FileReference();
			
			
			//private var getData:Responder = new Responder(getData_resultHandler);
			
			//private var pagedRecords:ArrayCollection=new ArrayCollection();
			//private var pagedRecords:remoteDataService = new remoteDataService( "GatePermissionService.getPaged", getData, null );
			[Bindable] private var pagedRecords:remoteListService;
			
			[Bindable] private var gatePermissionRuleList:remoteDataService = new remoteDataService( "GatePermissionService.getGatePermissionRules", null, gatePermissionRuleList_resultHandler );

			private var alterAction:remoteDataService = new remoteDataService( "GatePermissionService.checkExpiryColumns", null, alterAction_resultHandler, 1 );

			private var deleteAction:remoteDataService = new remoteDataService( "GatePermissionService.delete", null, deleteData_resultHandler, 1 );
			private var createAction:remoteDataService = new remoteDataService( "GatePermissionService.create", null, createData_resultHandler, 1 );
			private var updateAction:remoteDataService = new remoteDataService( "GatePermissionService.update", null, updateData_resultHandler, 1 );
			private var updateGatePermissionTemplateAction:remoteDataService = new remoteDataService( "GatePermissionService.updateGatePermissionTemplate", null, updateGatePermissionTemplateData_resultHandler, 1 );
			
			private var gatePermissionKeyChecker:remoteDataService = new remoteDataService( "GatePermissionService.isGatePermissionExisted", null, gatePermissionKeyChecker_resultHandler, 2 );
			private var gatePermissionRuleKeyChecker:remoteDataService = new remoteDataService( "GatePermissionService.isGatePermissionRuleExisted", null, gatePermissionRuleKeyChecker_resultHandler, 2 );
			
			private var gatePermissionKeyMaker:remoteDataService = new remoteDataService( "GatePermissionService.getNextGatePermissionId", null, getNextGatePermissionKey_resultHandler, 1 );
			
			private var gridColumnSequenceMaker:remoteDataService = new remoteDataService( "ScreenGridColumnService.lookupGridColumnSequence", null, gridColumnSequenceMaker_resultHandler, 1 );
			private var _gridColumnSequenceString:String="";
			
			
			[Bindable] private var gatePermissionTypeList:remoteDataService = new remoteDataService( "GatePermissionService.lookupGatePermissionType", null, lookupGatePermissionType_resultHandler );
			
			[Bindable] private var gateList:remoteDataService = new remoteDataService( "ListLibraryService.lookupGate", null, lookupGate_resultHandler );
			[Bindable] private var authTypeList:remoteDataService = new remoteDataService( "ListLibraryService.lookupAuthType", null, lookupAuthType_resultHandler );
			[Bindable] private var eqptTypeList:remoteDataService = new remoteDataService( "ListLibraryService.lookupEqptType", null, lookupEqptType_resultHandler );
			[Bindable] private var dynAuthTypeList:ArrayCollection = new ArrayCollection();
			[Bindable] private var dynEqptTypeList:ArrayCollection = new ArrayCollection();
			
			
			public var parentParams:Object = new Object();
			public var mainListSelection:int = -1;
			private var _saveButtonClicked:Boolean=false;
			
			public var isPopupWindow:Boolean=false;
			
			public var gatePermissionTemplateString:String="";
			public var gatePermissionTemplateArray:Array=new Array();
			
			public var eqptUsed:Array = new Array();
			public var psnlUsed:Array = new Array();
			

			
			protected function creationCompleteHandler(event:FlexEvent):void
			{
				trace ("-------------start creationCompleteHandler");
				
				this.alterAction.service();
			}
			
			protected function alterAction_resultHandler( ):void
			{
				this.startWindow();
			}
			
			protected function startWindow():void
			{
				trace ("-------------start creationCompleteHandler");
				pagedRecords = new remoteListService( this.dataGrid, "GatePermissionService.getPaged", null, getPageData_resultHandler );
				//resourceManager.localeChain = ['zh_CN'];
				//global.LanguageCode="CHN";
				this.gridColumnSequenceMaker.service( "GATEPERMISSIONS" );
				
				
				var value:String = global.getValueFromSiteConfigSettings( "SITE_AUTO_FILTER_WHEN_OPEN_SCREEN" );
				if ( value == 'Y' )
				{
					if ( this.isPopupWindow == false )
					{
						this.startFiltering();
					}
				}
				else
				{
					;
				}
				
				// get the default gatePermission template
				this.getGatePermissionTemplate();
				
				this.gatePermissionTypeList.service( );
				this.gateList.service( );
				this.authTypeList.service( );
				this.eqptTypeList.service( );
				
				trace ("------------End creationCompleteHandler");
				
				
				//trace("this.grid.scroller1111", this.dataGrid.scroller);
				//trace("this.grid.scroller.verticalScrollBar.value", this.dataGrid.scroller.verticalScrollBar.value);
				this.dataGrid.scroller.verticalScrollBar.addEventListener(Event.CHANGE, verticalScrollBarChanged);
				this.dataGrid.addEventListener(KeyboardEvent.KEY_UP, reportKeyUp);
				this.dataGrid.columnHeaderGroup.addEventListener(GridEvent.GRID_CLICK, headerClickListener);
				
			}
			
			protected function getGatePermissionTemplate():void
			{
				gatePermissionTemplateString = global.getValueFromSiteConfigSettings("SITE_PERMISSION_TEMPLATE");
				gatePermissionTemplateString = StringUtil.trim( gatePermissionTemplateString );
				if ( gatePermissionTemplateString.length > 0 )
				{
					gatePermissionTemplateArray = gatePermissionTemplateString.split( "," );
				}
				else
				{
					gatePermissionTemplateArray = new Array();
				}
			}
			
			protected function startLoadingPages():void
			{
				killBtn.setStyle("chromeColor","0xff0000");
				this.killBtn.includeInLayout=true;
				this.killBtn.visible = true;
				this.killBtn.enabled = true;
				
				resumeBtn.setStyle("chromeColor","0x00ff00");
				this.resumeBtn.includeInLayout=true;
				this.resumeBtn.visible = true;
				this.resumeBtn.enabled = false;
				
				this.btn_create.enabled = false
				this.btn_export.enabled = false;
				this.dataGrid.enabled = false;
				this.toolbar.enabled = false;
				//this.panel.enabled = false;
				
				currentLength=0;
				currentOffset = 0;
				
				//this.exportContents = this.genData.prepExportHeader( dataGrid );
				
				//currentPage=1;
				pagedRecords.currentPage=1;
				pagedRecords.removeAll();
				pagedRecords.refresh();
				this.pb.values(0, 0);
				//this.pagedRecords.service( currentFields, currentTypes, currentSorts, currentOrders, currentPage, currentPageSize );
				this.pagedRecords.listService( currentFields, currentTypes, currentSorts, currentOrders );
			}
			
			protected function endLoadingPages():void
			{
				this.btn_create.enabled = this.canCreate;
				this.btn_export.enabled = true;
				this.dataGrid.enabled = true;
				this.toolbar.enabled = true;
				//this.panel.enabled = true;
				//this.pb.values(totalCount, totalCount);
				this.pb.values(pagedRecords.totalCount, pagedRecords.totalCount, true);
				
				this.killBtn.includeInLayout=true;
				this.killBtn.visible = true;
				this.killBtn.enabled = false;
				
				this.resumeBtn.includeInLayout=true;
				this.resumeBtn.visible = true;
				//if ( totalLength > totalCount )
				if ( pagedRecords.totalLength > pagedRecords.totalCount )
				{
					this.resumeBtn.enabled = true;
				}
				else
				{
					this.resumeBtn.enabled = false;
				}
				
				//this.fltr_permission.setFocus();
				var len:int = this.fltr_permission.text.length;
				this.fltr_permission.selectRange(len, len);
			}
			
			protected function exportCsvHandler(event:MouseEvent):void
			{
				this.confirmReport = new ActionDialog( doExport, cancelExport, resourceManager.getString('default','CONFIRM_REPORT_CSV') );
				
				//this.startLoadingPages();
			}
			
			private function getPageData_resultHandler():void
			{
				// if not finished
				if(pagedRecords.length < pagedRecords.totalCount)
				{
					pb.values(pagedRecords.length,pagedRecords.totalCount);
				}
				else
				{
					pb.values(pagedRecords.length,pagedRecords.totalCount);
					
					this.endLoadingPages();
					
					this.dataGrid.selectedIndex = this.mainListSelection;
					if ( this.mainListSelection >= 0)
					{
						this.dataGrid_selectionChangeHandler(null);
					}
					this.mainListSelection = -1;
					
				}
				
			}
			
			
			public function doExport():void
			{
				//genData.prepOther(dataGrid,'tankGrouplist.csv', this.pagedRecords);
				
				//f.save( this.exportContents, "tankGrouplist.csv" );
				f.save( pagedRecords.exportContents, "gatePermissionlist.csv" );
				
				this.endLoadingPages();
			}
			
			
			public function cancelExport():void
			{
				this.endLoadingPages();
				
				//trace( this.exportContents );
			}
			
			public function doNothing():void
			{
			}
			
			
			private function verticalScrollBarChanged(event:Event):void
			{
				if ( this.dataGrid.scroller != null)
				{
					var vs:VScrollBar;
					vs = this.dataGrid.scroller.verticalScrollBar;
					//trace("this.grid.scroller.verticalScrollBar.value", vs.value, vs.maximum, vs.minimum, vs.stepSize, vs.pageSize, vs.	snapInterval);
				}
				else
				{
					trace("grid is changed");
				}
			}
			
			private function reportKeyUp(event:KeyboardEvent):void
			{
				if ( this.dataGrid.scroller != null)
				{
					var vs:VScrollBar;
					vs = this.dataGrid.scroller.verticalScrollBar;
					//trace("this.grid.scroller.verticalScrollBar.value", vs.value, vs.maximum, vs.minimum, vs.stepSize, vs.pageSize, vs.	snapInterval);
				}
				else
				{
					trace("grid is changed");
				}
			}
			
			private function headerClickListener(event:GridEvent):void
			{
				if(event.column.dataField!='prod_items')
				{
					var currentRenderer:IGridItemRenderer;
					var dir:String;
					
					if ( global.sortingBySingleColumn == true )
					{	// sorted by single column only
						for (var i:int=0; i < dataGrid.columns.length; i++)
						{
							currentRenderer = dataGrid.columnHeaderGroup.getHeaderRendererAt(i);
							if ( currentRenderer != null)
							{
								(currentRenderer as DKI_HeaderColumn_Renderer).setImage('');
							}
							//(currentRenderer as DKI_HeaderColumn_Renderer).setImage(''); 
						}
					}
					else
					{	// sorted by multiple columns
						;
					}
					currentRenderer = dataGrid.columnHeaderGroup.getHeaderRendererAt(event.columnIndex);
					
					if( currentSorts.hasOwnProperty(event.column.dataField ) )
					{
						dir = currentSorts[event.column.dataField];
						if( dir=="ASC" )
						{
							dir = "DESC";
						}
						else if ( dir == "DESC" )
						{
							dir = "";
						}
						else if ( dir == "" )
						{
							dir = "ASC";
						}
						else 
						{
							dir = "ASC";
						}
						
						if ( dir != "" )
						{
							currentSorts[event.column.dataField] = dir;	
						}
						else
						{
							delete currentSorts[event.column.dataField];
							delete currentOrders[event.column.dataField];
						}
					}
					else
					{
						if ( global.sortingBySingleColumn == true )
						{	// sorted by single column only
							currentSorts = new Object();
							currentOrders = new Object();
							currentSortSeq = 0;
						}
						else
						{	// sorted by multiple columns
							;
						}
						currentSorts[event.column.dataField] = "ASC";	
						dir = currentSorts[event.column.dataField];
						currentSortSeq += 1;
						currentOrders[event.column.dataField] = currentSortSeq;	
					}
					(currentRenderer as DKI_HeaderColumn_Renderer).setImage(dir);
					this.startFiltering();
				}
			}
			
			
			protected function gatePermissionRuleList_resultHandler():void
			{
				trace ("--------------Start gatePermissionRuleList_resultHandler");
				
				if ( gatePermissionRuleList.length>0 )
				{
					this.ruleGrid.dataProvider = null;
					this.ruleGrid.dataProvider = gatePermissionRuleList;
				}
				else
				{
					this.ruleGrid.dataProvider = null;
				}
				
				trace ("----------------End gatePermissionRuleList_resultHandler");
			}
			
			protected function dataGrid_selectionChangeHandler(event:GridSelectionEvent):void
			{
				if(currentState != 'widget')
				{
					idx=dataGrid.selectedIndex;
					//dataGrid.ensureCellIsVisible(idx+11);
					dataGrid.ensureCellIsVisible(idx);
					
					currentState = "edit";
					this.btn_save.enabled = this.canUpdate;
					
					// get the tank group item details
					this.btn_createRule.enabled = true;
					this.btn_deleteRule.enabled = false;
					this.btn_updateRule.enabled = false;
					
					this.gatePermissionRuleList.service( dataGrid.selectedItem.prmssn_id  );
				}
			}
			
			protected function ruleGrid_selectionChangeHandler(event:GridSelectionEvent):void
			{
				if ( ruleGrid.selectedIndex < 0 )
				{
					this.btn_deleteRule.enabled = false;
					this.btn_updateRule.enabled = false;
					return;
				}
				
				tools.pr( ruleGrid.selectedItem );
				
				if ( ruleGrid.selectedItem.rule_action == '+' )
				{
					this.btn_deleteRule.enabled = true;
					this.btn_updateRule.enabled = false;
				}
				else if ( ruleGrid.selectedItem.rule_action == '-' )
				{
					this.btn_deleteRule.enabled = true;
					this.btn_updateRule.enabled = false;
				}
				else if ( ruleGrid.selectedItem.rule_action == '*' )
				{
					this.btn_deleteRule.enabled = true;
					this.btn_updateRule.enabled = false;
				}
				else
				{
					this.btn_deleteRule.enabled = true;
					this.btn_updateRule.enabled = true;
				}
				
				trace( "ruleGrid.selectedItem", ruleGrid.selectedItem );

				var rule_first:int=int(ruleGrid.selectedItem.rule_first);
				var rule_parent:int=int(ruleGrid.selectedItem.rule_parent);
				var rule_id:int=int(ruleGrid.selectedItem.rule_id);
				
				if ( rule_first == 1 )
				{
					//gatePermissionKeyChecker.service( rule_parent );
				}
				else
				{
					gatePermissionRuleKeyChecker.service( rule_id, rule_parent );
				}
			}
			
			protected function cancel_clickHandler():void
			{
				clearDetail();
				if ( currentState== "create" )
				{
					dataGrid.enabled=true;
				}
				currentState="normal";
				dataGrid.selectedIndex = -1;
			}			
			
			protected function gridColumnSequenceMaker_resultHandler():void
			{
				this._gridColumnSequenceString =  gridColumnSequenceMaker.dataString;
				
				if ( _gridColumnSequenceString.length > 0 )
				{
					global.adjustGridColumnSequence( _gridColumnSequenceString.substr(1), dataGrid );
				}
				
			}
			
			private function lookupGate_resultHandler():void
			{
				//global.contactRuleTypes = new ArrayCollection( this.gatePermissionTypeList.source );
			}
			
			private function lookupAuthType_resultHandler():void
			{
				// try to put ANY in first line
				var obj:Object=new Object();
				for ( var i:int=0; i<this.authTypeList.source.length; i++ )
				{
					obj = this.authTypeList.source[i];
					if ( obj.role_id == 999 )
					{
						this.authTypeList.removeItemAt(i);
						break;
					}
				}
				this.authTypeList.addItemAt( obj, 0 );

				global.authTypes = new ArrayCollection( this.authTypeList.source );
			}
			
			private function lookupEqptType_resultHandler():void
			{
				// try to put ANY in first line
				var obj:Object=new Object();
				for ( var i:int=0; i<this.eqptTypeList.source.length; i++ )
				{
					obj = this.eqptTypeList.source[i];
					if ( obj.etyp_id == GP_EQPT_ANY )
					{
						this.eqptTypeList.removeItemAt(i);
						break;
					}
				}
				var any_obj:Object = ObjectUtil.clone( obj );
				any_obj['etyp_id'] = GP_EQPT_ANY;
				any_obj['etyp_title'] = resourceManager.getString('default','RULE_ANY');
				this.eqptTypeList.addItemAt( any_obj, 0 );
				
				global.eqptTypes = new ArrayCollection( this.eqptTypeList.source );
			}
			
			private function lookupGatePermissionType_resultHandler():void
			{
				global.ruleTypes = new ArrayCollection( this.gatePermissionTypeList.source );
			}

			
			protected function fltr_gate_changeHandler(event:IndexChangeEvent):void
			{
				if (currentState == "edit") clearDetail();
				startFiltering();
			}
			
			protected function fltr_permission_keyUpHandler(event:KeyboardEvent):void
			{
				if ( event.keyCode != 13 )
				{
					return;
				}
				if (currentState == "edit") clearDetail();
				this.filterBtn.setFocus();
				startFiltering();
			}
			
			private function startFiltering():void
			{
				var fields:Object;
				var types:Object;
				
				//interruptor=false;
				pagedRecords.interruptor=false;
				
				fields = new Object();
				types = new Object();
				
				if (fltr_gate.selectedIndex > -1) 
				{
					fields["prmssn_gate"] = gateList[fltr_gate.selectedIndex].gate_k;
				}
				else
				{
					if ( global.setComboBoxNoSelection == true )
					{
						fltr_gate.selectedIndex = -1;
					}
					fields["prmssn_gate"] = "";
				}
				types["prmssn_gate"] = "EXACT_STRING";
				
				
				if(fltr_permission.text!='')
				{					
					fields["prmssn_name"] = fltr_permission.text;
				}
				else
				{
					fields["prmssn_name"] = "";
				}
				types["prmssn_name"] = "STRING";
				
				currentFields = fields;
				currentTypes = types;
				
				this.startLoadingPages();
				
				trace("this.grid.scroller3333", this.dataGrid.scroller);
				trace("this.grid.scroller.verticalScrollBar.value", this.dataGrid.scroller.verticalScrollBar.value);
			}
			
			private function findByPrimaryKey(key:int):void
			{
				var fields:Object;
				var types:Object;
				
				fields = new Object();
				types = new Object();
				
				fields["prmssn_id"] = key;
				types["prmssn_id"] = "NUMBER";
				
				//currentPage=1;
				pagedRecords.currentPage=1;
				pagedRecords.removeAll();
				pagedRecords.refresh();
				//this.pagedRecords.service( fields, types, currentSorts, currentOrders, currentPage, currentPageSize );
				this.pagedRecords.listService( fields, types, currentSorts, currentOrders );
			}
			
			private function findByName(key:String):void
			{
				var fields:Object;
				var types:Object;
				
				fields = new Object();
				types = new Object();
				
				fields["prmssn_name"] = key;
				types["prmssn_name"] = "EXACT_STRING";
				
				//currentPage=1;
				pagedRecords.currentPage=1;
				pagedRecords.removeAll();
				pagedRecords.refresh();
				//this.pagedRecords.service( fields, types, currentSorts, currentOrders, currentPage, currentPageSize );
				this.pagedRecords.listService( fields, types, currentSorts, currentOrders );
			}
			
			protected function filterRecords(event:MouseEvent):void
			{
				if (currentState == "edit") clearDetail();
				this.startFiltering();
			}
			
			protected function refreshRecords(event:MouseEvent):void
			{
				if ( currentState != "widget" )
				{
					currentState = 'normal';
					dataGrid.enabled=true;
				}
				clearDetail();
				fltr_gate.selectedIndex = -1;
				fltr_permission.text = "";
				
				dataGrid.selectedIndex = -1;
				currentFilter = null;
				currentOrder = null;
				currentFields = new Object();
				currentTypes = new Object();
				
				currentSorts = new Object();
				currentOrders = new Object();
				var currentRenderer:IGridItemRenderer;
				for (var i:int=0; i < dataGrid.columns.length; i++)
				{
					currentRenderer = dataGrid.columnHeaderGroup.getHeaderRendererAt(i);
					if ( currentRenderer != null)
					{
						(currentRenderer as DKI_HeaderColumn_Renderer).setImage('');
					}
					//(currentRenderer as DKI_HeaderColumn_Renderer).setImage(''); 
				}
				this.startFiltering();
				//this.startLoadingPages();
				trace("this.grid.scroller2222", this.dataGrid.scroller);
				trace("this.grid.scroller.verticalScrollBar.value", this.dataGrid.scroller.verticalScrollBar.value);
			}
			
			protected function clearDetail(): void
			{
				if (currentState != 'widget')
				{
				}
			}			
			
			private function editRecord():void
			{
				
				if ( this.checkFields() > 0 )
				{
					this.btn_save.enabled = this.canUpdate;
					return;
				}
				
				if ( this.checkItemFields() == false )
				{
					this.btn_save.enabled = this.canUpdate;
					return;
				}
				
				var first_rule:Object = new Object();
				if ( this.ruleGrid.dataProviderLength == 0 )
				{
					var errorBox2:MessageDialog = new MessageDialog( resourceManager.getString('default','ALERT__GATEPERMISSION_FIRSTRULE') );
					this.btn_save.enabled = this.canCreate;
					return;
				}
				else
				{
					first_rule = this.ruleGrid.dataProvider.getItemAt(0);
				}
				
				var obj:Object = new Object();

				// prepare the header and first rule
				//$data->prmssn_name, $data->prmssn_gate, $data->prmssn_case, $data->prmssn_auth, $data->prmssn_etyp, $data->prmssn_id				
				obj.prmssn_id 			= prmssn_id.text;
				obj.prmssn_name 		= prmssn_name.text;
				
				if (prmssn_gate.selectedIndex>=0)
				{
					obj.prmssn_gate = gateList[prmssn_gate.selectedIndex].gate_k;
				}
				else
				{
					obj.prmssn_gate = dataGrid.selectedItem.adv_device;
				}
				obj.prmssn_expiry_check = first_rule.rule_expiry_check;
				
				obj.prmssn_case = first_rule.rule_case;
				if ( first_rule.rule_case == GP_PERSONNEL || ( String(first_rule.rule_case).length>0 && GP_PERSONNEL.indexOf(first_rule.rule_case)>=0 )  )
				{
					obj.prmssn_etyp = null;
					if( 999 == first_rule.rule_auth || first_rule.rule_auth == null || -1 == first_rule.rule_auth )
					{
						obj.prmssn_case = "DEFAULT_PERSONNEL";
					}
					else 
					{
						obj.prmssn_case = "PRM_PRSSNL";
					}
					obj.prmssn_auth = first_rule.rule_auth;
				}
				else 
				{
					obj.prmssn_auth = -1;
					if( GP_EQPT_ANY == first_rule.rule_etyp || first_rule.rule_etyp == null || -1 == first_rule.rule_etyp )
					{
						obj.prmssn_case = "DEFAULT_EQUIP";
						obj.prmssn_etyp = null;
					}
					else 
					{
						obj.prmssn_case = "PRM_EQPT";
						obj.prmssn_etyp = first_rule.rule_etyp;
					}
				}
				
				obj.has_items = 0;
				var items:ArrayCollection=new ArrayCollection();
				var x:Object;
				var actions:ArrayCollection=new ArrayCollection();
				var action:Object;
				for each ( x in this.ruleGrid.dataProvider)
				{
					if ( x.rule_first == 1 )
					{
						continue;
					}
					
					action = new Object();
					action.option = 0;  // do nothing
					trace( "********X", x.rule_id, x.rule_case, x.rule_action);
					
					if ( x.rule_action == '+' )
					{
						action.option = 1;
					}
					else if ( x.rule_action == '*' )
					{
						action.option = 2;
					}
					else if ( x.rule_action == '-' )
					{
						action.option = 3;
					}
					else
					{
						action.option = 0;
					}
					actions.addItem(action);
					
					if ( action.option == 1 )
					{
						x.rule_parent = obj.prmssn_id;
					}
					
					
					// $sql['sql_data'] = array( $next_seq, $data->prmt_class, $data->prmt_auth, $data->prmt_etp, $data->prmt_prmssn, ($next_seq%1000) );
					// $sql['sql_data'] = array( $data->prmt_class, $data->prmt_auth, $data->prmt_etp, $data->prmt_k, $data->prmt_prmssn );
					var ruleObj:Object=new Object();
					ruleObj.prmt_k 			= x.rule_id;
					ruleObj.prmt_class 		= x.rule_case;
					ruleObj.prmt_etp 		= x.rule_etyp;
					ruleObj.prmt_auth 		= x.rule_auth;
					ruleObj.prmt_prmssn 	= x.rule_parent;
					ruleObj.prmt_expiry_check 	= x.rule_expiry_check;
					
					if ( ruleObj.prmt_class == GP_PERSONNEL || ( String(ruleObj.prmt_class).length>0 && GP_PERSONNEL.indexOf(ruleObj.prmt_class)>=0 ) )
					{
						ruleObj.prmt_etp = null;
						if( 999 == ruleObj.prmt_auth || ruleObj.prmt_auth == null || -1 == ruleObj.prmt_auth )
						{
							ruleObj.prmt_class = "DEFAULT_PERSONNEL";
						}
						else 
						{
							ruleObj.prmt_class = "PRM_PRSSNL";
						}
					}
					else 
					{
						ruleObj.prmt_auth = -1;
						if( GP_EQPT_ANY == ruleObj.prmt_etp || ruleObj.prmt_etp == null || -1 == ruleObj.prmt_etp )
						{
							ruleObj.prmt_class = "DEFAULT_EQUIP";
							ruleObj.prmt_etp = null;
						}
						else 
						{
							ruleObj.prmt_class = "PRM_EQPT";
						}
					}
					
					items.addItem( ruleObj );
					obj.has_items = 1;
					trace( "********X", x.rule_id, x.rule_case, "***********action", action.option);
				}
				obj.gp_items = items.source;
				obj.actions = actions.source;
				
				//nc.call( 'GatePermissionService.update', updateData, obj );
				updateAction.service( obj );
			}
			
			protected function updateData_resultHandler( ):void
			{
				clearDetail();
				if ( this.updateAction.dataString == "OK" )
				{
					global.msgSuccess(resourceManager.getString('default','MSG_UPDATE__SUCCESS'));
				}
				else
				{
					global.msgFail(resourceManager.getString('default','ERROR_UPDATE__FAILURE'));
				}
				
				var key:int;
				key = int(prmssn_id.text);
				
				currentState="normal";
				findByPrimaryKey( key );

				dataGrid.selectedIndex = -1;
				dataGrid.enabled=true;
			}
			
			private function editGatePermissionTemplate():void
			{
				
				this.gatePermissionTemplateString = "";				
				
				for each ( var x:Object in this.ruleGrid.dataProvider)
				{
					if ( this.gatePermissionTemplateString.length > 0 )
					{
						this.gatePermissionTemplateString += ",";	
					}
					
					this.gatePermissionTemplateString += String(x.db_addr_rule_type);
				}

				updateGatePermissionTemplateAction.service( this.gatePermissionTemplateString );
			}
			
			protected function updateGatePermissionTemplateData_resultHandler( ):void
			{
				//clearDetail();
				if ( this.updateGatePermissionTemplateAction.dataString == "OK" )
				{
					global.msgSuccess(resourceManager.getString('default','ALERT__OK__SET_PERMISSION_TEMPLATE'));
					global.setValueIntoSiteConfigSettings( 'SITE_PERMISSION_TEMPLATE', gatePermissionTemplateString );
				}
				else
				{
					global.msgFail(resourceManager.getString('default','ALERT__ER__SET_PERMISSION_TEMPLATE'));
				}
				
				this.getGatePermissionTemplate();
			}
			
			private function doDelete(): void
			{
				var errors:String="";
				var index:int=0;
				
				
				/*
				TODO - is this product used by other records?
				*/
				if ( index > 0 )
				{
					var errorBox:MessageDialog = new MessageDialog( errors );
				}
				else
				{
					var canDelete:DeleteDialog = new DeleteDialog(deleteRecord, hasPassword);
				}
			}
			
			private function deleteRecord():void
			{
				var obj:Object = new Object();
				
				obj.prmssn_id 			= prmssn_id.text;
				obj.prmssn_name 		= prmssn_name.text;

				deleteAction.service( obj );
			}
			
			protected function deleteData_resultHandler( ):void
			{
				clearDetail();
				if ( this.deleteAction.dataString == "OK" )
				{
					global.msgSuccess(resourceManager.getString('default','MSG_DELETE__SUCCESS'));
				}
				else
				{
					global.msgFail(resourceManager.getString('default','ERROR_DELETE__FAILURE'));
				}
				
				currentState="normal";
				this.startFiltering();
				dataGrid.selectedIndex = -1;
			}
			
			private function checkGatePermissionKey():void
			{
				gatePermissionKeyChecker.service( this.prmssn_id.text );
				
				//this.gatePermissionKeyMaker.service();
			}
			
			protected function gatePermissionKeyChecker_resultHandler( ):void
			{
				if ( gatePermissionKeyChecker.dataInteger > 0 )
				{
					global.msgWarning( resourceManager.getString('default','ALERT__GATEPERMISSION_EXIST') );
					this.btn_save.enabled = this.canCreate;
				}
				else
				{
					if ( this._saveButtonClicked == true )
					{
						this.createRecord();
					}
				}
				
				this._saveButtonClicked = false;
				
			}
			
			protected function gatePermissionRuleKeyChecker_resultHandler( ):void
			{
				if ( gatePermissionRuleKeyChecker.dataInteger > 0 )
				{
					//global.msgWarning( resourceManager.getString('default','ALERT__TANKGROUP_ITEM_EXIST') );
				}
			}
			
			private function checkFields():int
			{
				var errors:String="";
				var index:int=0;
				
				// TODO.....
				
				if ( index > 0 )
				{
					var errorBox:MessageDialog = new MessageDialog( errors );
				}
				
				return index;
			}
			
			private function createRecord():void
			{
				var prod_num:int;
				
				prod_num = gatePermissionKeyChecker.dataInteger;
				if ( prod_num > 0 )
				{
					var errorBox:MessageDialog = new MessageDialog( resourceManager.getString('default','ALERT__GATEPERMISSION_EXIST') );
					this.btn_save.enabled = this.canCreate;
					return;
				}
				
				if ( this.checkFields() > 0 )
				{
					this.btn_save.enabled = this.canCreate;
					return;
				}
				
				if ( this.checkItemFields() == false )
				{
					this.btn_save.enabled = this.canCreate;
					return;
				}
				
				
				var first_rule:Object = new Object();
				if ( this.ruleGrid.dataProviderLength == 0 )
				{
					var errorBox2:MessageDialog = new MessageDialog( resourceManager.getString('default','ALERT__GATEPERMISSION_FIRSTRULE') );
					this.btn_save.enabled = this.canCreate;
					return;
				}
				else
				{
					first_rule = this.ruleGrid.dataProvider.getItemAt(0);
				}
				
				var obj:Object = new Object();
				
				// prepare the header and first rule
				//$data->prmssn_name, $data->prmssn_gate, $data->prmssn_case, $data->prmssn_auth, $data->prmssn_etyp, $data->prmssn_id				
				obj.prmssn_id 			= prmssn_id.text;
				obj.prmssn_name 		= prmssn_name.text;
				
				if (prmssn_gate.selectedIndex>=0)
				{
					obj.prmssn_gate = gateList[prmssn_gate.selectedIndex].gate_k;
				}
				else
				{
					obj.prmssn_gate = "";
				}
				obj.prmssn_expiry_check = first_rule.rule_expiry_check;
				
				obj.prmssn_case = first_rule.rule_case;
				if ( first_rule.rule_case == GP_PERSONNEL || ( String(first_rule.rule_case).length>0 && GP_PERSONNEL.indexOf(first_rule.rule_case)>=0 )  )
				{
					obj.prmssn_etyp = null;
					if( 999 == first_rule.rule_auth || first_rule.rule_auth == null || -1 == first_rule.rule_auth )
					{
						obj.prmssn_case = "DEFAULT_PERSONNEL";
					}
					else 
					{
						obj.prmssn_case = "PRM_PRSSNL";
					}
					obj.prmssn_auth = first_rule.rule_auth;
				}
				else 
				{
					obj.prmssn_auth = -1;
					if( GP_EQPT_ANY == first_rule.rule_etyp || first_rule.rule_etyp == null || -1 == first_rule.rule_etyp )
					{
						obj.prmssn_case = "DEFAULT_EQUIP";
						obj.prmssn_etyp = null;
					}
					else 
					{
						obj.prmssn_case = "PRM_EQPT";
						obj.prmssn_etyp = first_rule.rule_etyp;
					}
					//obj.prmssn_etyp = first_rule.rule_etyp;
				}
				
				
				obj.has_items = 0;
				var items:ArrayCollection=new ArrayCollection();
				var x:Object;
				for each ( x in this.ruleGrid.dataProvider)
				{
					if ( x.rule_first == 1 )
					{
						continue;
					}
					
					trace( "********X", x.rule_id, x.rule_case );
					
					x.rule_parent = obj.prmssn_id;
					
					// $sql['sql_data'] = array( $next_seq, $data->prmt_class, $data->prmt_auth, $data->prmt_etp, $data->prmt_prmssn, ($next_seq%1000) );
					// $sql['sql_data'] = array( $data->prmt_class, $data->prmt_auth, $data->prmt_etp, $data->prmt_k, $data->prmt_prmssn );
					var ruleObj:Object=new Object();
					ruleObj.prmt_k 			= x.rule_id;
					ruleObj.prmt_class 		= x.rule_case;
					ruleObj.prmt_etp 		= x.rule_etyp;
					ruleObj.prmt_auth 		= x.rule_auth;
					ruleObj.prmt_prmssn 	= x.rule_parent;
					ruleObj.prmt_expiry_check 	= x.rule_expiry_check;
					
					if ( ruleObj.prmt_class == GP_PERSONNEL || ( String(ruleObj.prmt_class).length>0 && GP_PERSONNEL.indexOf(ruleObj.prmt_class)>=0 ) )
					{
						ruleObj.prmt_etp = null;
						if( 999 == ruleObj.prmt_auth || ruleObj.prmt_auth == null || -1 == ruleObj.prmt_auth )
						{
							ruleObj.prmt_class = "DEFAULT_PERSONNEL";
						}
						else 
						{
							ruleObj.prmt_class = "PRM_PRSSNL";
						}
					}
					else 
					{
						ruleObj.prmt_auth = -1;
						if( GP_EQPT_ANY == ruleObj.prmt_etp || ruleObj.prmt_etp == null || -1 == ruleObj.prmt_etp )
						{
							ruleObj.prmt_class = "DEFAULT_EQUIP";
							ruleObj.prmt_etp = null;
						}
						else 
						{
							ruleObj.prmt_class = "PRM_EQPT";
						}
					}
					
					items.addItem( ruleObj );
					obj.has_items = 1;
				}
				obj.gp_items = items.source;
				
				createAction.service( obj );
			}
			
			protected function createData_resultHandler( ):void
			{
				clearDetail();
				if ( this.createAction.dataString == "OK" )
				{
					global.msgSuccess(resourceManager.getString('default','MSG_CREATE__SUCCESS'));
				}
				else
				{
					global.msgFail(resourceManager.getString('default','ERROR_CREATE__FAILURE'));
				}
				
				var key:String;
				key = prmssn_name.text;
				
				currentState="normal";
				findByName( key );
				
				dataGrid.selectedIndex = -1;
				dataGrid.enabled=true;
			}
			
			protected function createNewRecord(event:MouseEvent):void
			{	
				idx=dataGrid.selectedIndex;
				dataGrid.ensureCellIsVisible(idx);
				currentState="create";
				dataGrid.enabled=false;
				this.btn_save.enabled = this.canCreate;
				
				this.btn_createRule.enabled = false;
				this.btn_deleteRule.enabled = false;
				this.btn_updateRule.enabled = false;
				
				this.gatePermissionKeyMaker.service();
				
				this.gatePermissionRuleList.service( "-1" );
				//this.equipCmptsList.visible = false;
			}
			
			private function getNextGatePermissionKey_resultHandler( ):void
			{
				if ( currentState == "create" )
				{
					if ( this.gatePermissionKeyMaker.dataString == "ERROR" )
					{
						this.prmssn_id.text = "";
					}
					else
					{
						this.prmssn_id.text = gatePermissionKeyMaker.dataString;
					}
				}
				
			}
			
			
			public function getArrayCollection(obj:Object):ArrayCollection
			{
				var temp:ArrayCollection = new ArrayCollection;
				temp.addItem( obj );
				return temp;
			}
			
			public function convertDateToLocaleString(dt:String):String
			{
				var dt_string:String;
				var dt_date:Date = new Date();
				
				dt_string = ""; 
				if ((dt!=null) && (dt!='null') && (dt!=''))
				{
					dt_date = DateField.stringToDate(dt,"YYYY-MM-DD");
					dt_string = dateFormatter.format( dt_date);
				}
				//trace ("convertDateToLocale", dt, dt_date, dt_string);
				return dt_string;
			}
			
			public function convertDateToLocale(dt:String):Date
			{
				var dt_date:Date = new Date();
				
				if ((dt!=null) && (dt!='null') && (dt!=''))
				{
					dt_date = DateField.stringToDate(dt,"YYYY-MM-DD");
				}
				//trace ("convertDateToLocale", dt, dt_date, dt_string);
				return dt_date;
			}
			
			public function convertDateToLocaleLong(dt:String):Date
			{
				var dt_date:Date = new Date();
				
				if ((dt!=null) && (dt!='null') && (dt!=''))
				{
					//dt_date = DateField.stringToDate(dt,"YYYY-MM-DD HH:NN:SS");
					dt_date = DateTimeFunc.createDate(
						int(dt.substr(0, 4))
						, int(dt.substr(5, 2))
						, int(dt.substr(8, 2))
						, int(dt.substr(11, 2))
						, int(dt.substr(14, 2))
						, int(dt.substr(17, 2))
					);
				}
				//trace ("convertDateToLocale", dt, dt_date, dt_string);
				return dt_date;
			}
			
			public function getDefaultDate():Date
			{
				var now_date:Date;
				var def_date:Date;
				
				now_date = new Date();
				def_date = DateTimeFunc.dateAdd( "yyyy", 1, now_date );
				
				//trace ("getDefaultDate", now_date, def_date);
				
				return def_date;
			}
			
			protected function view_detailsHandler(event:FlexEvent):void
			{
			}
			
			
			protected function dateLabelFunction(item:Object, column:GridColumn):String
			{
				var ret:String = "";
				
				ret = item [column.dataField];
				return ret;
			}
			
			protected function save_clickHandler():void
			{
				this.btn_save.enabled = false;
				doSave();
				//this.confirmSave = new ActionDialog( doSave, doNothing, resourceManager.getString('default','CONFIRM_SAVE_RATIOS') );
				
				//this.startLoadingPages();
			}
			
			protected function doSave():void
			{
				if (currentState == "create")
				{
					//createRecord();
					this._saveButtonClicked = true;
					checkGatePermissionKey();
					//checkGatePermissionKeyBeforeCreate();
				}
				if (currentState == "edit")
				{
					editRecord();
				}
				if (currentState == "detail")
				{
					editRecord();
				}
			}
			
			public function closeDialogHandler():void
			{
				/* this.mainListSelection = this.dataGrid.selectedIndex;
				this.currentState = "normal";
				this.dataGrid.selectedIndex = -1;
				this.startFiltering(); */
			}
			
			
			public function checkItemFields():Boolean
			{
				var x:Object;
				var obj:Object;
				var errGrid:ArrayCollection=new ArrayCollection();
				
				for each ( x in this.ruleGrid.dataProvider)
				{
					trace("............................................rule_line..............", x.rule_case, ">>"+String(x.rule_etyp)+"<<",  ">>"+String(x.rule_auth)+"<<");
					
					if ( x.rule_case == null || x.rule_case == "" )
					{
						obj=new Object();
						obj['name'] = String(x.rule_id);
						obj['description'] = resourceManager.getString('default','RULE_CASENAME') + resourceManager.getString('default','VALIDATION__FIELD__CANNOTBLANK');
						errGrid.addItem( obj );
					}
					
					if ( x.rule_case == GP_PERSONNEL || ( String(x.rule_case).length>0 && GP_PERSONNEL.indexOf(x.rule_case)>=0 )  )
					{
						if( x.rule_auth == null || x.rule_auth == "" || -1 == x.rule_auth )
						{
							obj=new Object();
							obj['name'] = String(x.rule_id);
							obj['description'] = resourceManager.getString('default','RULE_AUTHNAME') + resourceManager.getString('default','VALIDATION__FIELD__CANNOTBLANK');
							errGrid.addItem( obj );
						}
					}
					else 
					{
						if( x.rule_etyp == null || x.rule_etyp == "" || -1 == x.rule_etyp )
						{
							obj=new Object();
							obj['name'] = String(x.rule_id);
							obj['description'] = resourceManager.getString('default','RULE_ETYPNAME') + resourceManager.getString('default','VALIDATION__FIELD__CANNOTBLANK');
							errGrid.addItem( obj );
						}
					}
				}
				
				if ( errGrid.length > 0 )
				{
					errorDialog = new ErrorDialog( closeErrorDialog, resourceManager.getString('default','VALIDATION__PROMPT'), errGrid, resourceManager.getString('default','VALIDATION__TITLE'));
					return false;
				}
				else
				{
					return true;
				}
			}
			
			public function closeErrorDialog():void
			{
				PopUpManager.removePopUp(this.errorDialog.dialog );	
			}
			
			protected function killBtn_clickHandler(event:MouseEvent):void
			{
				//interruptor=true;
				pagedRecords.interruptor=true;
				trace("WTF >>>>>>>>>>");
			}
			
			protected function resumeBtn_clickHandler(event:MouseEvent):void
			{
				//interruptor=false;
				pagedRecords.interruptor=false;
				
				this.resumeLoadingPages();
				trace("RESUME >>>>>>>>>>");
			}
			
			protected function resumeLoadingPages():void
			{
				killBtn.setStyle("chromeColor","0xff0000");
				this.killBtn.includeInLayout=true;
				this.killBtn.visible = true;
				this.killBtn.enabled = true;
				
				resumeBtn.setStyle("chromeColor","0x00ff00");
				this.resumeBtn.includeInLayout=true;
				this.resumeBtn.visible = true;
				this.resumeBtn.enabled = false;
				
				this.btn_create.enabled = false
				this.btn_export.enabled = false;
				this.dataGrid.enabled = false;
				this.toolbar.enabled = false;
				
				//pb.values(pagedRecords.length,totalLength);
				pb.values(pagedRecords.length,pagedRecords.totalLength);
				//currentPage = int(this.pagedRecords.length/currentPageSize) + 1;
				//this.pagedRecords.service( currentFields, currentTypes, currentSorts, currentOrders, currentPage, currentPageSize );
				this.pagedRecords.listService( currentFields, currentTypes, currentSorts, currentOrders );
			}
			
			
			
			protected function gatePermission_rule_updHandler():void
			{
				this.btn_updateRule.enabled = false;
				this.btn_deleteRule.enabled = false;
				
				if ( this.ruleGrid.selectionMode == "multipleRows" )
				{
					this.updateMultipleGatePermissionRules();
				}
				else
				{
					this.updateSingleGatePermissionRule();
				}
			}
			
			protected function updateMultipleGatePermissionRules():void
			{
				if ( ruleGrid.selectedItems==null || ruleGrid.selectedItems.length == 0 )
				{
					return;
				}
				
				var x:Object;
				var y:Object;
				var updateInGrid:Boolean=false;
				var len:int;
				var i;
				
				len = ruleGrid.dataProvider.length;
				for ( i=len-1; i>=0; i-=1 )
				{
					x = ruleGrid.dataProvider.getItemAt( i );
					for each(y in ruleGrid.selectedItems)
					{
						if ( x.rule_id == y.rule_id )
						{
							if ( y.rule_action == '+' )
							{
								;
							}
							else if ( y.rule_action == '-' )
							{
								;
							}
							else if ( y.rule_action == '*' )
							{
								;
							}
							else
							{
								x.rule_action = '*';
								y.rule_action = '*';
								updateInGrid = true;
							}
						}
					}
				}
				
				var temp:* = ruleGrid.dataProvider;
				ruleGrid.dataProvider = null;
				ruleGrid.dataProvider = temp;
				
				if ( updateInGrid == true )
				{
					this.adjustGatePermissionRuleList();	//???? may not need 
				}
				
			}
			
			protected function updateSingleGatePermissionRule():void
			{
				if ( ruleGrid.selectedIndex < 0 )
				{
					return;
				}
				
				var x:Object;
				var updateInGrid:Boolean=false;
				
				for each(x in ruleGrid.dataProvider)
				{
					if ( x.rule_id == ruleGrid.selectedItem.rule_id )
					{
						if ( ruleGrid.selectedItem.rule_action == '+' )
						{
							;
						}
						else if ( ruleGrid.selectedItem.rule_action == '-' )
						{
							;
						}
						else if ( ruleGrid.selectedItem.rule_action == '*' )
						{
							;
						}
						else
						{
							x.rule_action = '*';
							ruleGrid.selectedItem.rule_action = '*';
							updateInGrid = true;
						}
						break;
					}
				}
				
				var temp:* = ruleGrid.dataProvider;
				ruleGrid.dataProvider = null;
				ruleGrid.dataProvider = temp;
				
				if ( updateInGrid == true )
				{
					this.adjustGatePermissionRuleList();
				}
				
			}
			
			protected function gatePermission_rule_delHandler():void
			{
				this.btn_deleteRule.enabled = false;
				this.btn_updateRule.enabled = false;
				
				if ( this.ruleGrid.selectionMode == "multipleRows" )
				{
					this.deleteMultipleGatePermissionRules();
				}
				else
				{
					this.deleteSingleGatePermissionRule();
				}
			}
			
			protected function deleteMultipleGatePermissionRules():void
			{
				if ( ruleGrid.selectedItems==null || ruleGrid.selectedItems.length == 0 )
				{
					return;
				}
				
				var x:Object;
				var y:Object;
				var removedFromGrid:Boolean=false;
				var len:int;
				var i;
				
				len = ruleGrid.dataProvider.length;
				for ( i=len-1; i>=0; i-=1 )
				{
					x = ruleGrid.dataProvider.getItemAt( i );
					for each(y in ruleGrid.selectedItems)
					{
						if ( x.rule_id == y.rule_id )
						{
							if ( y.rule_action == '+' )
							{
								this.ruleGrid.dataProvider.removeItemAt( i );
								removedFromGrid = true;
							}
							else if ( y.rule_action == '-' )
							{
								x.rule_action = '';
								y.rule_action = '';
							}
							else if ( y.rule_action == '*' )
							{
								x.rule_action = '';
								y.rule_action = '';
							}
							else
							{
								if ( y.rule_first == 1 )
								{
									global.msgWarning( resourceManager.getString('default','ALERT__GATEPERMISSION_FIRSTRULE') );
									x.rule_action = '';
									y.rule_action = '';
									//return;
								}
								else
								{
									x.rule_action = '-';
									y.rule_action = '-';
								}
							}
						}
					}
				}
				
				var temp:* = ruleGrid.dataProvider;
				ruleGrid.dataProvider = null;
				ruleGrid.dataProvider = temp;
				
				if ( removedFromGrid == true )
				{
					this.adjustGatePermissionRuleList();	//???? may not need 
				}
				
			}
			
			protected function deleteSingleGatePermissionRule():void
			{
				if ( ruleGrid.selectedIndex < 0 )
				{
					return;
				}
				
				var x:Object;
				var removedFromGrid:Boolean=false;
				
				for each(x in ruleGrid.dataProvider)
				{
					if ( x.rule_id == ruleGrid.selectedItem.rule_id )
					{
						if ( ruleGrid.selectedItem.rule_action == '+' )
						{
							this.ruleGrid.dataProvider.removeItemAt(ruleGrid.selectedIndex);
							removedFromGrid = true;
						}
						else if ( ruleGrid.selectedItem.rule_action == '-' )
						{
							x.rule_action = '';
							ruleGrid.selectedItem.rule_action = '';
						}
						else if ( ruleGrid.selectedItem.rule_action == '*' )
						{
							x.rule_action = '';
							ruleGrid.selectedItem.rule_action = '';
						}
						else
						{
							if ( ruleGrid.selectedItem.rule_first == 1 )
							{
								global.msgWarning( resourceManager.getString('default','ALERT__GATEPERMISSION_FIRSTRULE') );
								x.rule_action = '';
								ruleGrid.selectedItem.rule_action = '';
								//return;
							}
							else
							{
								x.rule_action = '-';
								ruleGrid.selectedItem.rule_action = '-';
							}
						}
						break;
					}
				}
				
				var temp:* = ruleGrid.dataProvider;
				ruleGrid.dataProvider = null;
				ruleGrid.dataProvider = temp;
				
				if ( removedFromGrid == true )
				{
					this.adjustGatePermissionRuleList();
				}
				
			}
			
			protected function gatePermission_rule_addHandler():void
			{
				this.btn_updateRule.enabled = false;
				this.btn_deleteRule.enabled = false;
				
				if ( currentState == "create" )
				{
					this.addDefaultGatePermissionRules();
				}
				else
				{
					this.addSingleGatePermissionRule();
				}
			}
			
			protected function addMultipleGatePermissionRules():void
			{
				/* var x:Object;
				var y:Object;
				
				if ( this.gatePermission_rule.selectedItems.length > 0 )
				{
					for each( y in this.gatePermission_rule.selectedItems )
					{
						x = new Object();
						
						x.rule_action 			= '+';
						x.db_addr_rule_id 			= this.prmssn_name.text;
						x.db_addrrule_no 			= this.ruleGrid.dataProviderLength + 1;
						x.db_addr_rule 				= "";
						x.db_addr_rule_type			= y.gatePermission_type_id;
						x.db_addr_rule_typename		= y.gatePermission_type_name;
						if ( this.ruleGrid.dataProvider == null )
						{
							this.ruleGrid.dataProvider = new ArrayCollection();
						}
						this.ruleGrid.dataProvider.addItem(x);
					}
				}
				
				this.adjustGatePermissionRuleList(); */
			}
			
			protected function addSingleGatePermissionRule():void
			{
				var x:Object;
				var y:Object;
				var next_id:int=0;
				
				x = new Object();
				
				x.rule_action 			= '+';
				
				if ( this.ruleGrid.dataProvider == null )
				{
					this.ruleGrid.dataProvider = new ArrayCollection();
				}
				
				if ( this.ruleGrid.dataProviderLength == 0 )
				{
					x.rule_id = int(this.prmssn_id.text);
					x.rule_first = 1;
				}
				else
				{
					// find the next id
					next_id = 0;
					for each ( var itm:Object in this.ruleGrid.dataProvider )
					{
						if ( next_id < itm.rule_id )
						{
							next_id = itm.rule_id
						}
					}
					if ( next_id <= 1000 )
					{
						x.rule_id = int(this.prmssn_id.text)*1000 + 2;
					}
					else
					{
						x.rule_id = next_id + 1;
					}
					x.rule_first = 0;
				}
				
				if ( this.prmssn_id.text.length == 0 )
				{
					x.rule_id = "";
				}
				
				x.rule_parent 		= int(this.prmssn_id.text);
				x.rule_case 		= "";
				x.rule_casename		= "";
				x.rule_etyp			= "";
				x.rule_etypname 	= "";
				x.rule_auth			= -1;
				x.rule_authname		= "";
				x.rule_expiry_check = 0;
				
				this.ruleGrid.dataProvider.addItem(x);
				
				this.adjustGatePermissionRuleList();
			}
			
			protected function addDefaultGatePermissionRules():void
			{
				var x:Object;
				var y:Object;
				var next_id:int;
				var i:int;
				
				if ( this.ruleGrid.dataProvider == null )
				{
					this.ruleGrid.dataProvider = new ArrayCollection();
				}
				
				if ( this.ruleGrid.dataProvider.length == 0 && this.gatePermissionTemplateArray.length > 0 )
				{
					next_id = 0;
					
					for each( y in this.gatePermissionTemplateArray )
					{
						next_id += 1;
						
						x = new Object();
						
						x.rule_action 			= '+';
						
						if ( next_id == 1 )
						{
							x.rule_id = int(this.prmssn_id.text);
							x.rule_first = 1;
						}
						else
						{
							x.rule_id = int(this.prmssn_id.text)*1000 + next_id;
							x.rule_first = 0;
						}
						x.rule_parent 		= int(this.prmssn_id.text);
						var arr:Array = String(y).split("|");
						x.rule_case 		= arr[0];
						x.rule_casename		= this.getRuleTypeLabel( String(arr[0]) );
						x.rule_etyp			= arr[1];
						x.rule_etypname 	= this.getEqptTypeLabel( int(arr[1]) );
						x.rule_auth			= arr[2];
						x.rule_authname		= this.getAuthTypeLabel( int(arr[2]) );
						
						this.ruleGrid.dataProvider.addItem(x);
					}
					
					this.adjustGatePermissionRuleList();
				}
				else
				{
					this.addSingleGatePermissionRule();
				}
				
			}
			
			
			protected function adjustGatePermissionRuleList():void
			{
			}
			
			
			
			protected function getRuleTypeLabel(rule_type_id:String):String
			{
				var ret:String = "";

				for each( var obj:Object in this.gatePermissionTypeList )
				{
					if ( rule_type_id!="" && String(obj.permission_class_code).indexOf( rule_type_id ) >= 0 )
					//if ( obj.permission_class_code == rule_type_id )
					{
						ret = obj.permission_class_name;
					}
				}
				
				return ret;
			}
			
			protected function ruleTypeLabelFunction(item:Object, column:GridColumn):String
			{
				var ret:String = "";
				
				ret = this.getRuleTypeLabel( item [column.dataField] );
				
				return ret;
			}
			
			protected function getAuthTypeLabel(auth_type_id:int):String
			{
				var ret:String = "";
				
				for each( var obj:Object in this.authTypeList )
				{
					if ( obj.role_id == auth_type_id )
					{
						ret = obj.role_name;
					}
				}
				
				return ret;
			}
			
			protected function authTypeLabelFunction(item:Object, column:GridColumn):String
			{
				var ret:String = "";
				
				ret = this.getAuthTypeLabel( item [column.dataField] );
				
				if ( ret == "" && item['rule_case']!=null && GP_PERSONNEL.indexOf(String(item['rule_case']))>=0 )
				{
					//ret = resourceManager.getString('default','RULE_ANY');
				}
				
				return ret;
			}
			
			protected function getEqptTypeLabel(eqpt_type_id:int):String
			{
				var ret:String = "";
				
				for each( var obj:Object in this.eqptTypeList )
				{
					if ( obj.etyp_id == eqpt_type_id )
					{
						ret = obj.etyp_title;
					}
				}
				
				return ret;
			}
			
			protected function eqptTypeLabelFunction(item:Object, column:GridColumn):String
			{
				var ret:String = "";
				
				ret = this.getEqptTypeLabel( item [column.dataField] );
				
				if ( ret == "" && item['rule_case']!=null && GP_EQUIPMENT.indexOf(String(item['rule_case']))>=0 )
				{
					//ret = resourceManager.getString('default','RULE_ANY');
				}
				
				return ret;
			}

			
			public function toggleCellEditability(event:GridEvent):void
			{
				var i:int;
				var cln:GridColumn;
				var obj:Object;
				var msg:String;
				
				//this.toggleDeleteButton();
				
				if ( event.rowIndex < 0 || event.columnIndex < 0 || event.rowIndex > this.ruleGrid.dataProviderLength-1)
				{
					trace ("***********current cell, out of range:", event.columnIndex, event.rowIndex);
					return;	
				}
				
				obj = this.ruleGrid.dataProvider[event.rowIndex];
				if ( obj == null )
				{
					return;
				}
				
				trace ("***********current cell, in the range:", event.columnIndex, event.rowIndex);
				
				for ( i=0; i<this.ruleGrid.columns.length; i++ )
				{
					cln = (this.ruleGrid.columns.getItemAt(i) as GridColumn);
					
					//trace ("***********current row action:", event.rowIndex, ">>"+view.itemList.dataProvider[event.rowIndex].action+"<<");
					
					// if  no action is initialized, not editable
					if ( obj.hasOwnProperty( "rule_action" ) )
					{
						if ( obj.rule_action == "" || obj.rule_action == " " || obj.rule_action == "-" )
						{
							cln.editable = false;
							continue;
						}
					}
					else
					{
						cln.editable = false;
						continue;
					}
					
					
					if ( i != event.columnIndex )
					{
						cln.editable = false;
					}
					else
					{
						if ( cln.dataField == "rule_case" 
						  || cln.dataField == "rule_etyp" 
						  || cln.dataField == "rule_auth" 
						  || cln.dataField == "rule_expiry_check" 
						)
						{
							if ( obj.rule_action == "+" || obj.rule_action == "*" )
							{
								cln.editable = true;
								if ( cln.dataField == "rule_case" )
								{
									cln.editable = true;
								}
								if ( cln.dataField == "rule_etyp" )
								{
									if ( obj.rule_case == GP_EQUIPMENT || GP_EQUIPMENT.indexOf(obj.rule_case)>=0 || obj.rule_case == null )
									{
										cln.editable = true;
									}
									else
									{
										cln.editable = false;
									}
								}
								if ( cln.dataField == "rule_auth" )
								{
									if ( obj.rule_case == GP_PERSONNEL || GP_PERSONNEL.indexOf(obj.rule_case)>=0 || obj.rule_case == null )
									{
										cln.editable = true;
									}
									else
									{
										cln.editable = false;
									}
								}
							}
							else
							{
								cln.editable = false;
							}
						}
						else
						{
							cln.editable = false;
						}
					}
				}
				
				
			}
			
			public function ruleGrid_getUsedOptions(event:GridEvent):void
			{
				this.psnlUsed = new Array();
				this.eqptUsed = new Array();
				for each( var o:Object in this.ruleGrid.dataProvider )
				{
					var line:int = ruleGrid.dataProvider.getItemIndex( o );
					if ( line == event.rowIndex )
					{
						continue;
					}
					if ( o['rule_etyp'] != null && o['rule_etyp'] != "" && o['rule_etyp'] != -1 )
					{
						this.eqptUsed.push( int(o['rule_etyp']) );
						trace("............1111111111111111111111111--- eqpt used...............................", line, o['rule_etyp'], o['rule_id'] );
					}
					if ( o['rule_auth'] != null && o['rule_auth'] != "" && o['rule_auth'] != -1 )
					{
						this.psnlUsed.push( int(o['rule_auth']) );
						trace("............2222222222222222222222222--- auth used...............................", line, o['rule_auth'], o['rule_id'] );
					}
				}
				
			}
			
			private function dynAuthType_resultHandler():void
			{
				var i:int;
				var obj:Object=new Object();

				this.dynAuthTypeList = new ArrayCollection();
				// remove used ones
				for (i=0; i<this.authTypeList.source.length; i++ )
				{
					obj = this.authTypeList.source[i];
					if ( this.psnlUsed.indexOf( int(obj.role_id) ) == -1 )
					{
						this.dynAuthTypeList.addItem( obj );
					}
				}
				
				//global.authTypes = null;
				global.authTypes = new ArrayCollection( this.dynAuthTypeList.source );
				global.authTypes.refresh();
			}
			
			private function dynEqptType_resultHandler():void
			{
				var i:int;
				var obj:Object=new Object();
				
				this.dynEqptTypeList = new ArrayCollection();				
				// remove used ones
				for (i=0; i<this.eqptTypeList.source.length; i++ )
				{
					obj = this.eqptTypeList.source[i];
					if ( this.eqptUsed.indexOf( int(obj.etyp_id) ) == -1 )
					{
						this.dynEqptTypeList.addItem( obj );
					}
				}
				
				//global.eqptTypes = null;
				global.eqptTypes = new ArrayCollection( this.dynEqptTypeList.source );
				global.eqptTypes.refresh();
			}
			
			protected function ruleGrid_gridClickHandler(event:GridEvent):void
			{
				// TODO Auto-generated method stub
				this.toggleCellEditability(event);
				
				this.ruleGrid_getUsedOptions(event);
				this.dynAuthType_resultHandler( );
				this.dynEqptType_resultHandler( );
			}
			
			protected function cleanInvalidCharsFromText( txt:String, charset:String, maxlen:int ):String
			{
				var new_txt:String="";
				var i:int;
				var len:int;
				var invalid:Boolean = false;
				var errors:String="";
				var index:int=0;
				
				len = txt.length;
				for( i=0; i<len; i++ )
				{
					var c:String = txt.charAt(i);
					if ( charset.indexOf(c) >= 0 || charset.length==0 )
					{
						new_txt += c;
					}
					else
					{
						invalid = true;
					}
				}
				
				if ( invalid == true )
				{
					index += 1;
					errors += String(index) + ". " + "Expecting A-Z,a-z,0-9, _-, and the invalid characters in value [" + txt + "] has been cleaned. \n";
				}
				
				if ( new_txt.length > maxlen )
				{
					index += 1;
					errors += String(index) + ". " + "Maximum length is " + maxlen + ", and the value [" + new_txt + "] has been truncated to [";
					new_txt = new_txt.substr(0, maxlen);
					errors += new_txt + "]. \n";
				}
				
				/* if ( errors.length>0 )
				{
				global.msgWarning( errors );
				} */
				
				if ( index > 0 )
				{
					var errorBox:MessageDialog = new MessageDialog( errors );
				}
				
				return new_txt;
			}
			
			protected function ruleGrid_gridItemEditorSessionSaveHandler(event:GridItemEditorEvent):void
			{
				if (event.column.dataField == 'rule_case')
				{
					var obj:Object = new Object();
					obj = this.ruleGrid.dataProvider[ruleGrid.selectedIndex];
					if ( obj.rule_case == GP_PERSONNEL )
					{
						obj.rule_etyp 		= "";
						obj.rule_etypname 	= "";
					}
					if ( obj.rule_case == GP_EQUIPMENT )
					{
						obj.rule_auth 		= -1;
						obj.rule_authname 	= "";
					}
				}
			}
			
			public function setFilters( params:*=false ): void
			{
				if ( params == false )
				{
					return;
				}
				
				this.parentParams = params;
				
				currentState = "normal";
				
				trace ("...............................in setFilters");
				tools.pr( params);
				
				var po:Object=new Object();
				
				po["prmssn_name"] = tools.getObjAttribute( params, "prmssn_name", "" );
				po["prmssn_gate"] = tools.getObjAttribute( params, "prmssn_gate", "" );
				
				var fields:Object;
				var types:Object;
				
				//interruptor=false;
				pagedRecords.interruptor=false;
				
				fields = new Object();
				types = new Object();
				
				fields["prmssn_name"] = po["prmssn_name"];
				types["prmssn_name"] = "EXACT_STRING";
				fields["prmssn_gate"] = po["prmssn_gate"];
				types["prmssn_gate"] = "EXACT_STRING";
				
				currentFields = fields;
				currentTypes = types;
				this.startLoadingPages();
				
				if ( po.hasOwnProperty( "prmssn_gate" ) )
				{
					this.fltr_gate.selectedIndex = tools.getItemIndexFromCode( po["prmssn_gate"], gateList, "gate_k");
				}
				
				this.fltr_permission.text = po["prmssn_name"];
				
				
				pb.values(pagedRecords.length,pagedRecords.length)
			}
			
			protected function btn_set_template_clickHandler(event:MouseEvent):void
			{
				// TODO Auto-generated method stub
				this.editGatePermissionTemplate();
			}
			
		]]>
	</fx:Script>
	<fx:Declarations>
		<s:DateTimeFormatter id="dateFormatter" locale="{LocaleID.DEFAULT}" dateStyle="short" timeStyle="none"/>
		<s:DateTimeFormatter id="dateConvert" dateTimePattern="yyyy-MM-dd"/>
		<s:DateTimeFormatter id="dateConvertLong" dateTimePattern="yyyy-MM-dd HH:mm:ss"/>
		<components:ValidationGroup id="vg" action="{save_clickHandler}" defaultButton="{btn_save}" isProtected="{hasPassword}"/>
	</fx:Declarations>
	<s:Panel id="panel" width="100%" height="100%"
			 skinClass="skins.WidgetPanelSkin"
			 skinClass.widget="skins.NullSkin">
		<s:layout>
			<s:VerticalLayout/>
		</s:layout>
		<s:VGroup width="100%" id="toolbar"  >
			<s:HGroup gap="5" paddingBottom="2" paddingTop="2" width="100%">
				<components:DKI_DropDownList id="fltr_gate" width="180" height="100%"
											 change="fltr_gate_changeHandler(event)" cornerRadius="10"
											 labelField="gate_k" prompt="{resourceManager.getString('default','PRMSSN_GATE')+resourceManager.getString('default','FILTER')}"
											 dataProvider="{gateList}"/>
				
				<components:DKI_ValidatorInput id="fltr_permission" validationType="search" minWidth="200" height="{labelHeight}" width="300"
											   keyUp="fltr_permission_keyUpHandler(event)" 
											   prompt="{resourceManager.getString('default','PRMSSN_NAME')+resourceManager.getString('default','FILTER')}"/>
				
				<s:Spacer width="100%"/>
				<components:DKI_Button id="filterBtn" height="24" noLabel="false" click="filterRecords(event)"
									   type="filteron"/>
				<components:DKI_Button id="resetBtn" height="24" noLabel="false" click="refreshRecords(event)"
									   type="filteroff"/>
				<components:DKI_Button id="btn_export" label="{resourceManager.getString('default','EXPORTDATA')}" type="report" click="exportCsvHandler(event)" includeIn="normal"/>
				<components:DKI_Button id="btn_create" label="{resourceManager.getString('default','CREATE')}" height="24" click="createNewRecord(event)" includeIn="normal" enabled="{this.canCreate}" type="create"/>	
			</s:HGroup>
		</s:VGroup>
			
		
		<s:DataGrid id="dataGrid" width="100%" height="100%" requestedRowCount="4"
					selectionChange="dataGrid_selectionChangeHandler(event)"
					skinClass="skins.DKI_DataGrid_Skin"
					height.widget="100%">
			<s:columns>
				<s:ArrayList>
					<s:source>
						<s:GridColumn dataField="prmssn_id" headerText="{resourceManager.getString('default','PRMSSN_ID')}" visible="true"></s:GridColumn>
						<s:GridColumn dataField="prmssn_name" headerText="{resourceManager.getString('default','PRMSSN_NAME')}" visible="true"></s:GridColumn>
						<s:GridColumn dataField="prmssn_case" headerText="{resourceManager.getString('default','PRMSSN_CASE')}" visible="false"></s:GridColumn>
						<s:GridColumn dataField="prmssn_auth" headerText="{resourceManager.getString('default','PRMSSN_AUTH')}" visible="false"></s:GridColumn>
						<s:GridColumn dataField="prmssn_etyp" headerText="{resourceManager.getString('default','PRMSSN_ETYP')}" visible="false"></s:GridColumn>
						<s:GridColumn dataField="prmssn_gate" headerText="{resourceManager.getString('default','PRMSSN_GATE')}" visible="true"></s:GridColumn>
						<s:GridColumn dataField="prmssn_gatetcd" headerText="{resourceManager.getString('default','PRMSSN_GATETCD')}" visible="true"></s:GridColumn>
						<s:GridColumn dataField="prmssn_areaid" headerText="{resourceManager.getString('default','PRMSSN_AREAID')}" visible="true"></s:GridColumn>
						<s:GridColumn dataField="prmssn_areaname" headerText="{resourceManager.getString('default','PRMSSN_AREANAME')}" visible="true"></s:GridColumn>
						<s:GridColumn dataField="prmssn_adv_code" headerText="{resourceManager.getString('default','PRMSSN_ADV_CODE')}" visible="true"></s:GridColumn>
						<s:GridColumn dataField="prmssn_adv_device" headerText="{resourceManager.getString('default','PRMSSN_ADV_DEVICE')}" visible="true"></s:GridColumn>
						<s:GridColumn dataField="prmssn_adv_port" headerText="{resourceManager.getString('default','PRMSSN_ADV_PORT')}" visible="true"></s:GridColumn>
						<s:GridColumn dataField="prmssn_adv_lockout" headerText="{resourceManager.getString('default','PRMSSN_ADV_LOCKOUT')}" visible="true" itemRenderer="renderers.GridCheckRender"></s:GridColumn>
						<s:GridColumn dataField="prmssn_adv_pin_pass" headerText="{resourceManager.getString('default','PRMSSN_ADV_PIN_PASS')}" visible="true" itemRenderer="renderers.GridCheckRender"></s:GridColumn>
						<s:GridColumn dataField="prmssn_expiry_check" headerText="{resourceManager.getString('default','PRMSSN_EXPIRY_CHECK')}" visible="false" itemRenderer="renderers.GridCheckRender"></s:GridColumn>
					</s:source>
				</s:ArrayList>
			</s:columns>
			<s:dataProvider>
				<!--s:AsyncListView id="pgList" list="{getPagedResult.lastResult}"/-->
				<s:AsyncListView id="pgList" list="{pagedRecords}"/>
			</s:dataProvider>
		</s:DataGrid>
		<s:HGroup width="100%">
			<components:Downloader id="pb" width="100%" height="18"/>
			<!--mx:ProgressBar id="pb" width="100%" height="22" visible="false" includeInLayout="false"  mode="manual" source="{this.pgList}" label="{this.currentLength} records shown from {this.currentLength} loaded out of {this.totalLength} found." labelPlacement="center"/-->
			<s:Button id="killBtn" width="18" height="18" label="" cornerRadius="12" visible="false" includeInLayout="false"
					  click="killBtn_clickHandler(event)"/>
			<s:Button id="resumeBtn" width="18" height="18" label="" cornerRadius="12" visible="false" includeInLayout="false"
					  click="resumeBtn_clickHandler(event)"/>
		</s:HGroup>
	</s:Panel>
	
	<s:Panel id="details" includeIn="edit,create,detail" width="100%" height="450"
			 itemCreationPolicy="immediate" skinClass="skins.WidgetPanelSkin">
		<s:layout>
			<s:VerticalLayout/>
			<!--s:TileLayout/-->
		</s:layout>
		
		<s:Spacer height="5"/>
		<s:VGroup width="100%">
			<s:HGroup width="100%">
				<s:HGroup>
					<s:Label width="{labelWidth}" height="{labelHeight}" text="{resourceManager.getString('default','PRMSSN_ID')}" verticalAlign="middle"/>
					<components:DKI_ValidatorInput id="prmssn_id" width="{fieldWidth/2}" height="{fieldHeight}" 
												   text="{dataGrid.selectedItem.prmssn_id}" text.create=""
												   visible="true" enabled="false" editable="false" enabled.create="false" editable.create="false"
												   required="false"
												   automationName="{resourceManager.getString('default','PRMSSN_ID')}" maxChars="6"
												   validationGroup="{vg}"
												   validationType="integer_positive"/>
				</s:HGroup>
				
				<s:Spacer width="20" />
				
				<s:HGroup>
					<s:Label width="{labelWidth}" height="{labelHeight}" text="{resourceManager.getString('default','PRMSSN_GATE')}" verticalAlign="middle"/>
					<components:DKI_ValidatorComboBox id="prmssn_gate" 
													  dataProvider="{gateList}" 
													  labelField="gate_k" 
													  selectedItem="{dataGrid.selectedItem.prmssn_gate}" enabled="false" enabled.edit="false"
													  selectedItem.create="" selectedIndex.create="-1" enabled.create="true" 
													  width="{fieldWidth}" height="{fieldHeight}" 
													  prompt="{resourceManager.getString('default','SELECT')+resourceManager.getString('default','PRMSSN_GATE')}"
													  required="true" validationGroup="{vg}" automationName="{resourceManager.getString('default','PRMSSN_GATE')}" 
													  />
				</s:HGroup>
				
				<s:Spacer width="20" />
				
				<s:HGroup>
					<s:Label width="{labelWidth}" height="{labelHeight}" text="{resourceManager.getString('default','PRMSSN_NAME')}" verticalAlign="middle"/>
					<components:DKI_ValidatorInput id="prmssn_name" maxChars="30" 
												   width="{fieldWidth}" height="{fieldHeight}" 
												   text="{dataGrid.selectedItem.prmssn_name}" editable="false" enabled="false" editable.edit="true" enabled.edit="true" 
												   text.create="" editable.create="true" enabled.create="true" 
												   required="true" validationType="alphanumericspecial" validationGroup="{vg}" automationName="{resourceManager.getString('default','PRMSSN_NAME')}" 
												   />
				</s:HGroup>
				
			</s:HGroup>
			
			
			<s:Spacer height="5" />
			
			<mx:HRule width="100%"/>
			
			<s:HGroup>
				<s:Label width="{labelWidth}" height="{labelHeight}" text="{resourceManager.getString('default','PERMISSION_RULES')}" verticalAlign="middle"/>
				<components:DKI_Button id="btn_createRule" cornerRadius="0" label="{resourceManager.getString('default','BUTTON__ADD_RULE')}" toolTip="{resourceManager.getString('default','TOOLTIP__ICON_CROSS_PERMRULE')}" height="100%" click="gatePermission_rule_addHandler()" enabled="{this.prmssn_name.text.length>0}" type="create"/>
				<components:DKI_Button id="btn_deleteRule" cornerRadius="0" label="{resourceManager.getString('default','BUTTON__REMOVE_RULE')}" toolTip="{resourceManager.getString('default','TOOLTIP__ICON_TRASH_PERMRULE')}" height="100%" click="gatePermission_rule_delHandler()" enabled="false" type="delete"/>
				<components:DKI_Button id="btn_updateRule" cornerRadius="0" label="{resourceManager.getString('default','BUTTON__EDIT_RULE')}" toolTip="{resourceManager.getString('default','TOOLTIP__ICON_PEN_PERMRULE')}" height="100%" click="gatePermission_rule_updHandler()" enabled="false" type="edit"/>
			</s:HGroup>

			<s:HGroup width="100%" verticalAlign="middle">
				
				<s:DataGrid id="ruleGrid" width="100%" height="240" requestedRowCount="4" excludeFrom="widget,normal"
							selectionChange="ruleGrid_selectionChangeHandler(event)" sortableColumns="false"
							skinClass="skins.DKI_DataGrid_Skin" visible="true" enabled="{this.prmssn_name.text.length>0}" selectionMode="multipleRows"
							editable="true" editable.detail="false" gridClick="ruleGrid_gridClickHandler(event)"
							gridItemEditorSessionSave="ruleGrid_gridItemEditorSessionSaveHandler(event)"
							>
					<s:columns>
						<s:ArrayList>
							<s:source>
								<s:GridColumn dataField="rule_action" headerText="{resourceManager.getString('default','RULE_ACTION')}" visible="true" editable="false" width="32" itemRenderer="renderers.GridMarkRenderer"></s:GridColumn>
								<s:GridColumn dataField="rule_id" headerText="{resourceManager.getString('default','RULE_ID')}" visible="true" editable="false" width="160"></s:GridColumn>
								<s:GridColumn dataField="rule_case" headerText="{resourceManager.getString('default','RULE_CASENAME')}" visible="true" editable="false" width="200" 
								labelFunction="ruleTypeLabelFunction" itemEditor="itemeditors.RuleTypeEditor"></s:GridColumn>
								<!--s:GridColumn dataField="rule_case" headerText="{resourceManager.getString('default','RULE_CASE')}" visible="true" editable="true"></s:GridColumn-->
								<s:GridColumn dataField="rule_casename" headerText="{resourceManager.getString('default','RULE_CASENAME')}" visible="false" editable="false"></s:GridColumn>
								<s:GridColumn dataField="rule_etyp" headerText="{resourceManager.getString('default','RULE_ETYPNAME')}" visible="true" editable="false" 
											  labelFunction="eqptTypeLabelFunction" itemEditor="itemeditors.EqptTypeEditor"></s:GridColumn>
								<!--s:GridColumn dataField="rule_etyp" headerText="{resourceManager.getString('default','RULE_ETYP')}" visible="true" editable="true"></s:GridColumn-->
								<s:GridColumn dataField="rule_etypname" headerText="{resourceManager.getString('default','RULE_ETYPNAME')}" visible="false" editable="false"></s:GridColumn>
								<s:GridColumn dataField="rule_auth" headerText="{resourceManager.getString('default','RULE_AUTHNAME')}" visible="true" editable="false" 
											  labelFunction="authTypeLabelFunction" itemEditor="itemeditors.AuthTypeEditor"></s:GridColumn>
								<!--s:GridColumn dataField="rule_auth" headerText="{resourceManager.getString('default','RULE_AUTH')}" visible="true" editable="true"></s:GridColumn-->
								<s:GridColumn dataField="rule_authname" headerText="{resourceManager.getString('default','RULE_AUTHNAME')}" visible="false" editable="false"></s:GridColumn>
								<s:GridColumn dataField="rule_first" headerText="{resourceManager.getString('default','RULE_FIRST')}" visible="true" editable="false" width="120" itemRenderer="renderers.GridCheckRender"></s:GridColumn>
								<s:GridColumn dataField="rule_parent" headerText="{resourceManager.getString('default','RULE_PARENT')}" visible="false" editable="false"></s:GridColumn>
								<s:GridColumn dataField="rule_expiry_check" headerText="{resourceManager.getString('default','RULE_EXPIRY_CHECK')}" visible="true" editable="false" itemEditor="itemeditors.GridCheckEditor" itemRenderer="renderers.GridCheckRender"></s:GridColumn>
							</s:source>
						</s:ArrayList>
					</s:columns>
				</s:DataGrid>
				
			</s:HGroup>
			
		</s:VGroup>
		
		<s:Spacer height="20" />
		
		<s:HGroup width="100%" paddingBottom="4" paddingTop="0" gap="5">
			<s:Spacer width="100%"/>
			<!--<components:DKI_Button id="btn_set_template" label="{resourceManager.getString('default','BUTTON__SET_PERMISSION_TEMPLATE')}" height="100%" 
								   includeIn="edit,create,detail" enabled="{this.canUpdate}" type="edit" click="btn_set_template_clickHandler(event)"/>-->
			<components:DKI_Button id="btn_delete" label="{resourceManager.getString('default','BUTTON__DELETE_PERMISSION')}" height="100%" click="doDelete()" includeIn="edit" enabled="{this.canDelete}" type="delete"/>
			<components:DKI_Button id="btn_save" label.create="{resourceManager.getString('default','BUTTON__SAVE_PERMISSION')}" label="{resourceManager.getString('default','BUTTON__UPDATE_PERMISSION')}" height="100%" 
								   includeIn="edit,create,detail" enabled.create="{this.canCreate}" enabled="{this.canUpdate}" type.create="create" type="edit" focusEnabled="true" focusEnabled.create="false"/>
			<components:DKI_Button id="btn_cancel" label="{resourceManager.getString('default','CANCEL')}" height="100%" click="cancel_clickHandler()" enabled="true" type="cancel" focusEnabled="true" focusEnabled.create="false"/>
		</s:HGroup>
	</s:Panel>
	
</s:VGroup>
