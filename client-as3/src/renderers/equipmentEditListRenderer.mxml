<?xml version="1.0" encoding="utf-8"?>
<s:ItemRenderer xmlns:fx="http://ns.adobe.com/mxml/2009" 
				xmlns:s="library://ns.adobe.com/flex/spark" width="{imgWidth+4+offset}"
				xmlns:mx="library://ns.adobe.com/flex/mx" 
				autoDrawBackground="false" >
	
	<s:states>
		<s:State name="normal" />
		<s:State name="selected" />
		<s:State name="hovered" />
	</s:states>
	
	<fx:Script>
		<![CDATA[
			import assets.Assets;
			
			import components.ModalEquipmentDetails;
			
			import mx.collections.ArrayCollection;
			import mx.core.BitmapAsset;
			import mx.core.FlexGlobals;
			import mx.managers.PopUpManager;
			private var canDelete:Boolean=true;
			
			
			[Bindable] private var imgHeight:Number = 100;
			[Bindable] private var imgWidth:Number  = 100;
			[Bindable] private var img:BitmapAsset;
			[Bindable] private var offset:Number  = 0;
			
			
			private function set image(qualifier:String):void{
				switch(qualifier){
					case 'F':case'f':
						img = Assets.FLATBED;	
						imgWidth = 284*imgHeight/120;
						return;
					case 'R':case'r':
						img = Assets.RIGID;
						imgWidth = 515*imgHeight/120;
						return;
					case 'P':case'p':
						img = Assets.PRIME_MOVER;	
						imgWidth = 222*imgHeight/120;
						//if(data.idx == 1)offset = -42*100/60;
						return;
					case 'T':case't':
						img = Assets.TRAILER;
						imgWidth = 375*imgHeight/120;
						//offset = -7;
						return;
					case 'S':case's':
						img = Assets.SHIP;
						imgWidth = 515*imgHeight/120;
						return;
					case 'E':case'e':
						img = Assets.RAILTANK;
						imgWidth = 386*imgHeight/120;
						return;
				}
				trace("GRAPHICS NOT DEFINED = "+qualifier);
				img = null; imgWidth = 0;
			}
			
			override public function set data(o:Object):void{
				super.data = o;
				
				if(data.etyp_category != null){
					image = data.etyp_category.toString();
				}else{
					if(data.eqc_sub_item == null){
						if(data.etyp_isrigid == "Y" || 
							data.etyp_isrigid == "y" || 
							data.sub_item_etyp_isrigid == "Y" || 
							data.sub_item_etyp_isrigid == "y" ){
							image = "R";
						}else{
							if(data.etyp_schedul == "Y" ||
								data.etyp_schedul == "y" ){
								image = "T";
							}else{
								image = "P";
							}
						}
					}else{
						if(data.sub_item_sched_type == "N" || 
							data.sub_item_sched_type == "n" ){
							image = "P";
						}else{
							image = "T";
						}
					}
				}
				
			}
			/*
			private function getImage(idx:int,composition:String,schedul:String,type:String,rigid:String):void
			{
				if(composition==null){
					if((rigid=='y')||(rigid=='Y')){
						img.source=rigidObject;
					}else{
						if((schedul=='y')||(schedul=='Y')) img.source=trailerObject;
						else img.source=pmvObject;
					}
				}else{
					if((type=='N')||(type=='n')){
						img.source=pmvObject;
					}else{
						img.source=trailerObject;
					}					
				}
			}
			private function getMarginLeft(type:String):int
			{
				if((type=='N')||(type=='n')) return 10;
				else return 0;
			}
			
			private function getMarginRight(type:String):int
			{
				if((type=='N')||(type=='n')) return -8;
				else return -2;
			}
			
			private function getImageWidth(type:String):int
			{
				if((type=='N')||(type=='n')) return 100;
				else return 210;
			}*/
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			private function isBadgeVisible(type:String,cmptnu:String):Boolean
			{
				if(type==null){
					if(cmptnu=='0')return false;
					else return true;
				}else{
					if((type=='N')||(type=='n')) return false;
					else return true;
				}
			}
			
			private function showDetails(arr:Object):void
			{
				var eq:ModalEquipmentDetails = new ModalEquipmentDetails();
				eq.title = resourceManager.getString('default','global.titles.cmpt_details');
				
				var temp:ArrayCollection = new ArrayCollection;
				for each(var x:Object in arr){
					temp.addItem(x);
				}
				eq.arr = temp;
				eq.nComp = arr.length.toString();
				PopUpManager.addPopUp(eq,this.parentApplication as DisplayObject,true);
				PopUpManager.centerPopUp(eq);
			}
			
			private function getTotalComp(arr:Object):String
			{
				var i:int=0;
				for each(var x:Object in arr){
					i+=1;
				}		
				return i.toString();
			}
		]]>
	</fx:Script>
	<s:transitions>
		<s:Transition fromState="normal" toState="hovered">
			<s:Fade target="{btnGrp}" duration="500"/>
		</s:Transition>
		<s:Transition fromState="hovered" toState="normal">
			<s:Fade target="{btnGrp}" duration="500"/>
		</s:Transition>
	</s:transitions>	
	
	<s:VGroup width="{imgWidth+4}" verticalAlign="bottom"  horizontalAlign="left"  paddingLeft="2" paddingRight="2">
		<s:Image source="{img}" width="{imgWidth}" height="100" />		
	</s:VGroup>	
	
	<s:Graphic top="35" horizontalCenter="0" visible="{isBadgeVisible(data.sub_item_sched_type,data.cmptnu)}" id="badge">
		<s:Ellipse height="20" width="20">
			<s:stroke>
				<s:SolidColorStroke color="0x000000" weight="1"/>
			</s:stroke>
			<s:fill>
				<s:SolidColor color="0xff0000" />
			</s:fill>
		</s:Ellipse>
	</s:Graphic>
	
	<s:Graphic top="57" horizontalCenter="0" visible="{isBadgeVisible(data.sub_item_sched_type,data.cmptnu)}">
		<s:Rect height="12" width="89">
			<s:stroke>
				<s:SolidColorStroke color="0x000000" weight="1"/>
			</s:stroke>
			<s:fill>
				<s:SolidColor color="0xFFFFFF" />
			</s:fill>
		</s:Rect>
	</s:Graphic>
	
	
	<s:Label text="{getTotalComp(data.compartments)}" horizontalCenter="0" top="40" fontSize="13" fontWeight="bold" color="0xFFFFFF" width="15" textAlign="center" visible="{isBadgeVisible(data.sub_item_sched_type,data.cmptnu)}"/>
	<s:Label top="59" width="85" color="0x555555" fontSize="11" fontWeight="bold" horizontalCenter="0" text="compartments" textAlign="center" visible="{isBadgeVisible(data.sub_item_sched_type,data.cmptnu)}"/>
	
	
	<s:HGroup id="btnGrp" top="0" right="0" includeIn="hovered,selected" gap="1">
		<s:Image source="assets/icons/info.png" useHandCursor="true" buttonMode="true" click="{showDetails(data.compartments)}" visible="{isBadgeVisible(data.sub_item_sched_type,data.cmptnu)}"/>
	</s:HGroup>		

</s:ItemRenderer>