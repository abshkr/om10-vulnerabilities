<?xml version="1.0" encoding="utf-8"?>
<s:GridItemRenderer xmlns:fx="http://ns.adobe.com/mxml/2009"
					xmlns:s="library://ns.adobe.com/flex/spark"
					xmlns:mx="library://ns.adobe.com/flex/mx" clipAndEnableScrolling="true"
					xmlns:components="components.*"
					xmlns:dm="dm.*"
					>
	
	<fx:Script>
		<![CDATA[
			import mx.collections.ArrayCollection;
			import spark.events.IndexChangeEvent;
			import dm.utils.tools;
			
			[Bindable] public var baseprodCodes:ArrayCollection;
			
			public var readOnly:Boolean = true;
			
			override public function prepare(hasBeenRecycled:Boolean):void
			{
				// TODO Auto-generated method stub
				//trace(owner);
				if (data)
				{
					///if (DM.ManualTransactions.curr_selected_transfer == -1) return;
					
					// The reference transfer data array could be null, user could delete all transfers by clicking 'Del Transfer' button.
					if (DM.ManualTransactions.curr_trsf_ref != null && DM.ManualTransactions.curr_trsf_ref.length == 0)
						return;
					
					//Ver2.9 When loading from saved MT data, this index is -1. (Related to initMemberValues())
					if (DM.ManualTransactions.curr_selected_transfer < 0)
						return;
					
					var oTmp:Object = DM.ManualTransactions.curr_trsf_ref.getItemAt(DM.ManualTransactions.curr_selected_transfer);
					trace(" ");
					trace("BaseProductCodeRender ====> prepare");
					trace("Drawer Code ->"+oTmp.curr_trsf_drwr_cd);
					trace("Drawer Prod Code ->"+oTmp.curr_trsf_drwr_prod_cd);
					trace("Arm Code ->"+oTmp.curr_trsf_arm_cd);
					baseprodCodes = new ArrayCollection();
					for each (var obj:Object in DM.ManualTransactions.baseproducts)
					{
						// Drawer + Drawer Product + Arm ==> Base Product
						if (obj.RAT_PROD_PRODCMPY == oTmp.curr_trsf_drwr_cd
						 && obj.RAT_PROD_PRODCODE == oTmp.curr_trsf_drwr_prod_cd
						 && obj.STREAM_ARMCODE    == oTmp.curr_trsf_arm_cd)//0702
						{
							// Only add the base products belong to this company+product+arm.
							var found:int = 0;
							for each(var o:Object in baseprodCodes)
							{
								if (obj.STREAM_BASECODE == o.STREAM_BASECODE)
								{
									found = 1;
									break;
								}
							}
							if (!found)
							{
								baseprodCodes.addItem(obj);
							}
						}
					}
					
					var idx:int = -1;
					if (baseprodCodes.length == 1)
					{
						// Only one base product available, so select it.
						listData.selectedIndex = 0;
						idx = 0;
					}
					else
					{
						var tmp:String = String(data[column.dataField]);
						var idx:int = -1;
						idx = tools.getItemIndexFromCode(tmp, baseprodCodes, "STREAM_BASECODE");
						if (readOnly && idx == -1)
						{
							idx = baseprodCodes.length - 1;
						}
						listData.selectedIndex = idx;
					}
					try
					{
						listLabel.text = baseprodCodes[idx].STREAM_BASECODE + " - " + baseprodCodes[idx].STREAM_BASENAME;
						listLabel.setStyle("color", DM.ManualTransactions.TEXT_COLOR_BLACK);
					}
					catch(e:Error)
					{
						listLabel.text = "Select Prod & Arm";
						listLabel.setStyle("color", DM.ManualTransactions.TEXT_COLOR_RED);
					}
					
					validateBaseProductCode();
					validateDensity();
					validateTemp();
				}
			}
			
			protected function validateBaseProductCode():void
			{
				if (listData.selectedIndex != -1)
				{
					// If one base prod selected, set the base prod value.
					if (baseprodCodes.length > 0)
						data[column.dataField] = baseprodCodes.getItemAt(listData.selectedIndex).STREAM_BASECODE;
				}
				else
				{
					// If no base prod selected, clear the base prod value.
					data[column.dataField] = null;
				}
			}
			
			protected function validateDensity():void
			{
				if (listData.selectedIndex != -1)
				{
					// If one base prod selected, set the density value.
					if (!data.trsf_bs_den) // Only set the default value when this cell is blank. To avoid overwrite user inputted vaule.
					{
						data.trsf_bs_den = String(Math.round(Number(baseprodCodes.getItemAt(listData.selectedIndex).STREAM_TANKDEN) * 10) / 10);
					}
				}
				else
				{
					// If no base prod selected, clear the density value.
					data.trsf_bs_den = null;
				}
			}
			
			protected function validateTemp():void
			{
				if (listData.selectedIndex != -1)
				{
					// If one base prod selected, set the temp value.
					if (!data.trsf_bs_temp) // Only set the default value when this cell is blank. To avoid overwrite user inputted vaule.
					{
						// 20130723 As spec changed. Now leave the default base prod temp as BLANK. 
						////data.trsf_bs_temp = baseprodCodes.getItemAt(listData.selectedIndex).BASE_RPT_TEMP;
					}
				}
				else
				{
					// If no base prod selected, clear the temp value.
					data.trsf_bs_temp = null;
				}
			}
			
			protected function droplist_changeHandler(event:IndexChangeEvent):void
			{
				data[column.dataField]=listData.selectedItem.STREAM_BASECODE;
				//var parnt:DataGrid = owner as DataGrid;
				//(parnt.dataProvider as ArrayCollection).refresh();
			}
			
			/*
			protected function getCodeName(code:String): String
			{
				var res:String = "";
				for each (var o:Object in DM.ManualTransactions.baseproducts)
				{
					if (code == o.BASE_CODE)
					{
						res = o.BASE_CODE + " - " + o.BASE_NAME;
						return res;
					}
				}
				
				return res;
			}*/
		]]>
	</fx:Script>
	
	<fx:Declarations>
		<dm:DM/>
	</fx:Declarations>
	<!--dataProvider="{DM.ManualTransactions.baseproducts}"
	selectedItem="{getCodeName(data[column.dataField])}"
	-->
	<s:DropDownList id="listData" top="0" left="0" bottom="0" right="0" includeInLayout="{!readOnly}" visible="{!readOnly}"
					dataProvider="{baseprodCodes}"
					change="droplist_changeHandler(event)"
					labelField="CODE_NAME" prompt="Select Base Product" useVirtualLayout="false"/>
	
	<s:Label id="listLabel" top="2" left="2" bottom="2" right="2" backgroundColor="#EAEAEA" verticalAlign="middle" includeInLayout="{readOnly}" visible="{readOnly}" backgroundAlpha="1"/>
	
</s:GridItemRenderer>
