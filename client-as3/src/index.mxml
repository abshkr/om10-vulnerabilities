<?xml version="1.0" encoding="utf-8"?>
<s:Application xmlns:fx="http://ns.adobe.com/mxml/2009"
			   xmlns:s="library://ns.adobe.com/flex/spark"
			   xmlns:mx="library://ns.adobe.com/flex/mx"
			   xmlns:components="components.*"
			   xmlns:views="views.*"
			   xmlns:domainservice="services.domainservice.*"
			   xmlns:roleservice="services.roleservice.*"
			   xmlns:dm="dm.*"
			   minWidth="1000" minHeight="500" creationComplete="creationCompleteHandler(event)"
			   mouseMove="application1_mouseMoveHandler(event)"
			   preinitialize="application1_preinitializeHandler(event)" skinClass="skins.OM5000Skin">
	
	<s:states>
		<s:State enterState="JSInterface.window.isFlexDataSaved = true" name="login"/>
		<s:State enterState="JSInterface.window.isFlexDataSaved = false" name="default"/>
	</s:states>

	<fx:Style source="styles/application.css"/>
	
	<fx:Script>
		<![CDATA[
			import aw.external.JSInterface;
			import aw.external.jsinterface.JSDynamic;
			import aw.external.jsinterface.JSFunction;
			
			import components.BusyIndicator;
			
			import dm.DM;
			
			import flash.globalization.LocaleID;
			
			import mx.collections.ArrayCollection;
			import mx.controls.Alert;
			import mx.controls.DateField;
			import mx.core.FlexGlobals;
			import mx.events.FlexEvent;
			import mx.managers.BrowserManager;
			import mx.managers.IBrowserManager;
			import mx.managers.PopUpManager;
			import mx.rpc.events.FaultEvent;
			import mx.rpc.events.ResultEvent;
			import mx.rpc.http.HTTPService;
			import mx.utils.ObjectUtil;
			
			
			static public const NOT_SAVED_ALERT:String = '\\\\n\\\\nYou Have not Loggged out cleanly\\\\n Please logout through the menu Option\\\\n\\\\n';			
			
			public var browser:IBrowserManager = BrowserManager.getInstance();
			private var processingAnimation:BusyIndicator = new BusyIndicator();
			private var menu_items:ArrayCollection = new ArrayCollection();
			private var domain:String="";
			private var tmpdf:DateField = new DateField();
			private var privArr:ArrayCollection= new ArrayCollection();
			
			private var forced:Boolean = false;
			private var timeOut:int = 1;
			private var getVersion:HTTPService = new HTTPService();
			private var getSite:HTTPService = new HTTPService();
			
			
			protected function creationCompleteHandler(event:FlexEvent):void{
				global.app = FlexGlobals.topLevelApplication;
				getVersion.url = '/version.txt';
				getVersion.method = 'POST';
				getVersion.resultFormat='text';
				getVersion.addEventListener(ResultEvent.RESULT,version_Result);
				getVersion.send();
				//getExpiryDates.token = this.expiryService.getAllExpiryDateTitle();
			}
			
			public function initMainView(): void{           
				currentState="default";
				processingAnimation.width = processingAnimation.height = 80;
				
				PopUpManager.addPopUp(processingAnimation, this, true);
				PopUpManager.centerPopUp(processingAnimation);
				
				updateSessionStatus();
				global.gTimer.attachFunction(updateSessionStatus, 4);
				
				if (global.timeOut > 0){
					global.gTimer.attachFunction(onTimeout,4);
				}
				
				getUserRole.token = roleService.getUserRole(global.user);
				
				// here deal with the expiry date titles
				global.exp1 = global.LOGIN_OBJECT.EXPIRY_DATE_TITLES[0].EXPIRY_DATE_TITL;
				global.exp2 = global.LOGIN_OBJECT.EXPIRY_DATE_TITLES[1].EXPIRY_DATE_TITL;
				global.exp3 = global.LOGIN_OBJECT.EXPIRY_DATE_TITLES[2].EXPIRY_DATE_TITL;
				global.exp4 = global.LOGIN_OBJECT.EXPIRY_DATE_TITLES[3].EXPIRY_DATE_TITL;
				global.exp5 = global.LOGIN_OBJECT.EXPIRY_DATE_TITLES[4].EXPIRY_DATE_TITL;
				global.exp6 = global.LOGIN_OBJECT.EXPIRY_DATE_TITLES[5].EXPIRY_DATE_TITL;
				
				global.exp7 = resourceManager.getString('default','TNKR_LIC_EXP');
				global.exp8 = resourceManager.getString('default','TNKR_DGLIC_EXP');
				global.exp9 = resourceManager.getString('default','TNKR_INS_EXP');
				if ( global.LOGIN_OBJECT.EXPIRY_DATE_TITLES.length >= 7 )
				{
					global.exp7 = global.LOGIN_OBJECT.EXPIRY_DATE_TITLES[6].EXPIRY_DATE_TITL;
				}
				if ( global.LOGIN_OBJECT.EXPIRY_DATE_TITLES.length >= 8 )
				{
					global.exp8 = global.LOGIN_OBJECT.EXPIRY_DATE_TITLES[7].EXPIRY_DATE_TITL;
				}
				if ( global.LOGIN_OBJECT.EXPIRY_DATE_TITLES.length >= 9 )
				{
					global.exp9 = global.LOGIN_OBJECT.EXPIRY_DATE_TITLES[8].EXPIRY_DATE_TITL;
				}
				
				
			}
			
			
			private function updateSessionStatus(): void{
				global.amfRequest("SecureAuth.getSessionStatus", 
					function(o:Object):void{
						
						if(o && o.VALID_SESSION){
							// update server time
							global.dbCharacterSet	= o.NLS_CHARACTERSET;
							global.serverTime		= o.SERVER_TIME;
							var yy:int 				= Number(global.serverTime.substr(0,4));
							var mm:int 				= Number(global.serverTime.substr(5,2));
							var dd:int 				= Number(global.serverTime.substr(8,2));
							var hr:int 				= Number(global.serverTime.substr(11,2));
							var mn:int 				= Number(global.serverTime.substr(14,2));
							global.serverDateTime 	= new Date(yy,mm-1,dd,hr,mn,0,0);
							// update alarm data 
							if(o.ALARM_DATA){
								for (var i:int = 0; i < o.ALARM_DATA.length; i++) {
									o.ALARM_DATA[i].MESSAGE = (o.ALARM_DATA[i].MESSAGE as String).split("|").join("");
									global.messageList.addItem(o.ALARM_DATA[i]);
								}
							}
							if(o.WIDGET_DATA){
								global.wg_personnel 		= o.WIDGET_DATA.PERSONNEL_TOTAL;
								global.wg_personnel_active 	= o.WIDGET_DATA.PERSONNEL_ACTIVE;
								global.wg_tankers 			= o.WIDGET_DATA.TANKER_TOTAL;
								global.wg_tankers_active 	= o.WIDGET_DATA.TANKER_ACTIVE;
								if(o.WIDGET_DATA.hasOwnProperty("ActiveID")){
									global.wg_activeid.source = o.WIDGET_DATA.ActiveID;
									global.wg_activeid.refresh();
								}
								if(o.WIDGET_DATA.hasOwnProperty("CurrentFolio")){
									global.wg_current_folio.source = o.WIDGET_DATA.CurrentFolio;
									global.wg_current_folio.refresh();
								}
								if(o.WIDGET_DATA.hasOwnProperty("TankerMovement")){
									global.wg_tanker_movement.source = o.WIDGET_DATA.TankerMovement;
									global.wg_tanker_movement.refresh();
								}
								if(o.WIDGET_DATA.hasOwnProperty("MaxTransactionID")){
									global.wg_max_trans_id.source = o.WIDGET_DATA.MaxTransactionID;
									global.wg_max_trans_id.refresh(); 
								}
							}
						}else{
							secureLogout();
						}
					}, 
					function(o:Object):void{// Cannot keep up with session -> logout
						secureLogout();
					}
				);
			}
			
			
			
			protected function menu_filterFunc(item:Object):Boolean
			{
				if (item.domain_text == domain && item.object_parent_id==0)
				{
					if(global.OMLITE)
					{
						return global.includedInOMLite(item.object_text);					
					}
					
					// check if the partnership screens enabled 
					if ( global.getValueFromSiteConfigSettings("SITE_PARTNERSHIP_ENABLED") != 'Y' )
					{
						if ( item.object_text == "M_PARTNERS" || item.object_text == "M_PARTNERSHIP" )
						{
							return false;
						}
					}
					
					// check if the audit screens enabled 
					if ( global.getValueFromSiteConfigSettings("SITE_AUDIT_SCREEN_ENABLED") != 'Y' )
					{
						if ( item.object_text == "M_AUDITREPORT" )
						{
							return false;
						}
					}
					
					// check if the pricing screens enabled 
					if ( global.getValueFromSiteConfigSettings("SITE_PRICING_ENABLED") != 'Y' )
					{
						if ( item.object_text == "M_CUSTOMERPRICING" 
						  || item.object_text == "M_PRICEOFFSETS" 
						  || item.object_text == "M_ORDERPRODUCTPRICING" 
						  || item.object_text == "M_PRODUCTBASEPRICES" 
						)
						{
							return false;
						}
					}
					
					return true;     
				}
				else
				{
					return false;
				}
			}
			
			protected function getMenuMainResult_resultHandler(event:ResultEvent):void{
				global.Navigator.removeAll();
				var str:String="";
				for (var i:int=0; i < event.result.length;i++)
				{
					for (var j:int=0; j < privArr.length;j++)
					{
						if (privArr[j].object_id == event.result[i].object_id && privArr[j].priv_view==1)
						{
							if(global.OMLITE)if(!global.includedInOMLite(event.result[i].domain_text))continue;
							str = String(event.result[i].domain_text).toLowerCase();
							var obj:Object = {title:str,
								domain:event.result[i].domain_text,
									navbar:new ArrayCollection()};
							global.Navigator.addItem(obj);
						}
					}
				}
				getMenuItemsResult.token = domainService.getMenuItems();
			}
			
			protected function getMenuItemsResult_resultHandler(event:ResultEvent):void
			{
				menu_items.source = (event.result as ArrayCollection).source;
				menu_items.filterFunction = menu_filterFunc;
				for (var i:int=0;i < global.Navigator.length;i++)
				{
					domain = global.Navigator[i].domain;
					menu_items.refresh();
					for (var j:int=0;j < menu_items.length;j++)
					{
						for (var k:int=0; k < privArr.length;k++)
						{
							if (privArr[k].object_id == menu_items[j].object_id && privArr[k].priv_view==1)
							{
								var str:String = String(menu_items[j].object_text);
								if (str=='M_SITECONFIG')
								{
									global.scUpdate=(privArr[k].priv_update==1)?true:false;
									global.scView=true;
								}
								else
								{
									var obj:Object = {title:str.toLowerCase(),
										module:"modules/"+str+".swf",
										priv_read:true,
										priv_create:(privArr[k].priv_create==1)?true:false,
										priv_update:(privArr[k].priv_update==1)?true:false,
										priv_delete:(privArr[k].priv_delete==1)?true:false,
										priv_password:(privArr[k].priv_protect==1)?true:false,
										needsCGI:(privArr[k].needsCGI==1)?true:false
									};
									global.Navigator[i].navbar.addItem(obj);
								}
							}
						}
					}
				}
				
				PopUpManager.removePopUp(processingAnimation);
				global.menuArray = global.Navigator[0].navbar;
				global.indexPos = 0;
				global.menuArray.refresh();
				main.mainMenu.menuSelector.selectedIndex = 0;
			}
			
			protected function application1_preinitializeHandler(event:FlexEvent):void{
				JSInterface.initialize(this.systemManager.stage);
				if(JSInterface.navigator.appName.toLowerCase().indexOf('fox')>0){
					JSInterface.window.onbeforeunload = this.isDataSaved;
				}
				else{
					JSInterface.window.onbeforeunload = JSFunction.create("var text; if(!window.isFlexDataSaved){text='"+NOT_SAVED_ALERT+"';}; return text;");
				}
				JSInterface.window.isFlexDataSaved = true;
			}
			
			protected function isDataSaved(event:JSDynamic=null): String{
				if(JSInterface.window.isFlexDataSaved) return "";
				if(event){
					event.returnValue = NOT_SAVED_ALERT;
				}
				return NOT_SAVED_ALERT;
			}
			
			protected function onTimeout():void{
				if(global.timeOut == -1)return;
				timeOut += 1;
				if (timeOut > global.timeOut){
					secureLogout();
				}
			}
			
			public function logOff(): void{
				if (global.autoLogin)
					navigateToURL(new URLRequest('about:blank'),'_self')
				else
					navigateToURL(new URLRequest('index.html'),'_self')
			}
			
			protected function application1_mouseMoveHandler(event:MouseEvent):void{
				timeOut = 0;
			}
			
			public function setJava(): void{
				JSInterface.window.isFlexDataSaved = true;
			}
			
			protected function domainService_faultHandler(event:FaultEvent):void{
				PopUpManager.removePopUp(processingAnimation);
				global.msgFail(global.DisasterError);
			}
			
			protected function getUserRole_result(event:ResultEvent):void{
				global.hasAccess=false;
				if (event.result == '9'){
					global.msgFail('User has no access privileges');
					PopUpManager.removePopUp(processingAnimation);
				}else{
					global.hasAccess=true;
					main.headerMenu.invalidateDisplayList();
					privArr=getUserRole.lastResult.domainprivilege;
					getMenuMainResult.token = domainService.getMenuMain();
				}
			}
			
			protected function version_Result(event:ResultEvent):void{
				global.Build = event.result as String;
				global.BuildMain = this.getCurrentVersion( global.Build );
				if(global.OMLITE)global.Build += " LITE";
				getVersion.removeEventListener(ResultEvent.RESULT,version_Result);
			}
			
			protected function getCurrentVersion(version:String):String
			{
				var currBuild:String="";
				var buildItems:Array = version.split('-');
				if ( buildItems.length >= 5 )
				{
					currBuild = buildItems[0] + '-' + buildItems[1] + '-' + buildItems[2] + '-' + buildItems[3] + '-' + buildItems[4];
				}
				
				return currBuild;
			}
			
			public function getUserPriv(id:String): Boolean{
				var res:Boolean=false;
				for (var i:int=0; i < privArr.length;i++){
					if (privArr[i].object_id == id){
						res = (privArr[i].priv_update==1)?true:false;
					}
				}
				return res;
			}
			
			public function secureLogout():void{
				global.amfRequest("SecureAuth.logout",
					function(o:Object = null):void{
						global.app.setJava();
						setTimeout(global.app.logOff,500);						
					},
					function(o:Object = null):void{
						// we probably need to do something here
					});
			}
		]]>
	</fx:Script>
	
	<fx:Declarations>
		<roleservice:RoleService id="roleService" fault="global.msgFail(global.DisasterError)"  channelSet="{global.channelSet}" 
								 showBusyCursor="false"/>
		<s:DateTimeFormatter id="timeFormatter" dateStyle="short" locale="{LocaleID.DEFAULT}"
							 timeStyle="none"/>
		<s:CallResponder id="getUserRole" result="getUserRole_result(event)"/>
		<domainservice:DomainService id="domainService" fault="domainService_faultHandler(event)"  channelSet="{global.channelSet}" 
									 showBusyCursor="false"/>
		<s:CallResponder id="getMenuMainResult" result="getMenuMainResult_resultHandler(event)"/>
		<s:CallResponder id="getMenuItemsResult" result="getMenuItemsResult_resultHandler(event)"/>
		
		<s:CallResponder id="getRolesResult" />
		<dm:DM/>
	</fx:Declarations>
	<views:v_Login id="vlog" includeIn="login" horizontalCenter="0" verticalCenter="0"/>
	<views:v_Main id="main" includeIn="default" width="100%" height="100%" minHeight="500"/>
</s:Application>
