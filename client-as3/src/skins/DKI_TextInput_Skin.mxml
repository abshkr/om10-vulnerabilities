<?xml version="1.0" encoding="utf-8"?>
<s:SparkSkin xmlns:fx="http://ns.adobe.com/mxml/2009" xmlns:s="library://ns.adobe.com/flex/spark"
			 xmlns:fb="http://ns.adobe.com/flashbuilder/2009" 
			 alpha.disabledStates="0.5" blendMode="normal" xmlns:mx="library://ns.adobe.com/flex/mx">
	
	<fx:Metadata>
		<![CDATA[ 
		[HostComponent("spark.components.TextInput")]
		]]>
	</fx:Metadata> 
	
	<fx:Declarations>
		<s:GlowFilter id="inner" inner="true" color="0x666666" strength="0.7" blurX="10" blurY="10" alpha="0.75"/>
	</fx:Declarations>
	
	<s:states>
		<s:State name="normal"/>
		<s:State name="invalid"/>
		<s:State name="disabled" stateGroups="disabledStates"/>
		<s:State name="normalWithPrompt"/>
		<s:State name="disabledWithPrompt" stateGroups="disabledStates"/>
	</s:states>
	
	<fx:Script fb:purpose="styling">
		<![CDATA[
			import mx.core.FlexVersion;
			
			
			[Bindable]private var corner:Number = 0;	
			
			private var paddingChanged:Boolean;
			
			static private const exclusions:Array = ["background", "textDisplay", "promptDisplay", "border"];
			
			static private const exclusions_4_0:Array = ["background", "textDisplay", "promptDisplay"];
			
			override public function get colorizeExclusions():Array 
			{
				if (FlexVersion.compatibilityVersion < FlexVersion.VERSION_4_5)
				{
					return exclusions_4_0;
				}
				
				return exclusions;
			}
			
			static private const contentFill:Array = ["bgFill"];
			
			/**
			 *  @private
			 */
			override public function get contentItems():Array {return contentFill};
			
			/**
			 *  @private
			 */
			override protected function commitProperties():void
			{
				super.commitProperties();
				
				if (paddingChanged)
				{
					updatePadding();
					paddingChanged = false;
				}
			}
			
			/**
			 * @private
			 */
			override protected function initializationComplete():void
			{
				useChromeColor = true;
				super.initializationComplete();
			}
			
			/**
			 *  @private
			 */
			override protected function updateDisplayList(unscaledWidth:Number, unscaledHeight:Number):void
			{
				corner = hostComponent.height/2;
				background.left = background.top = background.right = background.bottom = 0;
				textDisplay.left = textDisplay.right = 10;
				textDisplay.top = textDisplay.bottom = 1;
				
				if (promptDisplay)
				{
					promptDisplay.setLayoutBoundsSize(unscaledWidth, unscaledHeight);
					promptDisplay.setLayoutBoundsPosition(0, 0);
				}
				
				super.updateDisplayList(unscaledWidth, unscaledHeight);
			}
			
			private function updatePadding():void
			{
				if (!textDisplay)
					return;
				
				// Push padding styles into the textDisplay
				var padding:Number;
				
				padding = getStyle("paddingLeft");
				if (textDisplay.getStyle("paddingLeft") != padding)
					textDisplay.setStyle("paddingLeft", padding);
				
				padding = getStyle("paddingTop");
				if (textDisplay.getStyle("paddingTop") != padding)
					textDisplay.setStyle("paddingTop", padding);
				
				padding = getStyle("paddingRight");
				if (textDisplay.getStyle("paddingRight") != padding)
					textDisplay.setStyle("paddingRight", padding);
				
				padding = getStyle("paddingBottom");
				if (textDisplay.getStyle("paddingBottom") != padding)
					textDisplay.setStyle("paddingBottom", padding);
				
				if (!promptDisplay)
					return;
				
				padding = getStyle("paddingLeft");
				if (promptDisplay.getStyle("paddingLeft") != padding)
					promptDisplay.setStyle("paddingLeft", padding+7);
				
				padding = getStyle("paddingTop");
				if (promptDisplay.getStyle("paddingTop") != padding)
					promptDisplay.setStyle("paddingTop", padding);
				
				padding = getStyle("paddingRight");
				if (promptDisplay.getStyle("paddingRight") != padding)
					promptDisplay.setStyle("paddingRight", padding);
				
				padding = getStyle("paddingBottom");
				if (promptDisplay.getStyle("paddingBottom") != padding)
					promptDisplay.setStyle("paddingBottom", padding);
			}
			
			/**
			 *  @private
			 */
			override public function styleChanged(styleProp:String):void
			{
				var allStyles:Boolean = !styleProp || styleProp == "styleName";
				
				super.styleChanged(styleProp);
				
				if (allStyles || styleProp.indexOf("padding") == 0)
				{
					paddingChanged = true;
					invalidateProperties();
				}
			}
		]]>
	</fx:Script>
	
	<fx:Script>
		<![CDATA[
			/** 
			 * @private 
			 */     
			private static const focusExclusions:Array = ["textDisplay"];
			
			/**
			 *  @private
			 */
			override public function get focusSkinExclusions():Array { return focusExclusions;};
		]]>
	</fx:Script>
	
	
	<s:Rect id="background" left="1" right="1" top="1" bottom="1" radiusX="{corner+2}" radiusY="{corner+2}">
		<s:fill>
			<!--- @private Defines the background fill color. -->
			<s:SolidColor id="bgFill" color="0xFFFFFF" />
		</s:fill>
	</s:Rect>
	
	<s:Rect left="1" right="1" top="1" bottom="1" radiusX="{corner+2}" radiusY="{corner+2}">
		<s:fill>
			<s:SolidColor color="0xFFFFFF" />
		</s:fill>
	</s:Rect>
	
	<s:Rect id="border" left="0" right="0" top="0" bottom="0" width="69" height="20" radiusX="{corner+2}" radiusY="{corner+2}">
		<s:stroke>
			<s:LinearGradientStroke rotation="90" weight="1">
				<s:GradientEntry color="0x000000" alpha="0.75" />
			</s:LinearGradientStroke>
		</s:stroke>
	</s:Rect>	
	
	<s:RichEditableText id="textDisplay"
						verticalAlign="middle"
						widthInChars="10"
						left="2" right="2" top="2" bottom="2" />
	<!--- Defines the Label that is used for prompt text. The includeInLayout property is false so the prompt text does not affect measurement. -->
	<s:Label id="promptDisplay" maxDisplayedLines="1" left="5"
			 verticalAlign="middle"
			 mouseEnabled="false" mouseChildren="false"
			 includeIn="normalWithPrompt,disabledWithPrompt" 
			 includeInLayout="false"
			 />
	
</s:SparkSkin>
