<?xml version="1.0" encoding="utf-8"?>
<s:GridItemEditor xmlns:fx="http://ns.adobe.com/mxml/2009" 
				  xmlns:s="library://ns.adobe.com/flex/spark"   
				  xmlns:mx="library://ns.adobe.com/flex/mx"
				  creationComplete="creationCompleteHandler(event)">
	
	<fx:Script>
		<![CDATA[
			import dm.DM;
			import dm.utils.tools;
			
			import mx.collections.ArrayCollection;
			import mx.events.FlexEvent;
			
			import spark.events.IndexChangeEvent;
			
			[Bindable] private var myDataProvider:ArrayCollection = new ArrayCollection
				(
					[
						{id:'B', code:' ', name:'Remove the mark', icon:'assets/icons/blank.png'}
						, {id:'A', code:'+', name:'Mark the line item as mode ADD', icon:'assets/icons/create.png'}
						, {id:'U', code:'*', name:'Mark the line item as mode EDIT', icon:'assets/icons/edit1.png'}
						, {id:'D', code:'-', name:'Mark the line item as mode DELETE', icon:'assets/icons/delete.png'}
					]
				);
			
			public var isModeAdd:Boolean=false;
			public var oldCode:String;
			
			public function creationCompleteHandler(event:FlexEvent):void
			{
				filterMarksList();
				oldCode = data[column.dataField];
				if ( data[column.dataField] == "+" )
				{
					isModeAdd = true;
				}
				else
				{
					isModeAdd = false;
				}
			}
			
			protected function marks_filterFunc(item:Object):Boolean
			{
				if ( data[column.dataField] == "+" )
				{
					if ( item.code=="+" || item.code==" " )                
					{ 
						return true     
					}
					else
					{
						return false;
					}
				}
				else
				{
					if ( item.code=="*" || item.code=="-" || item.code==" " )                
					{ 
						return true     
					}
					else
					{
						return false;
					}
				}
			}
			public function filterMarksList():void
			{
				myDataProvider.filterFunction = marks_filterFunc;
				myDataProvider.refresh();
			}
			
			
			override public function set value(newValue:Object):void 
			{
				//this.getMyDataProvider();
				ddl.selectedIndex=0;
				for(var i:int=0;i <myDataProvider.length;i++)
				{
					if (myDataProvider[i].code == data[column.dataField])
					{
						ddl.selectedIndex = i;
						break;
					}
				}
			}
			
			override public function get value():Object 
			{
				if (ddl.selectedIndex > -1)
				{
					return myDataProvider[ddl.selectedIndex].code;
				}
				else
				{
					if ( myDataProvider != null && myDataProvider.length>0 )
					{
						return oldCode;
						if ( isModeAdd == true )
						{
							return "+";
						}
						else
						{
							return myDataProvider[0].code;
						}
						
					}
					else
					{
						return " ";
					}
				}
			}
			
			override public function setFocus():void 
			{
				ddl.setFocus();
			}
			
			
			protected function droplist_changeHandler(event:IndexChangeEvent):void
			{
				trace ("droplist_changeHandler in GridMarkEditor", isModeAdd, ddl.selectedIndex, ddl.selectedItem.name, data[column.dataField]);
				if ( isModeAdd == true && data[column.dataField]=="+" && ddl.selectedIndex==0 )
				{
					dataGrid.dataProvider.removeItemAt( dataGrid.selectedIndex );
					dataGrid.invalidateDisplayList();
				}
				//if ( (data[column.dataField]=="*" || data[column.dataField]=="-") && ddl.selectedIndex==0 )
				if ( (data[column.dataField]=="*") && (ddl.selectedIndex==0 || ddl.selectedIndex==2) )
				{
					var obj:Object = dataGrid.dataProvider.getItemAt(dataGrid.selectedIndex);
					for ( var s:String in dataGrid.dataProvider[dataGrid.selectedIndex].payload )
					{
						if ( obj.hasOwnProperty(s) )
						{
							dataGrid.dataProvider[dataGrid.selectedIndex].payload[s] = obj[s];
						}
					}
					dataGrid.invalidateCell( dataGrid.selectedIndex, -1 );
				}
			}
			
			
		]]>
	</fx:Script>
	<s:ComboBox id="ddl" dataProvider="{myDataProvider}" borderVisible="false"
				skinClass="skins.DKI_IconComboBox_Skin" labelField="code"
				change="droplist_changeHandler(event)" 
				itemRenderer="renderers.ImageItemRenderer"
				width="100%"/> 
</s:GridItemEditor>