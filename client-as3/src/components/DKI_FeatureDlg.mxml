<?xml version="1.0" encoding="utf-8"?>
<s:Panel xmlns:fx="http://ns.adobe.com/mxml/2009"
		 xmlns:s="library://ns.adobe.com/flex/spark"
		 xmlns:mx="library://ns.adobe.com/flex/mx" 
		 xmlns:components="components.*"
		 title="Features Management" 
		 skinClass="skins.DialogBoxSkin" width="100%" height="400" minHeight="100" >
	
	<s:layout>
		<s:VerticalLayout paddingBottom="5" paddingLeft="5" paddingTop="5" paddingRight="5" gap="5"/>
	</s:layout>
	
	<s:states>
		<s:State name="create"/>
	</s:states>

	<fx:Script>
		<![CDATA[
			import dm.remoteDataService;
			import dm.remoteListService;
			
			import mx.collections.ArrayCollection;
			import mx.events.CloseEvent;
			import mx.events.FlexEvent;
			
			import spark.events.GridItemEditorEvent;
			
			private var updateAction:remoteDataService = new remoteDataService( "FeatureConfigService.putFeatureConfiguration", null, updateData_resultHandler, 1 );

			[Bindable] private var siteConfigData:remoteDataService = new remoteDataService( "FeatureConfigService.getSiteConfig", null, getSiteConfig_resultHandler );
			[Bindable] public var featureData:remoteDataService = new remoteDataService( "FeatureConfigService.getFeatureConfiguration", null, getFeature_resultHandler, 1 );
			[Bindable] private var featureList:ArrayCollection=new ArrayCollection();
			private var allFeatures:ArrayCollection=new ArrayCollection();
			
			public var saveFunction:Function;
			[Bindable] private var tmp:String='z';
			public var SELECT_TYPE:String="";
			
			protected function saveHandler(event:MouseEvent):void
			{
				var x:Object;
				var y:Object;
				
				for each ( x in this.allFeatures )
				{
					for each ( y in this.featureGrid.dataProvider )
					{
						if ( x.feature_code == y.feature_code )
						{
							x.feature_flag = y.feature_flag;
							break;
						}
					}
				}
				
				this.updateAction.service( allFeatures.source );
			}
		
			protected function closeHandler(event:MouseEvent):void
			{
				this.dispatchEvent(new CloseEvent(CloseEvent.CLOSE,true, false));
			}
			
			protected function getFeature_resultHandler():void
			{
				var myobj:Object;
				myobj = JSON.parse( featureData.dataString, null );
				
				featureList.removeAll();
				allFeatures.removeAll();
				for each(var o:Object in myobj)
				{
					this.allFeatures.addItem( o );
					
					if ( o.feature_gui == 'Y' )
					{
						this.featureList.addItem( o );
					}
				}
				
				this.adjustButtonAll();
			}
			
			
			protected function adjustButtonAll():void
			{
				var tNum:int=0;
				var fNum:int=0;
				for each ( var x:Object in this.featureGrid.dataProvider )
				{
					if ( x.feature_flag == 'Y' )
					{
						tNum += 1;
					}
					else
					{
						fNum += 1;
					}
				}
				
				if ( tNum == this.featureGrid.dataProvider.length )
				{
					this.btn_select_all.enabled = false;
					this.btn_unselect_all.enabled = true;
				}
				else if ( fNum == this.featureGrid.dataProvider.length )
				{
					this.btn_select_all.enabled = true;
					this.btn_unselect_all.enabled = false;
				}
				else
				{
					this.btn_select_all.enabled = true;
					this.btn_unselect_all.enabled = true;
				}
			}
			
			protected function selectAllHandler(event:MouseEvent):void
			{
				var x:Object;
				
				for each ( x in this.featureGrid.dataProvider )
				{
					x.feature_flag = 'Y';
				}
				
				var temp = this.featureGrid.dataProvider;
				this.featureGrid.dataProvider = null;
				this.featureGrid.dataProvider = temp;
				//this.featureGrid.invalidateDisplayList();
				
				this.btn_select_all.enabled = false;
				this.btn_unselect_all.enabled = true;
				//this.adjustButtonAll();
			}
			
			protected function unselectAllHandler(event:MouseEvent):void
			{
				var x:Object;
				
				for each ( x in this.featureGrid.dataProvider )
				{
					x.feature_flag = 'N';
				}
				
				var temp = this.featureGrid.dataProvider;
				this.featureGrid.dataProvider = null;
				this.featureGrid.dataProvider = temp;
				//this.featureGrid.invalidateDisplayList();
				
				this.btn_select_all.enabled = true;
				this.btn_unselect_all.enabled = false;
				//this.adjustButtonAll();
			}
			
			protected function featureGrid_gridItemEditorSessionSaveHandler(event:GridItemEditorEvent):void
			{
				this.adjustButtonAll();
			}
			
			protected function updateData_resultHandler( ):void
			{
				if ( this.updateAction.dataString == "OK" )
				{
					// reload site config
					this.siteConfigData.service();
					global.msgSuccess(resourceManager.getString('default','MSG_UPDATE__SUCCESS'));
				}
				else
				{
					global.msgFail(resourceManager.getString('default','ERROR_UPDATE__FAILURE'));
				}
			}
			
			protected function getSiteConfig_resultHandler():void{
				// store the site config settings to use later
				global.siteConfigSettings = new ArrayCollection();
				
				global.gSafefillLabel = '';
				global.gCapacityLabel = '';
				global.wg_max_tags_flag = false;
				global.wg_max_tags = -1;
				
				for each ( var o:Object in this.siteConfigData )
				{
					var cfgObj:Object = new Object();
					cfgObj.config_key = o.config_key;
					cfgObj.config_value = o.config_value;
					global.siteConfigSettings.addItem( cfgObj );
					
					if (cfgObj.config_key == 'URBAC_PWD_LEN_MIN') global.minPassLength = cfgObj.config_value;
					if (cfgObj.config_key == 'URBAC_PWD_LEN_MAX') global.maxPassLength = cfgObj.config_value;
					if (cfgObj.config_key == 'URBAC_PWD_AUTO_LOCK') global.autoLockout = cfgObj.config_value;
					if (cfgObj.config_key == 'URBAC_PWD_COMPLEXITY') global.passComplexity = cfgObj.config_value;
					if (cfgObj.config_key == 'URBAC_AUTO_LOGOFF') global.timeOut = cfgObj.config_value;
					if (cfgObj.config_key == 'LIMIT_TO_SERVER_DATETIME') global.limitToServerDateTime = (cfgObj.config_value=='Y');
					if (cfgObj.config_key == 'LIVE_JOURNAL_SORT') global.journalSort = cfgObj.config_value;
					
					if (cfgObj.config_key == 'SEALNUM_SOURCE') global.siteSealSourceExternal = cfgObj.config_value == 'EXTERNAL';
					if (cfgObj.config_key == 'SITE_USE_SEAL') global.siteUseSeal = cfgObj.config_value == 'Y';
					if (cfgObj.config_key == 'SCHD_RESET_DRIVER') global.siteCanResetDriver = cfgObj.config_value == 'Y';
					if (cfgObj.config_key == 'SITE_USE_WEIGHBRIDGE') global.siteUseWeighbridge = cfgObj.config_value == 'Y';
					
					if (cfgObj.config_key == 'SITE_DEFAULT_TIME_STRING') global.gDefaultTimeString = cfgObj.config_value;
					
					// special settings for compartment safefill and capacity
					if (cfgObj.config_key == 'SITE_SAFEFILL_LABEL')
					{
						global.gSafefillLabel = cfgObj.config_value;
					}
					if (cfgObj.config_key == 'SITE_CAPACITY_LABEL')
					{
						global.gCapacityLabel = cfgObj.config_value;
					}
					
					// special settings for limit of max tags
					if (cfgObj.config_key == 'SITE_MAX_TAGS')
					{
						if ( int(cfgObj.config_value) > 0 )
						{
							global.wg_max_tags_flag = true;
							global.wg_max_tags = int(cfgObj.config_value);
						}
						else
						{
							global.wg_max_tags_flag = false;
							global.wg_max_tags = -1;
						}
					}
				}
				
				switch(global.passComplexity){
					case 6: 
						//global.passStr = "requires characters or numbers ("+global.minPassLength+" ~ "+global.maxPassLength+")";
						global.passStr = resourceManager.getString('default','global.msg.PASSWORD_COMPLEXITY_MEDIUM') + " ("+global.minPassLength+" ~ "+global.maxPassLength+")";
						break;
					case 7:
						//global.passStr = "requires number,uppercase and lowercase ("+global.minPassLength+" ~ "+global.maxPassLength+")";
						global.passStr = resourceManager.getString('default','global.msg.PASSWORD_COMPLEXITY_HIGH') + " ("+global.minPassLength+" ~ "+global.maxPassLength+")";
						break;
					case 15: 
						//global.passStr = "requires number,uppercase, lowercase and a symbol '!@#$%^&*+=)(' ("+global.minPassLength+" ~ "+global.maxPassLength+")";
						global.passStr = resourceManager.getString('default','global.msg.PASSWORD_COMPLEXITY_SUPER') + " '!@#$%^&*+=)(' ("+global.minPassLength+" ~ "+global.maxPassLength+")";
						break;
					default:
						//global.passStr = "only length constraints required ("+global.minPassLength+" ~ "+global.maxPassLength+")";;
						global.passStr = resourceManager.getString('default','global.msg.PASSWORD_COMPLEXITY_LOW') + " ("+global.minPassLength+" ~ "+global.maxPassLength+")";;
				}
				
				if (global.autoLockout < 1)
				{
					global.autoLockout = 9999;
				}
				
				this.dispatchEvent(new CloseEvent(CloseEvent.CLOSE,true, false));
			}
			
			
		]]>
	</fx:Script>
	<s:HGroup>
		<s:VGroup width="100%">
			<s:DataGrid id="featureGrid" width="100%" height="300" requestedRowCount="4" dataProvider="{this.featureList}"
						skinClass="skins.DKI_DataGrid_Skin" visible="true" enabled="true"
						editable="true" gridItemEditorSessionSave="featureGrid_gridItemEditorSessionSaveHandler(event)"
						>
				<s:columns>
					<s:ArrayList>
						<s:source>
							<s:GridColumn dataField="feature_code" headerText="Code" width="250" visible="true" editable="false"></s:GridColumn>
							<s:GridColumn dataField="feature_name" headerText="Description" width="400" visible="true" editable="false"></s:GridColumn>
							
							<s:GridColumn dataField="feature_flag" headerText="Flag" width="200" visible="true" editable="true" itemEditor="itemeditors.GridCheckEditor" itemRenderer="renderers.GridCheckRender"></s:GridColumn>
							
							<s:GridColumn dataField="feature_gui" headerText="GUI Visible" width="100" visible="false" editable="false" itemRenderer="renderers.GridCheckRender"></s:GridColumn>
							<s:GridColumn dataField="feature_func" headerText="Function" width="200" visible="false" editable="false"></s:GridColumn>
						</s:source>
					</s:ArrayList>
				</s:columns>
			</s:DataGrid>
		</s:VGroup>
	</s:HGroup>
	<s:Spacer height="100%"/>
	<s:HGroup width="100%">
		<s:Spacer width="100%"/>
		<components:DKI_Button id="btn_select_all" label="Select All" type="edit" click="selectAllHandler(event)"/>
		<components:DKI_Button id="btn_unselect_all" label="Deselect All" type="edit" click="unselectAllHandler(event)"/>
		<components:DKI_Button id="btn_save" label="{resourceManager.getString('default','SAVE')}" type="save" click="saveHandler(event)"/>
		<components:DKI_Button label="{resourceManager.getString('default','CANCEL')}" type="cancel" click="closeHandler(event)"/>
	</s:HGroup>
</s:Panel>
