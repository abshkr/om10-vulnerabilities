<?xml version="1.0" encoding="utf-8"?>
<s:VGroup xmlns:fx="http://ns.adobe.com/mxml/2009" 
		  xmlns:s="library://ns.adobe.com/flex/spark" verticalAlign="middle" 
		  xmlns:mx="library://ns.adobe.com/flex/mx" width="100%">
	<fx:Script>
		<![CDATA[
			import components.DynaFormComponent;
			
			import mx.binding.utils.BindingUtils;
			import mx.collections.ArrayCollection;
			import mx.controls.DateField;
			import mx.controls.HRule;
			import mx.events.FlexEvent;
			
			import spark.components.DropDownList;
			import spark.components.NumericStepper;
			import spark.components.TextInput;
			
			[Bindable] public static var labelWidth:Number = 100;
			[Bindable] public static var dpad:String = " ";
			
			[Bindable] public var pad:String = " ";
			[Bindable] public var align:String = "left";
			
			[Bindable] private var type:String = "";
			[Bindable] private var restrict:String = "";
			[Bindable] private var required:Boolean = false;
			[Bindable] private var allowZero:Boolean = false;
			[Bindable] public var digits:Number = 0;
			[Bindable] public var level:Number = 0;
			[Bindable] public var repeat:Number = 0;
			[Bindable] public var index:Number = 0;
			[Bindable] public var label:String = "";
			[Bindable] public var childLabel:String = "";
			[Bindable] public var value:Object;
			[Bindable] public var showItem:Boolean=true;
			
			[Bindable] public var defValues:Object = new Object();
			[Bindable] public var cid:String = "";
			
			
			public function set data(o:Object):void{
				container.removeAllElements();
				
				
				if(o.cid)cid = o.cid;
				if(o.type)type = o.type;
				if(o.label)label = o.label;
				if(o.childLabel)childLabel = o.childLabel;
				if(o.length)digits = o.length;
				if(o.restrict)restrict = o.restrict;
				if(o.pad)pad = o.pad;
				if(o.align)align = o.align;
				if(o.required)required = (o.required=="true");
				if(o.visible)showItem = (o.visible=="true");
				
				if ( showItem == false ) required = false;
				
				if ( this.type == "nest" )
				{
					if( required == true )
					{
						if(o.allowZero)
						{
							this.allowZero = (o.allowZero=="true");
						}
						else
						{
							this.allowZero = false;
						}
					}
					else
					{
						allowZero = true;
					}
				}
				else
				{
					allowZero = true;
				}
				
				switch(type.toLowerCase()){
					
					case "ti":
						var ti:TextInput = new TextInput();
						ti.addEventListener(FlexEvent.VALUE_COMMIT, function(e:FlexEvent):void{value = ti.text});
						ti.percentWidth = 100;
						ti.maxChars = digits;
						if ( restrict == "ALL" )
						{
							ti.restrict = null;
						}
						else
						{
							ti.restrict = restrict;
						}
						// if there is a value from parent screen
						if ( this.defValues.hasOwnProperty(cid) )
						{
							value = ti.text = defValues[cid];
						}
						container.addElement(ti);break;
					case "df":
						var df:datetime = new datetime();
						df.addEventListener("dup", function(e:Event):void{value = df.dateString});
						value = df.dateString;
						container.addElement(df);break;
					case "ddl":
						//var ddl:DropDownList = new DropDownList();
						var ddl:DKI_DropDownList = new DKI_DropDownList();
						//var ddl:DKI_ComboBox = new DKI_ComboBox();
						ddl.percentWidth = 100;
						ddl.requireSelection = required;
						ddl.addEventListener(FlexEvent.VALUE_COMMIT, function(e:FlexEvent):void{value = ddl.selectedItem.value});
						if(o.data)ddl.dataProvider = new ArrayCollection(o.data);
						// if there is a value from parent screen
						if ( this.defValues.hasOwnProperty(cid) )
						{
							var defIndex:int=-1;
							for ( var i:int=0; i<ddl.dataProvider.length; i++ )
							{
								if ( ddl.dataProvider.getItemAt(i).value == defValues[cid] )
								{
									defIndex = i;
								}
							}
							ddl.selectedIndex = defIndex;
						}
						container.addElement(ddl);break;
					case "nest":
						//var ns:NumericStepper = new NumericStepper();
						var ns:DKI_NumericStepper = new DKI_NumericStepper();
						ns.percentWidth = 100;
						value = ns.value = 0;
						ns.maximum = Math.pow(10,digits)-1;
						ns.addEventListener(FlexEvent.VALUE_COMMIT, function(e:FlexEvent):void{value = ns.value});
						container.addElement(ns);
						ns.addEventListener(Event.CHANGE, function(e:Event):void{
							value = ns.value;
							nestings.removeAllElements();
							for (var i:int = 0; i < value; i++){
								var lab:labelit = new labelit();
								lab.label = childLabel+" "+(i+1);
								lab.offset = (level+1)*20+labelWidth+5;
								nestings.addElement(lab);
								addElements(o.data, level+1, i+1);
							}
						});
						break;
				}
			}
			
			public function addElements(items:Array, level:int, repeat:int):void{
				var index:int = 1;
				if(items!=null){
					for (var i:int = 0; i < items.length; i++) {
						var com:DynaFormComponent = new DynaFormComponent();
						com.defValues = defValues;
						com.level = level;
						com.repeat = repeat;
						com.index = index++;
						com.data = items[i];
						nestings.addElement(com);
					}
				}
			}
			
			
			public function get string():String{
				var string:String = ""; 
				if(value == null) value = "";
				value = new String(value);
				if(value.length > digits){
					trace("MESSAGE LENGTH OVERFLOW ON " + label + " MAX: "+ digits + " ACTUAL: "+ value.length);
					string = value.substring(0,digits);
				}else{
					var i:int = digits - value.length;
					var pads:String = "";
					
					if ( value.length > 0 )
					{
						while(i--)pads+=pad;
						if(align == "left"){
							string = value+pads;
						}else if(align == "right"){
							string = pads+value;
						}
					}
					else
					{
						while(i--)pads+=' ';
						string = pads;
					}
					
				}
				if(type == "nest"){
					for (var j:int = 0; j < nestings.numElements; j++){
						if(nestings.getElementAt(j) is DynaFormComponent){
							var m:DynaFormComponent = nestings.getElementAt(j) as DynaFormComponent;
							string+=m.string;
						}
					}
				}
				return string;
			}
			
			
			public function countCharInString( txt:String, c:String=' '):int
			{
				var num:int=0;
				var i:int;
				
				for ( i=0; i<txt.length; i++ )
				{
					if ( txt.charAt(i) == c )
					{
						num += 1;
					}
				}
				
				return num;
			}
			
			public function get errorList():ArrayCollection
			{
				var obj:Object;
				var errGrid:ArrayCollection=new ArrayCollection();
				
				if ( ( this.required == true )  
				  && ( this.string.length == 0 
					|| ( this.type!= "nest" && (this.countCharInString(this.string, ' ')==this.string.length) ) 
//					|| ( this.type!= "nest" && (this.countCharInString(this.string, this.pad)==this.string.length || this.countCharInString(this.string, ' ')==this.string.length) ) 
//					|| ( this.type== "nest" &&  nestings.numElements==0 )
					|| ( this.type== "nest" &&  nestings.numElements==0 && this.allowZero==false )
				     ) 
				)
				{
					obj = new Object();
					//obj['name'] = this.label;
					obj['name'] = level + "." + repeat + "." + index + "-  " + label;
					obj['description'] = "This is a mandatory field in level " + this.level + ".";
					errGrid.addItem( obj );
				}
				
				if(type == "nest")
				{
					for (var j:int = 0; j < nestings.numElements; j++)
					{
						if(nestings.getElementAt(j) is DynaFormComponent)
						{
							var m:DynaFormComponent = nestings.getElementAt(j) as DynaFormComponent;
							errGrid.addAll( m.errorList );
						}
					}
				}
				return errGrid;
			}
			
			public function errorList2(parent_label:String="", parent_level:int=0, element_index:int=1):ArrayCollection
			{
				var obj:Object;
				var errGrid:ArrayCollection=new ArrayCollection();
				
				if ( ( this.required == true )  
					&& ( this.string.length == 0 
						|| this.countCharInString(this.string, this.pad)==this.string.length 
						|| ( this.type== "nest" &&  nestings.numElements==0 )
					) 
				)
				{
					obj = new Object();
					obj['name'] = parent_label+" - " + this.label;
					obj['description'] = "This is a mandatory field in level " + this.level + ". (" + parent_level + "." + this.level + "." + element_index + ")";
					errGrid.addItem( obj );
				}
				
				if(type == "nest")
				{
					for (var j:int = 0; j < nestings.numElements; j++)
					{
						if(nestings.getElementAt(j) is DynaFormComponent)
						{
							var m:DynaFormComponent = nestings.getElementAt(j) as DynaFormComponent;
							errGrid.addAll( m.errorList2(this.label, this.level, j) );
						}
					}
				}
				return errGrid;
			}
			
			
		]]>
	</fx:Script>
	<fx:Declarations>
		<fx:Component className="labelit">
			<s:HGroup width="100%" verticalAlign="middle" height="30">
				<fx:Script>
					<![CDATA[
						[Bindable] public var label:String = "";
						[Bindable] public var offset:int = 100;
					]]>
				</fx:Script>
				<s:Spacer width="{offset}"/>
				<s:Label  width="100%" text="{label}" />
			</s:HGroup>
		</fx:Component>
		<fx:Component className="datetime">
			<s:VGroup width="100%" verticalAlign="middle" >
				<fx:Script>
					<![CDATA[
						public function get dateString():String{
							if(dc.selectedDate == undefined || dc.selectedDate == null)dc.selectedDate = new Date;
							var dd:String  = (dc.selectedDate.date < 10 ? "0":"") + dc.selectedDate.date;
							var mm:String  = ((dc.selectedDate.month+1) < 10 ? "0":"") + (dc.selectedDate.month+1);
							var yy:String  = dc.selectedDate.fullYear + "";
							var hh:String  = (h.value < 10 ? "0":"") + h.value;
							var mn:String  = (m.value < 10 ? "0":"") + m.value;
							var ss:String  = (s.value < 10 ? "0":"") + s.value;
							return dd+"."+mm+"."+yy+hh+":"+mn+":"+ss;
						}
					]]>
				</fx:Script>
				<mx:DateChooser id="dc" change="dispatchEvent(new Event('dup'))" selectedDate="{new Date}"/>
				<s:HGroup width="{dc.width}" verticalAlign="middle" horizontalAlign="center">
					<s:NumericStepper width="42" id="h" minimum="0" maximum="23" change="dispatchEvent(new Event('dup'))"/>
					<s:Label width="8" text=":"/>
					<s:NumericStepper width="42" id="m" minimum="0" maximum="59" change="dispatchEvent(new Event('dup'))"/>
					<s:Label width="8" text=":"/>
					<s:NumericStepper width="42" id="s" minimum="0" maximum="59" change="dispatchEvent(new Event('dup'))"/>
				</s:HGroup>
			</s:VGroup>
		</fx:Component>
	</fx:Declarations>
	
	
	<s:HGroup width="100%" verticalAlign="middle" visible="{showItem}" includeInLayout="{showItem}">
		<s:Spacer width="{level*20}"/>
		<s:Label fontWeight="bold" width="{labelWidth}" text="{level}.{repeat}.{index}-  {label}" />
		<s:Group id="container" width="100%"/>
		<s:Label width="30" color="0xFF0000" text="*" visible="{required}"/>
	</s:HGroup>
	<s:VGroup id="nestings" width="100%" />

</s:VGroup>
