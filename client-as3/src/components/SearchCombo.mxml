<?xml version="1.0" encoding="utf-8"?>
<s:ComboBox xmlns:fx="http://ns.adobe.com/mxml/2009"  
			xmlns:s="library://ns.adobe.com/flex/spark" 
			xmlns:mx="library://ns.adobe.com/flex/mx" minHeight="24" useVirtualLayout="false"
			skinClass="skins.DKI_ComboBox_Skin">
	<fx:Script>
		<![CDATA[
			import mx.collections.ArrayCollection;
			import mx.collections.IList;
			
			import spark.events.DropDownEvent;
			import spark.events.TextOperationEvent;
			
			private var unfilteredDataProvider : IList;
			private var _theSeed:String="";
			
			override public function set dataProvider(value:IList):void 
			{
				super.dataProvider = value;
				unfilteredDataProvider = value;
			}
			/*
			override public function set selectedItem(value:*):void
			{
				super.selectedItem = value;
				if ( value == null )
				{
					trace("before............selectedIndex changed........................", _theSeed, this.textInput.text, this.dataProvider.length );
					_theSeed = "";
					ArrayCollection(this.dataProvider).filterFunction = null;//filterMatches;
					ArrayCollection(this.dataProvider).refresh();
					trace("after............selectedIndex changed........................", _theSeed, this.textInput.text, this.dataProvider.length );
				}
			}
			*/
			override public function set selectedIndex(value:int):void
			{
				super.selectedIndex = value;
				if ( value < 0 )
				{
					trace("before............selectedIndex changed........................", _theSeed, this.textInput.text, this.dataProvider.length );
					_theSeed = "";
					ArrayCollection(this.dataProvider).filterFunction = null;//filterMatches;
					ArrayCollection(this.dataProvider).refresh();
					trace("after............selectedIndex changed........................", _theSeed, this.textInput.text, this.dataProvider.length );
				}
			}
			
			override protected function textInput_changeHandler(event:TextOperationEvent):void 
			{
				super.textInput_changeHandler(event);
				
				_theSeed = this.textInput.text.slice(0, textInput.selectionAnchorPosition).toLowerCase();
				//_theSeed = this.textInput.text.toLowerCase();
				
				trace("before...................................................", _theSeed, this.textInput.text, this.dataProvider.length );
				
				/* if ( this.dataProvider.length == 0 )
				{
					_theSeed = "";
				} */
				/*
				if (unfilteredDataProvider.length > 0)
				{
					if (unfilteredDataProvider is ArrayCollection) 
					{
						ArrayCollection(unfilteredDataProvider).filterFunction = filterMatches;
						ArrayCollection(unfilteredDataProvider).refresh();
						super.dataProvider = new ArrayCollection(unfilteredDataProvider.toArray()); 
					}
				}
				else
				{
					this.textInput.text='';
					ArrayCollection(unfilteredDataProvider).filterFunction = null;
					ArrayCollection(unfilteredDataProvider).refresh();
				}
				*/
				ArrayCollection(this.dataProvider).filterFunction = filterMatches;
				ArrayCollection(this.dataProvider).refresh();
				
				trace("after...................................................", _theSeed, this.textInput.text, this.dataProvider.length );
			}
			
			protected function filterMatches(item:Object):Boolean 
			{
				var option:String;
				
				if ( item is String )
				{
					option = String(item).toLowerCase();
				}
				else
				{
					if ( labelField && labelField!= "" && item.hasOwnProperty(labelField) )
					{
						option = String(item[labelField]).toLowerCase();
					}
					else
					{
						option = item.toString().toLowerCase();
					}
				}
				trace("within...................................................", _theSeed, this.textInput.text, option, item, labelField );
				
				if ( option.indexOf( _theSeed ) > -1 )
				{
					return true;
				}
				else
				{
					return false;
				}
			}
			
			protected function filterMatches2(item:Object):Boolean 
			{
				if (item is String) 
				{
					if( String(item).toLowerCase().indexOf(
						textInput.text.slice(0,
							textInput.selectionAnchorPosition).toLowerCase())>-1 )
					{
						return true;
					}
				}
				else 
					if (labelField && labelField!= "")
					{
						if(item.hasOwnProperty(labelField) && 
							String(item[labelField]).toLowerCase().indexOf(
								textInput.text.slice(0,
									textInput.selectionAnchorPosition).toLowerCase())>-1)
							return true;
					}
				
				return false;
			}
			
		]]>
	</fx:Script>
</s:ComboBox>
