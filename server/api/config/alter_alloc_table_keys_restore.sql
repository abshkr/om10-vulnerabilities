/*
    The following changes are to enable multiple allocations for each company and allocation type
*/
-- XSAUVTBP	FK_ACCESS_KEY_ALLOC	R	ACCESS_KEYS		XSAUVTBP	PK_LOCKAL	NO ACTION	ENABLED	NOT DEFERRABLE	IMMEDIATE	VALIDATED	USER NAME			03/SEP/20				

-- XSAUVTBP	FK_ALL_CHILD_PROD	R	ALL_CHILD		XSAUVTBP	PK_ALLOCS	NO ACTION	ENABLED	NOT DEFERRABLE	IMMEDIATE	VALIDATED	USER NAME			03/SEP/20				
-- XSAUVTBP	FK_ALLOC_DETAILS_PROD	R	ALLOC_DETAILS		XSAUVTBP	PK_ALLOCS	NO ACTION	ENABLED	NOT DEFERRABLE	IMMEDIATE	VALIDATED	USER NAME			03/SEP/20				
-- XSAUVTBP	FK_ADJUST_ALLOC	R	ADJUSTS		XSAUVTBP	PK_ALLOCS	NO ACTION	ENABLED	NOT DEFERRABLE	IMMEDIATE	VALIDATED	USER NAME			03/SEP/20				

-- change primary key in table ALL_CHILD to enable multiple allocations for each company and allocation type
-- change primary key in table ALLOCS to enable multiple allocations for each company and allocation type
-- change primary key in table LOCKAL to enable multiple allocations for each company and allocation type

-- MAY NEED to delete all records with x_index > 1

ALTER TABLE ALL_CHILD
DROP CONSTRAINT FK_ALL_CHILD_PROD;

ALTER TABLE ALLOC_DETAILS
DROP CONSTRAINT FK_ALLOC_DETAILS_PROD;

ALTER TABLE ADJUSTS
DROP CONSTRAINT FK_ADJUST_ALLOC;

ALTER TABLE ACCESS_KEYS
DROP CONSTRAINT FK_ACCESS_KEY_ALLOC;


ALTER TABLE ADJUSTS
DROP CONSTRAINT PK_ADJUSTS;
-- DROP INDEX PK_ADJUSTS;

ALTER TABLE ALL_CHILD
DROP CONSTRAINT PK_ALL_CHILD;
-- DROP INDEX PK_ALL_CHILD;

ALTER TABLE ALLOCS
DROP CONSTRAINT PK_ALLOCS;
-- DROP INDEX PK_ALLOCS;

ALTER TABLE LOCKAL
DROP CONSTRAINT PK_LOCKAL;
-- DROP INDEX PK_LOCKAL;


alter table ALLOC_DETAILS drop column ALL_INDEX;
alter table ADJUSTS drop column ADJALL_ALL_INDEX;
alter table ACCESS_KEYS drop column KYA_ALLOC_INDEX;


alter table ALL_CHILD drop column ALCH_ALP_ALL_INDEX;
alter table ALLOCS drop column ALL_INDEX;
alter table LOCKAL drop column LOCKAL_INDEX;


ALTER TABLE LOCKAL
-- ADD CONSTRAINT PK_LOCKAL PRIMARY KEY (LOCKAL_INDEX, LOCKATYP_AT_TYPE, LOCKATYP_AT_CMPY, LOCKAL_SUPL);
ADD CONSTRAINT PK_LOCKAL PRIMARY KEY (LOCKATYP_AT_TYPE, LOCKATYP_AT_CMPY, LOCKAL_SUPL);


ALTER TABLE ALLOCS
-- ADD CONSTRAINT PK_ALLOCS PRIMARY KEY (ALL_INDEX, ALL_ATKY_AT_TYPE, ALL_ATKY_AT_CMPY, ALL_PROD_PRODCODE, ALL_PROD_PRODCMPY);
ADD CONSTRAINT PK_ALLOCS PRIMARY KEY (ALL_ATKY_AT_TYPE, ALL_ATKY_AT_CMPY, ALL_PROD_PRODCODE, ALL_PROD_PRODCMPY);


ALTER TABLE ALL_CHILD
-- ADD CONSTRAINT PK_ALL_CHILD PRIMARY KEY (ALCH_ALP_ALL_INDEX, ALCH_ALP_ALL_ATKY_AT_TYPE, ALCH_ALP_ALL_ATKY_AT_CMPY, ALCH_ALP_ALL_PROD_PRODCODE, ALCH_ALP_ALL_PROD_PRODCMPY, ALL_CHILD_P_NO);
ADD CONSTRAINT PK_ALL_CHILD PRIMARY KEY (ALCH_ALP_ALL_ATKY_AT_TYPE, ALCH_ALP_ALL_ATKY_AT_CMPY, ALCH_ALP_ALL_PROD_PRODCODE, ALCH_ALP_ALL_PROD_PRODCMPY, ALL_CHILD_P_NO);

ALTER TABLE ALL_CHILD
ADD CONSTRAINT FK_ALL_CHILD_PROD FOREIGN KEY (ALCH_ALP_ALL_ATKY_AT_TYPE, ALCH_ALP_ALL_ATKY_AT_CMPY, ALCH_ALP_ALL_PROD_PRODCODE, ALCH_ALP_ALL_PROD_PRODCMPY)
REFERENCES ALLOCS (ALL_ATKY_AT_TYPE, ALL_ATKY_AT_CMPY, ALL_PROD_PRODCODE, ALL_PROD_PRODCMPY);


ALTER TABLE ALLOC_DETAILS
ADD CONSTRAINT FK_ALLOC_DETAILS_PROD FOREIGN KEY (ALL_ATKY_AT_TYPE, ALL_ATKY_AT_CMPY, ALL_PROD_PRODCODE, ALL_PROD_PRODCMPY)
REFERENCES ALLOCS (ALL_ATKY_AT_TYPE, ALL_ATKY_AT_CMPY, ALL_PROD_PRODCODE, ALL_PROD_PRODCMPY);


ALTER TABLE ADJUSTS
-- ADD CONSTRAINT PK_ADJUSTS PRIMARY KEY (ADJTRSA_LD_TRM, ADJTRSA_LOAD_ID, ADJALL_ALL_PROD_PRODCODE, ADJALL_ALL_PROD_PRODCMPY, ADJALL_ALL_ATKY_AT_TYPE, ADJALL_ALL_ATKY_AT_CMPY, ADJALL_ALL_INDEX);
ADD CONSTRAINT PK_ADJUSTS PRIMARY KEY (ADJTRSA_LD_TRM, ADJTRSA_LOAD_ID, ADJALL_ALL_PROD_PRODCODE, ADJALL_ALL_PROD_PRODCMPY, ADJALL_ALL_ATKY_AT_TYPE, ADJALL_ALL_ATKY_AT_CMPY);

ALTER TABLE ADJUSTS
ADD CONSTRAINT FK_ADJUST_ALLOC FOREIGN KEY (ADJALL_ALL_ATKY_AT_TYPE, ADJALL_ALL_ATKY_AT_CMPY, ADJALL_ALL_PROD_PRODCODE, ADJALL_ALL_PROD_PRODCMPY)
REFERENCES ALLOCS (ALL_ATKY_AT_TYPE, ALL_ATKY_AT_CMPY, ALL_PROD_PRODCODE, ALL_PROD_PRODCMPY);


ALTER TABLE ACCESS_KEYS
ADD CONSTRAINT FK_ACCESS_KEY_ALLOC FOREIGN KEY (KYA_ALLOC_TYPE, KYA_ALLOC_CMPY, KYA_SP_SUPPLIER)
REFERENCES LOCKAL (LOCKATYP_AT_TYPE, LOCKATYP_AT_CMPY, LOCKAL_SUPL);




-- update GUI_ALLOCATIONS to add new column LOCKAL_INDEX

CREATE OR REPLACE FORCE  VIEW GUI_ALLOCATIONS AS 
select
    alloc.LOCKATYP_AT_TYPE        as ALLOC_TYPE
    , ctype.COMPANY_NAME            as ALLOC_TYPENAME
    , alloc.LOCKATYP_AT_CMPY        as ALLOC_CMPYCODE
    , acmpy.CMPY_NAME               as ALLOC_CMPYNAME
    , alloc.LOCKAL_SUPL             as ALLOC_SUPPCODE
    , scmpy.CMPY_NAME               as ALLOC_SUPPNAME
    , alloc.LOCKAL_LOCK             as ALLOC_LOCK
    , ltype.ALLOC_LOCK_NAME         as ALLOC_LOCKNAME
    , alloc.LOCKAL_PERIOD           as ALLOC_PERIOD
    , ptype.ALLOC_PERIOD_NAME       as ALLOC_PERIODNAME
    , alloc.LOCKAL_DMY              as ALLOC_DATETIME
    , alloc.LOCKAL_START_DMY        as ALLOC_START_DATE
    , alloc.LOCKAL_END_DMY          as ALLOC_END_DATE
    , alloc.LOCKAL_NEXT_DMY         as ALLOC_NEXT_DATE
    , alloc.LOCKAL_COMMENTS         as ALLOC_COMMENTS
    , alloc.LOCKATYP_AT_TYPE || ' - ' || ctype.COMPANY_NAME            as ALLOC_TYPEDESC
    , alloc.LOCKATYP_AT_CMPY || ' - ' || acmpy.CMPY_NAME               as ALLOC_CMPYDESC
    , alloc.LOCKAL_SUPL || ' - ' || scmpy.CMPY_NAME                    as ALLOC_SUPPDESC
    , alloc.LOCKAL_LOCK || ' - ' || ltype.ALLOC_LOCK_NAME              as ALLOC_LOCKDESC
    , DECODE(alloc.LOCKAL_PERIOD, NULL, '', alloc.LOCKAL_PERIOD || ' - ' || ptype.ALLOC_PERIOD_NAME)          as ALLOC_PERIODDESC
from
    LOCKAL                          alloc
    , COMPANY_TYP                   ctype
    , COMPANYS                      acmpy
    , COMPANYS                      scmpy
    , ALLOC_LOCK_TYP                ltype
    , ALLOC_PERIOD_TYP              ptype
where
--  ( ( (SYS_CONTEXT('CONN_CONTEXT', 'ISMANAGER') = 'N') and (scmpy.CMPY_CODE = SYS_CONTEXT('CONN_CONTEXT', 'CMPYCODE')) )
    ( ( (SYS_CONTEXT('CONN_CONTEXT', 'ISMANAGER') = 'N')
       and (scmpy.CMPY_CODE = SYS_CONTEXT('CONN_CONTEXT', 'CMPYCODE')
--      or (alloc.LOCKATYP_AT_TYPE=1 and acmpy.CMPY_CODE = SYS_CONTEXT('CONN_CONTEXT', 'CMPYCODE'))) )
        or (acmpy.CMPY_CODE = SYS_CONTEXT('CONN_CONTEXT', 'CMPYCODE'))
        or (alloc.LOCKATYP_AT_TYPE=2 and acmpy.CMPY_CODE in (select child_cmpy_code from company_relation where parent_cmpy_code=SYS_CONTEXT('CONN_CONTEXT', 'CMPYCODE') and parent_cmpy_role=1 and child_cmpy_role=2 and status=1) )
        ) )
    or ( SYS_CONTEXT('CONN_CONTEXT', 'CMPYCODE') IS NULL )
    or ( SYS_CONTEXT('CONN_CONTEXT', 'ISMANAGER') = 'Y' )
    or ( SYS_CONTEXT('CONN_CONTEXT', 'ISMANAGER') IS NULL) )
    and alloc.LOCKATYP_AT_TYPE = ctype.COMPANY_ID
    and alloc.LOCKATYP_AT_CMPY = acmpy.CMPY_CODE
    and alloc.LOCKAL_SUPL = scmpy.CMPY_CODE
    and alloc.LOCKAL_LOCK = ltype.ALLOC_LOCK_ID
    and alloc.LOCKAL_PERIOD = ptype.ALLOC_PERIOD_ID(+)
/



-- update GUI_ALLOCATION_ITEMS to add new column ALL_INDEX

CREATE OR REPLACE FORCE VIEW GUI_ALLOCATION_ITEMS AS 
select
    aitem.ALL_ATKY_AT_TYPE        as AITEM_TYPE
    , ctype.COMPANY_NAME            as AITEM_TYPENAME
    , aitem.ALL_ATKY_AT_CMPY        as AITEM_CMPYCODE
    , acmpy.CMPY_NAME               as AITEM_CMPYNAME
    , aitem.ALL_PROD_PRODCODE       as AITEM_PRODCODE
    , aprod.PROD_NAME               as AITEM_PRODNAME
    , aitem.ALL_PROD_PRODCMPY       as AITEM_SUPPCODE
    , pcmpy.CMPY_NAME               as AITEM_SUPPNAME
    , aitem.ALLOC_LIMIT             as AITEM_QTYLIMIT
    , (aitem.ALLOC_LIMIT-aitem.ALLOC_LEFT)              as AITEM_QTYUSED
    , aitem.ALLOC_LEFT              as AITEM_QTYLEFT
    , aitem.ALLOC_UNITS             as AITEM_PRODUNIT
    , aunit.DESCRIPTION             as AITEM_UNITNAME
    , aitem.ALLOC_PER_CHILD         as AITEM_PERCHILD
from
    ALLOCS                          aitem
    , COMPANY_TYP                   ctype
    , COMPANYS                      acmpy
    , PRODUCTS                      aprod
    , COMPANYS                      pcmpy
    , UNIT_SCALE_VW                 aunit
where
--  ( ( (SYS_CONTEXT('CONN_CONTEXT', 'ISMANAGER') = 'N') and (pcmpy.CMPY_CODE = SYS_CONTEXT('CONN_CONTEXT', 'CMPYCODE')) )
    ( ( (SYS_CONTEXT('CONN_CONTEXT', 'ISMANAGER') = 'N')
       and (pcmpy.CMPY_CODE = SYS_CONTEXT('CONN_CONTEXT', 'CMPYCODE')
--      or (aitem.ALL_ATKY_AT_TYPE=1 and acmpy.CMPY_CODE = SYS_CONTEXT('CONN_CONTEXT', 'CMPYCODE'))) )
        or (acmpy.CMPY_CODE = SYS_CONTEXT('CONN_CONTEXT', 'CMPYCODE'))
        or (aitem.ALL_ATKY_AT_TYPE=2 and acmpy.CMPY_CODE in (select child_cmpy_code from company_relation where parent_cmpy_code=SYS_CONTEXT('CONN_CONTEXT', 'CMPYCODE') and parent_cmpy_role=1 and child_cmpy_role=2 and status=1) )
        ) )
    or ( SYS_CONTEXT('CONN_CONTEXT', 'CMPYCODE') IS NULL )
    or ( SYS_CONTEXT('CONN_CONTEXT', 'ISMANAGER') = 'Y' )
    or ( SYS_CONTEXT('CONN_CONTEXT', 'ISMANAGER') IS NULL) )
    and aitem.ALL_ATKY_AT_TYPE = ctype.COMPANY_ID
    and aitem.ALL_ATKY_AT_CMPY = acmpy.CMPY_CODE
    and aitem.ALL_PROD_PRODCODE = aprod.PROD_CODE
    and aitem.ALL_PROD_PRODCMPY = aprod.PROD_CMPY
    and aitem.ALL_PROD_PRODCMPY = pcmpy.CMPY_CODE
    and aitem.ALLOC_UNITS = aunit.UNIT_ID
/



-- update GUI_ALLOCATIONS to add new column ALCH_ALP_ALL_INDEX


CREATE OR REPLACE FORCE VIEW GUI_ALLOCATION_PERIODS AS 
select
    aiprd.ALCH_ALP_ALL_ATKY_AT_TYPE       as AIPRD_TYPE
    , ctype.COMPANY_NAME                    as AIPRD_TYPENAME
    , aiprd.ALCH_ALP_ALL_ATKY_AT_CMPY       as AIPRD_CMPYCODE
    , acmpy.CMPY_NAME                       as AIPRD_CMPYNAME
    , aiprd.ALCH_ALP_ALL_PROD_PRODCODE      as AIPRD_PRODCODE
    , aprod.PROD_NAME                       as AIPRD_PRODNAME
    , aiprd.ALCH_ALP_ALL_PROD_PRODCMPY      as AIPRD_SUPPCODE
    , pcmpy.CMPY_NAME                       as AIPRD_SUPPNAME
    , aiprd.ALL_CHILD_P_NO                  as AIPRD_INDEX
    , aiprd.ALL_CH_STRT_DAY                 as AIPRD_DAYSTART
    , aiprd.ALL_CH_END_DAY                  as AIPRD_DAYEND
    , aiprd.ALL_CH_UNIT                     as AIPRD_PRODUNIT
    , aunit.DESCRIPTION                     as AIPRD_UNITNAME
    , aiprd.ALL_CH_QTY                      as AIPRD_QTYLIMIT
    , aiprd.ALL_CH_USED                     as AIPRD_QTYUSED
    , (aiprd.ALL_CH_QTY-aiprd.ALL_CH_USED)  as AIPRD_QTYLEFT
    , alloc.LOCKAL_LOCK                     as AIPRD_LOCK
    , ltype.ALLOC_LOCK_NAME                 as AIPRD_LOCKNAME
from
    ALL_CHILD                               aiprd
    , COMPANY_TYP                           ctype
    , COMPANYS                              acmpy
    , PRODUCTS                              aprod
    , COMPANYS                              pcmpy
    , UNIT_SCALE_VW                         aunit
    , LOCKAL                                alloc
    , ALLOC_LOCK_TYP                        ltype
where
--  ( ( (SYS_CONTEXT('CONN_CONTEXT', 'ISMANAGER') = 'N') and (pcmpy.CMPY_CODE = SYS_CONTEXT('CONN_CONTEXT', 'CMPYCODE')) )
    ( ( (SYS_CONTEXT('CONN_CONTEXT', 'ISMANAGER') = 'N')
       and (pcmpy.CMPY_CODE = SYS_CONTEXT('CONN_CONTEXT', 'CMPYCODE')
--      or (aiprd.ALCH_ALP_ALL_ATKY_AT_TYPE=1 and acmpy.CMPY_CODE = SYS_CONTEXT('CONN_CONTEXT', 'CMPYCODE'))) )
        or (acmpy.CMPY_CODE = SYS_CONTEXT('CONN_CONTEXT', 'CMPYCODE'))
        or (aiprd.ALCH_ALP_ALL_ATKY_AT_TYPE=2 and acmpy.CMPY_CODE in (select child_cmpy_code from company_relation where parent_cmpy_code=SYS_CONTEXT('CONN_CONTEXT', 'CMPYCODE') and parent_cmpy_role=1 and child_cmpy_role=2 and status=1) )
        ) )
    or ( SYS_CONTEXT('CONN_CONTEXT', 'CMPYCODE') IS NULL )
    or ( SYS_CONTEXT('CONN_CONTEXT', 'ISMANAGER') = 'Y' )
    or ( SYS_CONTEXT('CONN_CONTEXT', 'ISMANAGER') IS NULL) )
    and aiprd.ALCH_ALP_ALL_ATKY_AT_TYPE = ctype.COMPANY_ID
    and aiprd.ALCH_ALP_ALL_ATKY_AT_CMPY = acmpy.CMPY_CODE
    and aiprd.ALCH_ALP_ALL_PROD_PRODCODE = aprod.PROD_CODE
    and aiprd.ALCH_ALP_ALL_PROD_PRODCMPY = aprod.PROD_CMPY
    and aiprd.ALCH_ALP_ALL_PROD_PRODCMPY = pcmpy.CMPY_CODE
    and aiprd.ALL_CH_UNIT = aunit.UNIT_ID
    and aiprd.ALCH_ALP_ALL_ATKY_AT_TYPE = alloc.LOCKATYP_AT_TYPE
    and aiprd.ALCH_ALP_ALL_ATKY_AT_CMPY = alloc.LOCKATYP_AT_CMPY
    and aiprd.ALCH_ALP_ALL_PROD_PRODCMPY = alloc.LOCKAL_SUPL
    and alloc.LOCKAL_LOCK = ltype.ALLOC_LOCK_ID
/
