std_fld_def STD_MESSAGE_LEN			( ASCII_9,		 4 );
std_fld_def STD_SITE_CODE empty_char(' ')	( ASCII_X,		 6 );
std_fld_def STD_CO_CODE empty_char(' ')		( ASCII_X,		 8 );
std_fld_def STD_CO_NAME empty_char(' ')		( ASCII_X,		50 );
std_fld_def STD_REPEAT_COUNT empty_char(' ')	( ASCII_9,		 2 );
std_fld_def STD_TANK_CODE empty_char(' ')	( ASCII_X,		 6 );
std_fld_def STD_BASE_PROD_CODE empty_char(' ')	( ASCII_X,		10 );
std_fld_def STD_PRODUCT_CODE empty_char(' ')	( ASCII_X,		10 );
std_fld_def STD_VOLUME				( ASCII_9,		 9 );
std_fld_def STD_AOI_NUMBER empty_char('9')	( ASCII_9,		 2 );
std_fld_def STD_LOAD_NUMBER			( ASCII_9,		 4 );
std_fld_def STD_SHIFT_NUMBER empty_char (' ')	( ASCII_9,		 2 );
std_fld_def STD_SEAL_NUMBER empty_char(' ')	( ASCII_X,		20 );
std_fld_def STD_EQUIPMENT_CODE	 		( ASCII_X,		20 );
std_fld_def STD_METER_CODE	 		( ASCII_X,		10 );
std_fld_def STD_DELIVERY_LOCATION empty_char(' ')  ( ASCII_X,		 8 );
std_fld_def STD_ORDER_REF_CD empty_char(' ')	( ASCII_X,		16 );
std_fld_def STD_EXEMPT_NO empty_char(' ')	( ASCII_X,		 8 );
std_fld_def STD_PERSONNEL_CODE empty_char(' ')	( ASCII_X,		 6 );
std_fld_def STD_TIME_CODE empty_char(' ')	( ASCII_X,		 2 );
std_fld_def STD_COMPANY_CODE empty_char(' ')	( ASCII_X,		 8 );

std_fld_def STD_DLV_NAME empty_char(' ')	( ASCII_X,		 36 );
std_fld_def STD_DLV_ADDR1 empty_char(' ')	( ASCII_X,		 36 );
std_fld_def STD_DLV_ADDR2 empty_char(' ')	( ASCII_X,		 28 );
std_fld_def STD_DLV_ADDR3 empty_char(' ')	( ASCII_X,		 6 );
std_fld_def STD_DLV_INSTRUCTION empty_char(' ')	( ASCII_X,		 36 );
std_fld_def STD_CUST_ORDER_TEXT empty_char(' ')	( ASCII_X,		 8 );
std_fld_def STD_LOAD_INSTRUCTION empty_char(' ')( ASCII_X,		 50 );
std_fld_def STD_DOCKET_NUMBER_TEXT empty_char(' ')( ASCII_X,		 8 );
std_fld_def STD_SUMMARY_LINE empty_char(' ')	( ASCII_X,		 490 );


std_fld_def STD_FILLER1 (IGNORED, 1 );
std_fld_def STD_FILLER2 (IGNORED, 2 );
std_fld_def STD_FILLER4 (IGNORED, 4 );
std_fld_def STD_FILLER7 (IGNORED, 7 );
std_fld_def STD_FILLER10 (IGNORED, 10 );
std_fld_def STD_FILLER20 (IGNORED, 20 );
std_fld_def STD_FILLER22 (IGNORED, 22 );
std_fld_def STD_FILLER500 (IGNORED, 500 );
std_fld_def STD_FILLER240 (IGNORED, 240 );



message_group_def MGR_EMB;

//[--- EMB: Common Stuff

const_def EMB_VERSION_N                 ("10.00.00");

enum_def EMB_MSG_TYPE enum_name(MSG_TYPE) {
        ("LOAD:SPEC                     ",	MSG_TY_LOAD_SPEC                );
        ("LOAD:ORDER                    ",	MSG_TY_LOAD_ORDER               );
	("OPEN:ORD                      ",	MSG_TY_OPEN_ORDER		);
	("LOAD:DELETE                   ",	MSG_TY_LOAD_DELETE		);
	("TANKER:DET                    ",	MSG_TY_TKR_AND_EQP_CFG		);
	("TANKER:DELETE                 ",	MSG_TY_FEP_TANKER_DELETE	);
	("PARTNER:DET                   ",	MSG_TY_PARTNER_DETAILS		);
        ("DELIVERY:DET                  ",	MSG_TY_DELIVERY_DETAILS		);
        ("COMPANY:DETAIL                ",	MSG_TY_FEP_COMPANY_UPDATE	);
	("LOAD:START                    ",	MSG_TY_LOAD_STARTED		);
        ("LOAD:DETAIL                   ",	MSG_TY_LOAD_DET                 );
	("METER:CLOSEOUT                ",	MSG_TY_METER_CLOSEOUT		);
	("TANK:CLOSEOUT                 ",	MSG_TY_TANK_CLOSEOUT		);
	("TANK:INVENTORY                ",	MSG_TY_TANK_REPORT		);
	("DOC:REQUEST                   ",	MSG_TY_DELIVERY_DOC_REQ		);
	("TEST_MESSAGE                  ",	MSG_TY_OMEGA_TEST		);
};

enum_def EMB_VETTING_FLAG enum_name(CO_VETTING) empty_char(' ') {
        ("00",          CO_VET_CARRIER);
        ("01",          CO_VET_PRIMEMOVER);
        ("02",          CO_VET_TRAILER);
        ("03",          CO_VET_ALL);
};

enum_def EMB_RETURNS_ENTRY enum_name(RTN_CFG_ENUM) empty_char(' ') {
        ("00",          RTN_CFG_BAY_ONLY);
        ("01",          RTN_CFG_GATE_BAY);
        ("02",          RTN_CFG_GATE_SPC);
        ("03",          RTN_CFG_GATE_ONLY);
        ("04",          RTN_CFG_SPC_ONLY);
        ("05",          RTN_CFG_HOST_BAY_SPC);
        ("06",          RTN_CFG_HOST_ONLY);
        ("07",          RTN_CFG_NO_ENTRY_MTHD);
};

enum_def EMB_SRC_TYPE enum_name(SHL_SRCTYPE) empty_char(' ')
{
        ("??",           SHL_ST_INVALID                  );
        ("O ",           SHL_ST_MANUAL_FROM_LOCAL        );
        ("H ",           SHL_ST_AUTO_FROM_HOST           );
};

enum_def EMB_UNITS_OF_MEASURE  enum_name(QTY_SCALE) empty_char(' ') {
        ("L ",          AMB_LITRE);
        ("LC",          COR_LITRE);
        ("KG",          KGRAM);
        ("L ",          QTY_LITRE);
        ("ML",          QTY_MILLILITRE);
};

enum_def EMB_SHL_TYPE enum_name(SHL_TYPE) {
	("Q "		, SHLT_PREORDER		);
	("A "		, SHLT_PRESCHEDULE	);
	("O "		, SHLT_OPEN_ORDER	);
};

enum_def EMB_LOAD_TYPE enum_name(LD_TYPE) {
        ("A "           , LD_PRESCHEDULE        );
        ("Q "           , LD_PREORDER           );
        ("O "           , LD_CUST_ORDER         );
        ("W "           , LD_WEIGHBRIDGE	);
};

enum_def EMB_POSTING_TYPE enum_name(LD_REVERSE_STATUS)
{
        ("00",          LD_NOT_REVERSED );
        ("01",          LD_REVERSED     );
        ("02",          LD_REPOSTED     );
};

enum_def EMB_BASE_CLASS enum_name(BASEPROD_CLASS) {
	("JET "	, JET_CLASS			);
	("GASO"	, GASOLINE_CLASS		);
	("LUBE"	, LUBE_OIL_CLASS		);
	("FUEL"	, FUEL_OIL_CLASS		);
	("CRUD"	, CRUDE_OIL_CLASS		);
	("ADDI"	, ADDITIVE_CLASS		);
	("ETHA"	, ETHANOL_CLASS			);
	("LPG "	, LPG_CLASS			);
	("54C "	, API_54C_CLASS			);
	("NO C"	, NO_TEMP_COMP_USED_CLASS	);
	("ADDI"	, REPORTED_ADDITIVE_CLASS	);
};

enum_def EMB_RETURNS_REASON enum_name(RTN_REASON) empty_char(' ') {
	("00        ",		RTN_NOT_KNOWN);
	("01        ",		RTN_NO_ULLAGE);
	("02        ",		RTN_EQUIP_FAIL);
	("03        ",		RTN_CUST_NOT_AVAIL);
	("04        ",		RTN_WRONG_PROD);
	("05        ",		RTN_ORDER_CANCEL);
	("06        ",		RTN_NO_ACCESS);
	("07        ",		RTN_COD_NOT_AVAIL);
	("08        ",		RTN_DROPPED_AT_OTHER_STIE);
	("09        ",		RTN_NO_TIME);
	("00        ",		RTN_UNSPEC);
	("00        ",		RTN_KNOWN);
	("99        ",		RTN_MAX_REASONS);
};

// WARNING: String-to-enum mapping will NOT work for PARTNER_TYPE due to
// a design decision to store partner type as varchar in the database.
// However, the same mechanic is still used to define it here.
enum_def EMB_PARTNER_TYPE enum_name(PARTNER_TYPE) empty_char(' ') {
	("??",		PRTNR_TYPE_INVALID);
	("AG",		PRTNR_TYPE_SOLD_TO);
	("WE",		PRTNR_TYPE_SHIP_TO);
	("PR",		PRTNR_TYPE_CARRIER);
};

truth_value_def EMB_TRUTH empty_char(' ')	{ "Y", "N" };

std_fld_def EMB_VOLUME		empty_char(' ') (ASCII_9,		 9);
std_fld_def EMB_VOLUME_D	empty_char(' ') (ASCII_S9d9,		 10);
std_fld_def EMB_VOLUME_IGN  	(IGNORED,                9);
std_fld_def EMB_BASE_QTY	empty_char(' ') (ASCII_9,		 10);
//std_fld_def EMB_TANK_DENSITY    empty_char(' ')	(ASCII_9("%7.2f"),	 7);
//std_fld_def EMB_TANK_TEMPERATURE empty_char(' ')  (ASCII_S9d9,		 5);
std_fld_def EMB_MSG_ID		empty_char(' ')	(ASCII_X,               36);
std_fld_def EMB_HSTCOMM_NAME	empty_char(' ') (ASCII_X,		8);
std_fld_def EMB_DATE_TIME       empty_char(' ') (ASCII_DDdMMdCCYYHHcMMcSS, 18);
std_fld_def EMB_SITE_CODE       empty_char(' ') (ASCII_X,                8);
std_fld_def EMB_TERMINAL_CODE	empty_char(' ') (ASCII_X,                6);
std_fld_def EMB_CO_NAME		empty_char(' ')	(ASCII_X,	       300);

std_fld_def EMB_IDOC_NO		empty_char(' ')	(ASCII_9,               20);
std_fld_def EMB_LOAD_SAP_REF    empty_char(' ') (ASCII_X,               16);
std_fld_def EMB_LOAD_NO         empty_char(' ') (ASCII_9,                9);
std_fld_def EMB_TRIP_NO         empty_char(' ') (ASCII_9,                9);
std_fld_def EMB_EQUIPMENT_CODE  empty_char(' ') (ASCII_X,               20);
std_fld_def EMB_LOAD_ID		empty_char(' ') (ASCII_X,               20);
std_fld_def EMB_LOAD_ID_2	empty_char(' ') (ASCII_9,               9);
std_fld_def EMB_FLEET_DATA	empty_char(' ') (ASCII_X,               20);

std_fld_def EMB_SHIFT_NUMBER	empty_char(' ') (ASCII_9,                1);
std_fld_def EMB_SHIFT_PRIORITY  empty_char(' ') (ASCII_9,                1);
std_fld_def EMB_SHIFT_PRIORITY_IGN  		(IGNORED,                1);
std_fld_def EMB_PRODUCT_CODE    empty_char(' ') (ASCII_X,               18);
std_fld_def EMB_DENSITY_1       empty_char(' ') (ASCII_9,                6);
std_fld_def EMB_SOLD_TO_NUM     empty_char(' ') (ASCII_X,               20);
std_fld_def EMB_SHIP_TO_NUM     empty_char(' ') (ASCII_X,               20);
std_fld_def EMB_TKR_CMPT_NUM	empty_char(' ') (ASCII_9,		 2);
std_fld_def EMB_COMP_NUM	empty_char(' ')	(ASCII_9,		 2);
std_fld_def EMB_EQP_CMPT_NUM	empty_char(' ')	(ASCII_9,		 2);
std_fld_def EMB_ISOTAINER_NUM   empty_char(' ') (ASCII_X,               20);
std_fld_def EMB_DELIV_NUM       empty_char(' ') (ASCII_X,               20);
std_fld_def EMB_DRUM_COUNT	empty_char(' ')	(ASCII_9,                6);
std_fld_def EMB_CMPT_HOST_DATA	empty_char(' ') (ASCII_X,               20);

std_fld_def EMB_CUST_ACCT_NUM	empty_char(' ')	(ASCII_X,		18);
std_fld_def EMB_ORDER_ID	empty_char(' ') (ASCII_9,                9);
std_fld_def EMB_CUST_ORDER_NO	empty_char(' ') (ASCII_9,                9);
std_fld_def EMB_HST_ORD_REF_NO	empty_char(' ') (ASCII_X,               32);
std_fld_def EMB_SPCL_INSTRUCT	empty_char(' ')	(ASCII_X,	       160);
std_fld_def EMB_OO_PI_IDX	empty_char(' ') (ASCII_9,		 2);
std_fld_def EMB_AOI_NUMBER      empty_char(' ') (ASCII_9,                4);
std_fld_def EMB_PERSONNEL_NAME  empty_char(' ') (ASCII_X,               50);
std_fld_def EMB_SEAL_NUMBER empty_char(' ')     (ASCII_X,              256);
std_fld_def EMB_DELIVERY_LOCATION empty_char(' ') (ASCII_X,             15);
std_fld_def EMB_MASS            empty_char(' ') (ASCII_9,                9);
std_fld_def EMB_TEMPERATURE scale_pow10(1), empty_char(' '), error_string("    ")  (ASCII_S9,    4);
std_fld_def EMB_TEMP_F scale_pow10(2), empty_char(' ')(ASCII_S9,   7);
std_fld_def EMB_DENSITY scale_pow10(1), empty_char(' ') (ASCII_9,	 5);
std_fld_def EMB_API_GRAVITY scale_pow10(3), empty_char(' ') (ASCII_9,   7);

std_fld_def EMB_HOST_PROD_CODE  empty_char(' ') (ASCII_X,               18);
std_fld_def EMB_BASE_PROD_CODE  empty_char(' ') (ASCII_X,               18);
std_fld_def EMB_BASE_PROD_NAME  empty_char(' ') (ASCII_X,               40);
std_fld_def EMB_TANK_CODE       empty_char(' ') (ASCII_X,                6);
std_fld_def EMB_BASEPROD_MTR_CODE empty_char(' ') (ASCII_X,             14);
std_fld_def EMB_METER_CODE	empty_char(' ') (ASCII_X,               14);
std_fld_def EMB_COMPARTMENT_NUMBER	empty_char(' ') (ASCII_9,	2);
std_fld_def EMB_TANKER_CODE     empty_char(' ') (ASCII_X,		20);
std_fld_def EMB_LD_SCHED_NUM	empty_char(' ') (ASCII_9,		 9);
std_fld_def EMB_DOC_TEMPL_ID	empty_char(' ') (ASCII_X,		20);
std_fld_def EMB_DELV_NUM	empty_char(' ') (ASCII_X,		20);
std_fld_def EMB_DELV_TYPE	empty_char(' ') (ASCII_X,		 4);
std_fld_def EMB_ROUTE		empty_char(' ') (ASCII_X,	       256);
std_fld_def EMB_SHIP_COND	empty_char(' ') (ASCII_X,	       256);
std_fld_def EMB_DATE_AND_TIME	empty_char(' ') (ASCII_DDdMMdCCYYHHcMMcSS, 18);	
std_fld_def EMB_PHONE_NUM	empty_char(' ')	(ASCII_X,		25);
std_fld_def EMB_INSTRUCT	empty_char(' ')	(ASCII_X,		420);
std_fld_def EMB_LPG_REMARK	empty_char(' ')	(ASCII_X,		420);
std_fld_def EMB_SALES_ORD_NUM	empty_char(' ')	(ASCII_9,		20);
std_fld_def EMB_CUST_PO		empty_char(' ')	(ASCII_X,		20);
std_fld_def EMB_SALES_ORD_TYPE	empty_char(' ')	(ASCII_X,		20);
std_fld_def EMB_VAT_ID		empty_char(' ')	(ASCII_X,		13);
std_fld_def EMB_PARTNER_CODE	empty_char(' ')	(ASCII_X,		20);
std_fld_def EMB_PARTNER_NAME	empty_char(' ')	(ASCII_X,		210);
std_fld_def EMB_SELL_CMPY_CODE	empty_char(' ')	(ASCII_X,		10);
std_fld_def EMB_CUSTOM_CODE	empty_char(' ')	(ASCII_X,		100);
std_fld_def EMB_LPG_DEST_TYPE	empty_char(' ')	(ASCII_X,		210);
std_fld_def EMB_PERMIT_NUM	empty_char(' ')	(ASCII_X,		210);
std_fld_def EMB_DI_CAT		empty_char(' ')	(ASCII_9,		 4);
std_fld_def EMB_DI_NUM		empty_char(' ')	(ASCII_9,		 6);
std_fld_def EMB_DI_CMPT_NUM	empty_char(' ')	(ASCII_9,	 2);
std_fld_def EMB_DI_PROD_CODE	empty_char(' ')	(ASCII_X,	18);
std_fld_def EMB_DI_QTY		empty_char(' ')	(ASCII_9,		 9);
std_fld_def EMB_DI_SHORT_TXT	empty_char(' ')	(ASCII_X,		300);
std_fld_def EMB_DI_DUTY_TYPE	empty_char(' ')	(ASCII_X,	20);
std_fld_def EMB_DI_EXCISE_LIC_NUM	empty_char(' ')	(ASCII_9,	15);
std_fld_def EMB_DI_REF_DOC_NUM	empty_char(' ')	(ASCII_9,	10);
std_fld_def EMB_DI_SITE_CAP	empty_char(' ')	(ASCII_9,	10);
std_fld_def EMB_DI_STORAGE_CODE	empty_char(' ')	(ASCII_X,	20);
std_fld_def EMB_ADDI_FLD	empty_char(' ')	(ASCII_X,		420);
std_fld_def EMB_REQUEST_AREA_NAME empty_char(' ') (ASCII_X,		18);
std_fld_def EMB_STRT_NO_AND_NM	empty_char(' ')	(ASCII_X,		210);
std_fld_def EMB_CITY_LINE_1	empty_char(' ')	(ASCII_X,		210);
std_fld_def EMB_CITY_LINE_2	empty_char(' ')	(ASCII_X,		210);
std_fld_def EMB_DISTRICT	empty_char(' ')	(ASCII_X,		210);
std_fld_def EMB_POSTAL_CODE	empty_char(' ')	(ASCII_9,		 9);
std_fld_def EMB_STATE		empty_char(' ')	(ASCII_X,		210);
std_fld_def EMB_COUNTRY		empty_char(' ')	(ASCII_X,		210);
std_fld_def EMB_PHONE_NO	empty_char(' ')	(ASCII_X,		25);
std_fld_def EMB_CONTACT_NM	empty_char(' ')	(ASCII_X,		210);
std_fld_def EMB_EMAIL_ADDR	empty_char(' ')	(ASCII_X,		50);
std_fld_def EMB_FAX_NO		empty_char(' ')	(ASCII_X,		25);
std_fld_def EMB_TANKER_NAME     empty_char(' ')	(ASCII_X,		40);
std_fld_def EMB_TANKER_COMMENT	empty_char(' ')	(ASCII_X,		3500);
std_fld_def EMB_COMPARTMENT_NO	empty_char(' ')	(ASCII_9,		 2);
std_fld_def EMB_EQUIP_CODE  	empty_char(' ') (ASCII_X,               20);
std_fld_def EMB_EQUIP_TYPE_CODE empty_char(' ') (ASCII_X,               20);
std_fld_def EMB_TKR_TYPE_CODE	empty_char(' ')(ASCII_X,		20);
std_fld_def EMB_LOCATION_CODE	empty_char(' ')	(ASCII_X,		 6);
std_fld_def EMB_DATE_AND_TIME_2	empty_char(' ')	(ASCII_DDMMMYYHHcMM,	12);
std_fld_def EMB_REPEAT_COUNT3			(ASCII_9,		 3);
std_fld_def EMB_TANK_LEVEL	empty_char(' ')	(ASCII_9,		 9);

/* this header is used for both incoming and outgoing messages */
sub_message_def EMB_MSG_HEADER
        struct_name             (HDB_TRANS_HDR)
{
        EMB_MSG_TYPE            ("Message Type")        message_type;
        EMB_VERSION_N           ("Version Number");
        EMB_DATE_TIME           ("Event Date and Time", event_time);
	EMB_DATE_TIME           ("Message creation time", msg_creation_time) optional;
        EMB_DATE_TIME           ("Message modified time", msg_modified_time) optional;
        EMB_TERMINAL_CODE	("Terminal Code", site_cd);
        EMB_SITE_CODE           ("Site Code", site_cd);
        EMB_MSG_ID		("Message ID", msg_id);
};

sub_message_def EMB_MSG_HEADER_SHL
        struct_name             (SHL_MAIN_STRUCT)
{
        EMB_MSG_TYPE            ("Message Type")        message_type;
        EMB_VERSION_N           ("Version Number");
        EMB_DATE_TIME           ("Event Date and Time", event_time);
	EMB_DATE_TIME           ("Message creation time", msg_creation_time) optional;
        EMB_DATE_TIME           ("Message modified time", msg_modified_time) optional;
        EMB_TERMINAL_CODE	("Terminal Code", trm_cd);
        EMB_SITE_CODE           ("Site Code", site_cd);
        EMB_MSG_ID		("Message ID", msg_id);
};

sub_message_def EMB_TKR_COMPONENT_STRUCT
        struct_name     (TKR_COMPONENT_STRUCT)
{
        EMB_EQUIPMENT_CODE      ("Equipment Code", equip_cd) optional;
};

sub_message_def EMB_TKR_STRUCT
        struct_name     (TKR_STRUCT)
{
        EMB_TANKER_CODE			("Tanker Code", tanker_cd);
        STD_REPEAT_COUNT                ("Number of Components", n_components);
        EMB_TKR_COMPONENT_STRUCT        ("Tanker Components", components)
                                                max_repeats(5),
                                                repeat_count("Number of Components");
};

sub_message_def EMB_LOAD_SCHD_MAIN
        struct_name             (SHL_MAIN_STRUCT)
{
        EMB_IDOC_NO             ("IDOC Number", idoc_num) optional;
        EMB_LOAD_SAP_REF        ("SAP Reference Number", ref_no) optional;
        EMB_LOAD_NO             ("Load Number", load_number);
        EMB_DATE_TIME           ("Schedule Date", scheduled_date);
        EMB_TKR_STRUCT          ("Tanker Details", tanker_dets);
        STD_COMPANY_CODE        ("Supplier", supplier_cd);
        STD_COMPANY_CODE        ("Drawer", drawer_cd);
        STD_COMPANY_CODE        ("Carrier", carrier_cd) optional;
        EMB_SHIFT_NUMBER	("Shift/Trip", shift_no) optional;
        EMB_SHIFT_PRIORITY      ("Priority", shift_priority) optional;
        EMB_SRC_TYPE            ("Schedule Source", shl_src) optional;
};

sub_message_def EMB_LOAD_SCHD_MAIN_2
        struct_name             (SHL_MAIN_STRUCT)
{
        EMB_FLEET_DATA		("Load Generic Data", fleet_data) optional;
};

sub_message_def EMB_PRTNR_CONTACT_DETS
	struct_name		(ADDR_CONTACT_DETAILS)
{
	EMB_STRT_NO_AND_NM	("Street number and name", street_number_and_name) optional;
	EMB_CITY_LINE_1		("City Line 1", city_line_1) optional;
	EMB_CITY_LINE_2		("City Line 2", city_line_2) optional;
	EMB_DISTRICT		("District", district) optional;
	EMB_POSTAL_CODE		("Postal Code", postal_code) optional;
	EMB_STATE		("State", state) optional;
	EMB_COUNTRY		("Country", country) optional;
	EMB_PHONE_NO		("Telephone Number", phone_number) optional;
	EMB_CONTACT_NM		("Contact Name", contact_name) optional;
	EMB_EMAIL_ADDR		("Email Address", email_address) optional;
	EMB_FAX_NO		("Fax Number", fax_number) optional;
};

//]--- EMB: Common Stuff



//[--- EMB: Load Detail (OMEGA->EMB)
truth_value_def EMB_LD_COMPLETION empty_char(' ') { "1", "0" };

sub_message_def EMB_AMB_LD_QUANTITY
        struct_name             (LD_QUANTITY_STRUCT)
{
        STD_VOLUME              ("Ambient Qty", ambient);
};

sub_message_def EMB_LD_DET_STATUS_5
        struct_name             (LD_STRUCT_STATUS)
{
        EMB_DATE_TIME           ("Start Time", start_time);
        EMB_DATE_TIME           ("End Time", end_time);
};

sub_message_def EMB_LD_STATUS_TKR
        struct_name             (TKR_STRUCT)
{
	EMB_TANKER_CODE		("Tanker Code", tanker_cd);
};
sub_message_def EMB_LD_DET_STATUS_4
        struct_name             (LD_STRUCT_STATUS)
{
        STD_PERSONNEL_CODE      ("Personnel Code", person_cd);
        EMB_PERSONNEL_NAME      ("Personnel Name", person_name);
        EMB_LD_STATUS_TKR       ("Tanker Code", tanker);
        EMB_FLEET_DATA          ("Fleet data", fleet_data) optional;
        EMB_SEAL_NUMBER         ("Seal Number", seal_number) optional;
};

sub_message_def EMB_LD_DET_STATUS_3
        struct_name             (LD_STRUCT_STATUS)
{
        STD_CO_CODE             ("Carrier", carrier_cd);
        EMB_DATE_TIME           ("Scheduled Date", scheduled_date) optional;
        EMB_SHL_TYPE            ("Load Schedule Type", shl_type) optional;
        EMB_LOAD_TYPE           ("Load Type after loading", load_type) optional;
        EMB_POSTING_TYPE        ("Posting Type", load_reverse_status) optional;
        EMB_SHIFT_NUMBER	("Shift Number", shift_no) optional;
        EMB_SHIFT_PRIORITY	("Shift Priority", shift_priority) optional;
};

sub_message_def EMB_LD_DET_STATUS_2
        struct_name             (LD_STRUCT_STATUS)
{
        STD_CO_CODE             ("Supplier", supplier_cd);
        EMB_AOI_NUMBER          ("Supplier AOI", supplier_aoi) optional;
        STD_CO_CODE             ("drawer cd", drawer_cd);
        EMB_AOI_NUMBER          ("Drawer aoi", drawer_aoi) optional;
};

sub_message_def EMB_LD_DET_STATUS_1
        struct_name             (LD_STRUCT_STATUS)
{
        EMB_IDOC_NO             ("IDOC Number", idoc_num) optional;
        EMB_LOAD_SAP_REF        ("SAP Load Ref. Number", shl_ref_no) optional;
        EMB_LOAD_ID             ("Load ID", ld_key_no);
        EMB_TRIP_NO             ("Trip Number", shl_trip_no);
};

sub_message_def EMB_LD_PROD_QTY
	struct_name		(LD_QUANTITY_STRUCT)
{
	STD_VOLUME		("Observed Qty Loaded", ambient) optional;
	STD_VOLUME		("Standard Qty Loaded", corrected) optional;
	STD_VOLUME		("Mass Qty Loaded", mass) optional;
	EMB_TEMPERATURE		("Working Temperature", temperature) optional;
	EMB_DENSITY		("Weighted Average Density", dens) optional;
	EMB_TEMP_F		("Temperature in Fahrenheit", temperature_f) optional;
	EMB_API_GRAVITY		("API Gravity", api_gravity) optional;
};

sub_message_def EMB_1_HOST_PROD_DET 
	struct_name		(LD_1_SP_PROD_DET_STRUCT)
{
	EMB_PRODUCT_CODE	("Product Code", dst_cmpy_prod_code);
	EMB_UNITS_OF_MEASURE	("Unit of Measure", quantity_units) optional;
	EMB_LD_PROD_QTY		("Product Properties", quantity);
};

sub_message_def EMB_HOST_PROD_DETS
	struct_name		(LD_SP_PROD_DETS_STRUCT)
{
	STD_REPEAT_COUNT	("Number of Host Products", n_entries);
	EMB_1_HOST_PROD_DET	("Host Products Details", sp_prod_dets)
					max_repeats(10),
					repeat_count("Number of Host Products");
};

sub_message_def EMB_LD_PROD_QTY_2
        struct_name     (LD_QUANTITY_STRUCT)
{
        EMB_TEMPERATURE         ("Working Temperature", temperature) optional;
        EMB_DENSITY             ("Weighted Average Density", dens) optional;
	EMB_TEMP_F		("Temperature in Fahrenheit", temperature_f) optional;
	EMB_API_GRAVITY		("API Gravity", api_gravity) optional;
        EMB_BASE_QTY		("Observed Qty Loaded", ambient) optional;
        EMB_BASE_QTY		("Standard Qty Loaded", corrected) optional;
        EMB_BASE_QTY		("Mass Qty Loaded", mass) optional;
};

sub_message_def EMB_BASE_PROD_CLASS_STRUCT
        struct_name     (LD_QUANTITY_STRUCT)
{
        EMB_BASE_CLASS       ("Base class", base_class);
};

sub_message_def EMB_1_BASE_A_PROD_DET
        struct_name    (LD_1_BASE_PROD_DET_STRUCT)
{
        EMB_BASE_PROD_CODE              ("Base Product Code", dst_cmpy_base_cd);
        EMB_BASE_PROD_NAME              ("Base Product Name", dst_cmpy_base_nm);
        EMB_BASE_PROD_CLASS_STRUCT	("Base Prod Class", quantity) optional;
        EMB_UNITS_OF_MEASURE            ("Unit of Measure baseprod", quantity_units)
                                                                optional;
        EMB_LD_PROD_QTY_2               ("Product Details", quantity);
};

sub_message_def EMB_BASE_A_PROD_DETS
        struct_name     (LD_BASE_PROD_DETS_STRUCT)
{
        STD_REPEAT_COUNT        ("Number of Base Products", n_entries);
        EMB_1_BASE_A_PROD_DET   ("Base Products Details", base_prod_dets)
                                        max_repeats(10),
                                        repeat_count("Number of Base Products");
};

sub_message_def EMB_TKR_COMPARTMENT_STRUCT
        struct_name     (TKR_COMPARTMENT_STRUCT)
{
        EMB_EQUIPMENT_CODE      ("Equipment Code", equip_cd) optional;
};

sub_message_def EMB_TKR_CMPT_STRUCT_1
        struct_name     (TKR_COMPARTMENT_STRUCT)
{
        EMB_COMPARTMENT_NUMBER        ("Compartment Number Overall", cmpt_no_overall)
                                                optional;
};
sub_message_def EMB_AMB_COR_LD_MASS_QTY
        struct_name             (LD_QUANTITY_STRUCT)
{
        STD_VOLUME              ("Ambient Qty", ambient);
        STD_VOLUME              ("Corrected Qty", corrected);
        STD_VOLUME              ("Mass Qty", mass);
};

sub_message_def EMB_AMB_COR_LD_QUANTITY
        struct_name             (LD_QUANTITY_STRUCT)
{
        EMB_BASE_CLASS		("Base class", base_class);
        EMB_VOLUME_D		("Observed Qty Loaded", ambient) optional;
        EMB_VOLUME_D		("Corrected Qty Loaded", corrected) optional;
        EMB_VOLUME_D		("Mass Qty Loaded", mass) optional;
};

sub_message_def EMB_AMB_COR_LD_QUANTITY_1
        struct_name             (LD_QUANTITY_STRUCT)
{
        EMB_DENSITY             ("Weighted Average Density", dens) optional;
        EMB_TEMPERATURE         ("Working Temperature", temperature) optional;
	EMB_TEMP_F		("Temperature in Fahrenheit", temperature_f) optional;
	EMB_API_GRAVITY		("API Gravity", api_gravity) optional;
};

sub_message_def EMB_1_TRANBASE_DETS
        struct_name     (LD_TRF_TRANBASE_1_BASE)
{
        EMB_BASE_PROD_CODE      ("Base Product Code", baseprod_cd);
        EMB_BASE_PROD_NAME      ("Base Product Name", baseprod_nm);
        EMB_AMB_COR_LD_QUANTITY ("BaseProd Qty", baseprod_qty);
        EMB_UNITS_OF_MEASURE    ("Baseprod Unit", baseprod_unit);
        EMB_AMB_COR_LD_QUANTITY_1 ("Baseprod Qty 1", baseprod_qty);

        EMB_TANK_CODE           ("Tank Code", baseprod_tank_cd);
        EMB_BASEPROD_MTR_CODE   ("Base Prod Mtr Code", baseprod_meter_cd);
};

sub_message_def EMB_LD_TRF_BASE_DET
        struct_name     (LD_TRF_TRANBASE_STRUCT)
{
        STD_REPEAT_COUNT        ("Number of Base Products", n_bases);
        EMB_1_TRANBASE_DETS     ("Base Details", base) max_repeats(10),
                                        repeat_count("Number of Base Products");
};

sub_message_def EMB_LD_1_CMPT_DET
        struct_name             (LD_1_CMPT_DET_STRUCT)
{
        EMB_TKR_COMPARTMENT_STRUCT ("Equip Code", compartment);
        EMB_PRODUCT_CODE        ("Host Product Code", dst_cmpy_sp_or_base_cd);
        EMB_PRODUCT_CODE        ("Scheduled Product Code", sched_prod_cd);
        EMB_TKR_CMPT_STRUCT_1   ("Cmpt No overall", compartment);
        EMB_AMB_COR_LD_MASS_QTY ("Quantity", quantity);
        EMB_UNITS_OF_MEASURE    ("Unit of Measure cmpt qty", quantity_units)
                                                        optional;
        STD_VOLUME              ("Returned Qty", preloaded_qty);
        STD_EXEMPT_NO           ("Exempt Number", exempt_no) optional;

        EMB_DELIV_NUM           ("Delivery Number", delivery_num) optional;
        EMB_ISOTAINER_NUM       ("Isotainer Number", isotainer_num) optional;
        EMB_SOLD_TO_NUM         ("Sold to Number", sold_to_num) optional;
        EMB_SHIP_TO_NUM         ("Ship to Number", ship_to_num) optional;

        EMB_LD_TRF_BASE_DET     ("Base Details", base_details);
};

sub_message_def EMB_LD_CMPT_DETS
        struct_name             (LD_CMPT_DETS_STRUCT)
{
        STD_REPEAT_COUNT        ("Number of Compartments", n_entries);
        EMB_LD_1_CMPT_DET       ("Compartment Details", cmpt_dets)
                                        max_repeats(20),
                                        repeat_count("Number of Compartments");
};

sub_message_def EMB_AMB_LD_QTY
        struct_name             (LD_QUANTITY_STRUCT)
{
        EMB_BASE_QTY		("Ambient Qty", ambient);
};

sub_message_def EMB_BASE_LD_QUANTITY
        struct_name             (LD_QUANTITY_STRUCT)
{
        EMB_DENSITY             ("Weighted Average Density", dens) optional;
        EMB_TEMPERATURE         ("Working Temperature", temperature) optional;
	EMB_TEMP_F		("Temperature in Fahrenheit", temperature_f) optional;
	EMB_API_GRAVITY		("API Gravity", api_gravity) optional;
};

sub_message_def EMB_LD_QTY
        struct_name             (LD_QUANTITY_STRUCT)
{
        EMB_BASE_QTY		("ambient qty", ambient) optional;
        EMB_BASE_QTY		("corrected qty", corrected) optional;
        EMB_BASE_QTY		("mass qty", mass) optional;
};

sub_message_def EMB_LD_1_METER_DET
        struct_name             (LD_1_METER_DET_STRUCT)
{
        EMB_METER_CODE                  ("Meter Code", meter_cd);
        EMB_HOST_PROD_CODE              ("Host Product Code", dst_cmpy_prod_code)
                                                        optional;
        EMB_BASE_PROD_CODE              ("Base Product Code", dst_cmpy_base_cd);
	EMB_UNITS_OF_MEASURE		("Unit of Measure - base", base_units) optional;
        EMB_BASE_LD_QUANTITY		("Base product's details", base_qty);
	//EMB_LD_QTY			("Start meter readings", start_meter);
	STD_VOLUME			("Start Meter Reading - amb", start_amb_meter) optional;
	STD_VOLUME			("Start Meter Reading - cor", start_cor_meter) optional;
	EMB_VOLUME_IGN			("Start Meter Reading - mass") optional;
	//EMB_LD_QTY			("End meter readings", end_meter);
	STD_VOLUME			("End Meter Reading - amb", end_amb_meter) optional;
	STD_VOLUME			("End Meter Reading - cor", end_cor_meter) optional;
	EMB_VOLUME_IGN			("End Meter Reading - mass") optional;
        STD_TANK_CODE                   ("Base Tank Code", main_tank_cd);
	EMB_BASE_PROD_CODE		("Additive Product Code", dst_cmpy_additive_cd) optional;
        STD_TANK_CODE                   ("Additive Tank Code", additive_tank_cd) optional;
        EMB_AMB_LD_QTY                  ("Additive Ambient Qty", additive_qty) optional;
        EMB_UNITS_OF_MEASURE		("Unit of Measure Additive", additive_units) optional;
	EMB_LD_QTY			("Delivered qtys", delivered_qty);
};

sub_message_def EMB_LD_METER_DETS
        struct_name             (LD_METER_DETS_STRUCT)
{
        STD_REPEAT_COUNT        ("Number of Meters", n_entries);
        EMB_LD_1_METER_DET      ("Meter Details", meter_dets)
                                        max_repeats(16),
                                        repeat_count("Number of Meters");
};

sub_message_def EMB_LD_METER_FILLER
        struct_name             (LD_METER_DETS_STRUCT)
{
        STD_REPEAT_COUNT        ("Number of Meters", n_entries);
        SLL_LD_1_METER_FILLER   ("Meter Filler", meter_dets)
                                        max_repeats(16),
                                        repeat_count("Number of Meters");
};

main_message_def EMB_LOAD_DETAILS
        struct_name             (LD_DETAILS_STRUCT),
        name                    ("Load Details"),
        message_type            (LOAD_DET),
        message_group           (MGR_EMB)
{
        EMB_MSG_HEADER          ("Header", trans_hdr);
        EMB_LD_DET_STATUS_1     ("Details 1", status);
        EMB_ORDER_ID		("Order Number", order_nr) optional;
        STD_ORDER_REF_CD        ("Order Reference Code", order_ref_cd) optional;
        EMB_LD_DET_STATUS_2     ("Details 2", status);
        STD_CO_CODE          	("Customer Company", order_customer) optional;
        EMB_LD_DET_STATUS_3     ("Details 3", status);
        EMB_LD_COMPLETION       ("Load Completion Method", automatic_completed);
        EMB_LD_DET_STATUS_4     ("Details 4", status);
        EMB_DELIVERY_LOCATION   ("Delivery Location", delivery_location_cd) optional;
        EMB_LD_DET_STATUS_5     ("Details 5", status);
        EMB_MASS                ("Start Weight", start_weight) optional;
        EMB_MASS                ("End Weight", end_weight) optional;
        EMB_MASS                ("Empty Weight", empty_weight) optional;
        EMB_MASS                ("Returns Weight", returns_weight) optional;
	EMB_HOST_PROD_DETS	("Host Products", sp_prod_dets);
        EMB_BASE_A_PROD_DETS    ("Base Products", base_prod_dets);
        EMB_LD_CMPT_DETS        ("Compartment Details", cmpt_dets);
        EMB_LD_METER_DETS       ("Meter Details", meter_dets);
};

//]--- EMB: Load Detail (OMEGA->EMB)


