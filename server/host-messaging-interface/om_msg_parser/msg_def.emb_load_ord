std_fld_def STD_MESSAGE_LEN			( ASCII_9,		 4 );
std_fld_def STD_SITE_CODE empty_char(' ')	( ASCII_X,		 6 );
std_fld_def STD_CO_CODE empty_char(' ')		( ASCII_X,		 8 );
std_fld_def STD_CO_NAME empty_char(' ')		( ASCII_X,		50 );
std_fld_def STD_REPEAT_COUNT empty_char(' ')	( ASCII_9,		 2 );
std_fld_def STD_TANK_CODE empty_char(' ')	( ASCII_X,		 6 );
std_fld_def STD_BASE_PROD_CODE empty_char(' ')	( ASCII_X,		10 );
std_fld_def STD_PRODUCT_CODE empty_char(' ')	( ASCII_X,		10 );
std_fld_def STD_VOLUME				( ASCII_9,		 9 );
std_fld_def STD_AOI_NUMBER empty_char('9')	( ASCII_9,		 2 );
std_fld_def STD_LOAD_NUMBER			( ASCII_9,		 4 );
std_fld_def STD_SHIFT_NUMBER empty_char (' ')	( ASCII_9,		 2 );
std_fld_def STD_SEAL_NUMBER empty_char(' ')	( ASCII_X,		20 );
std_fld_def STD_EQUIPMENT_CODE	 		( ASCII_X,		20 );
std_fld_def STD_METER_CODE	 		( ASCII_X,		10 );
std_fld_def STD_DELIVERY_LOCATION empty_char(' ')  ( ASCII_X,		 8 );
std_fld_def STD_ORDER_REF_CD empty_char(' ')	( ASCII_X,		16 );
std_fld_def STD_EXEMPT_NO empty_char(' ')	( ASCII_X,		 8 );
std_fld_def STD_PERSONNEL_CODE empty_char(' ')	( ASCII_X,		 6 );
std_fld_def STD_TIME_CODE empty_char(' ')	( ASCII_X,		 2 );
std_fld_def STD_COMPANY_CODE empty_char(' ')	( ASCII_X,		 8 );

std_fld_def STD_DLV_NAME empty_char(' ')	( ASCII_X,		 36 );
std_fld_def STD_DLV_ADDR1 empty_char(' ')	( ASCII_X,		 36 );
std_fld_def STD_DLV_ADDR2 empty_char(' ')	( ASCII_X,		 28 );
std_fld_def STD_DLV_ADDR3 empty_char(' ')	( ASCII_X,		 6 );
std_fld_def STD_DLV_INSTRUCTION empty_char(' ')	( ASCII_X,		 36 );
std_fld_def STD_CUST_ORDER_TEXT empty_char(' ')	( ASCII_X,		 8 );
std_fld_def STD_LOAD_INSTRUCTION empty_char(' ')( ASCII_X,		 50 );
std_fld_def STD_DOCKET_NUMBER_TEXT empty_char(' ')( ASCII_X,		 8 );
std_fld_def STD_SUMMARY_LINE empty_char(' ')	( ASCII_X,		 490 );


std_fld_def STD_FILLER1 (IGNORED, 1 );
std_fld_def STD_FILLER2 (IGNORED, 2 );
std_fld_def STD_FILLER4 (IGNORED, 4 );
std_fld_def STD_FILLER7 (IGNORED, 7 );
std_fld_def STD_FILLER10 (IGNORED, 10 );
std_fld_def STD_FILLER20 (IGNORED, 20 );
std_fld_def STD_FILLER22 (IGNORED, 22 );
std_fld_def STD_FILLER500 (IGNORED, 500 );
std_fld_def STD_FILLER240 (IGNORED, 240 );



message_group_def MGR_EMB;

//[--- EMB: Common Stuff

const_def EMB_VERSION_N                 ("10.00.00");

enum_def EMB_MSG_TYPE enum_name(MSG_TYPE) {
        ("LOAD:SPEC                     ",	MSG_TY_LOAD_SPEC                );
        ("LOAD:ORDER                    ",	MSG_TY_LOAD_ORDER               );
	("OPEN:ORD                      ",	MSG_TY_OPEN_ORDER		);
	("LOAD:DELETE                   ",	MSG_TY_LOAD_DELETE		);
	("TANKER:DET                    ",	MSG_TY_TKR_AND_EQP_CFG		);
	("TANKER:DELETE                 ",	MSG_TY_FEP_TANKER_DELETE	);
	("PARTNER:DET                   ",	MSG_TY_PARTNER_DETAILS		);
        ("DELIVERY:DET                  ",	MSG_TY_DELIVERY_DETAILS		);
        ("COMPANY:DETAIL                ",	MSG_TY_FEP_COMPANY_UPDATE	);
	("LOAD:START                    ",	MSG_TY_LOAD_STARTED		);
        ("LOAD:DETAIL                   ",	MSG_TY_LOAD_DET                 );
	("METER:CLOSEOUT                ",	MSG_TY_METER_CLOSEOUT		);
	("TANK:CLOSEOUT                 ",	MSG_TY_TANK_CLOSEOUT		);
	("TANK:INVENTORY                ",	MSG_TY_TANK_REPORT		);
	("DOC:REQUEST                   ",	MSG_TY_DELIVERY_DOC_REQ		);
	("TEST_MESSAGE                  ",	MSG_TY_OMEGA_TEST		);
};

enum_def EMB_VETTING_FLAG enum_name(CO_VETTING) empty_char(' ') {
        ("00",          CO_VET_CARRIER);
        ("01",          CO_VET_PRIMEMOVER);
        ("02",          CO_VET_TRAILER);
        ("03",          CO_VET_ALL);
};

enum_def EMB_RETURNS_ENTRY enum_name(RTN_CFG_ENUM) empty_char(' ') {
        ("00",          RTN_CFG_BAY_ONLY);
        ("01",          RTN_CFG_GATE_BAY);
        ("02",          RTN_CFG_GATE_SPC);
        ("03",          RTN_CFG_GATE_ONLY);
        ("04",          RTN_CFG_SPC_ONLY);
        ("05",          RTN_CFG_HOST_BAY_SPC);
        ("06",          RTN_CFG_HOST_ONLY);
        ("07",          RTN_CFG_NO_ENTRY_MTHD);
};

enum_def EMB_SRC_TYPE enum_name(SHL_SRCTYPE) empty_char(' ')
{
        ("??",           SHL_ST_INVALID                  );
        ("O ",           SHL_ST_MANUAL_FROM_LOCAL        );
        ("H ",           SHL_ST_AUTO_FROM_HOST           );
};

enum_def EMB_UNITS_OF_MEASURE  enum_name(QTY_SCALE) empty_char(' ') {
        ("L ",          AMB_LITRE);
        ("LC",          COR_LITRE);
        ("KG",          KGRAM);
        ("L ",          QTY_LITRE);
        ("ML",          QTY_MILLILITRE);
};

enum_def EMB_SHL_TYPE enum_name(SHL_TYPE) {
	("Q "		, SHLT_PREORDER		);
	("A "		, SHLT_PRESCHEDULE	);
	("O "		, SHLT_OPEN_ORDER	);
};

enum_def EMB_LOAD_TYPE enum_name(LD_TYPE) {
        ("A "           , LD_PRESCHEDULE        );
        ("Q "           , LD_PREORDER           );
        ("O "           , LD_CUST_ORDER         );
        ("W "           , LD_WEIGHBRIDGE	);
};

enum_def EMB_POSTING_TYPE enum_name(LD_REVERSE_STATUS)
{
        ("00",          LD_NOT_REVERSED );
        ("01",          LD_REVERSED     );
        ("02",          LD_REPOSTED     );
};

enum_def EMB_BASE_CLASS enum_name(BASEPROD_CLASS) {
	("JET "	, JET_CLASS			);
	("GASO"	, GASOLINE_CLASS		);
	("LUBE"	, LUBE_OIL_CLASS		);
	("FUEL"	, FUEL_OIL_CLASS		);
	("CRUD"	, CRUDE_OIL_CLASS		);
	("ADDI"	, ADDITIVE_CLASS		);
	("ETHA"	, ETHANOL_CLASS			);
	("LPG "	, LPG_CLASS			);
	("54C "	, API_54C_CLASS			);
	("NO C"	, NO_TEMP_COMP_USED_CLASS	);
	("ADDI"	, REPORTED_ADDITIVE_CLASS	);
};

enum_def EMB_RETURNS_REASON enum_name(RTN_REASON) empty_char(' ') {
	("00        ",		RTN_NOT_KNOWN);
	("01        ",		RTN_NO_ULLAGE);
	("02        ",		RTN_EQUIP_FAIL);
	("03        ",		RTN_CUST_NOT_AVAIL);
	("04        ",		RTN_WRONG_PROD);
	("05        ",		RTN_ORDER_CANCEL);
	("06        ",		RTN_NO_ACCESS);
	("07        ",		RTN_COD_NOT_AVAIL);
	("08        ",		RTN_DROPPED_AT_OTHER_STIE);
	("09        ",		RTN_NO_TIME);
	("00        ",		RTN_UNSPEC);
	("00        ",		RTN_KNOWN);
	("99        ",		RTN_MAX_REASONS);
};

// WARNING: String-to-enum mapping will NOT work for PARTNER_TYPE due to
// a design decision to store partner type as varchar in the database.
// However, the same mechanic is still used to define it here.
enum_def EMB_PARTNER_TYPE enum_name(PARTNER_TYPE) empty_char(' ') {
	("??",		PRTNR_TYPE_INVALID);
	("AG",		PRTNR_TYPE_SOLD_TO);
	("WE",		PRTNR_TYPE_SHIP_TO);
	("PR",		PRTNR_TYPE_CARRIER);
};

truth_value_def EMB_TRUTH empty_char(' ')	{ "Y", "N" };

std_fld_def EMB_VOLUME		empty_char(' ') (ASCII_9,		 9);
std_fld_def EMB_VOLUME_D	empty_char(' ') (ASCII_S9d9,		 10);
std_fld_def EMB_VOLUME_IGN  	(IGNORED,                9);
std_fld_def EMB_BASE_QTY	empty_char(' ') (ASCII_9,		 10);
//std_fld_def EMB_TANK_DENSITY    empty_char(' ')	(ASCII_9("%7.2f"),	 7);
//std_fld_def EMB_TANK_TEMPERATURE empty_char(' ')  (ASCII_S9d9,		 5);
std_fld_def EMB_MSG_ID		empty_char(' ')	(ASCII_X,               36);
std_fld_def EMB_HSTCOMM_NAME	empty_char(' ') (ASCII_X,		8);
std_fld_def EMB_DATE_TIME       empty_char(' ') (ASCII_DDdMMdCCYYHHcMMcSS, 18);
std_fld_def EMB_SITE_CODE       empty_char(' ') (ASCII_X,                8);
std_fld_def EMB_TERMINAL_CODE	empty_char(' ') (ASCII_X,                6);
std_fld_def EMB_CO_NAME		empty_char(' ')	(ASCII_X,	       300);

std_fld_def EMB_IDOC_NO		empty_char(' ')	(ASCII_9,               20);
std_fld_def EMB_LOAD_SAP_REF    empty_char(' ') (ASCII_X,               16);
std_fld_def EMB_LOAD_NO         empty_char(' ') (ASCII_9,                9);
std_fld_def EMB_TRIP_NO         empty_char(' ') (ASCII_9,                9);
std_fld_def EMB_EQUIPMENT_CODE  empty_char(' ') (ASCII_X,               20);
std_fld_def EMB_LOAD_ID		empty_char(' ') (ASCII_X,               20);
std_fld_def EMB_LOAD_ID_2	empty_char(' ') (ASCII_9,               9);
std_fld_def EMB_FLEET_DATA	empty_char(' ') (ASCII_X,               20);

std_fld_def EMB_SHIFT_NUMBER	empty_char(' ') (ASCII_9,                1);
std_fld_def EMB_SHIFT_PRIORITY  empty_char(' ') (ASCII_9,                1);
std_fld_def EMB_SHIFT_PRIORITY_IGN  		(IGNORED,                1);
std_fld_def EMB_PRODUCT_CODE    empty_char(' ') (ASCII_X,               18);
std_fld_def EMB_DENSITY_1       empty_char(' ') (ASCII_9,                6);
std_fld_def EMB_SOLD_TO_NUM     empty_char(' ') (ASCII_X,               20);
std_fld_def EMB_SHIP_TO_NUM     empty_char(' ') (ASCII_X,               20);
std_fld_def EMB_TKR_CMPT_NUM	empty_char(' ') (ASCII_9,		 2);
std_fld_def EMB_COMP_NUM	empty_char(' ')	(ASCII_9,		 2);
std_fld_def EMB_EQP_CMPT_NUM	empty_char(' ')	(ASCII_9,		 2);
std_fld_def EMB_ISOTAINER_NUM   empty_char(' ') (ASCII_X,               20);
std_fld_def EMB_DELIV_NUM       empty_char(' ') (ASCII_X,               20);
std_fld_def EMB_DRUM_COUNT	empty_char(' ')	(ASCII_9,                6);
std_fld_def EMB_CMPT_HOST_DATA	empty_char(' ') (ASCII_X,               20);

std_fld_def EMB_CUST_ACCT_NUM	empty_char(' ')	(ASCII_X,		18);
std_fld_def EMB_ORDER_ID	empty_char(' ') (ASCII_9,                9);
std_fld_def EMB_CUST_ORDER_NO	empty_char(' ') (ASCII_9,                9);
std_fld_def EMB_HST_ORD_REF_NO	empty_char(' ') (ASCII_X,               32);
std_fld_def EMB_SPCL_INSTRUCT	empty_char(' ')	(ASCII_X,	       160);
std_fld_def EMB_OO_PI_IDX	empty_char(' ') (ASCII_9,		 2);
std_fld_def EMB_AOI_NUMBER      empty_char(' ') (ASCII_9,                4);
std_fld_def EMB_PERSONNEL_NAME  empty_char(' ') (ASCII_X,               50);
std_fld_def EMB_SEAL_NUMBER empty_char(' ')     (ASCII_X,              256);
std_fld_def EMB_DELIVERY_LOCATION empty_char(' ') (ASCII_X,             15);
std_fld_def EMB_MASS            empty_char(' ') (ASCII_9,                9);
std_fld_def EMB_TEMPERATURE scale_pow10(1), empty_char(' '), error_string("    ")  (ASCII_S9,    4);
std_fld_def EMB_TEMP_F scale_pow10(2), empty_char(' ')(ASCII_S9,   7);
std_fld_def EMB_DENSITY scale_pow10(1), empty_char(' ') (ASCII_9,	 5);
std_fld_def EMB_API_GRAVITY scale_pow10(3), empty_char(' ') (ASCII_9,   7);

std_fld_def EMB_HOST_PROD_CODE  empty_char(' ') (ASCII_X,               18);
std_fld_def EMB_BASE_PROD_CODE  empty_char(' ') (ASCII_X,               18);
std_fld_def EMB_BASE_PROD_NAME  empty_char(' ') (ASCII_X,               40);
std_fld_def EMB_TANK_CODE       empty_char(' ') (ASCII_X,                6);
std_fld_def EMB_BASEPROD_MTR_CODE empty_char(' ') (ASCII_X,             14);
std_fld_def EMB_METER_CODE	empty_char(' ') (ASCII_X,               14);
std_fld_def EMB_COMPARTMENT_NUMBER	empty_char(' ') (ASCII_9,	2);
std_fld_def EMB_TANKER_CODE     empty_char(' ') (ASCII_X,		20);
std_fld_def EMB_LD_SCHED_NUM	empty_char(' ') (ASCII_9,		 9);
std_fld_def EMB_DOC_TEMPL_ID	empty_char(' ') (ASCII_X,		20);
std_fld_def EMB_DELV_NUM	empty_char(' ') (ASCII_X,		20);
std_fld_def EMB_DELV_TYPE	empty_char(' ') (ASCII_X,		 4);
std_fld_def EMB_ROUTE		empty_char(' ') (ASCII_X,	       256);
std_fld_def EMB_SHIP_COND	empty_char(' ') (ASCII_X,	       256);
std_fld_def EMB_DATE_AND_TIME	empty_char(' ') (ASCII_DDdMMdCCYYHHcMMcSS, 18);	
std_fld_def EMB_PHONE_NUM	empty_char(' ')	(ASCII_X,		25);
std_fld_def EMB_INSTRUCT	empty_char(' ')	(ASCII_X,		420);
std_fld_def EMB_LPG_REMARK	empty_char(' ')	(ASCII_X,		420);
std_fld_def EMB_SALES_ORD_NUM	empty_char(' ')	(ASCII_9,		20);
std_fld_def EMB_CUST_PO		empty_char(' ')	(ASCII_X,		20);
std_fld_def EMB_SALES_ORD_TYPE	empty_char(' ')	(ASCII_X,		20);
std_fld_def EMB_VAT_ID		empty_char(' ')	(ASCII_X,		13);
std_fld_def EMB_PARTNER_CODE	empty_char(' ')	(ASCII_X,		20);
std_fld_def EMB_PARTNER_NAME	empty_char(' ')	(ASCII_X,		210);
std_fld_def EMB_SELL_CMPY_CODE	empty_char(' ')	(ASCII_X,		10);
std_fld_def EMB_CUSTOM_CODE	empty_char(' ')	(ASCII_X,		100);
std_fld_def EMB_LPG_DEST_TYPE	empty_char(' ')	(ASCII_X,		210);
std_fld_def EMB_PERMIT_NUM	empty_char(' ')	(ASCII_X,		210);
std_fld_def EMB_DI_CAT		empty_char(' ')	(ASCII_9,		 4);
std_fld_def EMB_DI_NUM		empty_char(' ')	(ASCII_9,		 6);
std_fld_def EMB_DI_CMPT_NUM	empty_char(' ')	(ASCII_9,	 2);
std_fld_def EMB_DI_PROD_CODE	empty_char(' ')	(ASCII_X,	18);
std_fld_def EMB_DI_QTY		empty_char(' ')	(ASCII_9,		 9);
std_fld_def EMB_DI_SHORT_TXT	empty_char(' ')	(ASCII_X,		300);
std_fld_def EMB_DI_DUTY_TYPE	empty_char(' ')	(ASCII_X,	20);
std_fld_def EMB_DI_EXCISE_LIC_NUM	empty_char(' ')	(ASCII_9,	15);
std_fld_def EMB_DI_REF_DOC_NUM	empty_char(' ')	(ASCII_9,	10);
std_fld_def EMB_DI_SITE_CAP	empty_char(' ')	(ASCII_9,	10);
std_fld_def EMB_DI_STORAGE_CODE	empty_char(' ')	(ASCII_X,	20);
std_fld_def EMB_ADDI_FLD	empty_char(' ')	(ASCII_X,		420);
std_fld_def EMB_REQUEST_AREA_NAME empty_char(' ') (ASCII_X,		18);
std_fld_def EMB_STRT_NO_AND_NM	empty_char(' ')	(ASCII_X,		210);
std_fld_def EMB_CITY_LINE_1	empty_char(' ')	(ASCII_X,		210);
std_fld_def EMB_CITY_LINE_2	empty_char(' ')	(ASCII_X,		210);
std_fld_def EMB_DISTRICT	empty_char(' ')	(ASCII_X,		210);
std_fld_def EMB_POSTAL_CODE	empty_char(' ')	(ASCII_9,		 9);
std_fld_def EMB_STATE		empty_char(' ')	(ASCII_X,		210);
std_fld_def EMB_COUNTRY		empty_char(' ')	(ASCII_X,		210);
std_fld_def EMB_PHONE_NO	empty_char(' ')	(ASCII_X,		25);
std_fld_def EMB_CONTACT_NM	empty_char(' ')	(ASCII_X,		210);
std_fld_def EMB_EMAIL_ADDR	empty_char(' ')	(ASCII_X,		50);
std_fld_def EMB_FAX_NO		empty_char(' ')	(ASCII_X,		25);
std_fld_def EMB_TANKER_NAME     empty_char(' ')	(ASCII_X,		40);
std_fld_def EMB_TANKER_COMMENT	empty_char(' ')	(ASCII_X,		3500);
std_fld_def EMB_COMPARTMENT_NO	empty_char(' ')	(ASCII_9,		 2);
std_fld_def EMB_EQUIP_CODE  	empty_char(' ') (ASCII_X,               20);
std_fld_def EMB_EQUIP_TYPE_CODE empty_char(' ') (ASCII_X,               20);
std_fld_def EMB_TKR_TYPE_CODE	empty_char(' ')(ASCII_X,		20);
std_fld_def EMB_LOCATION_CODE	empty_char(' ')	(ASCII_X,		 6);
std_fld_def EMB_DATE_AND_TIME_2	empty_char(' ')	(ASCII_DDMMMYYHHcMM,	12);
std_fld_def EMB_REPEAT_COUNT3			(ASCII_9,		 3);
std_fld_def EMB_TANK_LEVEL	empty_char(' ')	(ASCII_9,		 9);

/* this header is used for both incoming and outgoing messages */
sub_message_def EMB_MSG_HEADER
        struct_name             (HDB_TRANS_HDR)
{
        EMB_MSG_TYPE            ("Message Type")        message_type;
        EMB_VERSION_N           ("Version Number");
        EMB_DATE_TIME           ("Event Date and Time", event_time);
	EMB_DATE_TIME           ("Message creation time", msg_creation_time) optional;
        EMB_DATE_TIME           ("Message modified time", msg_modified_time) optional;
        EMB_TERMINAL_CODE	("Terminal Code", site_cd);
        EMB_SITE_CODE           ("Site Code", site_cd);
        EMB_MSG_ID		("Message ID", msg_id);
};

sub_message_def EMB_MSG_HEADER_SHL
        struct_name             (SHL_MAIN_STRUCT)
{
        EMB_MSG_TYPE            ("Message Type")        message_type;
        EMB_VERSION_N           ("Version Number");
        EMB_DATE_TIME           ("Event Date and Time", event_time);
	EMB_DATE_TIME           ("Message creation time", msg_creation_time) optional;
        EMB_DATE_TIME           ("Message modified time", msg_modified_time) optional;
        EMB_TERMINAL_CODE	("Terminal Code", trm_cd);
        EMB_SITE_CODE           ("Site Code", site_cd);
        EMB_MSG_ID		("Message ID", msg_id);
};

sub_message_def EMB_TKR_COMPONENT_STRUCT
        struct_name     (TKR_COMPONENT_STRUCT)
{
        EMB_EQUIPMENT_CODE      ("Equipment Code", equip_cd) optional;
};

sub_message_def EMB_TKR_STRUCT
        struct_name     (TKR_STRUCT)
{
        EMB_TANKER_CODE			("Tanker Code", tanker_cd);
        STD_REPEAT_COUNT                ("Number of Components", n_components);
        EMB_TKR_COMPONENT_STRUCT        ("Tanker Components", components)
                                                max_repeats(5),
                                                repeat_count("Number of Components");
};

sub_message_def EMB_LOAD_SCHD_MAIN
        struct_name             (SHL_MAIN_STRUCT)
{
        EMB_IDOC_NO             ("IDOC Number", idoc_num) optional;
        EMB_LOAD_SAP_REF        ("SAP Reference Number", ref_no) optional;
        EMB_LOAD_NO             ("Load Number", load_number);
        EMB_DATE_TIME           ("Schedule Date", scheduled_date);
        EMB_TKR_STRUCT          ("Tanker Details", tanker_dets);
        STD_COMPANY_CODE        ("Supplier", supplier_cd);
        STD_COMPANY_CODE        ("Drawer", drawer_cd);
        STD_COMPANY_CODE        ("Carrier", carrier_cd) optional;
        EMB_SHIFT_NUMBER	("Shift/Trip", shift_no) optional;
        EMB_SHIFT_PRIORITY      ("Priority", shift_priority) optional;
        EMB_SRC_TYPE            ("Schedule Source", shl_src) optional;
};

sub_message_def EMB_LOAD_SCHD_MAIN_2
        struct_name             (SHL_MAIN_STRUCT)
{
        EMB_FLEET_DATA		("Load Generic Data", fleet_data) optional;
};

sub_message_def EMB_PRTNR_CONTACT_DETS
	struct_name		(ADDR_CONTACT_DETAILS)
{
	EMB_STRT_NO_AND_NM	("Street number and name", street_number_and_name) optional;
	EMB_CITY_LINE_1		("City Line 1", city_line_1) optional;
	EMB_CITY_LINE_2		("City Line 2", city_line_2) optional;
	EMB_DISTRICT		("District", district) optional;
	EMB_POSTAL_CODE		("Postal Code", postal_code) optional;
	EMB_STATE		("State", state) optional;
	EMB_COUNTRY		("Country", country) optional;
	EMB_PHONE_NO		("Telephone Number", phone_number) optional;
	EMB_CONTACT_NM		("Contact Name", contact_name) optional;
	EMB_EMAIL_ADDR		("Email Address", email_address) optional;
	EMB_FAX_NO		("Fax Number", fax_number) optional;
};

//]--- EMB: Common Stuff

//[--- EMB: LOAD_ORDER (EMB->OMEGA)

sub_message_def EMB_LOAD_ORDER_1_PROD_DET
	struct_name		(SHL_1_PROD_DET_STRUCT)
{
	EMB_PRODUCT_CODE	("Drawer Product Code", prod_code);
	EMB_VOLUME		("Ordered Quantity", qty);
	EMB_UNITS_OF_MEASURE	("Unit of Measure", unit_of_measure) optional;
};

sub_message_def EMB_LOAD_ORDER_PROD_DETS
	struct_name		(SHL_PROD_DETS_STRUCT)
{
	STD_REPEAT_COUNT		("Number of Products", n_products);
	EMB_LOAD_ORDER_1_PROD_DET	("Detail", prod_dets) max_repeats(20),
						repeat_count("Number of Products");
};

main_message_def EMB_LOAD_ORDER
	struct_name		(SHL_LOAD_ORDER_STRUCT),
	name			("Load Order"),
	message_type		(LOAD_ORDER),
	message_group		(MGR_EMB)
{
	EMB_MSG_HEADER_SHL		("Header", schedule);
	EMB_LOAD_SCHD_MAIN		("Load Order Main", schedule);
	EMB_DATE_TIME			("Expiry Date and Time", expiry_date_time) optional;
        EMB_LOAD_SCHD_MAIN_2		("Load order Main 2", schedule);
	EMB_SOLD_TO_NUM			("Sold to Number", sold_to_num) optional;
	EMB_SHIP_TO_NUM			("Ship to Number", ship_to_num) optional;
	EMB_ISOTAINER_NUM		("Isotainer Number", isotainer_num) optional;
	EMB_LOAD_ORDER_PROD_DETS	("Products", product_dets);
};

//]--- EMB: LOAD_ORDER (EMB->OMEGA)


