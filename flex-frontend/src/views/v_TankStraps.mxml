<?xml version="1.0" encoding="utf-8"?>
<s:VGroup xmlns:fx="http://ns.adobe.com/mxml/2009"
		  xmlns:s="library://ns.adobe.com/flex/spark"
		  xmlns:mx="library://ns.adobe.com/flex/mx"
		  xmlns:components="components.*"
		  creationComplete="creationCompleteHandler(event)"
		  gap="2" width="100%" height="100%">
	
	<s:states>
		<s:State name="normal" enterState="this.toolbar.enabled=true"/>
		<s:State name="widget" enterState="this.toolbar.enabled=true"/>
		<s:State name="edit" enterState="callLater(function():void{dataGrid.ensureCellIsVisible(idx);});this.toolbar.enabled=false"/>
		<s:State name="create" enterState="this.toolbar.enabled=false"/>
		<s:State name="detail" enterState="view_detailsHandler(event);this.toolbar.enabled=false"/>
	</s:states>
	
	<fx:Script>
		<![CDATA[
			import com.adobe.fiber.runtime.lib.DateTimeFunc;
			
			import components.ActionDialog;
			import components.ConfirmDialog;
			import components.DeleteDialog;
			import components.ExportData;
			import components.MessageDialog;
			import components.ProgressDialog;
			import components.TransactionsDlg;
			import components.ViewPopupDlg;
			
			import dm.remoteBulkListService;
			import dm.remoteDataService;
			import dm.remoteListService;
			import dm.utils.tools;
			
			import flash.events.KeyboardEvent;
			import flash.globalization.LocaleID;
			
			import flashx.textLayout.container.ScrollPolicy;
			
			import mx.collections.ArrayCollection;
			import mx.controls.Alert;
			import mx.controls.DateField;
			import mx.events.FlexEvent;
			import mx.managers.PopUpManager;
			import mx.rpc.events.ResultEvent;
			import mx.utils.ObjectUtil;
			import mx.utils.StringUtil;
			
			import renderers.DKI_HeaderColumn_Renderer;
			
			import spark.components.ToggleButton;
			import spark.components.VScrollBar;
			import spark.components.gridClasses.IGridItemRenderer;
			import spark.events.GridEvent;
			import spark.events.GridSelectionEvent;
			import spark.events.IndexChangeEvent;
			import spark.events.TextOperationEvent;
			
			public static const MAIN_WINDOW_WIDTH:int = 1500;
			
			[Bindable] public var readOnly:Boolean = false;
			[Bindable] public var canUpdate:Boolean = false;
			[Bindable] public var canCreate:Boolean = false;
			[Bindable] public var canDelete:Boolean = false;
			[Bindable] public var hasPassword:Boolean = false;
			
			[Bindable] public var labelWidthPostfix:uint = 120;
			[Bindable] public var labelWidth:uint = 120;
			[Bindable] public var labelHeight:uint = 26;
			[Bindable] public var fieldWidth:uint = 250;
			[Bindable] public var fieldHeight:uint = 26;
			[Bindable] public var spaceWidth:uint = 15;
			[Bindable] public var spaceHeight:uint = 2;
			
			private var idx:int=-1;
			
			private var currentFilter:String=null;
			private var currentOrder:String='strap_height';
			private var currentDirection:String="ASC";
			
			private var currentOffset:int=0;
			private var currentPageSize:int=1000;
			[Bindable] private var totalLength:int=0;
			[Bindable] private var currentLength:int=0;
			
			private var currentFields:Object=new Object();
			private var currentTypes:Object=new Object();
			private var currentSorts:Object=new Object();
			private var currentOrders:Object=new Object();
			//private var currentSorts:Object={dh_cmpt_no:'ASC'};
			//private var currentOrders:Object={dh_cmpt_no:1};
			private var currentSortSeq:int=0;
			
			private var  originalItems:ArrayCollection;
			
			
			private var confirmReport:ActionDialog;
			
			//private var exportContents:String="";
			private var f:FileReference = new FileReference();
			
			
			[Bindable] private var pagedRecords:remoteListService;
			
			private var deleteAllAction:remoteDataService = new remoteDataService( "TankStrapService.deleteByTank", null, deleteDataAll_resultHandler, 1 );
			private var deleteAction:remoteDataService = new remoteDataService( "TankStrapService.delete", null, deleteData_resultHandler, 1 );
			private var createAction:remoteDataService = new remoteDataService( "TankStrapService.create", null, createData_resultHandler, 1 );
			private var updateAction:remoteDataService = new remoteDataService( "TankStrapService.update", null, updateData_resultHandler, 1 );
			private var importAction:remoteDataService = new remoteDataService( "TankStrapService.batchImport", null, importData_resultHandler, 1 );
			private var importArr:Array;
			
			private var tankStrapChecker:remoteDataService = new remoteDataService( "TankStrapService.isTankStrapExisted", null, tankStrapChecker_resultHandler, 2 );
			private var tankVolumeChecker:remoteDataService = new remoteDataService( "TankStrapService.getTankHeightVolumeRange", null, tankVolumeChecker_resultHandler, 1 );
			
			private var gridColumnSequenceMaker:remoteDataService = new remoteDataService( "ScreenGridColumnService.lookupGridColumnSequence", null, gridColumnSequenceMaker_resultHandler, 1 );
			private var _gridColumnSequenceString:String="";
			private var formColumnSettingsMaker:remoteDataService = new remoteDataService( "ScreenFormColumnService.lookupFormColumnSettings", null, formColumnSettingsMaker_resultHandler, 1 );
			private var _formColumnSettingsString:String="";
			private var formButtonSettingsMaker:remoteDataService = new remoteDataService( "ScreenFormButtonService.lookupFormButtonSettings", null, formButtonSettingsMaker_resultHandler, 1 );
			private var _formButtonSettingsString:String="";
			
			
			[Bindable] private var terminalList:remoteDataService = new remoteDataService( "ListLibraryService.lookupTerminal", null, lookupTerminal_resultHandler );
			[Bindable] private var tankList:remoteDataService = new remoteDataService( "ListLibraryService.lookupTanks", null, lookupTank_resultHandler );
			
			
			//private var genData:ExportData = new ExportData();
			
			public var parentParams:Object = new Object();
			public var mainListSelection:int = -1;
			private var _saveButtonClicked:Boolean=false;
			
			public var isPopupWindow:Boolean=false;
			
			private var inFile:FileReference;
			private var isVolumeInRange:Boolean=true;
			private var volumeCheckMessage:String="";
			protected var currImportPage:int=0;
			protected var recordsPerImport:int=1000;
			protected var totalImportRecords:int=0;
			protected var pauseDialog:ProgressDialog=null;
			
			
			protected function creationCompleteHandler(event:FlexEvent):void
			{
				this.formColumnSettingsMaker.service( "TANK_STRAPS" );
				this.formButtonSettingsMaker.service( "TANK_STRAPS" );
				
				pagedRecords = new remoteListService( this.dataGrid, "TankStrapService.getPaged", null, getPageData_resultHandler );
				trace ("-------------start creationCompleteHandler");
				this.gridColumnSequenceMaker.service( "TANK_STRAPS" );
				trace ("------------End creationCompleteHandler");
				
				inFile=new FileReference();
				inFile.addEventListener(Event.SELECT,fileSelectHandler);//Dispatched when user selects a file from Dialog Box.
				inFile.addEventListener(Event.CANCEL,fileCancelHandler);//Dispatched when user dismisses the Dialog Box.
			}
			
			private function lookupTerminal_resultHandler():void
			{
				if ( currentFields.hasOwnProperty( "strap_sitecode" ) )
				{
					this.fltr_terminal.selectedIndex = tools.getItemIndexFromCode( currentFields["strap_sitecode"], terminalList, "term_code");
				}
				
				if (currentState == "edit" || currentState == "detail")
				{
					strap_sitecode.selectedIndex = tools.getItemIndexFromCode( this.dataGrid.selectedItem.strap_sitecode, this.terminalList, "term_code");
				}
			}
			
			private function lookupTank_resultHandler():void
			{
				if ( currentFields.hasOwnProperty( "strap_tankcode" ) )
				{
					this.fltr_tank.selectedIndex = tools.getItemIndexFromCode( currentFields["strap_tankcode"], tankList, "tank_code");
				}
				
				if (currentState == "edit" || currentState == "detail")
				{
					strap_tankcode.selectedIndex = tools.getItemIndexFromCode( this.dataGrid.selectedItem.strap_tankcode, this.tankList, "tank_code");
				}
			}
			
			private function isTankExist(tank:String, depot:String):Boolean
			{
				var existed:Boolean=false;
				for each(var obj:Object in this.tankList)
				{
					if ( obj.tank_code == tank && obj.tank_terminal == depot )
					{
						existed = true;
						break;
					}
				}
				
				return existed;
			}
			
			protected function formColumnSettingsMaker_resultHandler():void
			{
				this._formColumnSettingsString =  formColumnSettingsMaker.dataString;
			}
			
			protected function formButtonSettingsMaker_resultHandler():void
			{
				this._formButtonSettingsString =  formButtonSettingsMaker.dataString;
			}
			
			protected function gridColumnSequenceMaker_resultHandler():void
			{
				this._gridColumnSequenceString =  gridColumnSequenceMaker.dataString;
				
				if ( _gridColumnSequenceString.length > 0 )
				{
					global.adjustGridColumnSequence( _gridColumnSequenceString.substr(1), dataGrid );
				}
				
				this.startTheWindow();
			}
			
			protected function startTheWindow():void
			{
				trace ("-------------start startTheWindow");
				//pagedRecords = new remoteListService( this.dataGrid, "TankStrapService.getPaged", null, getPageData_resultHandler );
				//resourceManager.localeChain = ['zh_CN'];
				//global.LanguageCode="CHN";
				
				var value:String = global.getValueFromSiteConfigSettings( "SITE_AUTO_FILTER_WHEN_OPEN_SCREEN" );
				if ( value == 'Y' )
				{
					if ( this.isPopupWindow == false )
					{
						this.startFiltering();
					}
				}
				else
				{
					;
				}
				
				this.terminalList.service(  );
				this.tankList.service( "-1", "-1", "-1" );
				
				trace ("------------End startTheWindow");
				
				
				//trace("this.grid.scroller1111", this.dataGrid.scroller);
				//trace("this.grid.scroller.verticalScrollBar.value", this.dataGrid.scroller.verticalScrollBar.value);
				this.dataGrid.scroller.verticalScrollBar.addEventListener(Event.CHANGE, verticalScrollBarChanged);
				this.dataGrid.addEventListener(KeyboardEvent.KEY_UP, reportKeyUp);
				this.dataGrid.columnHeaderGroup.addEventListener(GridEvent.GRID_CLICK, headerClickListener);
				
			}
			
			
			
			protected function startLoadingPages():void
			{
				killBtn.setStyle("chromeColor","0xff0000");
				this.killBtn.includeInLayout=true;
				this.killBtn.visible = true;
				this.killBtn.enabled = true;
				
				resumeBtn.setStyle("chromeColor","0x00ff00");
				this.resumeBtn.includeInLayout=true;
				this.resumeBtn.visible = true;
				this.resumeBtn.enabled = false;
				
				//this.btn_create.enabled = false
				this.btn_export.enabled = false;
				this.dataGrid.enabled = false;
				this.toolbar.enabled = false;
				//this.panel.enabled = false;
				
				currentLength=0;
				currentOffset = 0;
				
				//this.exportContents = this.genData.prepExportHeader( dataGrid );
				
				//currentPage=1;
				pagedRecords.currentPage=1;
				pagedRecords.removeAll();
				pagedRecords.refresh();
				this.pb.values(0, 0);
				//this.pagedRecords.service( currentFields, currentTypes, currentSorts, currentOrders, currentPage, currentPageSize );
				this.pagedRecords.listService( currentFields, currentTypes, currentSorts, currentOrders );
			}
			
			protected function endLoadingPages():void
			{
//				this.btn_create.enabled = this.canCreate;
				this.btn_export.enabled = true;
				this.dataGrid.enabled = true;
				this.toolbar.enabled = true;
				//this.panel.enabled = true;
				//this.pb.values(totalCount, totalCount);
				this.pb.values(pagedRecords.totalCount, pagedRecords.totalCount, true);
				
				this.killBtn.includeInLayout=true;
				this.killBtn.visible = true;
				this.killBtn.enabled = false;
				
				this.resumeBtn.includeInLayout=true;
				this.resumeBtn.visible = true;
				//if ( totalLength > totalCount )
				if ( pagedRecords.totalLength > pagedRecords.totalCount )
				{
					this.resumeBtn.enabled = true;
				}
				else
				{
					this.resumeBtn.enabled = false;
				}
			}
			
			protected function exportCsvHandler(event:MouseEvent):void
			{
				this.confirmReport = new ActionDialog( doExport, cancelExport, resourceManager.getString('default','CONFIRM_REPORT_CSV') );
				
				//this.startLoadingPages();
			}
			
			protected function importCsvHandler(event:MouseEvent):void
			{
				//this.confirmReport = new ActionDialog( doImport, doNothing, resourceManager.getString('default','CONFIRM_IMPORT_CSV') );
				selectFile();
				
				//this.startLoadingPages();
			}
			
			private function selectFile():void
			{
				//Try to open the browse window.
				//try
				{
					//I disable the browse button after it's been clicked, I will enable it later. [OPTIONAL]
					btn_import.enabled=false;
					//Limit the files the user can select.
					inFile.browse(getTypes());
					//inFile.browse();
				}
				//catch(e:Error){trace(e);btn_import.enabled=true;Alert.show("Cannot browse for files.","Error");}
			}
			private function getTypes():Array
			{
				//Return an array of selectable file extensions (not MIME Types).
				var allTypes:Array=new Array(getFileTypeFilter());
				return allTypes;
			}
			private function getFileTypeFilter():FileFilter
			{
				//Limit selection to files with the jpg or jpeg extensions.
				return new FileFilter("Text Excel Files(*.csv)","*.csv");
			}
			//Called after file was selected.
			private function fileSelectHandler(event:Event):void
			{
				//Re-enable the btn_import button in case the user wants to select a different file. [OPTIONAL]
				btn_import.enabled=true;
				//Change the label of the button to match the select file name. [OPTIONAL]
				//btn_import.label=inFile.name;
				
				inFile.addEventListener(Event.COMPLETE, onFileLoaded);
				inFile.load();

			}
			
			//Called if user dismisses the browse window (Cancel button, ESC key or Close option)
			private function fileCancelHandler(event:Event):void
			{
				//Enable the button so he is able to re-open the browse window. [OPTIONAL]
				btn_import.enabled=true;
			}
			
			private function onFileLoaded2(e:Event):void 
			{
				//trace( e.target.data );
				var contents:String = String(e.target.data);
				var lines:Array = contents.split( "\r\n" );
				var len:int = lines.length;
				var i:int=0;
				var tank_code:String="";
				var site_code:String="";
				var forOneTank:Boolean=true;
				
				importArr = new Array();
				for ( i = 0; i < len; i++ )
				{
					var line:String = lines[i];
					var columns:Array = line.split( "," );
					var obj:Object = new Object();
					if ( columns.length >= 4 )
					{
						obj.strap_height = columns[0];
						obj.strap_volume = columns[1];
						obj.strap_tankcode = columns[2];
						obj.strap_sitecode = columns[3];
						importArr.push( obj );
						
						if ( tank_code.length == 0 )
						{
							tank_code = obj.strap_tankcode;
						}
						else
						{
							if ( tank_code != obj.strap_tankcode )
							{
								forOneTank = false;
								break;
							}
						}
						if ( site_code.length == 0 )
						{
							site_code = obj.strap_sitecode;
						}
						else
						{
							if ( site_code != obj.strap_sitecode )
							{
								forOneTank = false;
								break;
							}
						}
					}
				}
				
				
				if ( importArr.length > 0 )
				{
					//importAction.service( importArr );
					var msg:String ="";
					msg += resourceManager.getString('default','CONFIRM_IMPORT_CSV') + "\n";
					msg += resourceManager.getString('default','TAG__TOTAL') + ": " + len + "\n";
					msg += "[" + resourceManager.getString('default','TANK_TERMINAL') + ": " + site_code + ", ";
					msg += resourceManager.getString('default','TANK_TANK') + ": " + tank_code + "]";
					
					if ( forOneTank == true )
					{
						this.confirmReport = new ActionDialog( doImport, doNothing, msg );
					}
					else
					{
						var errorBox:MessageDialog = new MessageDialog( resourceManager.getString('default','ALERT__MULTI_TANK_DATA') );
					}
				}
				else
				{
					var errorBox2:MessageDialog = new MessageDialog( resourceManager.getString('default','ALERT__EMPTY_FILE') );
				}
			}			

			private function doImport2():void
			{
				if ( importArr.length > 0 )
				{
					importAction.service( importArr );
				}
			}
			
			protected function importData_resultHandler2( ):void
			{
				clearDetail();
				if ( this.importAction.dataString == "OK" )
				{
					global.msgSuccess(resourceManager.getString('default','MSG_IMPORT__SUCCESS'));
				}
				else
				{
					global.msgFail(resourceManager.getString('default','ERROR_IMPORT__FAILURE'));
				}
				
				
				currentState="normal";
				this.startFiltering();
				dataGrid.selectedIndex = -1;
				dataGrid.enabled=true;
			}
			
			private function onFileLoaded(e:Event):void 
			{
				//trace( e.target.data );
				var contents:String = String(e.target.data);
				var lines:Array = contents.split( "\r\n" );
				var len:int = lines.length;
				var i:int=0;
				var pg:int=0;
				var tank_code:String="";
				var site_code:String="";
				var forOneTank:Boolean=true;
				
				totalImportRecords = len;
				
				var num_per_page:int=this.recordsPerImport;
				var pages:int;
				pages = int(len/num_per_page);
				if ( len%num_per_page > 0 )
				{
					pages += 1;
				}
				
				importArr = new Array();
				for ( pg=0; pg<pages; pg++ )
				{
					importArr[pg] = new Array();
					for (i=0; i<num_per_page; i++)
					{
						var idx:int = pg*num_per_page+i;
						if ( idx >= len )
						{
							break;
						}
						
						var line:String = lines[idx];
						var columns:Array = line.split( "," );
						var obj:Object = new Object();
						if ( columns.length >= 4 )
						{
							obj.strap_height = Number(columns[0]);
							obj.strap_volume = columns[1];
							obj.strap_tankcode = columns[2];
							obj.strap_sitecode = columns[3];
							importArr[pg][i] = obj;
							
							if ( tank_code.length == 0 )
							{
								tank_code = obj.strap_tankcode;
							}
							else
							{
								if ( tank_code != obj.strap_tankcode )
								{
									forOneTank = false;
									break;
								}
							}
							if ( site_code.length == 0 )
							{
								site_code = obj.strap_sitecode;
							}
							else
							{
								if ( site_code != obj.strap_sitecode )
								{
									forOneTank = false;
									break;
								}
							}
						}
					}
				}
				
				if ( importArr.length > 0 && importArr[0]!=null && importArr[0].length>0 )
				{
					//importAction.service( importArr );
					var msg:String ="";
					msg += resourceManager.getString('default','CONFIRM_IMPORT_CSV') + "\n";
					msg += "[" + resourceManager.getString('default','TANK_TERMINAL') + ": " + site_code + ", ";
					msg += resourceManager.getString('default','TANK_TANK') + ": " + tank_code + ", ";
					msg += resourceManager.getString('default','TAG__TOTAL') + ": " + len + "]";
					
					if ( forOneTank == true )
					{
						if ( this.isTankExist( tank_code, site_code ) )
						{
							this.currImportPage = 0;
							this.confirmReport = new ActionDialog( doImport, doNothing, msg );
						}
						else
						{
							var msg2:String ="";
							msg2 += resourceManager.getString('default','ALERT__WRONG_TANK_DATA') + "\n";
							msg2 += "[" + resourceManager.getString('default','TANK_TERMINAL') + ": " + site_code + ", ";
							msg2 += resourceManager.getString('default','TANK_TANK') + ": " + tank_code + "]";
							var errorBox3:MessageDialog = new MessageDialog( msg2 );
						}
					}
					else
					{
						var errorBox:MessageDialog = new MessageDialog( resourceManager.getString('default','ALERT__MULTI_TANK_DATA') );
					}
				}
				else
				{
					var errorBox2:MessageDialog = new MessageDialog( resourceManager.getString('default','ALERT__EMPTY_FILE') );
				}
			}			
			
			private function doImport():void
			{
				if ( importArr.length > 0 && this.currImportPage<importArr.length )
				{
					importAction.service( importArr[this.currImportPage], (this.currImportPage==0?1:0) );
				}
				if (this.currImportPage==0)
				{
					pauseDialog = new ProgressDialog( stopImport, stopImport, resourceManager.getString('default','CANCEL_IMPORT'), resourceManager.getString('default','CANCEL_IMPORT_TITLE') );
					if ( pauseDialog != null )
					{
						pauseDialog.dialog.counter = 0;
						pauseDialog.dialog.count = totalImportRecords;
					}
				}
			}
			
			public function stopImport():void
			{
				this.currImportPage	= importArr.length;
			}
			
			protected function importData_resultHandler( ):void
			{
				clearDetail();
				
				var done:Boolean = false;
				var imported:int = (this.currImportPage+1)*this.recordsPerImport;
				if ( imported >= totalImportRecords )
				{
					imported = totalImportRecords;
					done = true;
				}
				else
				{
					done = false;
				}
				if ( this.importAction.dataString == "OK" )
				{
					if ( pauseDialog != null )
					{
						pauseDialog.dialog.counter = imported;
						pauseDialog.dialog.count = totalImportRecords;
					}
					if ( done == true )
					{
						global.msgSuccess(resourceManager.getString('default','MSG_IMPORT__SUCCESS') + '\n' + resourceManager.getString('default','TAG__TOTAL') + ": " + imported);
					}
				}
				else
				{
					if ( pauseDialog != null )
					{
						pauseDialog.dialog.counter = imported;
						pauseDialog.dialog.count = totalImportRecords;
					}
					global.msgFail(resourceManager.getString('default','ERROR_IMPORT__FAILURE') + '\n' + resourceManager.getString('default','TAG__TOTAL') + ": " + (this.currImportPage*this.recordsPerImport));
					done = true;
				}
				
				if ( done == true )
				{
					PopUpManager.removePopUp(this.pauseDialog.dialog );	
					pauseDialog = null;
					
					currentState="normal";
					this.startFiltering();
					dataGrid.selectedIndex = -1;
					dataGrid.enabled=true;
				}
				else
				{
					this.currImportPage += 1;
					doImport();
				}
			}
			
			
			
			private function getPageData_resultHandler():void
			{
				// if not finished
				if(pagedRecords.length < pagedRecords.totalCount)
				{
					pb.values(pagedRecords.length,pagedRecords.totalCount)
				}
				else
				{
					pb.values(pagedRecords.length,pagedRecords.totalCount)
					
					this.endLoadingPages();
					
					this.dataGrid.selectedIndex = this.mainListSelection;
					if ( this.mainListSelection >= 0)
					{
						this.dataGrid_selectionChangeHandler(null);
					}
					this.mainListSelection = -1;
				}
				
			}
			
			
			public function doExport():void
			{
				//genData.prepOther(dataGrid,'allocationlist.csv', this.pagedRecords);
				
				//f.save( this.exportContents, "allocationlist.csv" );
				
				var filename:String="TankStraps";
				if (this.fltr_terminal.selectedIndex >= 0)
				{
					filename += "__"+this.fltr_terminal.selectedItem.term_code;
				}
				else
				{
					filename += "__ALL_SITE";
				}
				if (this.fltr_tank.selectedIndex >= 0)
				{
					filename += "__"+this.fltr_tank.selectedItem.tank_code;
				}
				else
				{
					filename += "__ALL_TANK";
				}
				if ( StringUtil.trim(this.fltr_height_start.text).length>0 )
				{
					filename += "__"+StringUtil.trim(this.fltr_height_start.text)+"mm";
				}
				else
				{
					filename += "__S";
				}
				if ( StringUtil.trim(this.fltr_height_end.text).length>0 )
				{
					filename += "-"+StringUtil.trim(this.fltr_height_end.text)+"mm";
				}
				else
				{
					filename += "-E";
				}
				filename += ".csv";
				
				f.save( pagedRecords.exportContents, filename );
				
				this.endLoadingPages();
			}
			
			
			public function cancelExport():void
			{
				this.endLoadingPages();
				
				//trace( this.exportContents );
			}
			
			public function doNothing():void
			{
			}
			
			
			
			private function verticalScrollBarChanged(event:Event):void
			{
				if ( this.dataGrid.scroller != null)
				{
					var vs:VScrollBar;
					vs = this.dataGrid.scroller.verticalScrollBar;
					//trace("this.grid.scroller.verticalScrollBar.value", vs.value, vs.maximum, vs.minimum, vs.stepSize, vs.pageSize, vs.	snapInterval);
				}
				else
				{
					trace("grid is changed");
				}
			}
			
			private function reportKeyUp(event:KeyboardEvent):void
			{
				if ( this.dataGrid.scroller != null)
				{
					var vs:VScrollBar;
					vs = this.dataGrid.scroller.verticalScrollBar;
					//trace("this.grid.scroller.verticalScrollBar.value", vs.value, vs.maximum, vs.minimum, vs.stepSize, vs.pageSize, vs.	snapInterval);
				}
				else
				{
					trace("grid is changed");
				}
			}
			
			private function headerClickListener(event:GridEvent):void
			{
				if(event.column.dataField!='NA')
				{
					var currentRenderer:IGridItemRenderer;
					var dir:String;
					
					if ( global.sortingBySingleColumn == true )
					{	// sorted by single column only
						for (var i:int=0; i < dataGrid.columns.length; i++)
						{
							currentRenderer = dataGrid.columnHeaderGroup.getHeaderRendererAt(i);
							if ( currentRenderer != null)
							{
								(currentRenderer as DKI_HeaderColumn_Renderer).setImage('');
							}
							//(currentRenderer as DKI_HeaderColumn_Renderer).setImage(''); 
						}
					}
					else
					{	// sorted by multiple columns
						;
					}
					currentRenderer = dataGrid.columnHeaderGroup.getHeaderRendererAt(event.columnIndex);
					
					if( currentSorts.hasOwnProperty(event.column.dataField ) )
					{
						dir = currentSorts[event.column.dataField];
						if( dir=="ASC" )
						{
							dir = "DESC";
						}
						else if ( dir == "DESC" )
						{
							dir = "";
						}
						else if ( dir == "" )
						{
							dir = "ASC";
						}
						else 
						{
							dir = "ASC";
						}
						
						if ( dir != "" )
						{
							currentSorts[event.column.dataField] = dir;	
						}
						else
						{
							delete currentSorts[event.column.dataField];
							delete currentOrders[event.column.dataField];
						}
					}
					else
					{
						if ( global.sortingBySingleColumn == true )
						{	// sorted by single column only
							currentSorts = new Object();
							currentOrders = new Object();
							currentSortSeq = 0;
						}
						else
						{	// sorted by multiple columns
							;
						}
						currentSorts[event.column.dataField] = "ASC";	
						dir = currentSorts[event.column.dataField];
						currentSortSeq += 1;
						currentOrders[event.column.dataField] = currentSortSeq;	
					}
					(currentRenderer as DKI_HeaderColumn_Renderer).setImage(dir);
					this.startFiltering();
				}
			}
			
			
			protected function dataGrid_selectionChangeHandler(event:GridSelectionEvent):void
			{
				if(currentState != 'widget')
				{
					if ( dataGrid.selectedIndex < 0 )
					{
						return;
					}
					
					idx=dataGrid.selectedIndex;
					//dataGrid.ensureCellIsVisible(idx+11);
					dataGrid.ensureCellIsVisible(idx);

					currentState = "edit";					
					this.btn_save.enabled = this.canUpdate;
					
					if ( _formColumnSettingsString.length > 0 )
					{
						global.adjustFormFieldSettings( _formColumnSettingsString.substr(1), this );
					}
					
					if ( _formButtonSettingsString.length > 0 )
					{
						global.adjustFormButtonSettings( _formButtonSettingsString.substr(1), this );
					}
				}
			}
			
			private function checkTankStrapKey():void
			{
				var tank_code:String="-1";
				var tank_site:String="-1";
				var height:Number=0;
				
				height = Number(this.strap_height.text);
				
				if ( this.strap_sitecode.selectedIndex >= 0 )
				{
					tank_site = this.strap_sitecode.selectedItem.term_code;
				}
				if ( this.strap_tankcode.selectedIndex >= 0 )
				{
					tank_code = this.strap_tankcode.selectedItem.tank_code;
				}
				
				
				tankStrapChecker.service( tank_code, tank_site, height );
			}
			
			protected function tankStrapChecker_resultHandler( ):void
			{
				trace ("tankStrapChecker", tankStrapChecker.dataInteger);
				if ( tankStrapChecker.dataInteger > 0 )
				{
					global.msgWarning( resourceManager.getString('default','ALERT__TANK_STRAP_EXIST') );
					this.btn_save.enabled = this.canCreate;
				}
				else
				{
					if ( this._saveButtonClicked == true )
					{
						this.createRecord();
					}
				}
				
				this._saveButtonClicked = false;
			}
			
			
			
			protected function cancel_clickHandler():void
			{
				clearDetail();
				if ( currentState== "create" )
				{
					dataGrid.enabled=true;
				}
				currentState="normal";
				dataGrid.selectedIndex = -1;
			}			
			
			
			
			
			protected function fltr_terminal_changeHandler(event:IndexChangeEvent):void
			{
				if (currentState == "edit") clearDetail();
				startFiltering();
			}
			
			protected function fltr_tank_changeHandler(event:IndexChangeEvent):void
			{
				if (currentState == "edit") clearDetail();
				startFiltering();
			}
			
			protected function fltr_height_start_keyUpHandler(event:KeyboardEvent):void
			{
				var keyCode:uint = 0;
				if (event == null)
				{
					keyCode=0;
				}
				else
				{
					keyCode=event.keyCode;
				}
				
				if ( keyCode == 13 )
				{
					if (currentState == "edit") clearDetail();
					startFiltering();
				}
			}
			
			protected function fltr_height_end_keyUpHandler(event:KeyboardEvent):void
			{
				var keyCode:uint = 0;
				if (event == null)
				{
					keyCode=0;
				}
				else
				{
					keyCode=event.keyCode;
				}
				
				if ( keyCode == 13 )
				{
					if (currentState == "edit") clearDetail();
					startFiltering();
				}
			}
			
			private function startFiltering():void
			{
				var fields:Object;
				var types:Object;
				
				//interruptor=false;
				pagedRecords.interruptor=false;
				
				fields = new Object();
				types = new Object();
				
				if (fltr_terminal.selectedIndex > -1) 
				{
					fields["strap_sitecode"] = this.terminalList[fltr_terminal.selectedIndex].term_code;
				}
				else
				{
					if ( global.setComboBoxNoSelection == true )
					{
						fltr_terminal.selectedIndex = -1;
					}
					fields["strap_sitecode"] = "";
				}
				types["strap_sitecode"] = "EXACT_STRING";
				
				if (fltr_tank.selectedIndex > -1) 
				{
					fields["strap_tankcode"] = this.tankList[fltr_tank.selectedIndex].tank_code;
				}
				else
				{
					if ( global.setComboBoxNoSelection == true )
					{
						fltr_tank.selectedIndex = -1;
					}
					fields["strap_tankcode"] = "";
				}
				types["strap_tankcode"] = "EXACT_STRING";
				
				
				if ( StringUtil.trim(this.fltr_height_start.text).length > 0 && StringUtil.trim(this.fltr_height_end.text).length > 0 )
				{
					fields["strap_height"] = StringUtil.trim(this.fltr_height_start.text) + "~~" + StringUtil.trim(this.fltr_height_end.text);
					types["strap_height"] = "NUMBER";
				}
				else
				{
					if ( StringUtil.trim(this.fltr_height_start.text).length > 0 && StringUtil.trim(this.fltr_height_end.text).length == 0 )
					{
						fields["strap_height"] = StringUtil.trim(this.fltr_height_start.text) + "~~";
						types["strap_height"] = "NUMBER";
					}
					if ( StringUtil.trim(this.fltr_height_start.text).length == 0 && StringUtil.trim(this.fltr_height_end.text).length > 0 )
					{
						fields["strap_height"] = "~~" + StringUtil.trim(this.fltr_height_end.text);
						types["strap_height"] = "NUMBER";
					}
				}
				
				
				currentFields = fields;
				currentTypes = types;
				
				this.startLoadingPages();
				
				trace("this.grid.scroller3333", this.dataGrid.scroller);
				trace("this.grid.scroller.verticalScrollBar.value", this.dataGrid.scroller.verticalScrollBar.value);
			}
			
			private function findByTankStrapCode(tank:String, site:String, height:Number):void
			{
				var fields:Object;
				var types:Object;
				
				fields = new Object();
				types = new Object();
				
				fields["strap_tankcode"] = tank;
				types["strap_tankcode"] = "EXACT_STRING";
				fields["strap_sitecode"] = site;
				types["strap_sitecode"] = "EXACT_STRING";
				fields["strap_height"] = height;
				types["strap_height"] = "NUMBER";
				
				//currentPage=1;
				pagedRecords.currentPage=1;
				pagedRecords.removeAll();
				pagedRecords.refresh();
				//this.pagedRecords.service( fields, types, currentSorts, currentOrders, currentPage, currentPageSize );
				this.pagedRecords.listService( fields, types, currentSorts, currentOrders );
			}
			
			protected function resetRecords(event:MouseEvent):void
			{
				this.setFilters( this.parentParams );
				return;
			}
			
			protected function filterRecords(event:MouseEvent):void
			{
				if (currentState == "edit") clearDetail();
				this.startFiltering();
			}
			
			protected function refreshRecords(event:MouseEvent):void
			{
				if ( currentState != "widget" )
				{
					currentState = 'normal';
					dataGrid.enabled=true;
				}
				clearDetail();
				
				fltr_terminal.selectedIndex = -1;
				fltr_tank.selectedIndex = -1;
				fltr_height_start.text = "";
				fltr_height_end.text = "";
				
				dataGrid.selectedIndex = -1;
				currentFilter = null;
				currentOrder = null;
				currentFields = new Object();
				currentTypes = new Object();
				
				currentSorts = new Object();
				currentOrders = new Object();
				var currentRenderer:IGridItemRenderer;
				for (var i:int=0; i < dataGrid.columns.length; i++)
				{
					currentRenderer = dataGrid.columnHeaderGroup.getHeaderRendererAt(i);
					if ( currentRenderer != null)
					{
						(currentRenderer as DKI_HeaderColumn_Renderer).setImage('');
					}
					//(currentRenderer as DKI_HeaderColumn_Renderer).setImage(''); 
				}
				this.startFiltering();
				//this.startLoadingPages();
				trace("this.grid.scroller2222", this.dataGrid.scroller);
				trace("this.grid.scroller.verticalScrollBar.value", this.dataGrid.scroller.verticalScrollBar.value);
			}
			
			protected function clearDetail(): void
			{
				if (currentState != 'widget')
				{
				}
			}			
			
			private function editRecord():void
			{
				
				if ( this.checkFields() > 0 )
				{
					this.btn_save.enabled = this.canUpdate;
					return;
				}
				
				var obj:Object = new Object();
				
				
				if (strap_tankcode.selectedIndex>=0)
				{
					obj.strap_tankcode = this.tankList[strap_tankcode.selectedIndex].tank_code;
				}
				else
				{
					obj.strap_tankcode = dataGrid.selectedItem.strap_tankcode;
				}
				
				if (strap_sitecode.selectedIndex>=0)
				{
					obj.strap_sitecode = this.terminalList[strap_sitecode.selectedIndex].term_code;
				}
				else
				{
					obj.strap_sitecode = dataGrid.selectedItem.strap_sitecode;
				}
				
				obj.strap_height = this.strap_height.text;
				obj.strap_volume = this.strap_volume.text;

				
				updateAction.service( obj );
			}
			
			protected function updateData_resultHandler( ):void
			{
				clearDetail();
				if ( this.updateAction.dataString == "OK" )
				{
					global.msgSuccess(resourceManager.getString('default','MSG_UPDATE__SUCCESS'));
				}
				else
				{
					global.msgFail(resourceManager.getString('default','ERROR_UPDATE__FAILURE'));
				}
				
				var tank:String="-1";
				var site:String="-1";
				var height:Number=0;
				if ( this.strap_sitecode.selectedIndex >= 0 )
				{
					site = this.strap_sitecode.selectedItem.term_code;
				}
				if ( this.strap_tankcode.selectedIndex >= 0 )
				{
					tank = this.strap_tankcode.selectedItem.tank_code;
				}
				height = Number(this.strap_height.text);
				
				currentState="normal";
				findByTankStrapCode( tank, site, height );
				
				dataGrid.selectedIndex = -1;
				dataGrid.enabled=true;
			}
			
			private function doDelete(): void
			{
				var errors:String="";
				var index:int=0;

				if ( index > 0 )
				{
					var errorBox:MessageDialog = new MessageDialog( errors );
				}
				else
				{
					var canDelete:DeleteDialog = new DeleteDialog(deleteRecord, hasPassword);
				}
			}
			
			private function deleteRecord():void
			{
				var obj:Object = new Object();
				
				
				if (strap_tankcode.selectedIndex>=0)
				{
					obj.strap_tankcode = this.tankList[strap_tankcode.selectedIndex].tank_code;
				}
				else
				{
					obj.strap_tankcode = dataGrid.selectedItem.strap_tankcode;
				}
				
				if (strap_sitecode.selectedIndex>=0)
				{
					obj.strap_sitecode = this.terminalList[strap_sitecode.selectedIndex].term_code;
				}
				else
				{
					obj.strap_sitecode = dataGrid.selectedItem.strap_sitecode;
				}
				
				obj.strap_height = this.strap_height.text;
				obj.strap_volume = this.strap_volume.text;
				
				
				deleteAction.service( obj );
			}
			
			protected function deleteData_resultHandler( ):void
			{
				clearDetail();
				if ( this.deleteAction.dataString == "OK" )
				{
					global.msgSuccess(resourceManager.getString('default','MSG_DELETE__SUCCESS'));
				}
				else
				{
					global.msgFail(resourceManager.getString('default','ERROR_DELETE__FAILURE'));
				}
				
				
				currentState="normal";
				this.startFiltering();
				dataGrid.selectedIndex = -1;
				dataGrid.enabled=true;
			}
			
			private function doDeleteAll(): void
			{
				var errors:String="";
				var index:int=0;
				
				if ( index > 0 )
				{
					var errorBox:MessageDialog = new MessageDialog( errors );
				}
				else
				{
					var canDelete:DeleteDialog = new DeleteDialog(deleteRecordAll, hasPassword, false);
				}
			}
			
			private function deleteRecordAll():void
			{
				var obj:Object = new Object();
				
				
				if (strap_tankcode.selectedIndex>=0)
				{
					obj.strap_tankcode = this.tankList[strap_tankcode.selectedIndex].tank_code;
				}
				else
				{
					obj.strap_tankcode = dataGrid.selectedItem.strap_tankcode;
				}
				
				if (strap_sitecode.selectedIndex>=0)
				{
					obj.strap_sitecode = this.terminalList[strap_sitecode.selectedIndex].term_code;
				}
				else
				{
					obj.strap_sitecode = dataGrid.selectedItem.strap_sitecode;
				}
				
				obj.strap_height = this.strap_height.text;
				obj.strap_volume = this.strap_volume.text;
				
				
				deleteAllAction.service( obj );
			}
			
			protected function deleteDataAll_resultHandler( ):void
			{
				clearDetail();
				if ( this.deleteAllAction.dataString == "OK" )
				{
					global.msgSuccess(resourceManager.getString('default','MSG_DELETE__SUCCESS'));
				}
				else
				{
					global.msgFail(resourceManager.getString('default','ERROR_DELETE__FAILURE'));
				}
				
				
				currentState="normal";
				this.startFiltering();
				dataGrid.selectedIndex = -1;
				dataGrid.enabled=true;
			}
			
			private function checkFields():int
			{
				var errors:String="";
				var index:int=0;
				
				if ( isVolumeInRange == false )
				{
					index += 1;
					errors += String(index) + ". " + volumeCheckMessage + "\n";
				}
				
				if ( index > 0 )
				{
					var errorBox:MessageDialog = new MessageDialog( errors );
				}
				
				return index;
			}
			
			private function createRecord():void
			{
				if ( this.checkFields() > 0 )
				{
					this.btn_save.enabled = this.canCreate;
					return;
				}
				
				var obj:Object = new Object();
				
				
				if (strap_tankcode.selectedIndex>=0)
				{
					obj.strap_tankcode = this.tankList[strap_tankcode.selectedIndex].tank_code;
				}
				else
				{
					obj.strap_tankcode = dataGrid.selectedItem.strap_tankcode;
				}
				
				if (strap_sitecode.selectedIndex>=0)
				{
					obj.strap_sitecode = this.terminalList[strap_sitecode.selectedIndex].term_code;
				}
				else
				{
					obj.strap_sitecode = dataGrid.selectedItem.strap_sitecode;
				}
				
				obj.strap_height = this.strap_height.text;
				obj.strap_volume = this.strap_volume.text;
				
				
				createAction.service( obj );
			}
			
			protected function createData_resultHandler( ):void
			{
				clearDetail();
				if ( this.createAction.dataString == "OK" )
				{
					global.msgSuccess(resourceManager.getString('default','MSG_CREATE__SUCCESS'));
				}
				else
				{
					global.msgFail(resourceManager.getString('default','ERROR_CREATE__FAILURE'));
				}
				
				var tank:String="-1";
				var site:String="-1";
				var height:Number=0;
				if ( this.strap_sitecode.selectedIndex >= 0 )
				{
					site = this.strap_sitecode.selectedItem.term_code;
				}
				if ( this.strap_tankcode.selectedIndex >= 0 )
				{
					tank = this.strap_tankcode.selectedItem.tank_code;
				}
				height = Number(this.strap_height.text);
				
				currentState="normal";
				findByTankStrapCode( tank, site, height );
				
				dataGrid.selectedIndex = -1;
				dataGrid.enabled=true;
			}
			
			protected function createNewRecord(event:MouseEvent):void
			{	
				idx=dataGrid.selectedIndex;
				dataGrid.ensureCellIsVisible(idx);
				currentState="create";
				this.btn_save.enabled = this.canCreate;
				dataGrid.enabled=false;
				
				if ( _formColumnSettingsString.length > 0 )
				{
					global.adjustFormFieldSettings( _formColumnSettingsString.substr(1), this );
				}
				
				if ( _formButtonSettingsString.length > 0 )
				{
					global.adjustFormButtonSettings( _formButtonSettingsString.substr(1), this );
				}
				
				if ( this.fltr_terminal.selectedIndex >= 0 )
				{
					this.strap_sitecode.selectedIndex = this.fltr_terminal.selectedIndex;
				}
				
				if ( this.fltr_tank.selectedIndex >= 0 )
				{
					this.strap_tankcode.selectedIndex = this.fltr_tank.selectedIndex;
				}
				
				this.strap_height.text = "";
				this.strap_volume.text = "";
				
			}
			
			
			public function getArrayCollection(obj:Object):ArrayCollection
			{
				var temp:ArrayCollection = new ArrayCollection;
				temp.addItem( obj );
				return temp;
			}
			
			public function convertDateToLocaleString(dt:String):String
			{
				var dt_string:String;
				var dt_date:Date = new Date();
				
				dt_string = ""; 
				if ((dt!=null) && (dt!='null') && (dt!=''))
				{
					dt_date = DateField.stringToDate(dt,"YYYY-MM-DD");
					dt_string = dateFormatter.format( dt_date);
				}
				//trace ("convertDateToLocale", dt, dt_date, dt_string);
				return dt_string;
			}
			
			public function convertDateToLocale(dt:String):Date
			{
				var dt_date:Date = new Date();
				
				if ((dt!=null) && (dt!='null') && (dt!=''))
				{
					dt_date = DateField.stringToDate(dt,"YYYY-MM-DD");
				}
				//trace ("convertDateToLocale", dt, dt_date, dt_string);
				return dt_date;
			}
			
			public function convertDateToLocaleLong(dt:String):Date
			{
				var dt_date:Date = new Date();
				
				if ((dt!=null) && (dt!='null') && (dt!=''))
				{
					//dt_date = DateField.stringToDate(dt,"YYYY-MM-DD HH:NN:SS");
					dt_date = DateTimeFunc.createDate(
						int(dt.substr(0, 4))
						, int(dt.substr(5, 2))
						, int(dt.substr(8, 2))
						, int(dt.substr(11, 2))
						, int(dt.substr(14, 2))
						, int(dt.substr(17, 2))
					);
				}
				//trace ("convertDateToLocale", dt, dt_date, dt_string);
				return dt_date;
			}
			
			public function getDefaultDate():Date
			{
				var now_date:Date;
				var def_date:Date;
				
				now_date = new Date();
				def_date = DateTimeFunc.dateAdd( "yyyy", 1, now_date );
				
				//trace ("getDefaultDate", now_date, def_date);
				
				return def_date;
			}
			
			protected function view_detailsHandler(event:FlexEvent):void
			{
			}
			
			protected function save_clickHandler():void
			{
				this.btn_save.enabled = false;
				doSave();
				//this.confirmSave = new ActionDialog( doSave, doNothing, resourceManager.getString('default','CONFIRM_SAVE_RATIOS') );
				
				//this.startLoadingPages();
			}
			
			protected function doSave():void
			{
				if (currentState == "create")
				{
					//createRecord();
					this._saveButtonClicked = true;
					checkTankStrapKey();
				}
				if (currentState == "edit")
				{
					editRecord();
				}
				if (currentState == "detail")
				{
					editRecord();
				}
			}
			
			
			
			protected function killBtn_clickHandler(event:MouseEvent):void
			{
				//interruptor=true;
				pagedRecords.interruptor=true;
				trace("WTF >>>>>>>>>>");
			}
			
			protected function resumeBtn_clickHandler(event:MouseEvent):void
			{
				//interruptor=false;
				pagedRecords.interruptor=false;
				
				this.resumeLoadingPages();
				trace("RESUME >>>>>>>>>>");
			}
			
			protected function resumeLoadingPages():void
			{
				killBtn.setStyle("chromeColor","0xff0000");
				this.killBtn.includeInLayout=true;
				this.killBtn.visible = true;
				this.killBtn.enabled = true;
				
				resumeBtn.setStyle("chromeColor","0x00ff00");
				this.resumeBtn.includeInLayout=true;
				this.resumeBtn.visible = true;
				this.resumeBtn.enabled = false;
				
//				this.btn_create.enabled = false
				this.btn_export.enabled = false;
				this.dataGrid.enabled = false;
				this.toolbar.enabled = false;
				
				//pb.values(pagedRecords.length,totalLength);
				pb.values(pagedRecords.length,pagedRecords.totalLength);
				//currentPage = int(this.pagedRecords.length/currentPageSize) + 1;
				//this.pagedRecords.service( currentFields, currentTypes, currentSorts, currentOrders, currentPage, currentPageSize );
				this.pagedRecords.listService( currentFields, currentTypes, currentSorts, currentOrders );
			}
			
			public function setFilters( params:*=false ): void
			{
				if ( params == false )
				{
					return;
				}
				
				this.parentParams = params;
				
				currentState = "normal";
				
				trace ("...............................in setFilters");
				tools.pr( params);
				
				var po:Object=new Object();
				
				po["strap_sitecode"] = tools.getObjAttribute( params, "strap_sitecode", "" );
				po["strap_tankcode"] = tools.getObjAttribute( params, "strap_tankcode", "" );
				po["strap_height_start"] = tools.getObjAttribute( params, "strap_height_start", "" );
				po["strap_height_end"] = tools.getObjAttribute( params, "strap_height_end", "" );
				
				var fields:Object;
				var types:Object;
				
				//interruptor=false;
				pagedRecords.interruptor=false;
				
				fields = new Object();
				types = new Object();
				
				fields["strap_sitecode"] = po["strap_sitecode"];
				types["strap_sitecode"] = "EXACT_STRING";
				fields["strap_tankcode"] = po["strap_tankcode"];
				types["strap_tankcode"] = "EXACT_STRING";
				
				if ( StringUtil.trim(po["strap_height_start"]).length > 0 && StringUtil.trim(po["strap_height_end"]).length > 0 )
				{
					fields["strap_height"] = StringUtil.trim(po["strap_height_start"]) + "~~" + StringUtil.trim(po["strap_height_end"]);
					types["strap_height"] = "NUMBER";
				}
				else
				{
					if ( StringUtil.trim(po["strap_height_start"]).length > 0 && StringUtil.trim(po["strap_height_end"]).length == 0 )
					{
						fields["strap_height"] = StringUtil.trim(po["strap_height_start"]) + "~~";
						types["strap_height"] = "NUMBER";
					}
					if ( StringUtil.trim(po["strap_height_start"]).length == 0 && StringUtil.trim(po["strap_height_end"]).length > 0 )
					{
						fields["strap_height"] = "~~" + StringUtil.trim(po["strap_height_end"]);
						types["strap_height"] = "NUMBER";
					}
				}
				
				currentFields = fields;
				currentTypes = types;
				this.startLoadingPages();
				
				if ( po.hasOwnProperty( "strap_sitecode" ) )
				{
					this.fltr_terminal.selectedIndex = tools.getItemIndexFromCode( po["strap_sitecode"], terminalList, "term_code");
				}
				if ( po.hasOwnProperty( "strap_tankcode" ) )
				{
					this.fltr_tank.selectedIndex = tools.getItemIndexFromCode( po["strap_tankcode"], tankList, "tank_code");
				}
				this.fltr_height_start.text = StringUtil.trim(po["strap_height_start"]);
				this.fltr_height_end.text = StringUtil.trim(po["strap_height_end"]);
				
				pb.values(pagedRecords.length,pagedRecords.length)
			}
			
			protected function strap_height_changeHandler(event:TextOperationEvent):void
			{
				// TODO Auto-generated method stub
				
			}
			
			protected function strap_volume_changeHandler(event:TextOperationEvent):void
			{
				// TODO Auto-generated method stub
				var tank_code:String="-1";
				var tank_site:String="-1";
				var height:Number=0;
				
				height = Number(this.strap_height.text);
				
				if ( this.strap_sitecode.selectedIndex >= 0 )
				{
					tank_site = this.strap_sitecode.selectedItem.term_code;
				}
				if ( this.strap_tankcode.selectedIndex >= 0 )
				{
					tank_code = this.strap_tankcode.selectedItem.tank_code;
				}
				
				tankVolumeChecker.service( tank_code, tank_site, height );
			}
			
			protected function tankVolumeChecker_resultHandler( ):void
			{
				trace ("tankVolumeChecker", tankVolumeChecker.dataString);
				var arr:Array = tankVolumeChecker.dataString.split("|");
				
				var volume:Number = Number(this.strap_volume.text);

				isVolumeInRange = true;
				volumeCheckMessage = "";
				
				if ( isNaN(volume) ) return;
				
				if ( arr[1] != "-1" && arr[3] != "-1" )
				{
					if ( volume <= Number(arr[1]) || volume >= Number(arr[3]) )
					{
						volumeCheckMessage = resourceManager.getString('default','ALERT__STRAP_VOLUME') + volume + resourceManager.getString('default','ALERT__STRAP_OUT_RANGE') + "("+arr[1]+", "+arr[3]+")";
						isVolumeInRange=false;
					}
					else
					{
						volumeCheckMessage = resourceManager.getString('default','ALERT__STRAP_VOLUME') + volume + resourceManager.getString('default','ALERT__STRAP_IN_RANGE') + "("+arr[1]+", "+arr[3]+")";
						isVolumeInRange=true;
					}
				}
				else
				{
					if ( arr[1] == "-1" && arr[3] != "-1" )
					{
						if ( volume >= Number(arr[3]) )
						{
							volumeCheckMessage = resourceManager.getString('default','ALERT__STRAP_VOLUME') + volume + resourceManager.getString('default','ALERT__STRAP_OUT_RANGE') + "(*, "+arr[3]+")";
							isVolumeInRange=false;
						}
						else
						{
							volumeCheckMessage = resourceManager.getString('default','ALERT__STRAP_VOLUME') + volume + resourceManager.getString('default','ALERT__STRAP_IN_RANGE') + "(*, "+arr[3]+")";
							isVolumeInRange=true;
						}
					}
					if ( arr[1] != "-1" && arr[3] == "-1" )
					{
						if ( volume <= Number(arr[1])  )
						{
							volumeCheckMessage = resourceManager.getString('default','ALERT__STRAP_VOLUME') + volume + resourceManager.getString('default','ALERT__STRAP_OUT_RANGE') + "("+arr[1]+", *)";
							isVolumeInRange=false;
						}
						else
						{
							volumeCheckMessage = resourceManager.getString('default','ALERT__STRAP_VOLUME') + volume + resourceManager.getString('default','ALERT__STRAP_IN_RANGE') + "("+arr[1]+", *)";
							isVolumeInRange=true;
						}
					}
					if ( arr[1] == "-1" && arr[3] == "-1" )
					{
						volumeCheckMessage = ""; 
						isVolumeInRange = true;
					}
				}
				
				if ( isVolumeInRange == true )
				{
					if ( volumeCheckMessage.length > 0 )
					{
						global.msgSuccess( volumeCheckMessage );
					}
				}
				else
				{
					if ( volumeCheckMessage.length > 0 )
					{
						global.msgWarning( volumeCheckMessage );
					}
				}
				/*
				if ( tankStrapChecker.dataInteger > 0 )
				{
					global.msgWarning( resourceManager.getString('default','ALERT__TANK_STRAP_EXIST') );
					this.btn_save.enabled = this.canCreate;
				}
				else
				{
					if ( this._saveButtonClicked == true )
					{
						this.createRecord();
					}
				}
				
				this._saveButtonClicked = false;
				*/
			}
			
		]]>
	</fx:Script>
	<fx:Declarations>
		<s:DateTimeFormatter id="dateFormatter" locale="{LocaleID.DEFAULT}" dateStyle="short" timeStyle="none"/>
		<s:DateTimeFormatter id="dateConvert" dateTimePattern="yyyy-MM-dd"/>
		<s:DateTimeFormatter id="dateConvertLong" dateTimePattern="yyyy-MM-dd HH:mm:ss"/>
		<components:ValidationGroup id="vg" action="{save_clickHandler}" defaultButton="{btn_save}" parentScreen="{this}" isProtected="{hasPassword}"/>
	</fx:Declarations>
	<s:Panel id="panel" width="100%" height="100%"
			 skinClass="skins.WidgetPanelSkin"
			 skinClass.widget="skins.NullSkin">
		<s:layout>
			<s:VerticalLayout/>
		</s:layout>
		<s:VGroup width="100%" id="toolbar"  >
			<s:HGroup gap="5" paddingBottom="2" paddingTop="2" width="100%">
				<components:DKI_ComboBox id="fltr_terminal" width="220" height="100%" enabled="true"
										 change="fltr_terminal_changeHandler(event)" cornerRadius="10"
										 labelField="term_desc" prompt="{resourceManager.getString('default','TANK_TERMINAL')+resourceManager.getString('default','FILTER')}"
										 dataProvider="{terminalList}"/>
				<components:DKI_ComboBox id="fltr_tank" width="320" height="100%"
										 change="fltr_tank_changeHandler(event)" cornerRadius="10"
										 labelField="tank_desc" prompt="{resourceManager.getString('default','TANK_TANK')+resourceManager.getString('default','FILTER')}"
										 dataProvider="{tankList}"/>
				
				<components:DKI_ValidatorInput id="fltr_height_start" validationType="search" minWidth="80" height="{labelHeight}" width="100%"
											   keyUp="fltr_height_start_keyUpHandler(event)" toolTip="{resourceManager.getString('default','STRAP_HEIGHT_START')}" 
											   prompt="{resourceManager.getString('default','STRAP_HEIGHT_START')+resourceManager.getString('default','FILTER')}"/>
				<components:DKI_ValidatorInput id="fltr_height_end" validationType="search" minWidth="80" height="{labelHeight}" width="100%"
											   keyUp="fltr_height_end_keyUpHandler(event)" toolTip="{resourceManager.getString('default','STRAP_HEIGHT_END')}" 
											   prompt="{resourceManager.getString('default','STRAP_HEIGHT_END')+resourceManager.getString('default','FILTER')}"/>
				
				
				<!--/s:HGroup>
				<s:HGroup gap="5" paddingBottom="2" paddingTop="2" width="100%"-->
				<s:Spacer width="100%"/>
				<components:DKI_Button id="filterBtn" height="24" noLabel="false" click="filterRecords(event)"
									   type="filteron"/>
				<components:DKI_Button id="resetBtn" height="24" noLabel="false" click="refreshRecords(event)"
									   type="filteroff"/>
				<!--components:DKI_Button height="100%" label="{resourceManager.getString('default','RESET')+resourceManager.getString('default','FILTER')}" click="resetRecords(event)"
									   width.widget="100%" type="refresh"/-->
				<components:DKI_Button id="btn_export" label="{resourceManager.getString('default','EXPORTDATA')}" type="report" click="exportCsvHandler(event)" includeIn="normal"/>
				<components:DKI_Button id="btn_import" label="{resourceManager.getString('default','IMPORTDATA')}" type="report" click="importCsvHandler(event)" includeIn="normal" toolTip="{resourceManager.getString('default','IMPORT_FORMAT')}"/>
				<components:DKI_Button id="btn_create" label="{resourceManager.getString('default','CREATE')}" height="24" click="createNewRecord(event)" includeIn="normal" enabled="{this.canCreate}" type="create"/>	
			</s:HGroup>
		</s:VGroup>
		
		
		<s:DataGrid id="dataGrid" width="100%" height="100%" requestedRowCount="4"
					selectionChange="dataGrid_selectionChangeHandler(event)"
					skinClass="skins.DKI_DataGrid_Skin"
					height.widget="100%">
			<s:columns>
				<s:ArrayList>
					<s:source>
						<s:GridColumn dataField="strap_height" headerText="{resourceManager.getString('default','STRAP_HEIGHT')+' ['+resourceManager.getString('default','UNIT__LENGTH_MM')+']'}" visible="true"></s:GridColumn>
						<s:GridColumn dataField="strap_volume" headerText="{resourceManager.getString('default','STRAP_VOLUME')+' ['+resourceManager.getString('default','UNIT__VOLUME_LITRE')+']'}" visible="true"></s:GridColumn>
						
						<s:GridColumn dataField="strap_tankcode" headerText="{resourceManager.getString('default','TANK_CODE')}" visible="true"></s:GridColumn>
						<s:GridColumn dataField="strap_tankname" headerText="{resourceManager.getString('default','TANK_NAME')}" visible="true"></s:GridColumn>
						<s:GridColumn dataField="strap_sitecode" headerText="{resourceManager.getString('default','TANK_SITECODE')}" visible="true"></s:GridColumn>
						<s:GridColumn dataField="strap_sitename" headerText="{resourceManager.getString('default','TANK_TERMINAL')}" visible="true"></s:GridColumn>
						<s:GridColumn dataField="strap_basecode" headerText="{resourceManager.getString('default','TANK_BASE')}" visible="true"></s:GridColumn>
						<s:GridColumn dataField="strap_basename" headerText="{resourceManager.getString('default','TANK_BASE_NAME')}" visible="true"></s:GridColumn>
						<s:GridColumn dataField="strap_baseclass" headerText="{resourceManager.getString('default','TANK_BASE_CLASS')}" visible="false"></s:GridColumn>
						<s:GridColumn dataField="strap_bsclsname" headerText="{resourceManager.getString('default','TANK_BCLASS_NAME')}" visible="true"></s:GridColumn>
						<s:GridColumn dataField="tank_prod_lvl" headerText="{resourceManager.getString('default','TANK_PROD_LVL')+' ['+resourceManager.getString('default','UNIT__LENGTH_MM')+']'}" visible="true"></s:GridColumn>
					</s:source>
				</s:ArrayList>
			</s:columns>
			<s:dataProvider>
				<!--s:AsyncListView id="pgList" list="{getPagedResult.lastResult}"/-->
				<s:AsyncListView id="pgList" list="{pagedRecords}"/>
			</s:dataProvider>
		</s:DataGrid>
		<s:HGroup width="100%">
			<components:Downloader id="pb" width="100%" height="18"/>
			<!--mx:ProgressBar id="pb" width="100%" height="22" visible="false" includeInLayout="false"  mode="manual" source="{this.pgList}" label="{this.currentLength} records shown from {this.currentLength} loaded out of {this.totalLength} found." labelPlacement="center"/-->
			<s:Button id="killBtn" width="18" height="18" label="" cornerRadius="12" visible="false" includeInLayout="false"
					  click="killBtn_clickHandler(event)"/>
			<s:Button id="resumeBtn" width="18" height="18" label="" cornerRadius="12" visible="false" includeInLayout="false"
					  click="resumeBtn_clickHandler(event)"/>
		</s:HGroup>
	</s:Panel>
	
	<s:Panel id="details" includeIn="edit,create,detail" width="100%" height="250"
			 itemCreationPolicy="immediate" skinClass="skins.WidgetPanelSkin">
		<s:layout>
			<s:VerticalLayout/>
			<!--s:TileLayout/-->
		</s:layout>
		
		<s:Spacer height="5"/>
		<s:VGroup width="100%">
			<s:HGroup width="100%">
				<s:HGroup>
					<s:Label width="{labelWidth}" height="{labelHeight}" text="{resourceManager.getString('default','TANK_TERMINAL')}" verticalAlign="middle"/>
					<components:DKI_ValidatorComboBox id="strap_sitecode" 
													  dataProvider="{terminalList}" 
													  labelField="term_desc" 
													  selectedItem="{dataGrid.selectedItem.strap_sitecode} - {dataGrid.selectedItem.strap_sitename}" enabled="false" enabled.edit="true" 
													  selectedItem.create="" selectedIndex.create="0" enabled.create="true" 
													  width="{fieldWidth}" height="{fieldHeight}" 
													  prompt="{resourceManager.getString('default','SELECT')+resourceManager.getString('default','TANK_TERMINAL')}"
													  required="true" validationGroup="{vg}" automationName="{resourceManager.getString('default','TANK_TERMINAL')}" 
													  />
				</s:HGroup>
				
				<s:Spacer width="{spaceWidth}" />
				
			</s:HGroup>
			
			<s:Spacer height="{spaceHeight}" />
			
			<s:HGroup width="100%">
				
				<s:HGroup>
					<s:Label width="{labelWidth}" height="{labelHeight}" text="{resourceManager.getString('default','TANK_TANK')}" verticalAlign="middle"/>
					<components:DKI_ValidatorComboBox id="strap_tankcode" 
													  dataProvider="{tankList}" 
													  labelField="tank_desc" 
													  selectedItem="{dataGrid.selectedItem.strap_tankcode} [{dataGrid.selectedItem.strap_basecode} - {dataGrid.selectedItem.strap_basename} - {dataGrid.selectedItem.strap_bsclsname}]" 
													  enabled="false" enabled.edit="true" 
													  selectedItem.create="" selectedIndex.create="0" enabled.create="true" 
													  width="{fieldWidth*2}" height="{fieldHeight}" 
													  prompt="{resourceManager.getString('default','SELECT')+resourceManager.getString('default','TANK_TANK')}"
													  required="true" validationGroup="{vg}" automationName="{resourceManager.getString('default','TANK_TANK')}" 
													  />
				</s:HGroup>
				
			</s:HGroup>
			
			<s:Spacer height="{spaceHeight}" />
			
			<s:HGroup width="100%">
				
				<s:HGroup>
					<s:Label width="{labelWidth}" height="{labelHeight}" text="{resourceManager.getString('default','STRAP_HEIGHT')}" verticalAlign="middle"/>
					<components:DKI_ValidatorInput id="strap_height" 
												   width="{fieldWidth}" height="{fieldHeight}" change="strap_height_changeHandler(event)" 
												   text="{dataGrid.selectedItem.strap_height}" editable="true" enabled="true" editable.detail="false" enabled.detail="false" 
												   required="true" validationType="integer_non_negative" validationGroup="{vg}" automationName="{resourceManager.getString('default','STRAP_HEIGHT')}" 
												   />
					<s:Label width="{labelWidthPostfix}" height="{labelHeight}" text="{resourceManager.getString('default','UNIT__LENGTH_MM')}" verticalAlign="middle"/>
				</s:HGroup>
				
				<s:Spacer width="{spaceWidth}" />
				
			</s:HGroup>
			
			<s:Spacer height="{spaceHeight}" />
			
			<s:HGroup width="100%">
				
				<s:HGroup>
					<s:Label width="{labelWidth}" height="{labelHeight}" text="{resourceManager.getString('default','STRAP_VOLUME')}" verticalAlign="middle"/>
					<components:DKI_ValidatorInput id="strap_volume" 
												   width="{fieldWidth}" height="{fieldHeight}" change="strap_volume_changeHandler(event)" 
												   text="{dataGrid.selectedItem.strap_volume}" editable="true" enabled="true" editable.detail="false" enabled.detail="false" 
												   required="true" validationType="numeric_non_negative" validationGroup="{vg}" automationName="{resourceManager.getString('default','STRAP_VOLUME')}" 
												   />
					<s:Label width="{labelWidthPostfix}" height="{labelHeight}" text="{resourceManager.getString('default','UNIT__VOLUME_DEFAULT')}" verticalAlign="middle"/>
				</s:HGroup>
				
			</s:HGroup>
		</s:VGroup>
		
		<s:Spacer height="20" />
		
		<s:HGroup width="100%" paddingBottom="4" paddingTop="0" gap="5">
			<s:Spacer width="100%"/>
			<components:DKI_Button id="btn_deleteAll" label="{resourceManager.getString('default','button.lbl.DELETE_ALL')}" height="100%" click="doDeleteAll()" includeIn="edit" enabled="{this.canDelete}" type="delete"/>
			<components:DKI_Button id="btn_delete" label="{resourceManager.getString('default','DELETE')}" height="100%" click="doDelete()" includeIn="edit" enabled="{this.canDelete}" type="delete"/>
			<components:DKI_Button id="btn_save" label.create="{resourceManager.getString('default','SAVE')}" label="{resourceManager.getString('default','UPDATE')}" height="100%" includeIn="edit,create" enabled.create="{this.canCreate}" enabled="{this.canUpdate}" type.create="create" type="edit"/>
			<components:DKI_Button id="btn_cancel" label="{resourceManager.getString('default','CANCEL')}" height="100%" click="cancel_clickHandler()" enabled="true" type="cancel"/>
		</s:HGroup>
	</s:Panel>
	
</s:VGroup>
