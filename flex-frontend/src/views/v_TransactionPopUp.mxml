<?xml version="1.0" encoding="utf-8"?>
<s:Panel xmlns:fx="http://ns.adobe.com/mxml/2009" 
				xmlns:s="library://ns.adobe.com/flex/spark" 
				xmlns:components="components.*"
				xmlns:transactionservice="services.transactionservice.*"
				xmlns:companiesservice="services.companiesservice.*"
				xmlns:guitransactiondetailsservice1="services.guitransactiondetailsservice.*"
				xmlns:guimeterdetailsservice="services.guimeterdetailsservice.*"
				xmlns:transactionsservice="services.transactionsservice.*"
				xmlns:mx="library://ns.adobe.com/flex/mx" 
				skinClass="skins.PopupSkin"
				skinClass.edit="skins.PopupSkinEdit"
				width="1200" height="550" creationComplete="init(event)" 
				title.view="Transaction List" title.edit="Transaction Repost" xmlns:manualtransactionsservice="services.manualtransactionsservice.*">
		
	<s:states>
		<s:State name="view"  enterState="this.title = resourceManager.getString('default','m_transactionlist');" />
		<s:State name="edit"  enterState="this.title = resourceManager.getString('default','transactionrepost');" />
	</s:states>
	
	
	<fx:Script>
		<![CDATA[			
			import components.ErrorDialog;
			import components.MessageDialog;
			
			import dm.remoteBulkListService;
			import dm.remoteDataService;
			import dm.remoteListService;
			import dm.utils.tools;
			
			import flash.globalization.LocaleID;
			
			import mx.collections.ArrayCollection;
			import mx.collections.errors.ItemPendingError;
			import mx.controls.DateField;
			import mx.controls.dataGridClasses.DataGridColumn;
			import mx.core.FlexGlobals;
			import mx.events.CloseEvent;
			import mx.events.EffectEvent;
			import mx.events.FlexEvent;
			import mx.events.IndexChangedEvent;
			import mx.managers.PopUpManager;
			import mx.rpc.events.ResultEvent;
			import mx.utils.ObjectUtil;
			import mx.utils.OnDemandEventDispatcher;
			import mx.utils.StringUtil;
			
			import renderers.DKI_HeaderColumn_Renderer;
			import renderers.GridCheckNullRenderer;
			
			import spark.components.gridClasses.IGridItemRenderer;
			import spark.core.NavigationUnit;
			import spark.events.GridEvent;
			import spark.events.GridItemEditorEvent;
			import spark.events.GridSelectionEvent;
			import spark.events.IndexChangeEvent;
			
			import valueObjects.Transactions;
			
			[Bindable] private var transaction_vo:Transactions = new Transactions();
			
			private var currentFilter:String=null;
			private var currentOrder:String='trsa_id';
			private var companyFilter:String=null;
			private var transactionFilter:String=null;
			private var currentDirection:String=" ASC";	
			private var idx:int=-1;
			[Bindable] public var supplier:String='';
			[Bindable] public var tripNo:String;
			private var driver:String="";
			private var carrier:String="";
			private var drawer:String="";
			private var tripStatus:String="";
			
			var order:String="0";
			var transaction:Array = new Array();
			var transNum:int=0;
			var transfers:Array = new Array();
			var meters:Array=new Array();
			var base:Array=new Array();
			var mtrCode:String;
			
			
			private var transCount:int=0;
			private var baseCount:int=0;
			private var errorDialog:ErrorDialog;
			
			[Bindable] private var transferArr:ArrayCollection = new ArrayCollection();
			[Bindable] private var transactionArr:ArrayCollection = new ArrayCollection();
			[Bindable] private var baseProductDetails:ArrayCollection = new ArrayCollection();
			
			[Bindable] private var headArr:ArrayCollection=new ArrayCollection([{id:'Meter Details'},{id:'Base Products'}]);

			[Bindable] private var transactionDetailsList:remoteDataService = new remoteDataService( "TransactionListService.getTransactionDetails", null, getTransactionDetailsList_resultHandler );
			private var updateAction:remoteDataService = new remoteDataService( "TransactionListService.updateTransfer", null, updateData_resultHandler, 1 );
			[Bindable] private var tankList:remoteDataService = new remoteDataService( "ListLibraryService.lookupTanks", null, null );
			private var linkedTripChecker:remoteDataService = new remoteDataService( "TransactionListService.isTripLinked", null, linkedTripChecker_resultHandler, 2 );
			
			private var trsfGridColumnSequenceMaker:remoteDataService = new remoteDataService( "ScreenGridColumnService.lookupGridColumnSequence", null, trsfGridColumnSequenceMaker_resultHandler, 1 );
			private var _trsfGridColumnSequenceString:String="";
			private var trsbGridColumnSequenceMaker:remoteDataService = new remoteDataService( "ScreenGridColumnService.lookupGridColumnSequence", null, trsbGridColumnSequenceMaker_resultHandler, 1 );
			private var _trsbGridColumnSequenceString:String="";
			
			private var baseArr:ArrayCollection = new ArrayCollection();
			private var nc:NetConnection = new NetConnection();
			
			private var baseResponder:Responder = new Responder(baseResult);
			protected function dataGrid_selectionChangeHandler(event:GridSelectionEvent):void
			{
				if ( dataGrid.selectedIndex < 0 ) 
				{
					this.transactionDetailsGrid.dataProvider = null;
					this.meterDatagrid.dataProvider = null;
					baseProductDetails = new ArrayCollection();
					return;
				}
				transaction_vo = dataGrid.selectedItem as Transactions;
				//getDetailsResult.token = guitransactiondetails.getTransactionDetails(dataGrid.selectedItem.trsa_id);
				this.transactionDetailsList.service( dataGrid.selectedItem.trsa_id );
				getMeterDetailsResult.token = getMeterDetails.getTransactionMeterDetails(dataGrid.selectedItem.trsa_id);
				baseProductDetails = new ArrayCollection();
			}
			
			protected function getTransactionDetailsList_resultHandler():void
			{
				transactionDetailsGrid.dataProvider = this.transactionDetailsList;
				detailNavigator_changeHandler(null);
			}
			
			
			protected function companyType_creationCompleteHandler(event:FlexEvent):void
			{
				companyTypesResponder.token = companyService.getTransactionCompanyTypes();
			}
			
			protected function companyTypeLabel(item:Object):String
			{
				return item.company_name;
				
			}
			
			protected function companyNameLabel(item:Object):String
			{
				return item.cmpy_name;
			}
			
			protected function getDetailsResult_resultHandler(event:ResultEvent):void
			{
				transferArr.removeAll();
				baseArr.removeAll();
				for (var i:int=0; i < getDetailsResult.lastResult.length; i++)
				{
					transferArr.addItem(getDetailsResult.lastResult[i]);
				}	
				transactionDetailsGrid.dataProvider = transferArr;
				var myStr:String="";
				for (var i:int=0;i < transferArr.length;i++)
				{
					if (myStr.length > 0) myStr += '|';
					myStr +=transferArr[i].trsf_baa_code;
				}
				
			}
			
			protected function getBaseDetailsResult_resultHandler(event:ResultEvent):void
			{
				baseArr.addItem(getBaseDetailsResult.lastResult[0]);
			}
			
			protected function getMeterDetailsResult_resultHandler(event:ResultEvent):void
			{
				meterDatagrid.dataProvider = getMeterDetailsResult.lastResult;
			}
			
			protected function setTimeStamp(item:Object, column:GridColumn):String
			{
				var date:Date = new Date();
				var str:String = "";
				if(column.dataField == "trsa_st_dmy")
					str=item.trsa_st_dmy
				else if(column.dataField == "trsa_ed_dmy")
					str=item.trsa_ed_dmy
				if (str==null)
				{	
					return '';
				}	
				else
				{	
					date = DateField.stringToDate(str,"YYYY-MM-DD");
					return dateFormatter.format(date)+str.substr(10,9);
				}
			}
						
			protected function setOriginal(item:Object, column:GridColumn):String
			{
				if (item.trsa_reverse_flag == '1')
					return item.trsa_reverse
				else
					return '';
			}

			protected function cancelBtn_clickHandler(event:MouseEvent):void
			{
				currentState="normal";
				dataGrid.selectedIndex = -1;
			}
			
			public function setParams(value:Object): void
			{
				if ( currentState == "view" )
				{
					//this.title = resourceManager.getString('default','m_transactionlist');
					this.title = resourceManager.getString('default','global.lbl.transactiondetails');
				}
				if ( currentState == "edit" )
				{
					//this.title = resourceManager.getString('default','transactionrepost');
					this.title = resourceManager.getString('default','EDIT') + " " + resourceManager.getString('default','global.lbl.transactiondetails');
				}
				supplier=value.supplier;
				tripNo=value.trip;
				driver=value.driver;
				carrier=value.carrier;
				drawer=value.drawer;
				companyTypesResponder.token = companyService.getTransactionCompanyTypes();
				getPagedResponder.token = transactionsService.getTransactions(tripNo,supplier);
				
				if ( value.hasOwnProperty("status") )
				{
					tripStatus = value.status;
				}
				if ( tripStatus == "A" )
				{
					this.linkedTripChecker.service( tripNo,supplier );
				}
				
				this.trsfGridColumnSequenceMaker.service( "TRANSFER_LIST" );
				this.trsbGridColumnSequenceMaker.service( "TRANBASE_LIST" );
			}
			
			protected function linkedTripChecker_resultHandler( ):void
			{
				if ( linkedTripChecker.dataInteger > 0 )
				{
					this.currentState = "edit";
					this.title = resourceManager.getString('default','EDIT') + " " + resourceManager.getString('default','global.lbl.transactiondetails');
				}
				else
				{
					this.currentState = "view";
					this.title = resourceManager.getString('default','global.lbl.transactiondetails');
				}
			}
			
			public function setMovementParams(move_id:String, line_id:String): void
			{
				companyTypesResponder.token = companyService.getTransactionCompanyTypes();
				getPagedResponder.token = transactionsService.getMovementTransactions(move_id, line_id);
			}
			
			protected function getPagedResponder_resultHandler(event:ResultEvent):void
			{
				transactionArr.removeAll();
				var tmp:String;
				for (var i:int=0; i < getPagedResponder.lastResult.length; i++)
				{
					tmp = getPagedResponder.lastResult[i].trsa_reverse_flag as String;
					if (currentState=='view')
					 transactionArr.addItem(getPagedResponder.lastResult[i])
					else
					 if(tmp == "0")	
						 transactionArr.addItem(getPagedResponder.lastResult[i]);
				}

				if ( transactionArr.length > 0 )
				{
					dataGrid.selectedIndex = 0;
					transactionArr.refresh();
					dataGrid_selectionChangeHandler(null);
				}
				else
				{
					dataGrid.selectedIndex = -1;
					this.transactionDetailsGrid.dataProvider = null;
					this.meterDatagrid.dataProvider = null;
					baseProductDetails = new ArrayCollection();
				}
			}
			
			protected function transactionDetailsGrid_selectionChangeHandler(event:GridSelectionEvent):void
			{
				baseProductDetails = new ArrayCollection();
				if(transactionDetailsGrid.selectedIndex == -1)return;
				var txnID:String = transactionDetailsGrid.selectedItem.trsf_id;
				
				if(txnID == ""   || txnID == null)return;
				
				nc.call("RepostService.getBases",new Responder(function(o:Object):void{
					baseProductDetails = new ArrayCollection(o as Array);
				}),txnID);
			}
						
			protected function updateBaseArr(value:int): void
			{
				if (transCount < transferArr.length)
				{
					nc.call("RepostService.getBases",new Responder(function(o:Object):void
					{
						for (var i:int=0; (o as Array).length-1;i++)
						{
							
						}
					}),value);
					transCount +=1;
					updateBaseArr(transferArr[transCount].trsf_id);
				}
			}
			
			protected function createTransactionHandler(event:MouseEvent):void
			{
				order="0";
				transaction = new Array();
				transNum=transferArr.length;
				transfers new Array();
				meters=new Array();
				base=new Array();
				mtrCode='';
				
				transaction.push({
					Load_Number:tripNo,
					Supplier:supplier,
					Tanker_Code:transferArr[0].eqpt_code,
					Operator_Code:dataGrid.selectedItem.trsa_per_name,
					Start_Time:weiDate(dataGrid.selectedItem.trsa_st_dmy),
					Finish_Time:weiDate(dataGrid.selectedItem.trsa_ed_dmy)
				});
				
				for(var i:int=0;i < getMeterDetailsResult.lastResult.length; i++)
				{
					if(getMeterDetailsResult.lastResult[i].is_injector != "N")
						mtrCode = getMeterDetailsResult.lastResult[i].trsb_meter
					else
						mtrCode = getMeterDetailsResult.lastResult[i].trsb_injector;
						
					meters.push({
						Injector_or_Meter: getMeterDetailsResult.lastResult[i].is_injector,   
						Meter_Injector_Code: mtrCode,
						open_amb: getMeterDetailsResult.lastResult[i].trsf_opn_amb,           
						open_cor: getMeterDetailsResult.lastResult[i].trsf_opn_cor,           
						open_kg: getMeterDetailsResult.lastResult[i].trsf_open_kg,           
						close_amb: getMeterDetailsResult.lastResult[i].trsf_cls_amb,          
						close_cor: getMeterDetailsResult.lastResult[i].trsf_cls_cor,           
						close_kg: getMeterDetailsResult.lastResult[i].trsf_close_kg          
					});
				};
				
				for (var i:int=0; i < transNum; i++)
				{
					transfers.push({
						Arm_code:getDetailsResult.lastResult[i].baa_bay_seq,
						nr_in_tkr:0,
						drawer_code:drawer,
						product_Code:0,
						dens:getDetailsResult.lastResult[i].trsf_density,
						Temperature:getDetailsResult.lastResult[i].trsf_temp,
						amb_vol:getDetailsResult.lastResult[i].trsf_qty_amb,
						cor_vol:getDetailsResult.lastResult[i].trsf_qty_cor,
						liq_kg:getDetailsResult.lastResult[i].trsf_load_kg,
						Equipment_ID:getDetailsResult.lastResult[i].eqpt_code,
						Planned_Qty:0,
						meters:new Array(),
						bases:new Array(),
						Number_of_Bases:0,
						num_of_meter: meters
					});
				};
				baseCount = 0;
				doBases(baseCount);
				
			}
			
			private function doBases(value:int): void
			{
				if (value < transNum)
					nc.call("RepostService.getBases",baseResponder,getDetailsResult.lastResult[value].trsf_id);
				//doCreate(order,transaction,transNum,transfers,false);
			}
						
			private function baseResult(obj:Object):void
			{
				var tmpDetails:ArrayCollection = new ArrayCollection(obj as Array);
				transfers[baseCount].Number_of_Bases=tmpDetails.length;
				for (var i:int=0; i < tmpDetails.length; i++)
				{
					var ob:Object = 
					{
						Tank_code:obj.TRSB_TK_TANKCODE,	
						product_code:obj.BASE_CODE,
						prod_class:obj.BASE_CAT
					}
				}
				baseCount += 1;
				doBases(baseCount);
			}
			
			private function weiDate(value:String):String
			{
				var convDate:String = value.substr(8,2)+'.'+value.substr(5,2)+'.'+value.substr(0,4)+value.substr(11,2)+
										':'+value.substr(14,2)+':'+value.substr(17,2);
				return convDate;
			}
			
			private function doCreate(order:String, transaction:Array, transNum:int, transfers:Array, isnom:Boolean):void
			{
				//
			}
			
			public function getMeterLbl(item:Object,column:GridColumn):String
			{
				var code:String = item.trsb_meter as String;
				if (item.is_injector == 'Y') code = item.trsb_injector as String;
				return code;
			}
			
			protected function init(event:FlexEvent):void
			{
				//nc.connect(global.AppServicesConfig.gatewayURL);
				
				nc.objectEncoding = ObjectEncoding.AMF3;
				//nc.connect("/amfservices/gateway/amf2/index.php");
				nc.connect(global.gatewayURL);
				this.tankList.service("-1", "-1", "-1");
				
				this.trsfGridColumnSequenceMaker.service( "TRANSFER_LIST" );
				this.trsbGridColumnSequenceMaker.service( "TRANBASE_LIST" );
				
			}
			
			protected function trsfGridColumnSequenceMaker_resultHandler():void
			{
				this._trsfGridColumnSequenceString =  trsfGridColumnSequenceMaker.dataString;
				
				this.trsfGridColumnSequenceAdjustment();
			}
			
			protected function trsbGridColumnSequenceMaker_resultHandler():void
			{
				this._trsbGridColumnSequenceString =  trsbGridColumnSequenceMaker.dataString;
				
				this.trsbGridColumnSequenceAdjustment();
			}
			
			protected function trsfGridColumnSequenceAdjustment():void
			{
				if ( _trsfGridColumnSequenceString.length > 0 && transactionDetailsGrid != null )
				{
					global.adjustGridColumnSequence( _trsfGridColumnSequenceString.substr(1), transactionDetailsGrid );
				}
			}
			
			protected function trsbGridColumnSequenceAdjustment():void
			{
				if ( _trsbGridColumnSequenceString.length > 0 && baseDatagrid != null)
				{
					global.adjustGridColumnSequence( _trsbGridColumnSequenceString.substr(1), baseDatagrid );
				}
			}
				
			protected function setTimeStamp2(item:Object, column:GridColumn):String
			{
				var date:Date = new Date();
				var str:String=item.trsa_crt_dmy;
				if (str==null)
				{	
					return '';
				}	
				else
				{	
					date = DateField.stringToDate(str,"YYYY-MM-DD");
					return dateFormatter.format(date)+str.substr(10,9);
				}
			}
			
			protected function detailNavigator_changeHandler(event:IndexChangedEvent):void
			{
				// TODO Auto-generated method stub
				if ( this.detailNavigator.selectedIndex == 1 )
				{
					if ( transactionDetailsGrid.selectedIndex < 0 && transactionDetailsGrid.dataProviderLength>0)
					{
						transactionDetailsGrid.selectedIndex = 0;
						transactionDetailsGrid_selectionChangeHandler(null);
					}
				}
			}
			
			protected function updateTransactionHandler(event:MouseEvent):void
			{
				if ( this.transactionDetailsGrid.selectedIndex < 0 )
				{
					global.msgWarning( resourceManager.getString('default','MTRAN.MESSAGE.SELECT_ONE_TRSF_DATA') );
					return;
				}
				
				if ( this.checkItemFields() == false )
				{
					//this.btn_save.enabled = this.canUpdate;
					return;
				}
				
				var i:int = this.transactionDetailsGrid.selectedIndex;
				
				
				var trsfObj:Object = new Object();
				trsfObj['trsf_qty_amb'] = transactionDetailsList.source[i].trsf_qty_amb;
				trsfObj['trsf_qty_cor'] = transactionDetailsList.source[i].trsf_qty_cor;
				trsfObj['trsf_load_kg'] = transactionDetailsList.source[i].trsf_load_kg;
				trsfObj['trsf_density'] = transactionDetailsList.source[i].trsf_density;
				trsfObj['trsf_temp'] = transactionDetailsList.source[i].trsf_temp;
				trsfObj['trsf_api'] = transactionDetailsList.source[i].trsf_api;
				trsfObj['trsf_temp_f'] = transactionDetailsList.source[i].trsf_temp_f;
				trsfObj['trsf_id'] = transactionDetailsList.source[i].trsf_id;
				trsfObj['trsf_terminal'] = transactionArr[0].trsa_terminal;
				trsfObj['trsfprod_prodcode'] = transactionDetailsList.source[i].trsfprod_prodcode;
				trsfObj['trsfprod_prodcmpy'] = drawer;
				
				if ( this.baseDatagrid.dataProviderLength > 0 )
				{
					trsfObj['has_items_trsb'] = "1";
					var trsbs:Array=new Array();
					
					for ( i=0; i<this.baseDatagrid.dataProviderLength; i++ )
					{
						var trsbObj:Object = new Object();
						trsbObj['trsb_tk_tankcode'] = this.baseDatagrid.dataProvider[i].TRSB_TK_TANKCODE;
						trsbObj['trsb_avl'] = this.baseDatagrid.dataProvider[i].TRSB_AVL;
						trsbObj['trsb_cvl'] = this.baseDatagrid.dataProvider[i].TRSB_CVL;
						trsbObj['trsb_kg'] = this.baseDatagrid.dataProvider[i].TRSB_KG;
						trsbObj['trsb_dns'] = this.baseDatagrid.dataProvider[i].TRSB_DNS;
						trsbObj['trsb_tmp'] = this.baseDatagrid.dataProvider[i].TRSB_TMP;
						trsbObj['trsb_api'] = this.baseDatagrid.dataProvider[i].TRSB_API;
						trsbObj['trsb_tmp_f'] = this.baseDatagrid.dataProvider[i].TRSB_TMP_F;
						trsbObj['trsb_id_trsf_id'] = trsfObj['trsf_id'];
						trsbObj['trsb_id_trsf_trm'] = trsfObj['trsf_terminal'];
						trsbObj['trsb_bs'] = this.baseDatagrid.dataProvider[i].BASE_CODE;
						
						trsbs.push( trsbObj );
					}
					trsfObj['trsb_items'] = trsbs;
				}
				
				this.updateAction.service( trsfObj );
				
			}
			
			protected function updateData_resultHandler( ):void
			{
				if ( this.updateAction.dataString == "OK" )
				{
					global.msgSuccess(resourceManager.getString('default','MSG_UPDATE__SUCCESS'));
				}
				else
				{
					global.msgFail(resourceManager.getString('default','ERROR_UPDATE__FAILURE'));
				}
				
			}
			
			public function getColumnTitle( code:String ):String
			{
				var title:String=code;
				
				//for each ( var cln:GridColumn in this.baseDatagrid.columns )
				for ( var i:int=0; i<this.baseDatagrid.columns.length; i++ )
				{
					var cln:GridColumn = this.baseDatagrid.columns.getItemAt(i)   as GridColumn;
					if ( cln.dataField == code )
					{
						title = cln.headerText;
						break;
					}
				}
				
				return title;
			}
			
			public function checkItemFields():Boolean
			{
				var x:Object;
				var obj:Object;
				var errGrid:ArrayCollection=new ArrayCollection();
				var lineSetting:Object;
				var txt:String;
				var columnTitle:String="";
				var index:int=0;

				for each ( x in this.baseDatagrid.dataProvider)
				{
					index += 1;
					for ( var s:String in x )
					{
						columnTitle = resourceManager.getString('default','VALIDATION__FIELD__LINE') + String(index) + ": " + this.getColumnTitle( s );
						
						txt = x[s];
						if (s == 'TRSB_TK_TANKCODE')
						{
							var tankFound:Boolean=false;
							for each ( var o:Object in this.tankList )
							{
								if ( o['tank_code'] == txt && o['tank_base'] == x.BASE_CODE )
								{
									tankFound = true;
									break;
								}
							}
							if ( tankFound == false )
							{
								obj=new Object();
								obj['name'] = columnTitle;
								obj['description'] = "[" + txt + "] - " + resourceManager.getString('default','VALIDATION__FIELD__WRONG_TANK');
								errGrid.addItem( obj );
							}
						}
						
						if ( s == 'TRSB_AVL' 
							|| s == 'TRSB_CVL'   
							|| s == 'TRSB_KG'   
							|| s == 'TRSB_DNS'   
							|| s == 'TRSB_TMP'   
						)
						{
							if ( tools.isValueNumeric( txt ) == false )
							{
								obj=new Object();
								obj['name'] = columnTitle;
								obj['description'] = "[" + txt + "] - " + resourceManager.getString('default','VALIDATION__FIELD__NUMBER__NOMATCH');
								errGrid.addItem( obj );
							}
						}
					}
				}
					
				
				if ( errGrid.length > 0 )
				{
					errorDialog = new ErrorDialog( closeErrorDialog, resourceManager.getString('default','VALIDATION__PROMPT'), errGrid, resourceManager.getString('default','VALIDATION__TITLE'));
					return false;
				}
				else
				{
					return true;
				}
			}
			
			public function closeErrorDialog():void
			{
				PopUpManager.removePopUp(this.errorDialog.dialog );	
			}
			
			protected function baseDatagrid_gridItemEditorSessionSaveHandler(event:GridItemEditorEvent):void
			{
				// do nothing
				return;
				
				if ( baseDatagrid.selectedIndex < 0 )
				{
					return;
				}
				
				var alphanumeric_charset:String="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789 _-";
				var errors:String="";
				var index:int=0;
				var txt:String;				
				
				txt = this.baseDatagrid.dataProvider[baseDatagrid.selectedIndex][event.column.dataField];
				if (event.column.dataField == 'TRSB_TK_TANKCODE')
				{
					var tankFound:Boolean=false;
					for each ( var o:Object in this.tankList )
					{
						trace( "baseDatagrid_gridItemEditorSessionSaveHandler---------", txt, this.baseDatagrid.dataProvider[baseDatagrid.selectedIndex].BASE_CODE, "----------", o['tank_code'], o['tank_base']);
						if ( o['tank_code'] == txt && o['tank_base'] == this.baseDatagrid.dataProvider[baseDatagrid.selectedIndex].BASE_CODE )
						{
							tankFound = true;
							break;
						}
					}
					if ( tankFound == false )
					{
						index += 1;
						errors += String(index) + ". [" + event.column.headerText + "] - Wrong Tank. \n";
					}
				}
				
				if ( event.column.dataField == 'TRSB_AVL' 
				  || event.column.dataField == 'TRSB_CVL'   
				  || event.column.dataField == 'TRSB_KG'   
				  || event.column.dataField == 'TRSB_DNS'   
				  || event.column.dataField == 'TRSB_TMP'   
				)
				{
					if ( tools.isValueNumeric( txt ) == false )
					{
						index += 1;
						errors += String(index) + ". [" + event.column.headerText + "] - Expecting the Number. \n";
					}
				}
				
				if ( index > 0 )
				{
					var errorBox:MessageDialog = new MessageDialog( errors );
				}
				
			}
			
			protected function transactionDetailsGrid_creationCompleteHandler(event:FlexEvent):void
			{
				// TODO Auto-generated method stub
				
				this.trsfGridColumnSequenceMaker.service( "TRANSFER_LIST" );
				
			}
			
			protected function baseDatagrid_creationCompleteHandler(event:FlexEvent):void
			{
				// TODO Auto-generated method stub
				
				this.trsbGridColumnSequenceMaker.service( "TRANBASE_LIST" );
				
			}
			
		]]>
	</fx:Script>
	
	<fx:Declarations>
		<s:DateTimeFormatter id="dateFormatter" locale="{LocaleID.DEFAULT}" dateStyle="short" timeStyle="none"/>
		<s:DateTimeFormatter id="weiFormatter" dateTimePattern="dd.MM.yyyyHH:mm:ss" locale="{LocaleID.DEFAULT}" dateStyle="short" timeStyle="none"/>
		<s:RadioButtonGroup id="rb_status"/>
		<transactionsservice:TransactionsService id="transactionsService"  channelSet="{global.channelSet}"/>
		<companiesservice:CompaniesService id="companyService"  channelSet="{global.channelSet}"/>
		<s:CallResponder id="companyTypesResponder"/>
		<s:CallResponder id="getPagedResponder" result="getPagedResponder_resultHandler(event)"/>
		<guitransactiondetailsservice1:GuiTransactionDetailsService id="guitransactiondetails"  channelSet="{global.channelSet}"/>
		<s:CallResponder id="getDetailsResult" result="getDetailsResult_resultHandler(event)"/>
		<guimeterdetailsservice:GuiMeterDetailsService id="getMeterDetails"  channelSet="{global.channelSet}"/>
		<s:CallResponder id="getMeterDetailsResult" result="getMeterDetailsResult_resultHandler(event)"/>
		<manualtransactionsservice:ManualTransactionsService id="manualTransactionService"  channelSet="{global.channelSet}"/>
		<s:CallResponder id="getBaseDetailsResult" result="getBaseDetailsResult_resultHandler(event)"/>
	</fx:Declarations>
	
	
	
	<s:Panel id="main" width="100%" height="100%" skinClass="skins.WidgetPanelSkin">
		<s:layout>
			<s:VerticalLayout gap="6"/>
		</s:layout>
		<s:HGroup width="100%" height="27" paddingTop="5" paddingBottom="0" includeIn="edit" gap="-1">
			<s:Label text="{resourceManager.getString('default','datagrid.headercaption.tripno')}:" fontWeight="bold" fontSize="12"/>
			<s:Label text="{tripNo}" fontWeight="bold" fontSize="12"/>
			<s:Spacer width="8"/>
			<s:Label text="{resourceManager.getString('default','datagrid.headercaption.SupplierName')}:" fontWeight="bold" fontSize="12"/>
			<s:Label text="{supplier}" fontWeight="bold" fontSize="12"/>
		</s:HGroup>
		<s:DataGrid id="dataGrid" width="100%" height="100%" dataProvider="{transactionArr}"
								 requestedRowCount="4" sortableColumns="true" selectionChange="dataGrid_selectionChangeHandler(event)">
			<s:columns>
				<s:ArrayList>
					<s:GridColumn width="80" dataField="trsa_bay_cd" headerText="{resourceManager.getString('default','datagrid.headercaption.bay')}"></s:GridColumn>
					<s:GridColumn width="100" dataField="trsa_id" headerText="{resourceManager.getString('default','datagrid.headercaption.transnum')}"></s:GridColumn>
					<s:GridColumn width="100" dataField="trsa_trip" headerText="{resourceManager.getString('default','datagrid.headercaption.tripno')}"></s:GridColumn>
					<s:GridColumn dataField="trsa_tanker" headerText="{resourceManager.getString('default','datagrid.headercaption.Tanker')}"/>
					<s:GridColumn dataField="trsa_per_name" headerText="{resourceManager.getString('default','ORDER_PSNL_NAME')}"/>
					<s:GridColumn dataField="trsa_st_dmy" headerText="{resourceManager.getString('default','JRPT_RANGE_START')}" labelFunction="setTimeStamp"/>
					<s:GridColumn dataField="trsa_ed_dmy" headerText="{resourceManager.getString('default','JRPT_RANGE_END')}" labelFunction="setTimeStamp"/>
					<s:GridColumn width="24" dataField="trsa_reverse_flag" headerText="{resourceManager.getString('default','datagrid.headercaption.reverseflag')}" itemRenderer="renderers.GridCheckNullRenderer"/>
					<s:GridColumn width="80" dataField="trsa_reverse" headerText="{resourceManager.getString('default','datagrid.headercaption.transactionreversed')}" labelFunction="setOriginal"/>
					<s:GridColumn dataField="trsa_terminal" headerText="{resourceManager.getString('default','KYA_SITE_NAME')}"/>
					<s:GridColumn width="120" dataField="trsa_psn" headerText="{resourceManager.getString('default','datagrid.headercaption.lastmodifieduser')}"/>
					<s:GridColumn width="140" dataField="trsa_crt_dmy" headerText="{resourceManager.getString('default','datagrid.headercaption.timechanged')}" labelFunction="setTimeStamp2"/>
				</s:ArrayList>
			</s:columns>
		</s:DataGrid>
		<s:HGroup width="100%" height="160">
			<s:VGroup width="100%" gap="2" height="100%">
				<s:Label text="{resourceManager.getString('default','global.lbl.transferdetails')}" fontWeight="bold"/>
				<s:DataGrid id="transactionDetailsGrid" width="100%" height="100%" selectionChange="transactionDetailsGrid_selectionChangeHandler(event)"
										 requestedRowCount="5" sortableColumns="false" editable="false" editable.edit="true" creationComplete="transactionDetailsGrid_creationCompleteHandler(event)">
					<s:columns>
						<s:ArrayList>
							<s:GridColumn dataField="trsf_id" headerText="{resourceManager.getString('default','datagrid.headercaption.transfer')}" width="100" editable="false"></s:GridColumn>
							<s:GridColumn dataField="baa_bay_seq" headerText="{resourceManager.getString('default','datagrid.headercaption.bayarm')}" width="70" editable="false"></s:GridColumn>
							<s:GridColumn dataField="eqpt_code" headerText="{resourceManager.getString('default','datagrid.headercaption.trailer')}" width="100" editable="false"></s:GridColumn>
							<s:GridColumn dataField="prod_name" headerText="{resourceManager.getString('default','datagrid.headercaption.product')}" width="150" editable="false"/>
							<s:GridColumn dataField="trsf_qty_amb" headerText="{resourceManager.getString('default','datagrid.headercaption.amb')}" width="120"/>
							<s:GridColumn dataField="trsf_qty_cor" headerText="{resourceManager.getString('default','datagrid.headercaption.std')}" width="120"/>
							<s:GridColumn dataField="trsf_load_kg" headerText="{resourceManager.getString('default','datagrid.headercaption.mass')}" width="120"/>
							<s:GridColumn dataField="trsf_density" headerText="{resourceManager.getString('default','datagrid.headercaption.density')}" width="120"/>
							<s:GridColumn dataField="trsf_temp" headerText="{resourceManager.getString('default','datagrid.headercaption.temp')}" width="85"/>
							<s:GridColumn dataField="trsf_api" headerText="{resourceManager.getString('default','datagrid.headercaption.API')}" width="85"/>
							<s:GridColumn dataField="trsf_temp_f" headerText="{resourceManager.getString('default','datagrid.headercaption.tempF')}" width="85"/>
						</s:ArrayList>
					</s:columns>
				</s:DataGrid>
			</s:VGroup>
		</s:HGroup>
		<s:HGroup width="100%" height="160">
			<s:VGroup width="100%" height="100%" gap="2">
				
				<mx:TabNavigator id="detailNavigator" width="100%" height="100%" selectedIndex="0" change="detailNavigator_changeHandler(event)">
					<s:NavigatorContent width="100%" height="100%" label="{resourceManager.getString('default','global.lbl.meterdetails')}">
						<s:DataGrid id="meterDatagrid" width="100%" height="100%" requestedRowCount="5" sortableColumns="false" editable="false">
							<s:columns>
								<s:ArrayList>
									<s:GridColumn dataField="baa_bay_seq" headerText="{resourceManager.getString('default','datagrid.headercaption.arm')}" width="100"></s:GridColumn>
									<s:GridColumn dataField="trsb_meter" headerText="{resourceManager.getString('default','datagrid.headercaption.meter')}" width="100"></s:GridColumn>
									<s:GridColumn dataField="trsf_opn_amb" headerText="{resourceManager.getString('default','datagrid.headercaption.openambient')}" width="140"></s:GridColumn>
									<s:GridColumn dataField="trsf_cls_amb" headerText="{resourceManager.getString('default','datagrid.headercaption.closingambient')}" width="140"/>
									<s:GridColumn dataField="trsf_opn_cor" headerText="{resourceManager.getString('default','datagrid.headercaption.opencorrected')}" width="140"/>
									<s:GridColumn dataField="trsf_cls_cor" headerText="{resourceManager.getString('default','datagrid.headercaption.closecorrected')}" width="140"/>
									<s:GridColumn dataField="trsf_open_kg" headerText="{resourceManager.getString('default','datagrid.headercaption.openmass')}" width="140"/>
									<s:GridColumn dataField="trsf_close_kg" headerText="{resourceManager.getString('default','datagrid.headercaption.closemass')}" width="140"/>
								</s:ArrayList>
							</s:columns>
						</s:DataGrid>
					</s:NavigatorContent>
					<s:NavigatorContent width="100%" height="100%" label="{resourceManager.getString('default','global.lbl.baseproductdetails')}">
						<s:DataGrid id="baseDatagrid" width="100%" height="100%" requestedRowCount="5" sortableColumns="false" editable="false" editable.edit="true" dataProvider="{baseProductDetails}" 
									gridItemEditorSessionSave="baseDatagrid_gridItemEditorSessionSaveHandler(event)" creationComplete="baseDatagrid_creationCompleteHandler(event)"> 
							<s:columns>
								<s:ArrayList>
									<s:GridColumn dataField="BASE_CODE" 		headerText="{resourceManager.getString('default','datagrid.headercaption.code')}" 	width="140" editable="false"/>
									<s:GridColumn dataField="BASE_NAME" 		headerText="{resourceManager.getString('default','datagrid.headercaption.name')}" 	width="200" editable="false"/>
									<s:GridColumn dataField="TRSB_TK_TANKCODE" 	headerText="{resourceManager.getString('default','TANK_CODE')}" 			width="120"/>
									<s:GridColumn dataField="TRSB_AVL" 			headerText="{resourceManager.getString('default','datagrid.headercaption.amb')}"      	width="100"/>
									<s:GridColumn dataField="TRSB_CVL"  		headerText="{resourceManager.getString('default','datagrid.headercaption.std')}"      	width="100"/>
									<s:GridColumn dataField="TRSB_KG"   		headerText="{resourceManager.getString('default','datagrid.headercaption.mass')}"         	width="100"/>
									<s:GridColumn dataField="TRSB_DNS" 			headerText="{resourceManager.getString('default','datagrid.headercaption.density')}"   	width="110"/>
									<s:GridColumn dataField="TRSB_TMP" 			headerText="{resourceManager.getString('default','datagrid.headercaption.temp')}"  	width="90"/>
									<s:GridColumn dataField="TRSB_API" 			headerText="{resourceManager.getString('default','datagrid.headercaption.API')}"   	width="90"/>
									<s:GridColumn dataField="TRSB_TMP_F" 			headerText="{resourceManager.getString('default','datagrid.headercaption.tempF')}"  	width="90"/>
								</s:ArrayList>
							</s:columns>
						</s:DataGrid>
					</s:NavigatorContent>
				</mx:TabNavigator>
			</s:VGroup>	
		</s:HGroup>
		<s:HGroup width="100%" height="26" paddingTop="2" paddingBottom="2" includeIn="edit">
			<s:Spacer width="100%"/>
			<components:DKI_Button id="btn" label="{resourceManager.getString('default','global.lbl.commitrepost')}" type="update" click="createTransactionHandler(event)" visible="false" includeInLayout="false"/> 
			<components:DKI_Button id="btnUpdate" label="{resourceManager.getString('default','UPDATE')}" type="update" click="updateTransactionHandler(event)" visible="true" includeInLayout="true"/> 
		</s:HGroup>
	</s:Panel>
</s:Panel>
