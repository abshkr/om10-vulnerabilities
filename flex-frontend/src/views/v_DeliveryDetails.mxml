<?xml version="1.0" encoding="utf-8"?>
<s:VGroup xmlns:fx="http://ns.adobe.com/mxml/2009"
		  xmlns:s="library://ns.adobe.com/flex/spark"
		  xmlns:mx="library://ns.adobe.com/flex/mx"
		  xmlns:components="components.*"
		  creationComplete="creationCompleteHandler(event)"
		  gap="2" width="100%" height="100%">
	
	<s:states>
		<s:State name="normal" enterState="this.toolbar.enabled=true"/>
		<s:State name="widget" enterState="this.toolbar.enabled=true"/>
		<s:State name="edit" enterState="callLater(function():void{dataGrid.ensureCellIsVisible(idx);});ddiGrid.enabled=true;this.toolbar.enabled=false"/>
		<s:State name="create" enterState="ddiGrid.enabled=false;this.toolbar.enabled=false"/>
		<s:State name="detail" enterState="view_detailsHandler(event);ddiGrid.enabled=true;this.toolbar.enabled=false"/>
	</s:states>
	
	<fx:Script>
		<![CDATA[
			import com.adobe.fiber.runtime.lib.DateTimeFunc;
			
			import components.ActionDialog;
			import components.ConfirmDialog;
			import components.DeleteDialog;
			import components.ErrorDialog;
			import components.ExportData;
			import components.MessageDialog;
			import components.PartnerChooser;
			import components.TransactionsDlg;
			import components.ViewPopupDlg;
			
			import dm.remoteBulkListService;
			import dm.remoteDataService;
			import dm.remoteListService;
			import dm.utils.tools;
			
			import flash.events.KeyboardEvent;
			import flash.globalization.LocaleID;
			import flash.utils.ByteArray;
			
			import flashx.textLayout.container.ScrollPolicy;
			
			import mx.collections.ArrayCollection;
			import mx.controls.Alert;
			import mx.controls.DateField;
			import mx.events.FlexEvent;
			import mx.managers.PopUpManager;
			import mx.rpc.events.ResultEvent;
			import mx.utils.ObjectUtil;
			import mx.utils.StringUtil;
			import mx.validators.RegExpValidator;
			
			import renderers.DKI_HeaderColumn_Renderer;
			
			import spark.components.ToggleButton;
			import spark.components.VScrollBar;
			import spark.components.gridClasses.IGridItemRenderer;
			import spark.events.GridEvent;
			import spark.events.GridItemEditorEvent;
			import spark.events.GridSelectionEvent;
			import spark.events.IndexChangeEvent;
			
			import views.v_OfflineMessaging;
			
			
			public static const MAIN_WINDOW_WIDTH:int = 1500;
			
			[Bindable] public var readOnly:Boolean = false;
			[Bindable] public var canUpdate:Boolean = false;
			[Bindable] public var canCreate:Boolean = false;
			[Bindable] public var canDelete:Boolean = false;
			[Bindable] public var hasPassword:Boolean = false;
			
			[Bindable] public var canEditOfflineMessage:Boolean = true;
			
			[Bindable] public var labelWidth:uint = 100;
			[Bindable] public var labelHeight:uint = 26;
			[Bindable] public var fieldWidth:uint = 200;
			[Bindable] public var fieldHeight:uint = 26;
			[Bindable] public var spaceWidth:uint = 15;
			[Bindable] public var spaceHeight:uint = 2;
			
			private var idx:int=-1;
			
			private var currentFilter:String=null;
			private var currentOrder:String='dd_number';
			private var currentDirection:String="ASC";
			
			private var currentOffset:int=0;
			private var currentPageSize:int=1000;
			[Bindable] private var totalLength:int=0;
			[Bindable] private var currentLength:int=0;
			
			private var currentFields:Object=new Object();
			private var currentTypes:Object=new Object();
			//private var currentSorts:Object=new Object();
			//private var currentOrders:Object=new Object();
			private var currentSorts:Object={dd_number:'ASC'};
			private var currentOrders:Object={dd_number:1};
			private var currentSortSeq:int=0;
			
			
			private var confirmReport:ActionDialog;
			private var confirmSave:ActionDialog;
			private var errorDialog:ErrorDialog;
			
			//private var exportContents:String="";
			private var f:FileReference = new FileReference();
			
			
			//private var getData:Responder = new Responder(getData_resultHandler);
			
			//private var pagedRecords:ArrayCollection=new ArrayCollection();
			//private var pagedRecords:remoteDataService = new remoteDataService( "DeliveryDetailService.getPaged", getData, null );
			[Bindable] private var pagedRecords:remoteListService;
			
			[Bindable] private var ddiList:remoteDataService = new remoteDataService( "DeliveryDetailService.getDeliveryDetailItems", null, ddiList_resultHandler );
			[Bindable] private var dddList:remoteDataService = new remoteDataService( "DeliveryDetailService.getDeliveryDetailDNTemplates", null, dddList_resultHandler );
			[Bindable] private var dbList:remoteDataService = new remoteDataService( "DeliveryDetailService.getDeliveryBOLTemplates", null, dbList_resultHandler );
			
			private var deleteAction:remoteDataService = new remoteDataService( "DeliveryDetailService.delete", null, deleteData_resultHandler, 1 );
			private var createAction:remoteDataService = new remoteDataService( "DeliveryDetailService.create", null, createData_resultHandler, 1 );
			private var updateAction:remoteDataService = new remoteDataService( "DeliveryDetailService.update", null, updateData_resultHandler, 1 );
			
//			private var ddiAddiInfoCounter:remoteDataService = new remoteDataService( "DdiAdditionalLineService.countAdditionalInfo", null, ddiAddiInfoCounter_resultHandler, 1 );
//			private var dddAddiInfoCounter:remoteDataService = new remoteDataService( "DddAdditionalLineService.countAdditionalInfo", null, dddAddiInfoCounter_resultHandler, 1 );
			
			private var ddKeyChecker:remoteDataService = new remoteDataService( "DeliveryDetailService.isDeliveryDetailExisted", null, ddKeyChecker_resultHandler, 2 );
			private var ddiKeyChecker:remoteDataService = new remoteDataService( "DeliveryDetailService.isDeliveryDetailItemExisted", null, ddiKeyChecker_resultHandler, 2 );
			private var dddKeyChecker:remoteDataService = new remoteDataService( "DeliveryDetailService.isDeliveryDetailDNTemplateExisted", null, dddKeyChecker_resultHandler, 2 );
			private var dbKeyChecker:remoteDataService = new remoteDataService( "DeliveryDetailService.isDeliveryBOLTemplateExisted", null, dbKeyChecker_resultHandler, 2 );
			private var deletionChecker:remoteDataService = new remoteDataService( "DeliveryDetailService.isDeliveryDetailUsedByPrinting", null, deletionChecker_resultHandler, 2 );
			
			private var gridColumnSequenceMaker:remoteDataService = new remoteDataService( "ScreenGridColumnService.lookupGridColumnSequence", null, gridColumnSequenceMaker_resultHandler, 1 );
			private var _gridColumnSequenceString:String="";
			private var formColumnSettingsMaker:remoteDataService = new remoteDataService( "ScreenFormColumnService.lookupFormColumnSettings", null, formColumnSettingsMaker_resultHandler, 1 );
			private var _formColumnSettingsString:String="";
			
			
			[Bindable] private var supplierList:remoteDataService = new remoteDataService( "ListLibraryService.lookupCompany", null, lookupSupplier_resultHandler );
			
			[Bindable] private var loadTypeList:remoteDataService = new remoteDataService( "DeliveryDetailService.lookupDeliveryDetailLoadType", null, lookupLoadType_resultHandler );
			[Bindable] private var deliveryTypeList:remoteDataService = new remoteDataService( "DeliveryDetailService.lookupDeliveryDetailDelvType", null, lookupDeliveryType_resultHandler );
			
			[Bindable] private var bolTemplateList:remoteDataService = new remoteDataService( "DeliveryDetailService.getAllTemplatesByType", null, bolTemplateList_resultHandler );
			[Bindable] private var dnTemplateList:remoteDataService = new remoteDataService( "DeliveryDetailService.getAllTemplatesByType", null, dnTemplateList_resultHandler );
			[Bindable] private var tripCompartmentsList:remoteDataService = new remoteDataService( "DeliveryDetailService.getTripCompartments", null, tripCompartmentsList_resultHandler );
			[Bindable] private var tripProductsList:remoteDataService = new remoteDataService( "DeliveryDetailService.getTripProducts", null, tripProductsList_resultHandler );
			[Bindable] private var orderProductsList:remoteDataService = new remoteDataService( "DeliveryDetailService.getOrderProducts", null, orderProductsList_resultHandler );
			[Bindable] private var ddiProductsList:ArrayCollection=new ArrayCollection();
			[Bindable] private var availBolTemplateList:ArrayCollection=new ArrayCollection();
			[Bindable] private var availDnTemplateList:ArrayCollection=new ArrayCollection();
			
			
			
			public var parentParams:Object = new Object();
			public var mainListSelection:int = -1;
			private var _saveButtonClicked:Boolean=false;
			
			private var _isAutoFillOn:Boolean = true;
			
			public var isPopupWindow:Boolean=false;
			[Bindable] private var isPartnershipEnabled:Boolean = false;
			
			public var partnershipPopup:ViewPopupDlg = new ViewPopupDlg( "Partnership List", new PartnerChooser(), afterClosePartnerList );
			
			public var offlineMessagingPopup:ViewPopupDlg = new ViewPopupDlg( "Offline Messaging", new v_OfflineMessaging(), null );
			
			public var ddiAdditionalInfoPopup:ViewPopupDlg = new ViewPopupDlg( "Delivery Details Item Additional Info", new v_DdiAdditionalInfo(), null );
			public var dddAdditionalInfoPopup:ViewPopupDlg = new ViewPopupDlg( "Delivery Details DN Additional Info", new v_DddAdditionalInfo(), null );
			
			public var deliveryLineSettings:ArrayCollection = new ArrayCollection();

			
			protected function creationCompleteHandler(event:FlexEvent):void
			{
				this.formColumnSettingsMaker.service( "DELIVERYDETAILS" );
				
				trace ("-------------start creationCompleteHandler");
				pagedRecords = new remoteListService( this.dataGrid, "DeliveryDetailService.getPaged", null, getPageData_resultHandler );
				//resourceManager.localeChain = ['zh_CN'];
				//global.LanguageCode="CHN";
				this.gridColumnSequenceMaker.service( "DELIVERYDETAILS" );
				
				
				var value:String = global.getValueFromSiteConfigSettings( "SITE_AUTO_FILTER_WHEN_OPEN_SCREEN" );
				if ( value == 'Y' )
				{
					if ( this.isPopupWindow == false )
					{
						this.startFiltering();
					}
				}
				else
				{
					;
				}
				
				if ( global.getValueFromSiteConfigSettings("SITE_PARTNERSHIP_ENABLED") == 'Y' )
				{
					this.isPartnershipEnabled = this.canUpdate;
				}
				else
				{
					this.isPartnershipEnabled = false;
				}
				
				this.supplierList.service( 1 );
				this.loadTypeList.service( );
				this.deliveryTypeList.service( );
				
				this.bolTemplateList.service( 1 );
				this.dnTemplateList.service( 2 );
				trace ("------------End creationCompleteHandler");
				
				
				//trace("this.grid.scroller1111", this.dataGrid.scroller);
				//trace("this.grid.scroller.verticalScrollBar.value", this.dataGrid.scroller.verticalScrollBar.value);
				this.dataGrid.scroller.verticalScrollBar.addEventListener(Event.CHANGE, verticalScrollBarChanged);
				this.dataGrid.addEventListener(KeyboardEvent.KEY_UP, reportKeyUp);
				this.dataGrid.columnHeaderGroup.addEventListener(GridEvent.GRID_CLICK, headerClickListener);
					
			}
			
			protected function formColumnSettingsMaker_resultHandler():void
			{
				this._formColumnSettingsString =  formColumnSettingsMaker.dataString;
				
				this.deliveryLineSettings = global.adjustFormGridSettings( this._formColumnSettingsString );
			}
			
			
			protected function startLoadingPages():void
			{
				killBtn.setStyle("chromeColor","0xff0000");
				this.killBtn.includeInLayout=true;
				this.killBtn.visible = true;
				this.killBtn.enabled = true;
				
				resumeBtn.setStyle("chromeColor","0x00ff00");
				this.resumeBtn.includeInLayout=true;
				this.resumeBtn.visible = true;
				this.resumeBtn.enabled = false;
				
				this.btn_create.enabled = false
				this.btn_export.enabled = false;
				this.dataGrid.enabled = false;
				this.toolbar.enabled = false;
				//this.panel.enabled = false;
				
				currentLength=0;
				currentOffset = 0;
				
				//this.exportContents = this.genData.prepExportHeader( dataGrid );
				
				//currentPage=1;
				pagedRecords.currentPage=1;
				pagedRecords.removeAll();
				pagedRecords.refresh();
				this.pb.values(0, 0);
				//this.pagedRecords.service( currentFields, currentTypes, currentSorts, currentOrders, currentPage, currentPageSize );
				this.pagedRecords.listService( currentFields, currentTypes, currentSorts, currentOrders );
			}
			
			protected function endLoadingPages():void
			{
				this.btn_create.enabled = this.canCreate;
				this.btn_export.enabled = true;
				this.dataGrid.enabled = true;
				this.toolbar.enabled = true;
				//this.panel.enabled = true;
				//this.pb.values(totalCount, totalCount);
				this.pb.values(pagedRecords.totalCount, pagedRecords.totalCount, true);
				
				this.killBtn.includeInLayout=true;
				this.killBtn.visible = true;
				this.killBtn.enabled = false;
				
				this.resumeBtn.includeInLayout=true;
				this.resumeBtn.visible = true;
				//if ( totalLength > totalCount )
				if ( pagedRecords.totalLength > pagedRecords.totalCount )
				{
					this.resumeBtn.enabled = true;
				}
				else
				{
					this.resumeBtn.enabled = false;
				}
			}
			
			protected function exportCsvHandler(event:MouseEvent):void
			{
				this.confirmReport = new ActionDialog( doExport, cancelExport, resourceManager.getString('default','CONFIRM_REPORT_CSV') );
				
				//this.startLoadingPages();
			}
			
			private function getPageData_resultHandler():void
			{
				// if not finished
				if(pagedRecords.length < pagedRecords.totalCount)
				{
					pb.values(pagedRecords.length,pagedRecords.totalCount)
				}
				else
				{
					this.adjustOfflineMessageEditability();
					
					pb.values(pagedRecords.length,pagedRecords.totalCount)
					
					this.endLoadingPages();
					
					this.dataGrid.selectedIndex = this.mainListSelection;
					if ( this.mainListSelection >= 0)
					{
						this.dataGrid_selectionChangeHandler(null);
					}
					this.mainListSelection = -1;
					
				}
				
			}
			
			
			public function doExport():void
			{
				//genData.prepOther(dataGrid,'tankGrouplist.csv', this.pagedRecords);
				
				//f.save( this.exportContents, "tankGrouplist.csv" );
				f.save( pagedRecords.exportContents, "deliveryDetaillist.csv" );
				
				this.endLoadingPages();
			}
			
			
			public function cancelExport():void
			{
				this.endLoadingPages();
				
				//trace( this.exportContents );
			}
			
			public function doNothing():void
			{
			}
			
			
			private function verticalScrollBarChanged(event:Event):void
			{
				if ( this.dataGrid.scroller != null)
				{
					var vs:VScrollBar;
					vs = this.dataGrid.scroller.verticalScrollBar;
					//trace("this.grid.scroller.verticalScrollBar.value", vs.value, vs.maximum, vs.minimum, vs.stepSize, vs.pageSize, vs.	snapInterval);
				}
				else
				{
					trace("grid is changed");
				}
			}
			
			private function reportKeyUp(event:KeyboardEvent):void
			{
				if ( this.dataGrid.scroller != null)
				{
					var vs:VScrollBar;
					vs = this.dataGrid.scroller.verticalScrollBar;
					//trace("this.grid.scroller.verticalScrollBar.value", vs.value, vs.maximum, vs.minimum, vs.stepSize, vs.pageSize, vs.	snapInterval);
				}
				else
				{
					trace("grid is changed");
				}
			}
			
			private function headerClickListener(event:GridEvent):void
			{
				if(event.column.dataField!='prod_items')
				{
					var currentRenderer:IGridItemRenderer;
					var dir:String;
					
					if ( global.sortingBySingleColumn == true )
					{	// sorted by single column only
						for (var i:int=0; i < dataGrid.columns.length; i++)
						{
							currentRenderer = dataGrid.columnHeaderGroup.getHeaderRendererAt(i);
							if ( currentRenderer != null)
							{
								(currentRenderer as DKI_HeaderColumn_Renderer).setImage('');
							}
							//(currentRenderer as DKI_HeaderColumn_Renderer).setImage(''); 
						}
					}
					else
					{	// sorted by multiple columns
						;
					}
					currentRenderer = dataGrid.columnHeaderGroup.getHeaderRendererAt(event.columnIndex);
					
					if( currentSorts.hasOwnProperty(event.column.dataField ) )
					{
						dir = currentSorts[event.column.dataField];
						if( dir=="ASC" )
						{
							dir = "DESC";
						}
						else if ( dir == "DESC" )
						{
							dir = "";
						}
						else if ( dir == "" )
						{
							dir = "ASC";
						}
						else 
						{
							dir = "ASC";
						}
						
						if ( dir != "" )
						{
							currentSorts[event.column.dataField] = dir;	
						}
						else
						{
							delete currentSorts[event.column.dataField];
							delete currentOrders[event.column.dataField];
						}
					}
					else
					{
						if ( global.sortingBySingleColumn == true )
						{	// sorted by single column only
							currentSorts = new Object();
							currentOrders = new Object();
							currentSortSeq = 0;
						}
						else
						{	// sorted by multiple columns
							;
						}
						currentSorts[event.column.dataField] = "ASC";	
						dir = currentSorts[event.column.dataField];
						currentSortSeq += 1;
						currentOrders[event.column.dataField] = currentSortSeq;	
					}
					(currentRenderer as DKI_HeaderColumn_Renderer).setImage(dir);
					this.startFiltering();
				}
			}
			
			
			protected function ddiList_resultHandler():void
			{
				trace ("--------------Start ddiList_resultHandler");
				
				if ( ddiList.length>0 )
				{
					this.ddiGrid.dataProvider = null;
					this.ddiGrid.dataProvider = ddiList;
				}
				else
				{
					this.ddiGrid.dataProvider = null;
				}
				
				trace ("----------------End ddiList_resultHandler");
			}
			
			protected function dddList_resultHandler():void
			{
				trace ("--------------Start dddList_resultHandler");
				
				if ( dddList.length>0 )
				{
					this.dddGrid.dataProvider = null;
					this.dddGrid.dataProvider = dddList;
				}
				else
				{
					this.dddGrid.dataProvider = null;
				}
				
				this.adjustDddList();
				trace ("----------------End dddList_resultHandler");
			}
			
			protected function dbList_resultHandler():void
			{
				trace ("--------------Start dbList_resultHandler");
				
				if ( dbList.length>0 )
				{
					this.dbGrid.dataProvider = null;
					this.dbGrid.dataProvider = dbList;
				}
				else
				{
					this.dbGrid.dataProvider = null;
				}
				
				this.adjustDbList();
				trace ("----------------End dbList_resultHandler");
			}
			
			protected function dataGrid_selectionChangeHandler(event:GridSelectionEvent):void
			{
				if(currentState != 'widget')
				{
					idx=dataGrid.selectedIndex;
					//dataGrid.ensureCellIsVisible(idx+11);
					dataGrid.ensureCellIsVisible(idx);
					
					currentState = "edit";
					//currentState = "detail";
					this.btn_save.enabled = this.canUpdate;
					
					if ( _formColumnSettingsString.length > 0 )
					{
						global.adjustFormFieldSettings( _formColumnSettingsString.substr(1), this );
					}
					
					// get selectedIndex for company list
					if ( this.dataGrid.selectedIndex>=0 )
					{
						dd_supp_code.selectedIndex = tools.getItemIndexFromCode( this.dataGrid.selectedItem.dd_supp_code, this.supplierList, "cmpy_code");
					}
					
					// get the delivery detail itemls
					this.btn_createLineDDI.enabled = true;
					this.btn_deleteLineDDI.enabled = false;
					this.btn_updateLineDDI.enabled = false;
					this.btn_manageAddiInfoDDI.enabled = false;
					
					this.ddiList.service( dataGrid.selectedItem.dd_number, dataGrid.selectedItem.dd_supp_code, dataGrid.selectedItem.dd_tripord_no, dataGrid.selectedItem.dd_ld_type  );
					
					// get the delivery detail DN templates
					this.btn_createLineDDD.enabled = true;
					this.btn_deleteLineDDD.enabled = false;
					this.btn_updateLineDDD.enabled = false;
					this.btn_manageAddiInfoDDI.enabled = false;
					
					this.dddList.service( dataGrid.selectedItem.dd_number, dataGrid.selectedItem.dd_supp_code, dataGrid.selectedItem.dd_tripord_no, dataGrid.selectedItem.dd_ld_type  );
					
					// get the delivery BOL templates
					this.btn_createLineDB.enabled = true;
					this.btn_deleteLineDB.enabled = false;
					this.btn_updateLineDB.enabled = false;
					
					this.dbList.service( dataGrid.selectedItem.dd_supp_code, dataGrid.selectedItem.dd_tripord_no, dataGrid.selectedItem.dd_ld_type  );
					
					// get lists
					//this.bolTemplateList.service( 1 );
					//this.dnTemplateList.service( 2 );
					if ( this.fltr_loadtype.selectedItem.load_type_id == 1 )
					{
						this.tripProductsList.service( this.fltr_supplier.selectedItem.cmpy_code, this.fltr_triporder.text );
					}
					if ( this.fltr_loadtype.selectedItem.load_type_id == 2 )
					{
						this.tripCompartmentsList.service( this.fltr_supplier.selectedItem.cmpy_code, this.fltr_triporder.text );
					}
					if ( this.fltr_loadtype.selectedItem.load_type_id == 3 )
					{
						this.orderProductsList.service( this.fltr_supplier.selectedItem.cmpy_code, this.fltr_triporder.text );
					}
				}
			}
			
			protected function ddiGrid_selectionChangeHandler(event:GridSelectionEvent):void
			{
				if ( ddiGrid.selectedIndex < 0 )
				{
					this.btn_deleteLineDDI.enabled = false;
					this.btn_updateLineDDI.enabled = false;
					this.btn_manageAddiInfoDDI.enabled = false;
					return;
				}
				
				tools.pr( ddiGrid.selectedItem );
				
				if ( ddiGrid.selectedItem.ddi_action == '+' )
				{
					this.btn_deleteLineDDI.enabled = true;
					this.btn_updateLineDDI.enabled = false;
					this.btn_manageAddiInfoDDI.enabled = false;
				}
				else if ( ddiGrid.selectedItem.ddi_action == '-' )
				{
					this.btn_deleteLineDDI.enabled = true;
					this.btn_updateLineDDI.enabled = false;
					this.btn_manageAddiInfoDDI.enabled = false;
				}
				else if ( ddiGrid.selectedItem.ddi_action == '*' )
				{
					this.btn_deleteLineDDI.enabled = true;
					this.btn_updateLineDDI.enabled = false;
					this.btn_manageAddiInfoDDI.enabled = false;
				}
				else
				{
					this.btn_deleteLineDDI.enabled = true;
					this.btn_updateLineDDI.enabled = true;
					this.btn_manageAddiInfoDDI.enabled = true;
				}
				
				
				
				trace( "ddItemGrid.selectedItem", ddiGrid.selectedItem );

				var ddi_dd_number:String;
				var ddi_dd_supp_code:String;
				var ddi_dd_tripord_no:int;
				var ddi_dd_ld_type:int;
				var ddi_line_item_num:int;
				ddi_dd_number = ddiGrid.selectedItem.ddi_dd_number;
				ddi_dd_supp_code = ddiGrid.selectedItem.ddi_dd_supp_code;
				ddi_dd_tripord_no = ddiGrid.selectedItem.ddi_dd_tripord_no;
				ddi_dd_ld_type = ddiGrid.selectedItem.ddi_dd_ld_type;
				ddi_line_item_num = ddiGrid.selectedItem.ddi_line_item_num;
				
				ddiKeyChecker.service( ddi_dd_number, ddi_dd_supp_code, ddi_dd_tripord_no, ddi_dd_ld_type, ddi_line_item_num );
			}
			
			protected function dddGrid_selectionChangeHandler(event:GridSelectionEvent):void
			{
				if ( dddGrid.selectedIndex < 0 )
				{
					this.btn_deleteLineDDD.enabled = false;
					this.btn_updateLineDDD.enabled = false;
					this.btn_manageAddiInfoDDD.enabled = false;
					return;
				}
				
				tools.pr( dddGrid.selectedItem );
				
				if ( dddGrid.selectedItem.ddd_action == '+' )
				{
					this.btn_deleteLineDDD.enabled = true;
					this.btn_updateLineDDD.enabled = false;
					this.btn_manageAddiInfoDDD.enabled = false;
				}
				else if ( dddGrid.selectedItem.ddd_action == '-' )
				{
					this.btn_deleteLineDDD.enabled = true;
					this.btn_updateLineDDD.enabled = false;
					this.btn_manageAddiInfoDDD.enabled = false;
				}
				else if ( dddGrid.selectedItem.ddd_action == '*' )
				{
					this.btn_deleteLineDDD.enabled = true;
					this.btn_updateLineDDD.enabled = false;
					this.btn_manageAddiInfoDDD.enabled = false;
				}
				else
				{
					this.btn_deleteLineDDD.enabled = true;
					this.btn_updateLineDDD.enabled = true;
					this.btn_manageAddiInfoDDD.enabled = true;
				}
				
				
				
				trace( "ddDelvNoteGrid.selectedItem", dddGrid.selectedItem );
				
				var ddd_dd_number:String;
				var ddd_dd_supp_code:String;
				var ddd_dd_tripord_no:int;
				var ddd_dd_ld_type:int;
				var ddd_templ_id:String;
				ddd_dd_number = dddGrid.selectedItem.ddd_dd_number;
				ddd_dd_supp_code = dddGrid.selectedItem.ddd_dd_supp_code;
				ddd_dd_tripord_no = dddGrid.selectedItem.ddd_dd_tripord_no;
				ddd_dd_ld_type = dddGrid.selectedItem.ddd_dd_ld_type;
				ddd_templ_id = dddGrid.selectedItem.ddd_templ_id;
				
				dddKeyChecker.service( ddd_dd_number, ddd_dd_supp_code, ddd_dd_tripord_no, ddd_dd_ld_type, ddd_templ_id );
			}
			
			protected function dbGrid_selectionChangeHandler(event:GridSelectionEvent):void
			{
				if ( dbGrid.selectedIndex < 0 )
				{
					this.btn_deleteLineDB.enabled = false;
					this.btn_updateLineDB.enabled = false;
					return;
				}
				
				tools.pr( dbGrid.selectedItem );
				
				if ( dbGrid.selectedItem.db_action == '+' )
				{
					this.btn_deleteLineDB.enabled = true;
					this.btn_updateLineDB.enabled = false;
				}
				else if ( dbGrid.selectedItem.db_action == '-' )
				{
					this.btn_deleteLineDB.enabled = true;
					this.btn_updateLineDB.enabled = false;
				}
				else if ( dbGrid.selectedItem.db_action == '*' )
				{
					this.btn_deleteLineDB.enabled = true;
					this.btn_updateLineDB.enabled = false;
				}
				else
				{
					this.btn_deleteLineDB.enabled = true;
					this.btn_updateLineDB.enabled = true;
				}
				
				
				
				trace( "ddDelvNoteGrid.selectedItem", dbGrid.selectedItem );
				
				var db_supp_code:String;
				var db_tripord_no:int;
				var db_ld_type:int;
				var db_templ_id:String;
				db_supp_code = dbGrid.selectedItem.db_supp_code;
				db_tripord_no = dbGrid.selectedItem.db_tripord_no;
				db_ld_type = dbGrid.selectedItem.db_ld_type;
				db_templ_id = dbGrid.selectedItem.db_templ_id;
				
				dbKeyChecker.service( db_supp_code, db_tripord_no, db_ld_type, db_templ_id );
			}
			
			protected function cancel_clickHandler():void
			{
				clearDetail();
				if ( currentState== "create" )
				{
					dataGrid.enabled=true;
				}
				currentState="normal";
				dataGrid.selectedIndex = -1;
			}			
			
			protected function gridColumnSequenceMaker_resultHandler():void
			{
				this._gridColumnSequenceString =  gridColumnSequenceMaker.dataString;
				
				if ( _gridColumnSequenceString.length > 0 )
				{
					global.adjustGridColumnSequence( _gridColumnSequenceString.substr(1), dataGrid );
				}
				
			}

			
			protected function lookupSupplier_resultHandler():void
			{
				if ( currentState == "create" )
				{
					if ( dd_supp_code.selectedIndex > -1 )
					{
						//dd_supp_code.selectedItem = supplierList[dd_supp_code.selectedIndex].cmpy_name;
						dd_supp_code.selectedIndex = tools.getItemIndexFromCode( supplierList[dd_supp_code.selectedIndex].cmpy_code, this.supplierList, "cmpy_code");
					}
				}
				if ( currentState == "edit" || currentState == "detail" )
				{
					//dd_supp_code.selectedItem = dataGrid.selectedItem.dd_supp_name;
					dd_supp_code.selectedIndex = tools.getItemIndexFromCode( this.dataGrid.selectedItem.dd_supp_code, this.supplierList, "cmpy_code");
				}
				
				if ( currentFields.hasOwnProperty( "dd_supp_code" ) )
				{
					this.fltr_supplier.selectedIndex = tools.getItemIndexFromCode( currentFields["dd_supp_code"], supplierList, "cmpy_code");
				}
			}
			
			private function lookupLoadType_resultHandler():void
			{
				if ( currentState == "create" )
				{
					if ( dd_ld_type.selectedIndex > -1 )
					{
						dd_ld_type.selectedItem = loadTypeList[dd_ld_type.selectedIndex].load_type_name;
					}
				}
				if ( currentState == "edit" || currentState == "detail" )
				{
					dd_ld_type.selectedItem = dataGrid.selectedItem.dd_load_typename;
				}
				
				if ( currentFields.hasOwnProperty( "dd_ld_type" ) )
				{
					this.fltr_loadtype.selectedIndex = tools.getItemIndexFromCode( currentFields["dd_ld_type"], loadTypeList, "load_type_id");
				}
			}
			
			private function lookupDeliveryType_resultHandler():void
			{
				//global.contactLineTypes = new ArrayCollection( this.loadTypeList.source );
			}
			
			
			private function bolTemplateList_resultHandler():void
			{
				if ( currentState == "normal" )
				{
					return;
				}
				this.ddb_templates.dataProvider = bolTemplateList;
			}
			
			private function dnTemplateList_resultHandler():void
			{
				if ( currentState == "normal" )
				{
					return;
				}
				this.ddd_templates.dataProvider = dnTemplateList;
			}
			
			private function tripCompartmentsList_resultHandler():void
			{
				if ( currentState == "normal" )
				{
					return;
				}
				this.ddi_products.dataProvider = tripCompartmentsList;
				if ( currentState == "create" && this._isAutoFillOn==true)
				{
					this.addMultipleDDIs();
				}
			}
			
			private function tripProductsList_resultHandler():void
			{
				if ( currentState == "normal" )
				{
					return;
				}
				this.ddi_products.dataProvider = tripProductsList;
				if ( currentState == "create" && this._isAutoFillOn==true)
				{
					this.addMultipleDDIs();
				}
			}
			
			private function orderProductsList_resultHandler():void
			{
				if ( currentState == "normal" )
				{
					return;
				}
				this.ddi_products.dataProvider = orderProductsList;
				if ( currentState == "create" && this._isAutoFillOn==true)
				{
					this.addMultipleDDIs();
				}
			}

			
			
			protected function fltr_supplier_changeHandler(event:IndexChangeEvent):void
			{
				adjustOfflineMessageEditability();
				
				if (currentState == "edit") clearDetail();
				startFiltering();
			}
			
			protected function fltr_loadtype_changeHandler(event:IndexChangeEvent):void
			{
				adjustOfflineMessageEditability();
				
				if (currentState == "edit") clearDetail();
				startFiltering();
			}
			
			protected function fltr_triporder_keyUpHandler(event:KeyboardEvent):void
			{
				adjustOfflineMessageEditability();
				if ( event.keyCode != 13 )
				{
					return;
				}
				
				if (currentState == "edit") clearDetail();
				startFiltering();
			}
			
			protected function fltr_ddnumber_keyUpHandler(event:KeyboardEvent):void
			{
				adjustOfflineMessageEditability();
				if ( event.keyCode != 13 )
				{
					return;
				}
				
				if (currentState == "edit") clearDetail();
				startFiltering();
			}
			
			private function startFiltering():void
			{
				var fields:Object;
				var types:Object;
				
				//interruptor=false;
				pagedRecords.interruptor=false;
				
				fields = new Object();
				types = new Object();
				
				if (fltr_supplier.selectedIndex > -1) 
				{
					fields["dd_supp_code"] = supplierList[fltr_supplier.selectedIndex].cmpy_code;
					if ( fields["dd_supp_code"] == "ANY" )
					{
						fields["dd_supp_code"] = "";
					}
				}
				else
				{
					if ( global.setComboBoxNoSelection == true )
					{
						fltr_supplier.selectedIndex = -1;
					}
					fields["dd_supp_code"] = "";
				}
				types["dd_supp_code"] = "EXACT_STRING";
				
				if (fltr_loadtype.selectedIndex > -1) 
				{
					fields["dd_ld_type"] = loadTypeList[fltr_loadtype.selectedIndex].load_type_id;
				}
				else
				{
					if ( global.setComboBoxNoSelection == true )
					{
						fltr_loadtype.selectedIndex = -1;
					}
					fields["dd_ld_type"] = "";
				}
				types["dd_ld_type"] = "EXACT_STRING";
				
				
				if(fltr_ddnumber.text!='')
				{					
					fields["dd_number"] = fltr_ddnumber.text;
				}
				else
				{
					fields["dd_number"] = "";
				}
				types["dd_number"] = "STRING";
				
				if(fltr_triporder.text!='')
				{					
					fields["dd_tripord_no"] = fltr_triporder.text;
				}
				else
				{
					fields["dd_tripord_no"] = "";
				}
				types["dd_tripord_no"] = "STRING";
				
				currentFields = fields;
				currentTypes = types;
				
				this.startLoadingPages();
				
				trace("this.grid.scroller3333", this.dataGrid.scroller);
				trace("this.grid.scroller.verticalScrollBar.value", this.dataGrid.scroller.verticalScrollBar.value);
			}
			
			private function findByPrimaryKey(dd_number:String, dd_supp_code:String, dd_tripord_no:int, dd_ld_type:int):void
			{
				var fields:Object;
				var types:Object;
				
				fields = new Object();
				types = new Object();
				
				fields["dd_number"] = dd_number;
				types["dd_number"] = "EXACT_STRING";
				fields["dd_supp_code"] = dd_supp_code;
				types["dd_supp_code"] = "EXACT_STRING";
				fields["dd_tripord_no"] = dd_tripord_no;
				types["dd_tripord_no"] = "NUMBER";
				fields["dd_ld_type"] = dd_ld_type;
				types["dd_ld_type"] = "NUMBER";
				
				//currentPage=1;
				pagedRecords.currentPage=1;
				pagedRecords.removeAll();
				pagedRecords.refresh();
				//this.pagedRecords.service( fields, types, currentSorts, currentOrders, currentPage, currentPageSize );
				this.pagedRecords.listService( fields, types, currentSorts, currentOrders );
			}
			
			protected function resetRecords(event:MouseEvent):void
			{
				this.setFilters( this.parentParams );
				return;
			}
			
			protected function filterRecords(event:MouseEvent):void
			{
				if (currentState == "edit") clearDetail();
				this.startFiltering();
			}
			
			protected function refreshRecords(event:MouseEvent):void
			{
				if ( currentState != "widget" )
				{
					currentState = 'normal';
					dataGrid.enabled=true;
				}
				clearDetail();
				fltr_ddnumber.text = "";
				fltr_triporder.text = "";
				fltr_supplier.selectedIndex = -1;
				fltr_loadtype.selectedIndex = -1;
				
				dataGrid.selectedIndex = -1;
				currentFilter = null;
				currentOrder = null;
				currentFields = new Object();
				currentTypes = new Object();
				
				currentSorts = new Object();
				currentOrders = new Object();
				var currentRenderer:IGridItemRenderer;
				for (var i:int=0; i < dataGrid.columns.length; i++)
				{
					currentRenderer = dataGrid.columnHeaderGroup.getHeaderRendererAt(i);
					if ( currentRenderer != null)
					{
						(currentRenderer as DKI_HeaderColumn_Renderer).setImage('');
					}
					//(currentRenderer as DKI_HeaderColumn_Renderer).setImage(''); 
				}
				this.startFiltering();
				//this.startLoadingPages();
				trace("this.grid.scroller2222", this.dataGrid.scroller);
				trace("this.grid.scroller.verticalScrollBar.value", this.dataGrid.scroller.verticalScrollBar.value);
			}
			
			protected function clearDetail(): void
			{
				if (currentState != 'widget')
				{
				}
			}			
			
			private function editRecord():void
			{
				
				if ( this.checkFields() > 0 )
				{
					this.btn_save.enabled = this.canUpdate;
					return;
				}
				
				if ( this.checkItemFields() == false )
				{
					this.btn_save.enabled = this.canUpdate;
					return;
				}
				
				var obj:Object = new Object();
				
				if (dd_supp_code.selectedIndex>=0)
				{
					obj.dd_supp_code = supplierList[dd_supp_code.selectedIndex].cmpy_code;
				}
				else
				{
					obj.dd_supp_code = dataGrid.selectedItem.dd_supp_code;
				}
				
				if (dd_ld_type.selectedIndex>=0)
				{
					obj.dd_ld_type = loadTypeList[dd_ld_type.selectedIndex].load_type_id;
				}
				else
				{
					obj.dd_ld_type = dataGrid.selectedItem.dd_ld_type;
				}
				
				if (dd_delv_type.selectedIndex>=0)
				{
					obj.dd_delv_type = deliveryTypeList[dd_delv_type.selectedIndex].delivery_type_code;
				}
				else
				{
					obj.dd_delv_type = dataGrid.selectedItem.dd_delv_type;
				}
				obj.dd_delv_type = dd_delv_type_txt.text;
				
				obj.dd_veh_arr_time = dateConvertLong.format(dd_veh_arr_time.selectedDate);
				
				obj.dd_number = dd_number.text;
				obj.dd_tripord_no = dd_tripord_no.text;
				obj.dd_route = dd_route.text;
				obj.dd_ship_cond = dd_ship_cond.text;
				obj.dd_phone = dd_phone.text;
				obj.dd_instruction = dd_instruction.text;
				obj.dd_lpg_remark = dd_lpg_remark.text;
				obj.dd_sales_ord_num = dd_sales_ord_num.text;
				obj.dd_cust_po = dd_cust_po.text;
				obj.dd_sale_ord_type = dd_sale_ord_type.text;
				obj.dd_vat_id = dd_vat_id.text;
				obj.dd_sold_to = dd_sold_to.text;
				obj.dd_ship_to = dd_ship_to.text;
				obj.dd_custom_code = dd_custom_code.text;
				obj.dd_lpg_dest_type = dd_lpg_dest_type.text;
				obj.dd_permit_num = dd_permit_num.text;
				obj.dd_sell_cmpy_code = dd_sell_cmpy_code.text;
				
				// delivery detail items
				obj.has_items_ddi = 0;
				var items_ddi:ArrayCollection=new ArrayCollection();
				var x_ddi:Object;
				var actions_ddi:ArrayCollection=new ArrayCollection();
				var action_ddi:Object;
				for each ( x_ddi in this.ddiGrid.dataProvider)
				{
					action_ddi = new Object();
					action_ddi.option = 0;  // do nothing
					trace( "********X", x_ddi.ddi_dd_number, x_ddi.ddi_dd_supp_code, x_ddi.ddi_dd_tripord_no, x_ddi.ddi_dd_ld_type, x_ddi.ddi_line_item_num, x_ddi.ddi_action);
					if ( x_ddi.ddi_action == '+' )
					{
						action_ddi.option = 1;
					}
					else if ( x_ddi.ddi_action == '*' )
					{
						action_ddi.option = 2;
					}
					else if ( x_ddi.ddi_action == '-' )
					{
						action_ddi.option = 3;
					}
					else
					{
						action_ddi.option = 0;
					}
					
					actions_ddi.addItem(action_ddi);
					if ( action_ddi.option == 1 )
					{
						x_ddi.ddi_dd_number = obj.dd_number;
						x_ddi.ddi_dd_supp_code = obj.dd_supp_code;
						x_ddi.ddi_dd_tripord_no = obj.dd_tripord_no;
						x_ddi.ddi_dd_ld_type = obj.dd_ld_type;
					}

					items_ddi.addItem( Object(x_ddi) );
					obj.has_items_ddi = 1;
					trace( "********X", x_ddi.ddi_dd_number, x_ddi.ddi_dd_supp_code, x_ddi.ddi_dd_tripord_no, x_ddi.ddi_dd_ld_type, x_ddi.ddi_line_item_num, "***********action", action_ddi.option);
				}
				obj.ddi_items = items_ddi.source;
				obj.actions_ddi = actions_ddi.source;
				
				// delivery detail DN templates
				obj.has_items_ddd = 0;
				var items_ddd:ArrayCollection=new ArrayCollection();
				var x_ddd:Object;
				var actions_ddd:ArrayCollection=new ArrayCollection();
				var action_ddd:Object;
				for each ( x_ddd in this.dddGrid.dataProvider)
				{
					action_ddd = new Object();
					action_ddd.option = 0;  // do nothing
					trace( "********X", x_ddd.ddd_dd_number, x_ddd.ddd_dd_supp_code, x_ddd.ddd_dd_tripord_no, x_ddd.ddd_dd_ld_type, x_ddd.ddd_templ_id, x_ddd.ddd_action);
					if ( x_ddd.ddd_action == '+' )
					{
						action_ddd.option = 1;
					}
					else if ( x_ddd.ddd_action == '*' )
					{
						action_ddd.option = 2;
					}
					else if ( x_ddd.ddd_action == '-' )
					{
						action_ddd.option = 3;
					}
					else
					{
						action_ddd.option = 0;
					}
					
					actions_ddd.addItem(action_ddd);
					if ( action_ddd.option == 1 )
					{
						x_ddd.ddd_dd_number = obj.dd_number;
						x_ddd.ddd_dd_supp_code = obj.dd_supp_code;
						x_ddd.ddd_dd_tripord_no = obj.dd_tripord_no;
						x_ddd.ddd_dd_ld_type = obj.dd_ld_type;
					}
					
					items_ddd.addItem( Object(x_ddd) );
					obj.has_items_ddd = 1;
					trace( "********X", x_ddd.ddd_dd_number, x_ddd.ddd_dd_supp_code, x_ddd.ddd_dd_tripord_no, x_ddd.ddd_dd_ld_type, x_ddd.ddd_templ_id, "***********action", action_ddd.option);
				}
				obj.ddd_items = items_ddd.source;
				obj.actions_ddd = actions_ddd.source;
				
				// delivery BOL templates
				obj.has_items_ddb = 0;
				var items_ddb:ArrayCollection=new ArrayCollection();
				var x_ddb:Object;
				var actions_ddb:ArrayCollection=new ArrayCollection();
				var action_ddb:Object;
				for each ( x_ddb in this.dbGrid.dataProvider)
				{
					action_ddb = new Object();
					action_ddb.option = 0;  // do nothing
					trace( "********X", x_ddb.db_supp_code, x_ddb.db_tripord_no, x_ddb.db_ld_type, x_ddb.db_templ_id, x_ddb.db_action);
					if ( x_ddb.db_action == '+' )
					{
						action_ddb.option = 1;
					}
					else if ( x_ddb.db_action == '*' )
					{
						action_ddb.option = 2;
					}
					else if ( x_ddb.db_action == '-' )
					{
						action_ddb.option = 3;
					}
					else
					{
						action_ddb.option = 0;
					}
					
					actions_ddb.addItem(action_ddb);
					if ( action_ddb.option == 1 )
					{
						x_ddb.db_supp_code = obj.dd_supp_code;
						x_ddb.db_tripord_no = obj.dd_tripord_no;
						x_ddb.db_ld_type = obj.dd_ld_type;
					}
					
					items_ddb.addItem( Object(x_ddb) );
					obj.has_items_ddb = 1;
					trace( "********X", x_ddb.db_supp_code, x_ddb.db_tripord_no, x_ddb.db_ld_type, x_ddb.db_templ_id, "***********action", action_ddb.option);
				}
				obj.ddb_items = items_ddb.source;
				obj.actions_ddb = actions_ddb.source;
				
				//nc.call( 'DeliveryDetailService.update', updateData, obj );
				updateAction.service( obj );
			}
			
			protected function updateData_resultHandler( ):void
			{
				clearDetail();
				if ( this.updateAction.dataString == "OK" )
				{
					global.msgSuccess(resourceManager.getString('default','MSG_UPDATE__SUCCESS'));
				}
				else
				{
					global.msgFail(resourceManager.getString('default','ERROR_UPDATE__FAILURE') + '\n' + resourceManager.getString('default','ALERT__ADDI_INFO_CHILDREN'));
				}
				
				var number:String;
				var supp_code:String;
				var tripord_no:int;
				var ld_type:int;
				
				number = dd_number.text;
				supp_code = supplierList[dd_supp_code.selectedIndex].cmpy_code;
				tripord_no = int(dd_tripord_no.text);
				ld_type = loadTypeList[dd_ld_type.selectedIndex].load_type_id;
				
				currentState="normal";
				findByPrimaryKey( number, supp_code, tripord_no, ld_type );

				dataGrid.selectedIndex = -1;
				dataGrid.enabled=true;
			}
			
			
			
			private function doDelete2(): void
			{
				var errors:String="";
				var index:int=0;
				
				
				/*
				TODO - is this product used by other records?
				*/
				if ( index > 0 )
				{
					var errorBox:MessageDialog = new MessageDialog( errors );
				}
				else
				{
					var canDelete:DeleteDialog = new DeleteDialog(deleteRecord, hasPassword);
				}
			}
			
			private function doDelete(): void
			{
				var obj:Object = new Object();
				
				if (dd_supp_code.selectedIndex>=0)
				{
					obj.dd_supp_code = supplierList[dd_supp_code.selectedIndex].cmpy_code;
				}
				else
				{
					obj.dd_supp_code = dataGrid.selectedItem.dd_supp_code;
				}
				
				if (dd_ld_type.selectedIndex>=0)
				{
					obj.dd_ld_type = loadTypeList[dd_ld_type.selectedIndex].load_type_id;
				}
				else
				{
					obj.dd_ld_type = dataGrid.selectedItem.dd_ld_type;
				}
				
				obj.dd_number = dd_number.text;
				obj.dd_tripord_no = dd_tripord_no.text;
				
				this.deletionChecker.service( obj.dd_number, obj.dd_supp_code, obj.dd_tripord_no, obj.dd_ld_type );
			}
			
			protected function deletionChecker_resultHandler( ):void
			{
				if ( deletionChecker.dataInteger > 0 )
				{
					global.msgWarning( resourceManager.getString('default','ALERT__DELIVERY_DETAIL_PRINTED') );
				}
				else
				{
					var canDelete:DeleteDialog = new DeleteDialog(deleteRecord, hasPassword);
				}
				
			}
			
			
			private function deleteRecord():void
			{
				var obj:Object = new Object();
				
				if (dd_supp_code.selectedIndex>=0)
				{
					obj.dd_supp_code = supplierList[dd_supp_code.selectedIndex].cmpy_code;
				}
				else
				{
					obj.dd_supp_code = dataGrid.selectedItem.dd_supp_code;
				}
				
				if (dd_ld_type.selectedIndex>=0)
				{
					obj.dd_ld_type = loadTypeList[dd_ld_type.selectedIndex].load_type_id;
				}
				else
				{
					obj.dd_ld_type = dataGrid.selectedItem.dd_ld_type;
				}
				
				obj.dd_number = dd_number.text;
				obj.dd_tripord_no = dd_tripord_no.text;

				deleteAction.service( obj );
			}
			
			protected function deleteData_resultHandler( ):void
			{
				clearDetail();
				if ( this.deleteAction.dataString == "OK" )
				{
					global.msgSuccess(resourceManager.getString('default','MSG_DELETE__SUCCESS'));
				}
				else
				{
					global.msgFail(resourceManager.getString('default','ERROR_DELETE__FAILURE') + '\n' + resourceManager.getString('default','ALERT__ADDI_INFO_CHILDREN'));
				}
				
				currentState="normal";
				this.startFiltering();
				dataGrid.selectedIndex = -1;
			}
			
			private function checkDeliveryDetailKey():void
			{
				var number:String;
				var supp_code:String;
				var tripord_no:int;
				var ld_type:int;
				
				number = dd_number.text;
				supp_code="";
				if ( dd_supp_code.selectedIndex>-1)
				{
					supp_code = supplierList[dd_supp_code.selectedIndex].cmpy_code;
				}
				
				tripord_no = int(dd_tripord_no.text);
				ld_type = -1;
				if ( dd_ld_type.selectedIndex > -1 )
				{
					ld_type = loadTypeList[dd_ld_type.selectedIndex].load_type_id;
				}
				
				
				ddKeyChecker.service( number, supp_code, tripord_no, ld_type );
			}
			
			protected function ddKeyChecker_resultHandler( ):void
			{
				if ( ddKeyChecker.dataInteger > 0 )
				{
					global.msgWarning( resourceManager.getString('default','ALERT__DELIVERY_DETAIL_EXIST') );
					this.btn_save.enabled = this.canCreate;
				}
				else
				{
					if ( this._saveButtonClicked == true )
					{
						this.createRecord();
					}
				}
				
				this._saveButtonClicked = false;
				
			}
			
			protected function ddiKeyChecker_resultHandler( ):void
			{
				if ( ddiKeyChecker.dataInteger > 0 )
				{
					//global.msgWarning( resourceManager.getString('default','ALERT__DELIVERY_DETAIL_ITEM_EXIST') );
				}
			}
			
			protected function dddKeyChecker_resultHandler( ):void
			{
				if ( dddKeyChecker.dataInteger > 0 )
				{
					//global.msgWarning( resourceManager.getString('default','ALERT__DELIVERY_DETAIL_DN_TEMPLATE_EXIST') );
				}
			}
			
			protected function dbKeyChecker_resultHandler( ):void
			{
				if ( dbKeyChecker.dataInteger > 0 )
				{
					//global.msgWarning( resourceManager.getString('default','ALERT__DELIVERY_BOL_TEMPLATE_EXIST') );
				}
			}
			
			private function checkFields():int
			{
				var errors:String="";
				var index:int=0;
				
				// TODO.....
				
				if ( index > 0 )
				{
					var errorBox:MessageDialog = new MessageDialog( errors );
				}
				
				return index;
			}
			
			private function createRecord():void
			{
				var prod_num:int;
				
				prod_num = ddKeyChecker.dataInteger;
				if ( prod_num > 0 )
				{
					var errorBox:MessageDialog = new MessageDialog( resourceManager.getString('default','ALERT__DELIVERY_DETAIL_EXIST') );
					this.btn_save.enabled = this.canCreate;
					return;
				}
				
				if ( this.checkFields() > 0 )
				{
					this.btn_save.enabled = this.canCreate;
					return;
				}
				
				if ( this.checkItemFields() == false )
				{
					this.btn_save.enabled = this.canCreate;
					return;
				}
				
				var obj:Object = new Object();
				
				if (dd_supp_code.selectedIndex>=0)
				{
					obj.dd_supp_code = supplierList[dd_supp_code.selectedIndex].cmpy_code;
				}
				else
				{
					obj.dd_supp_code = supplierList[0].cmpy_code;
				}
				
				if (dd_ld_type.selectedIndex>=0)
				{
					obj.dd_ld_type = loadTypeList[dd_ld_type.selectedIndex].load_type_id;
				}
				else
				{
					obj.dd_ld_type = loadTypeList[0].load_type_id;
				}
				
				if (dd_delv_type.selectedIndex>=0)
				{
					obj.dd_delv_type = deliveryTypeList[dd_delv_type.selectedIndex].delivery_type_code;
				}
				else
				{
					obj.dd_delv_type = "";//deliveryTypeList[0].delivery_type_code;
				}
				obj.dd_delv_type = dd_delv_type_txt.text;
				
				obj.dd_veh_arr_time = dateConvertLong.format(dd_veh_arr_time.selectedDate);
				
				obj.dd_number = dd_number.text;
				obj.dd_tripord_no = dd_tripord_no.text;
				obj.dd_route = dd_route.text;
				obj.dd_ship_cond = dd_ship_cond.text;
				obj.dd_phone = dd_phone.text;
				obj.dd_instruction = dd_instruction.text;
				obj.dd_lpg_remark = dd_lpg_remark.text;
				obj.dd_sales_ord_num = dd_sales_ord_num.text;
				obj.dd_cust_po = dd_cust_po.text;
				obj.dd_sale_ord_type = dd_sale_ord_type.text;
				obj.dd_vat_id = dd_vat_id.text;
				obj.dd_sold_to = dd_sold_to.text;
				obj.dd_ship_to = dd_ship_to.text;
				obj.dd_custom_code = dd_custom_code.text;
				obj.dd_lpg_dest_type = dd_lpg_dest_type.text;
				obj.dd_permit_num = dd_permit_num.text;
				obj.dd_sell_cmpy_code = dd_sell_cmpy_code.text;
				
				// delivery detail items
				obj.has_items_ddi = 0;
				var items_ddi:ArrayCollection=new ArrayCollection();
				var x_ddi:Object;
				for each ( x_ddi in this.ddiGrid.dataProvider)
				{
					trace( "********X", x_ddi.ddi_dd_number, x_ddi.ddi_dd_supp_code, x_ddi.ddi_dd_tripord_no, x_ddi.ddi_dd_ld_type, x_ddi.ddi_line_item_num );
					//if ( x.ddi_action == '+' )
					{
						x_ddi.ddi_dd_number = obj.dd_number;
						x_ddi.ddi_dd_supp_code = obj.dd_supp_code;
						x_ddi.ddi_dd_tripord_no = obj.dd_tripord_no;
						x_ddi.ddi_dd_ld_type = obj.dd_ld_type;
						
						items_ddi.addItem(x_ddi);
						obj.has_items_ddi = 1;
					}
				}
				obj.ddi_items = items_ddi.source;
				
				// delivery detail DN templates
				obj.has_items_ddd = 0;
				var items_ddd:ArrayCollection=new ArrayCollection();
				var x_ddd:Object;
				for each ( x_ddd in this.dddGrid.dataProvider)
				{
					trace( "********X", x_ddd.ddd_dd_number, x_ddd.ddd_dd_supp_code, x_ddd.ddd_dd_tripord_no, x_ddd.ddd_dd_ld_type, x_ddd.ddd_templ_id );
					//if ( x.ddd_action == '+' )
					{
						x_ddd.ddd_dd_number = obj.dd_number;
						x_ddd.ddd_dd_supp_code = obj.dd_supp_code;
						x_ddd.ddd_dd_tripord_no = obj.dd_tripord_no;
						x_ddd.ddd_dd_ld_type = obj.dd_ld_type;
						
						items_ddd.addItem(x_ddd);
						obj.has_items_ddd = 1;
					}
				}
				obj.ddd_items = items_ddd.source;
				
				// delivery BOL templates
				obj.has_items_ddb = 0;
				var items_ddb:ArrayCollection=new ArrayCollection();
				var x_ddb:Object;
				for each ( x_ddb in this.dbGrid.dataProvider)
				{
					trace( "********X", x_ddb.db_supp_code, x_ddb.db_tripord_no, x_ddb.db_ld_type, x_ddb.db_templ_id );
					if ( x_ddb.db_action == '+' || x_ddb.db_action == '-' )
					{
						x_ddb.db_supp_code = obj.dd_supp_code;
						x_ddb.db_tripord_no = obj.dd_tripord_no;
						x_ddb.db_ld_type = obj.dd_ld_type;
						
						items_ddb.addItem(x_ddb);
						obj.has_items_ddb = 1;
					}
				}
				obj.ddb_items = items_ddb.source;
				
				createAction.service( obj );
			}
			
			protected function createData_resultHandler( ):void
			{
				clearDetail();
				if ( this.createAction.dataString == "OK" )
				{
					global.msgSuccess(resourceManager.getString('default','MSG_CREATE__SUCCESS'));
				}
				else
				{
					global.msgFail(resourceManager.getString('default','ERROR_CREATE__FAILURE'));
				}
				
				var number:String;
				var supp_code:String;
				var tripord_no:int;
				var ld_type:int;
				
				number = dd_number.text;
				supp_code = supplierList[dd_supp_code.selectedIndex].cmpy_code;
				tripord_no = int(dd_tripord_no.text);
				ld_type = loadTypeList[dd_ld_type.selectedIndex].load_type_id;
				
				currentState="normal";
				findByPrimaryKey( number, supp_code, tripord_no, ld_type );
				
				dataGrid.selectedIndex = -1;
				dataGrid.enabled=true;
			}
			
			protected function createNewRecord(event:MouseEvent):void
			{	
				if ( this.fltr_loadtype.selectedIndex<0 || this.fltr_supplier.selectedIndex<0 || StringUtil.trim(this.fltr_triporder.text).length== 0 )
				{
					global.msgWarning( resourceManager.getString('default','ALERT__DELIVERY_DETAIL_CREATE_COND') );
					return;
				}
				
				idx=dataGrid.selectedIndex;
				dataGrid.ensureCellIsVisible(idx);
				currentState="create";
				dataGrid.enabled=false;
				this.btn_save.enabled = this.canCreate;
				
				if ( _formColumnSettingsString.length > 0 )
				{
					global.adjustFormFieldSettings( _formColumnSettingsString.substr(1), this );
				}
				
				//this.ddiList.service( "-1", "-1", -1, -1 );
				//this.dddList.service( "-1", "-1", -1, -1 );
				//this.dbList.service( "-1", "-1", -1, -1 );
				
				if ( this._isAutoFillOn == true )
				{
					this.ddiGrid.dataProvider = null;
				}
				else
				{
					this.ddiList.service( "-1", this.fltr_supplier.selectedItem.cmpy_code, StringUtil.trim(this.fltr_triporder.text), this.fltr_loadtype.selectedItem.load_type_id );
				}
				this.dddList.service( "-1", this.fltr_supplier.selectedItem.cmpy_code, StringUtil.trim(this.fltr_triporder.text), this.fltr_loadtype.selectedItem.load_type_id );
				this.dbList.service( this.fltr_supplier.selectedItem.cmpy_code, StringUtil.trim(this.fltr_triporder.text), this.fltr_loadtype.selectedItem.load_type_id );
				
				// get lists
				//this.bolTemplateList.service( 1 );
				//this.dnTemplateList.service( 2 );
				if ( this.fltr_loadtype.selectedItem.load_type_id == 1 )
				{
					this.tripProductsList.service( this.fltr_supplier.selectedItem.cmpy_code, this.fltr_triporder.text );
				}
				if ( this.fltr_loadtype.selectedItem.load_type_id == 2 )
				{
					this.tripCompartmentsList.service( this.fltr_supplier.selectedItem.cmpy_code, this.fltr_triporder.text );
				}
				if ( this.fltr_loadtype.selectedItem.load_type_id == 3 )
				{
					this.orderProductsList.service( this.fltr_supplier.selectedItem.cmpy_code, this.fltr_triporder.text );
				}
				
			}
			
			
			public function getArrayCollection(obj:Object):ArrayCollection
			{
				var temp:ArrayCollection = new ArrayCollection;
				temp.addItem( obj );
				return temp;
			}
			
			public function convertDateToLocaleString(dt:String):String
			{
				var dt_string:String;
				var dt_date:Date = new Date();
				
				dt_string = ""; 
				if ((dt!=null) && (dt!='null') && (dt!=''))
				{
					dt_date = DateField.stringToDate(dt,"YYYY-MM-DD");
					dt_string = dateFormatter.format( dt_date);
				}
				//trace ("convertDateToLocale", dt, dt_date, dt_string);
				return dt_string;
			}
			
			public function convertDateToLocale(dt:String):Date
			{
				var dt_date:Date = new Date();
				
				if ((dt!=null) && (dt!='null') && (dt!=''))
				{
					dt_date = DateField.stringToDate(dt,"YYYY-MM-DD");
				}
				//trace ("convertDateToLocale", dt, dt_date, dt_string);
				return dt_date;
			}
			
			public function convertDateToLocaleLong(dt:String):Date
			{
				var dt_date:Date = new Date();
				
				if ((dt!=null) && (dt!='null') && (dt!=''))
				{
					//dt_date = DateField.stringToDate(dt,"YYYY-MM-DD HH:NN:SS");
					dt_date = DateTimeFunc.createDate(
						int(dt.substr(0, 4))
						, int(dt.substr(5, 2))
						, int(dt.substr(8, 2))
						, int(dt.substr(11, 2))
						, int(dt.substr(14, 2))
						, int(dt.substr(17, 2))
					);
				}
				//trace ("convertDateToLocale", dt, dt_date, dt_string);
				return dt_date;
			}
			
			public function getDefaultDate():Date
			{
				var now_date:Date;
				var def_date:Date;
				
				now_date = new Date();
				def_date = DateTimeFunc.dateAdd( "yyyy", 1, now_date );
				
				//trace ("getDefaultDate", now_date, def_date);
				
				return def_date;
			}
			
			protected function view_detailsHandler(event:FlexEvent):void
			{
			}
			
			
			protected function dateLabelFunction(item:Object, column:GridColumn):String
			{
				var ret:String = "";
				
				ret = item [column.dataField];
				return ret;
			}
			
			protected function save_clickHandler():void
			{
				this.btn_save.enabled = false;
				doSave();
				//this.confirmSave = new ActionDialog( doSave, doNothing, resourceManager.getString('default','CONFIRM_SAVE_RATIOS') );
				
				//this.startLoadingPages();
			}
			
			protected function doSave():void
			{
				if (currentState == "create")
				{
					//createRecord();
					this._saveButtonClicked = true;
					checkDeliveryDetailKey();
				}
				if (currentState == "edit")
				{
					editRecord();
				}
				if (currentState == "detail")
				{
					editRecord();
				}
			}
			
			public function closeDialogHandler():void
			{
				/* this.mainListSelection = this.dataGrid.selectedIndex;
				this.currentState = "normal";
				this.dataGrid.selectedIndex = -1;
				this.startFiltering(); */
			}
			
			
			public function checkItemFields():Boolean
			{
				var maxlen:int=0;
				var curlen:int=0;
				var x:Object;
				var obj:Object;
				var errGrid:ArrayCollection=new ArrayCollection();
				var columnSetting:Object;
				var columnTitle:String="";
				
				var emailsValidator:RegExpValidator = new RegExpValidator();
				var stringValidator:RegExpValidator = new RegExpValidator();
				var numberValidator:RegExpValidator = new RegExpValidator();
				
				emailsValidator.expression = "^[\\w.-]+@\\w[\\w.-]+\\.[\\w.-]*[a-z][a-z]*([\\;\\:][ \t\v\n\r\f]*[\\w.-]+@\\w[\\w.-]+\\.[\\w.-]*[a-z][a-z]*)*$";
				emailsValidator.noMatchError=resourceManager.getString('default','VALIDATION__FIELD__EMAIL__NOMATCH');
				emailsValidator.enabled=true;
				
				stringValidator.expression='^([A-Za-z0-9-_/\\\\\'\\&\\[\\]\\<\\>\\(\\)\\{\\}\\,\\.]+[ \t\v\n\r\f]*)+$';
				stringValidator.noMatchError=resourceManager.getString('default','VALIDATION__FIELD__STRING__ALPHANUMERIC__NOMATCH');
				stringValidator.enabled=true;
				
				numberValidator.expression='^(-?(([1-9]\\d*)|(0)))(\\.\\d+)?$';
				numberValidator.noMatchError=resourceManager.getString('default','VALIDATION__FIELD__NUMBER__NOMATCH');
				numberValidator.enabled=true;
				
				/*
				ddi_line_item_num	NUMBER(6,0)
				ddi_prod_code		VARCHAR2(36 BYTE)
				ddi_unit			NUMBER(2,0)
				
				*ddi_item_cat		NUMBER(4,0)
				*ddi_cmpt_num		NUMBER(2,0)
				*ddi_qty				NUMBER(9,0)
				*ddi_excise_lic_num	NUMBER(15,0)
				*ddi_ref_doc_num		NUMBER(10,0)
				*ddi_site_capacity	NUMBER(10,0)
				
				*ddi_item_desc		VARCHAR2(36 BYTE)
				*ddi_duty_code		VARCHAR2(20 BYTE)
				*ddi_tank_code		VARCHAR2(20 BYTE)							
				*/
				
				for each ( x in this.ddiGrid.dataProvider)
				{
					for each ( columnSetting in this.deliveryLineSettings )
					{
						if ( columnSetting['grid']=="ddiGrid" && x.hasOwnProperty( columnSetting['column'] ) )
						{
							columnTitle = resourceManager.getString('default','VALIDATION__FIELD__LINE') + String(x.ddi_line_item_num) + ": " 
								+ resourceManager.getString('default',String(columnSetting['column']).toUpperCase());
							// check the length
							maxlen = columnSetting['length'];
							if ( x[ columnSetting['column'] ] == null )
							{
								x[ columnSetting['column'] ] = "";
							}
							curlen = global.getTextByteLength( String(x[ columnSetting['column'] ]) );
							if ( maxlen > 0 && curlen > maxlen )
							{
								obj=new Object();
								obj['name'] = columnTitle;
								obj['description'] = resourceManager.getString('default','VALIDATION__FIELD__STRING__LENGTH_BYTE') + String(curlen) + resourceManager.getString('default','VALIDATION__FIELD__STRING__LENGTH_TOOLONG') + String(maxlen) + ".";
								errGrid.addItem( obj );
							}
							if ( curlen == 0 && (int(columnSetting['flags']) & 0x02)>0 )
							{
								obj=new Object();
								obj['name'] = columnTitle;
								obj['description'] = resourceManager.getString('default','VALIDATION__FIELD__MANDITORY');
								errGrid.addItem( obj );
							}

							// check the value if it is not blank 
							if ( curlen > 0 )
							{
								if ( columnSetting['validation'] == "document" )
								{
									// do nothing
								}
								else if ( columnSetting['validation'] == "email" )
								{
									var emailsText:String = String(x[ columnSetting['column'] ]);
									
									var arrEmails:Array = emailsText.match(emailsValidator.expression);
									
									if ( arrEmails == null || (arrEmails!=null && arrEmails.length==0) )
									{
										obj=new Object();
										obj['name'] = columnTitle;
										obj['description'] = emailsValidator.noMatchError;
										errGrid.addItem( obj );
									}
								}
								else if ( columnSetting['validation'] == "numeric" )
								{
									var numberText:String = String(x[ columnSetting['column'] ]);
									
									var arrNumbers:Array = numberText.match(numberValidator.expression);
									
									if ( arrNumbers == null || (arrNumbers!=null && arrNumbers.length==0) )
									{
										obj=new Object();
										obj['name'] = columnTitle;
										obj['description'] = numberValidator.noMatchError;
										errGrid.addItem( obj );
									}
								}
								else
								{
									var stringText:String = String(x[ columnSetting['column'] ]);
									
									var arrStrings:Array = stringText.match(stringValidator.expression);
									
									if ( arrStrings == null || (arrStrings!=null && arrStrings.length==0) )
									{
										obj=new Object();
										obj['name'] = columnTitle;
										obj['description'] = stringValidator.noMatchError;
										errGrid.addItem( obj );
									}
								}
							}
							
							
						}
					}
					
				}
				
				
				if ( errGrid.length > 0 )
				{
					errorDialog = new ErrorDialog( closeErrorDialog, resourceManager.getString('default','VALIDATION__PROMPT'), errGrid, resourceManager.getString('default','VALIDATION__TITLE'));
					return false;
				}
				else
				{
					return true;
				}
			}
			
			
			public function checkItemFields2():Boolean
			{
				var maxlen:int=0;
				var x:Object;
				var obj:Object;
				var errGrid:ArrayCollection=new ArrayCollection();
				
				/*
				ddi_line_item_num	NUMBER(6,0)
				ddi_prod_code		VARCHAR2(36 BYTE)
				ddi_unit			NUMBER(2,0)
				
				*ddi_item_cat		NUMBER(4,0)
				*ddi_cmpt_num		NUMBER(2,0)
				*ddi_qty				NUMBER(9,0)
				*ddi_excise_lic_num	NUMBER(15,0)
				*ddi_ref_doc_num		NUMBER(10,0)
				*ddi_site_capacity	NUMBER(10,0)
				
				*ddi_item_desc		VARCHAR2(36 BYTE)
				*ddi_duty_code		VARCHAR2(20 BYTE)
				*ddi_tank_code		VARCHAR2(20 BYTE)							
				*/
				
				for each ( x in this.ddiGrid.dataProvider)
				{
					if ( x.hasOwnProperty('ddi_item_cat') )
					{
						maxlen = 4;
						if ( tools.isValueNumeric( x.ddi_item_cat ) == false )
						{
							obj=new Object();
							obj['name'] = resourceManager.getString('default','DDI_ITEM_CAT');
							obj['description'] = "Expecting the Number. ";
							errGrid.addItem( obj );
						}
						if ( global.getTextByteLength( x.ddi_item_cat ) > maxlen )
						{
							obj=new Object();
							obj['name'] = resourceManager.getString('default','DDI_ITEM_CAT');
							obj['description'] = "The length of [" + x.ddi_item_cat + "] has exceeded the maximum " + maxlen + ". ";
							errGrid.addItem( obj );
						}
					}
					if ( x.hasOwnProperty('ddi_cmpt_num') )
					{
						maxlen = 2;
						if ( tools.isValueNumeric( x.ddi_cmpt_num ) == false )
						{
							obj=new Object();
							obj['name'] = resourceManager.getString('default','DDI_CMPT_NUM');
							obj['description'] = "Expecting the Number. ";
							errGrid.addItem( obj );
						}
						if ( global.getTextByteLength( x.ddi_cmpt_num ) > maxlen )
						{
							obj=new Object();
							obj['name'] = resourceManager.getString('default','DDI_CMPT_NUM');
							obj['description'] = "The length of [" + x.ddi_cmpt_num + "] has exceeded the maximum " + maxlen + ". ";
							errGrid.addItem( obj );
						}
					}
					if ( x.hasOwnProperty('ddi_qty') )
					{
						maxlen = 9;
						if ( tools.isValueNumeric( x.ddi_qty ) == false )
						{
							obj=new Object();
							obj['name'] = resourceManager.getString('default','DDI_QTY');
							obj['description'] = "Expecting the Number. ";
							errGrid.addItem( obj );
						}
						if ( global.getTextByteLength( x.ddi_qty ) > maxlen )
						{
							obj=new Object();
							obj['name'] = resourceManager.getString('default','DDI_QTY');
							obj['description'] = "The length of [" + x.ddi_qty + "] has exceeded the maximum " + maxlen + ". ";
							errGrid.addItem( obj );
						}
					}
					if ( x.hasOwnProperty('ddi_excise_lic_num') )
					{
						maxlen = 15;
						if ( tools.isValueNumeric( x.ddi_excise_lic_num ) == false )
						{
							obj=new Object();
							obj['name'] = resourceManager.getString('default','DDI_EXCISE_LIC_NUM');
							obj['description'] = "Expecting the Number. ";
							errGrid.addItem( obj );
						}
						if ( global.getTextByteLength( x.ddi_excise_lic_num ) > maxlen )
						{
							obj=new Object();
							obj['name'] = resourceManager.getString('default','DDI_EXCISE_LIC_NUM');
							obj['description'] = "The length of [" + x.ddi_excise_lic_num + "] has exceeded the maximum " + maxlen + ". ";
							errGrid.addItem( obj );
						}
					}
					if ( x.hasOwnProperty('ddi_ref_doc_num') )
					{
						maxlen = 10;
						if ( tools.isValueNumeric( x.ddi_ref_doc_num ) == false )
						{
							obj=new Object();
							obj['name'] = resourceManager.getString('default','DDI_REF_DOC_NUM');
							obj['description'] = "Expecting the Number. ";
							errGrid.addItem( obj );
						}
						if ( global.getTextByteLength( x.ddi_ref_doc_num ) > maxlen )
						{
							obj=new Object();
							obj['name'] = resourceManager.getString('default','DDI_REF_DOC_NUM');
							obj['description'] = "The length of [" + x.ddi_ref_doc_num + "] has exceeded the maximum " + maxlen + ". ";
							errGrid.addItem( obj );
						}
					}
					if ( x.hasOwnProperty('ddi_site_capacity') )
					{
						maxlen = 10;
						if ( tools.isValueNumeric( x.ddi_site_capacity ) == false )
						{
							obj=new Object();
							obj['name'] = resourceManager.getString('default','DDI_SITE_CAPACITY');
							obj['description'] = "Expecting the Number. ";
							errGrid.addItem( obj );
						}
						if ( global.getTextByteLength( x.ddi_site_capacity ) > maxlen )
						{
							obj=new Object();
							obj['name'] = resourceManager.getString('default','DDI_SITE_CAPACITY');
							obj['description'] = "The length of [" + x.ddi_site_capacity + "] has exceeded the maximum " + maxlen + ". ";
							errGrid.addItem( obj );
						}
					}
					
					if ( x.hasOwnProperty('ddi_item_desc') )
					{
						maxlen = 36;
						if ( global.getTextByteLength( x.ddi_item_desc ) > maxlen )
						{
							obj=new Object();
							obj['name'] = resourceManager.getString('default','DDI_PROD_NAME');
							obj['description'] = "The length of [" + x.ddi_item_desc + "] has exceeded the maximum " + maxlen + ". ";
							errGrid.addItem( obj );
						}
					}
					if ( x.hasOwnProperty('ddi_duty_code') )
					{
						maxlen = 20;
						if ( global.getTextByteLength( x.ddi_duty_code ) > maxlen )
						{
							obj=new Object();
							obj['name'] = resourceManager.getString('default','DDI_DUTY_CODE');
							obj['description'] = "The length of [" + x.ddi_duty_code + "] has exceeded the maximum " + maxlen + ". ";
							errGrid.addItem( obj );
						}
					}
					if ( x.hasOwnProperty('ddi_tank_code') )
					{
						maxlen = 20;
						if ( global.getTextByteLength( x.ddi_tank_code ) > maxlen )
						{
							obj=new Object();
							obj['name'] = resourceManager.getString('default','DDI_TANK_CODE');
							obj['description'] = "The length of [" + x.ddi_tank_code + "] has exceeded the maximum " + maxlen + ". ";
							errGrid.addItem( obj );
						}
					}
					
				}
				
				
				if ( errGrid.length > 0 )
				{
					errorDialog = new ErrorDialog( closeErrorDialog, resourceManager.getString('default','VALIDATION__PROMPT'), errGrid, resourceManager.getString('default','VALIDATION__TITLE'));
					return false;
				}
				else
				{
					return true;
				}
			}
			
			public function closeErrorDialog():void
			{
				PopUpManager.removePopUp(this.errorDialog.dialog );	
			}
			
			protected function killBtn_clickHandler(event:MouseEvent):void
			{
				//interruptor=true;
				pagedRecords.interruptor=true;
				trace("WTF >>>>>>>>>>");
			}
			
			protected function resumeBtn_clickHandler(event:MouseEvent):void
			{
				//interruptor=false;
				pagedRecords.interruptor=false;
				
				this.resumeLoadingPages();
				trace("RESUME >>>>>>>>>>");
			}
			
			protected function resumeLoadingPages():void
			{
				killBtn.setStyle("chromeColor","0xff0000");
				this.killBtn.includeInLayout=true;
				this.killBtn.visible = true;
				this.killBtn.enabled = true;
				
				resumeBtn.setStyle("chromeColor","0x00ff00");
				this.resumeBtn.includeInLayout=true;
				this.resumeBtn.visible = true;
				this.resumeBtn.enabled = false;
				
				this.btn_create.enabled = false
				this.btn_export.enabled = false;
				this.dataGrid.enabled = false;
				this.toolbar.enabled = false;
				
				//pb.values(pagedRecords.length,totalLength);
				pb.values(pagedRecords.length,pagedRecords.totalLength);
				//currentPage = int(this.pagedRecords.length/currentPageSize) + 1;
				//this.pagedRecords.service( currentFields, currentTypes, currentSorts, currentOrders, currentPage, currentPageSize );
				this.pagedRecords.listService( currentFields, currentTypes, currentSorts, currentOrders );
			}
			
			
			
			protected function ddi_line_updHandler():void
			{
				this.btn_updateLineDDI.enabled = false;
				this.btn_deleteLineDDI.enabled = false;
				this.btn_manageAddiInfoDDI.enabled = false;
				
				if ( this.ddiGrid.selectionMode == "multipleRows" )
				{
					this.updateMultipleDDIs();
				}
				else
				{
					this.updateSingleDDI();
				}
			}
			
			protected function updateMultipleDDIs():void
			{
				if ( ddiGrid.selectedItems==null || ddiGrid.selectedItems.length == 0 )
				{
					return;
				}
				
				var x:Object;
				var y:Object;
				var updateInGrid:Boolean=false;
				var len:int;
				var i;
				
				len = ddiGrid.dataProvider.length;
				for ( i=len-1; i>=0; i-=1 )
				{
					x = ddiGrid.dataProvider.getItemAt( i );
					for each(y in ddiGrid.selectedItems)
					{
						if ( x.ddi_line_item_num == y.ddi_line_item_num )
						{
							if ( y.ddi_action == '+' )
							{
								;
							}
							else if ( y.ddi_action == '-' )
							{
								;
							}
							else if ( y.ddi_action == '*' )
							{
								;
							}
							else
							{
								x.ddi_action = '*';
								y.ddi_action = '*';
								updateInGrid = true;
							}
						}
					}
				}
				
				var temp:* = ddiGrid.dataProvider;
				ddiGrid.dataProvider = null;
				ddiGrid.dataProvider = temp;
				
				if ( updateInGrid == true )
				{
					this.adjustDdiList();	//???? may not need 
				}
				
			}
			
			protected function updateSingleDDI():void
			{
				if ( ddiGrid.selectedIndex < 0 )
				{
					return;
				}
				
				var x:Object;
				var updateInGrid:Boolean=false;
				
				for each(x in ddiGrid.dataProvider)
				{
					if ( x.ddi_line_item_num == ddiGrid.selectedItem.ddi_line_item_num )
					{
						if ( ddiGrid.selectedItem.ddi_action == '+' )
						{
							;
						}
						else if ( ddiGrid.selectedItem.ddi_action == '-' )
						{
							;
						}
						else if ( ddiGrid.selectedItem.ddi_action == '*' )
						{
							;
						}
						else
						{
							x.ddi_action = '-';
							ddiGrid.selectedItem.ddi_action = '-';
							updateInGrid = true;
						}
						break;
					}
				}
				
				var temp:* = ddiGrid.dataProvider;
				ddiGrid.dataProvider = null;
				ddiGrid.dataProvider = temp;
				
				if ( updateInGrid == true )
				{
					this.adjustDdiList();
				}
				
			}
			
			protected function ddi_line_delHandler():void
			{
				this.btn_deleteLineDDI.enabled = false;
				this.btn_updateLineDDI.enabled = false;
				this.btn_manageAddiInfoDDI.enabled = false;
				
				if ( this.ddiGrid.selectionMode == "multipleRows" )
				{
					this.deleteMultipleDDIs();
				}
				else
				{
					this.deleteSingleDDI();
				}
			}
			
			protected function deleteMultipleDDIs():void
			{
				if ( ddiGrid.selectedItems==null || ddiGrid.selectedItems.length == 0 )
				{
					return;
				}
				
				var x:Object;
				var y:Object;
				var removedFromGrid:Boolean=false;
				var len:int;
				var i;
				
				len = ddiGrid.dataProvider.length;
				for ( i=len-1; i>=0; i-=1 )
				{
					x = ddiGrid.dataProvider.getItemAt( i );
					for each(y in ddiGrid.selectedItems)
					{
						if ( x.ddi_line_item_num == y.ddi_line_item_num )
						{
							if ( y.ddi_action == '+' )
							{
								this.ddiGrid.dataProvider.removeItemAt( i );
								removedFromGrid = true;
							}
							else if ( y.ddi_action == '-' )
							{
								x.ddi_action = '';
								y.ddi_action = '';
							}
							else if ( y.ddi_action == '*' )
							{
								x.ddi_action = '';
								y.ddi_action = '';
							}
							else
							{
								x.ddi_action = '-';
								y.ddi_action = '-';
							}
						}
					}
				}
				
				var temp:* = ddiGrid.dataProvider;
				ddiGrid.dataProvider = null;
				ddiGrid.dataProvider = temp;
				
				if ( removedFromGrid == true )
				{
					this.adjustDdiList();	//???? may not need 
				}
				
			}
			
			protected function deleteSingleDDI():void
			{
				if ( ddiGrid.selectedIndex < 0 )
				{
					return;
				}
				
				var x:Object;
				var removedFromGrid:Boolean=false;
				
				for each(x in ddiGrid.dataProvider)
				{
					if ( x.ddi_line_item_num == ddiGrid.selectedItem.ddi_line_item_num )
					{
						if ( ddiGrid.selectedItem.ddi_action == '+' )
						{
							this.ddiGrid.dataProvider.removeItemAt(ddiGrid.selectedIndex);
							removedFromGrid = true;
						}
						else if ( ddiGrid.selectedItem.ddi_action == '-' )
						{
							x.ddi_action = '';
							ddiGrid.selectedItem.ddi_action = '';
						}
						else if ( ddiGrid.selectedItem.ddi_action == '*' )
						{
							x.ddi_action = '';
							ddiGrid.selectedItem.ddi_action = '';
						}
						else
						{
							x.ddi_action = '-';
							ddiGrid.selectedItem.ddi_action = '-';
						}
						break;
					}
				}
				
				var temp:* = ddiGrid.dataProvider;
				ddiGrid.dataProvider = null;
				ddiGrid.dataProvider = temp;
				
				if ( removedFromGrid == true )
				{
					this.adjustDdiList();
				}
				
			}
			
			protected function ddi_line_addHandler():void
			{
				if ( this.ddi_products.selectedIndex < 0 )
				{
					global.msgWarning( resourceManager.getString('default','ALERT__DELIVERY_DETAIL_ITEM_ADD_COND') );
					return;
				}
				this.btn_updateLineDDI.enabled = false;
				this.btn_deleteLineDDI.enabled = false;
				this.btn_manageAddiInfoDDI.enabled = false;
				
				this.addSingleDDI();
			}
			
			protected function addMultipleDDIs():void
			{
				var i:int;
				var len:int;
				
				len = this.ddi_products.dataProvider.length
				for ( i=0; i<len; i++ )
				{
					this.ddi_products.selectedIndex = i;
					this.ddi_line_addHandler();
				}
				this.ddi_products.selectedIndex = -1;
			}
			
			protected function addSingleDDI():void
			{
				var x:Object;
				var y:Object;
				var next_id:int;
				
				// find the next id
				next_id = 0;
				if ( this.ddiGrid.dataProvider == null )
				{
					this.ddiGrid.dataProvider = new ArrayCollection();
				}
				else
				{
					for each( y in this.ddiGrid.dataProvider )
					{
						if ( next_id < int(y.ddi_line_item_num) )
						{
							next_id = int(y.ddi_line_item_num);
						}
					}
				}
				
				x = new Object();
				
				x.ddi_action 			= '+';
				
				if (dd_supp_code.selectedIndex>=0)
				{
					x.ddi_dd_supp_code = supplierList[dd_supp_code.selectedIndex].cmpy_code;
					x.ddi_prod_cmpyname = supplierList[dd_supp_code.selectedIndex].cmpy_name;
				}
				else
				{
					x.ddi_dd_supp_code = supplierList[0].cmpy_code;
					x.ddi_prod_cmpyname = supplierList[0].cmpy_name;
				}
				if (dd_ld_type.selectedIndex>=0)
				{
					x.ddi_dd_ld_type = loadTypeList[dd_ld_type.selectedIndex].load_type_id;
				}
				else
				{
					x.ddi_dd_ld_type = loadTypeList[0].load_type_id;
				}
				x.ddi_dd_number = dd_number.text;
				x.ddi_dd_tripord_no = dd_tripord_no.text;
				
				x.ddi_line_item_num 			= next_id + 1;
				
				x.ddi_item_cat 					= "";
				
				
				x.ddi_cmpt_num					= "";
				if ( this.ddi_products.selectedItem.hasOwnProperty('ddi_cmpt_num') )
				{
					x.ddi_cmpt_num = this.ddi_products.selectedItem.ddi_cmpt_num;
					if ( x.ddi_cmpt_num == null )
					{
						x.ddi_cmpt_num = "";
					}
				}
				
				x.ddi_cmpy_code					= x.ddi_dd_supp_code;
				if ( this.ddi_products.selectedItem.hasOwnProperty('ddi_cmpy_code') )
				{
					x.ddi_cmpy_code = this.ddi_products.selectedItem.ddi_cmpy_code;
				}
				
				x.ddi_prod_code 				= "";
				if ( this.ddi_products.selectedItem.hasOwnProperty('ddi_prod_code') )
				{
					x.ddi_prod_code = this.ddi_products.selectedItem.ddi_prod_code;
				}
				
				x.ddi_prod_name 				= "";
				if ( this.ddi_products.selectedItem.hasOwnProperty('ddi_prod_name') )
				{
					x.ddi_prod_name = this.ddi_products.selectedItem.ddi_prod_name;
				}
				
				x.ddi_qty						= "";
				if ( this.ddi_products.selectedItem.hasOwnProperty('ddi_qty') )
				{
					x.ddi_qty = this.ddi_products.selectedItem.ddi_qty;
				}
				
				x.ddi_unit						= 5;
				if ( this.ddi_products.selectedItem.hasOwnProperty('ddi_unit') )
				{
					x.ddi_unit = this.ddi_products.selectedItem.ddi_unit;
				}
				
				x.ddi_unit_name						= 'l(amb)';
				if ( this.ddi_products.selectedItem.hasOwnProperty('ddi_unit_name') )
				{
					x.ddi_unit_name = this.ddi_products.selectedItem.ddi_unit_name;
				}
				
				x.ddi_item_desc 				= "";
				if ( this.ddi_products.selectedItem.hasOwnProperty('ddi_prod_name') )
				{
					x.ddi_item_desc = this.ddi_products.selectedItem.ddi_prod_name;
				}
				
				x.ddi_duty_code					= "";
				x.ddi_excise_lic_num			= "";
				x.ddi_ref_doc_num 				= "";
				x.ddi_site_capacity				= "";
				x.ddi_tank_code					= "";
				
				this.ddiGrid.dataProvider.addItem(x);
				
				this.adjustDdiList();
			}
			
			
			protected function adjustDdiList():void
			{
			}
			
			
			
			protected function ddd_line_updHandler():void
			{
				this.btn_updateLineDDD.enabled = false;
				this.btn_deleteLineDDD.enabled = false;
				this.btn_manageAddiInfoDDD.enabled = false;
				
				if ( this.dddGrid.selectionMode == "multipleRows" )
				{
					this.updateMultipleDDDs();
				}
				else
				{
					this.updateSingleDDD();
				}
			}
			
			protected function updateMultipleDDDs():void
			{
				if ( dddGrid.selectedItems==null || dddGrid.selectedItems.length == 0 )
				{
					return;
				}
				
				var x:Object;
				var y:Object;
				var updateInGrid:Boolean=false;
				var len:int;
				var i;
				
				len = dddGrid.dataProvider.length;
				for ( i=len-1; i>=0; i-=1 )
				{
					x = dddGrid.dataProvider.getItemAt( i );
					for each(y in dddGrid.selectedItems)
					{
						if ( x.ddd_templ_id == y.ddd_templ_id )
						{
							if ( y.ddd_action == '+' )
							{
								;
							}
							else if ( y.ddd_action == '-' )
							{
								;
							}
							else if ( y.ddd_action == '*' )
							{
								;
							}
							else
							{
								x.ddd_action = '*';
								y.ddd_action = '*';
								updateInGrid = true;
							}
						}
					}
				}
				
				var temp:* = dddGrid.dataProvider;
				dddGrid.dataProvider = null;
				dddGrid.dataProvider = temp;
				
				if ( updateInGrid == true )
				{
					this.adjustDddList();	//???? may not need 
				}
				
			}
			
			protected function updateSingleDDD():void
			{
				if ( dddGrid.selectedIndex < 0 )
				{
					return;
				}
				
				var x:Object;
				var updateInGrid:Boolean=false;
				
				for each(x in dddGrid.dataProvider)
				{
					if ( x.ddd_templ_id == dddGrid.selectedItem.ddd_templ_id )
					{
						if ( dddGrid.selectedItem.ddd_action == '+' )
						{
							;
						}
						else if ( dddGrid.selectedItem.ddd_action == '-' )
						{
							;
						}
						else if ( dddGrid.selectedItem.ddd_action == '*' )
						{
							;
						}
						else
						{
							x.ddd_action = '-';
							dddGrid.selectedItem.ddd_action = '-';
							updateInGrid = true;
						}
						break;
					}
				}
				
				var temp:* = dddGrid.dataProvider;
				dddGrid.dataProvider = null;
				dddGrid.dataProvider = temp;
				
				if ( updateInGrid == true )
				{
					this.adjustDddList();
				}
				
			}
			
			protected function ddd_line_delHandler():void
			{
				this.btn_deleteLineDDD.enabled = false;
				this.btn_updateLineDDD.enabled = false;
				this.btn_manageAddiInfoDDD.enabled = false;
				
				if ( this.dddGrid.selectionMode == "multipleRows" )
				{
					this.deleteMultipleDDDs();
				}
				else
				{
					this.deleteSingleDDD();
				}
			}
			
			protected function deleteMultipleDDDs():void
			{
				if ( dddGrid.selectedItems==null || dddGrid.selectedItems.length == 0 )
				{
					return;
				}
				
				var x:Object;
				var y:Object;
				var removedFromGrid:Boolean=false;
				var len:int;
				var i;
				
				len = dddGrid.dataProvider.length;
				for ( i=len-1; i>=0; i-=1 )
				{
					x = dddGrid.dataProvider.getItemAt( i );
					for each(y in dddGrid.selectedItems)
					{
						if ( x.ddd_templ_id == y.ddd_templ_id )
						{
							if ( y.ddd_action == '+' )
							{
								this.dddGrid.dataProvider.removeItemAt( i );
								removedFromGrid = true;
							}
							else if ( y.ddd_action == '-' )
							{
								x.ddd_action = '';
								y.ddd_action = '';
							}
							else if ( y.ddd_action == '*' )
							{
								x.ddd_action = '';
								y.ddd_action = '';
							}
							else
							{
								x.ddd_action = '-';
								y.ddd_action = '-';
							}
						}
					}
				}
				
				var temp:* = dddGrid.dataProvider;
				dddGrid.dataProvider = null;
				dddGrid.dataProvider = temp;
				
				if ( removedFromGrid == true )
				{
					this.adjustDddList();	//???? may not need 
				}
				
			}
			
			protected function deleteSingleDDD():void
			{
				if ( dddGrid.selectedIndex < 0 )
				{
					return;
				}
				
				var x:Object;
				var removedFromGrid:Boolean=false;
				
				for each(x in dddGrid.dataProvider)
				{
					if ( x.ddd_templ_id == dddGrid.selectedItem.ddd_templ_id )
					{
						if ( dddGrid.selectedItem.ddd_action == '+' )
						{
							this.dddGrid.dataProvider.removeItemAt(dddGrid.selectedIndex);
							removedFromGrid = true;
						}
						else if ( dddGrid.selectedItem.ddd_action == '-' )
						{
							x.ddd_action = '';
							dddGrid.selectedItem.ddd_action = '';
						}
						else if ( dddGrid.selectedItem.ddd_action == '*' )
						{
							x.ddd_action = '';
							dddGrid.selectedItem.ddd_action = '';
						}
						else
						{
							x.ddd_action = '-';
							dddGrid.selectedItem.ddd_action = '-';
						}
						break;
					}
				}
				
				var temp:* = dddGrid.dataProvider;
				dddGrid.dataProvider = null;
				dddGrid.dataProvider = temp;
				
				if ( removedFromGrid == true )
				{
					this.adjustDddList();
				}
				
			}
			
			protected function ddd_line_addHandler():void
			{
				if ( this.ddd_templates.selectedIndex < 0 )
				{
					global.msgWarning( resourceManager.getString('default','ALERT__DELIVERY_DETAIL_DN_ADD_COND') );
					return;
				}
				this.btn_updateLineDDD.enabled = false;
				this.btn_deleteLineDDD.enabled = false;
				this.btn_manageAddiInfoDDD.enabled = false;
				
				this.addSingleDDD();
			}
			
			protected function addMultipleDDDs():void
			{
			}
			
			protected function addSingleDDD():void
			{
				var x:Object;
				var y:Object;
				var next_id:String;
				
				// find the next id
				next_id = "";
				if ( this.dddGrid.dataProvider == null )
				{
					this.dddGrid.dataProvider = new ArrayCollection();
				}
				else
				{
					next_id="";
				}
				
				x = new Object();
				
				x.ddd_action 			= '+';
				
				if (dd_supp_code.selectedIndex>=0)
				{
					x.ddd_dd_supp_code = supplierList[dd_supp_code.selectedIndex].cmpy_code;
				}
				else
				{
					x.ddd_dd_supp_code = supplierList[0].cmpy_code;
				}
				if (dd_ld_type.selectedIndex>=0)
				{
					x.ddd_dd_ld_type = loadTypeList[dd_ld_type.selectedIndex].load_type_id;
				}
				else
				{
					x.ddd_dd_ld_type = loadTypeList[0].load_type_id;
				}
				x.ddd_dd_number = dd_number.text;
				x.ddd_dd_tripord_no = dd_tripord_no.text;
				
				x.ddd_templ_id 			= this.ddd_templates.selectedItem.template_code;
				
				this.dddGrid.dataProvider.addItem(x);
				
				this.adjustDddList();
			}
			
			
			protected function adjustDddList():void
			{
				if ( currentState != 'edit' && currentState != 'create' )
				{
					return;
				}
				
				this.availDnTemplateList.removeAll();
				
				for each( var o:Object in this.dnTemplateList )
				{
					var used:Boolean=false;
					for each( var r:Object in this.dddGrid.dataProvider )
					{
						if ( o.hasOwnProperty("template_code") && r.hasOwnProperty("ddd_templ_id") && o.template_code == r.ddd_templ_id )
						{
							used = true;
							break;
						}
					}
					if ( used == false )
					{
						this.availDnTemplateList.addItem(ObjectUtil.copy(o));
					}
				}
				
				this.ddd_templates.dataProvider = null;
				ddd_templates.dataProvider = this.availDnTemplateList;
			}
			
			
			
			protected function db_line_updHandler():void
			{
				this.btn_updateLineDB.enabled = false;
				this.btn_deleteLineDB.enabled = false;
				
				if ( this.dbGrid.selectionMode == "multipleRows" )
				{
					this.updateMultipleDBs();
				}
				else
				{
					this.updateSingleDB();
				}
			}
			
			protected function updateMultipleDBs():void
			{
				if ( dbGrid.selectedItems==null || dbGrid.selectedItems.length == 0 )
				{
					return;
				}
				
				var x:Object;
				var y:Object;
				var updateInGrid:Boolean=false;
				var len:int;
				var i;
				
				len = dbGrid.dataProvider.length;
				for ( i=len-1; i>=0; i-=1 )
				{
					x = dbGrid.dataProvider.getItemAt( i );
					for each(y in dbGrid.selectedItems)
					{
						if ( x.db_templ_id == y.db_templ_id )
						{
							if ( y.db_action == '+' )
							{
								;
							}
							else if ( y.db_action == '-' )
							{
								;
							}
							else if ( y.db_action == '*' )
							{
								;
							}
							else
							{
								x.db_action = '*';
								y.db_action = '*';
								updateInGrid = true;
							}
						}
					}
				}
				
				var temp:* = dbGrid.dataProvider;
				dbGrid.dataProvider = null;
				dbGrid.dataProvider = temp;
				
				if ( updateInGrid == true )
				{
					this.adjustDbList();	//???? may not need 
				}
				
			}
			
			protected function updateSingleDB():void
			{
				if ( dbGrid.selectedIndex < 0 )
				{
					return;
				}
				
				var x:Object;
				var updateInGrid:Boolean=false;
				
				for each(x in dbGrid.dataProvider)
				{
					if ( x.db_templ_id == dbGrid.selectedItem.db_templ_id )
					{
						if ( dbGrid.selectedItem.db_action == '+' )
						{
							;
						}
						else if ( dbGrid.selectedItem.db_action == '-' )
						{
							;
						}
						else if ( dbGrid.selectedItem.db_action == '*' )
						{
							;
						}
						else
						{
							x.db_action = '-';
							dbGrid.selectedItem.db_action = '-';
							updateInGrid = true;
						}
						break;
					}
				}
				
				var temp:* = dbGrid.dataProvider;
				dbGrid.dataProvider = null;
				dbGrid.dataProvider = temp;
				
				if ( updateInGrid == true )
				{
					this.adjustDbList();
				}
				
			}
			
			protected function db_line_delHandler():void
			{
				this.btn_deleteLineDB.enabled = false;
				this.btn_updateLineDB.enabled = false;
				
				if ( this.dbGrid.selectionMode == "multipleRows" )
				{
					this.deleteMultipleDBs();
				}
				else
				{
					this.deleteSingleDB();
				}
			}
			
			protected function deleteMultipleDBs():void
			{
				if ( dbGrid.selectedItems==null || dbGrid.selectedItems.length == 0 )
				{
					return;
				}
				
				var x:Object;
				var y:Object;
				var removedFromGrid:Boolean=false;
				var len:int;
				var i;
				
				len = dbGrid.dataProvider.length;
				for ( i=len-1; i>=0; i-=1 )
				{
					x = dbGrid.dataProvider.getItemAt( i );
					for each(y in dbGrid.selectedItems)
					{
						if ( x.db_templ_id == y.db_templ_id )
						{
							if ( y.db_action == '+' )
							{
								this.dbGrid.dataProvider.removeItemAt( i );
								removedFromGrid = true;
							}
							else if ( y.db_action == '-' )
							{
								x.db_action = '';
								y.db_action = '';
							}
							else if ( y.db_action == '*' )
							{
								x.db_action = '';
								y.db_action = '';
							}
							else
							{
								x.db_action = '-';
								y.db_action = '-';
							}
						}
					}
				}
				
				var temp:* = dbGrid.dataProvider;
				dbGrid.dataProvider = null;
				dbGrid.dataProvider = temp;
				
				if ( removedFromGrid == true )
				{
					this.adjustDbList();	//???? may not need 
				}
				
			}
			
			protected function deleteSingleDB():void
			{
				if ( dbGrid.selectedIndex < 0 )
				{
					return;
				}
				
				var x:Object;
				var removedFromGrid:Boolean=false;
				
				for each(x in dbGrid.dataProvider)
				{
					if ( x.db_templ_id == dbGrid.selectedItem.db_templ_id )
					{
						if ( dbGrid.selectedItem.db_action == '+' )
						{
							this.dbGrid.dataProvider.removeItemAt(dbGrid.selectedIndex);
							removedFromGrid = true;
						}
						else if ( dbGrid.selectedItem.db_action == '-' )
						{
							x.db_action = '';
							dbGrid.selectedItem.db_action = '';
						}
						else if ( dbGrid.selectedItem.db_action == '*' )
						{
							x.db_action = '';
							dbGrid.selectedItem.db_action = '';
						}
						else
						{
							x.db_action = '-';
							dbGrid.selectedItem.db_action = '-';
						}
						break;
					}
				}
				
				var temp:* = dbGrid.dataProvider;
				dbGrid.dataProvider = null;
				dbGrid.dataProvider = temp;
				
				if ( removedFromGrid == true )
				{
					this.adjustDbList();
				}
				
			}
			
			protected function db_line_addHandler():void
			{
				if ( this.ddb_templates.selectedIndex < 0 )
				{
					global.msgWarning( resourceManager.getString('default','ALERT__DELIVERY_DETAIL_BOL_ADD_COND') );
					return;
				}
				this.btn_updateLineDB.enabled = false;
				this.btn_deleteLineDB.enabled = false;
				
				this.addSingleDB();
			}
			
			protected function addMultipleDBs():void
			{
			}
			
			protected function addSingleDB():void
			{
				var x:Object;
				var y:Object;
				var next_id:String;
				
				// find the next id
				next_id = "";
				if ( this.dbGrid.dataProvider == null )
				{
					this.dbGrid.dataProvider = new ArrayCollection();
				}
				else
				{
					next_id="";
				}
				
				x = new Object();
				
				x.db_action 			= '+';
				
				if (dd_supp_code.selectedIndex>=0)
				{
					x.db_supp_code = supplierList[dd_supp_code.selectedIndex].cmpy_code;
				}
				else
				{
					x.db_supp_code = supplierList[0].cmpy_code;
				}
				if (dd_ld_type.selectedIndex>=0)
				{
					x.db_ld_type = loadTypeList[dd_ld_type.selectedIndex].load_type_id;
				}
				else
				{
					x.db_ld_type = loadTypeList[0].load_type_id;
				}
				x.db_tripord_no = dd_tripord_no.text;
				
				x.db_templ_id 			= this.ddb_templates.selectedItem.template_code;
				
				this.dbGrid.dataProvider.addItem(x);
				
				this.adjustDbList();
			}
			
			
			protected function adjustDbList():void
			{
				if ( currentState != 'edit' && currentState != 'create' )
				{
					return;
				}
				
				this.availBolTemplateList.removeAll();
				
				for each( var o:Object in this.bolTemplateList )
				{
					var used:Boolean=false;
					for each( var r:Object in this.dbGrid.dataProvider )
					{
						if ( o.hasOwnProperty("template_code") && r.hasOwnProperty("db_templ_id") && o.template_code == r.db_templ_id )
						{
							used = true;
							break;
						}
					}
					if ( used == false )
					{
						this.availBolTemplateList.addItem(ObjectUtil.copy(o));
					}
				}
				
				this.ddb_templates.dataProvider = null;
				ddb_templates.dataProvider = this.availBolTemplateList;
			}
			
			
			
			protected function getLineTypeLabel(line_type_id:int):String
			{
				var ret:String = "";

				for each( var obj:Object in this.loadTypeList )
				{
					if ( obj.deliveryDetail_type_id == line_type_id )
					{
						ret = obj.deliveryDetail_type_name;
					}
				}
				
				return ret;
			}
			
			protected function lineTypeLabelFunction(item:Object, column:GridColumn):String
			{
				var ret:String = "";
				
				ret = this.getLineTypeLabel( item [column.dataField] );
				
				/* for each( var obj:Object in this.loadTypeList )
				{
					if ( obj.deliveryDetail_type_id == item [column.dataField])
					{
						ret = obj.deliveryDetail_type_name;
					}
				} */
				
				return ret;
			}
			
			public function ddiGrid_toggleCellEditability(event:GridEvent):void
			{
				var i:int;
				var cln:GridColumn;
				var obj:Object;
				var msg:String;
				
				//this.toggleDeleteButton();
				
				if ( event.rowIndex < 0 || event.columnIndex < 0 || event.rowIndex > this.ddiGrid.dataProviderLength-1)
				{
					trace ("***********current cell, out of range:", event.columnIndex, event.rowIndex);
					return;	
				}
				
				obj = this.ddiGrid.dataProvider[event.rowIndex];
				if ( obj == null )
				{
					return;
				}
				
				trace ("***********current cell, in the range:", event.columnIndex, event.rowIndex);
				
				for ( i=0; i<this.ddiGrid.columns.length; i++ )
				{
					cln = (this.ddiGrid.columns.getItemAt(i) as GridColumn);
					
					//trace ("***********current row action:", event.rowIndex, ">>"+view.itemList.dataProvider[event.rowIndex].action+"<<");
					
					// if  no action is initialized, not editable
					if ( obj.hasOwnProperty( "ddi_action" ) )
					{
						if ( obj.ddi_action == "" || obj.ddi_action == " " || obj.ddi_action == "-" )
						{
							cln.editable = false;
							continue;
						}
					}
					else
					{
						cln.editable = false;
						continue;
					}
					
					
					if ( i != event.columnIndex )
					{
						cln.editable = false;
					}
					else
					{
						if ( obj.ddi_action == "+" || obj.ddi_action == "*" )
						{
							/*
							ddi_line_item_num	NUMBER(6,0)
							ddi_prod_code		VARCHAR2(36 BYTE)
							ddi_unit			NUMBER(2,0)
							
							*ddi_item_cat		NUMBER(4,0)
							*ddi_cmpt_num		NUMBER(2,0)
							*ddi_qty				NUMBER(9,0)
							*ddi_item_desc		VARCHAR2(36 BYTE)
							*ddi_duty_code		VARCHAR2(20 BYTE)
							*ddi_excise_lic_num	NUMBER(15,0)
							*ddi_ref_doc_num		NUMBER(10,0)
							*ddi_site_capacity	NUMBER(10,0)
							*ddi_tank_code		VARCHAR2(20 BYTE)							
							*/
							/*
							if ( cln.dataField == "ddi_item_cat" 
								|| cln.dataField == "ddi_cmpt_num" 
								|| cln.dataField == "ddi_item_desc" 
								|| cln.dataField == "ddi_qty" 
								|| cln.dataField == "ddi_duty_code" 
								|| cln.dataField == "ddi_excise_lic_num" 
								|| cln.dataField == "ddi_ref_doc_num" 
								|| cln.dataField == "ddi_site_capacity" 
								|| cln.dataField == "ddi_tank_code" 
							)
							{
								cln.editable = true;
							}
							else
							{
								cln.editable = false;
							}
							*/
							cln.editable = false;
							for each ( var columnSetting:Object in this.deliveryLineSettings )
							{
								if ( columnSetting['grid']=="ddiGrid" && cln.dataField == columnSetting['column'] )
								{
									if ( (int(columnSetting['flags'])  & 0x01) > 0 )
									{
										cln.editable = true;
									}
									else
									{
										cln.editable = false;
									}
									break;
								}
							}
							
							
						}
						else
						{
							cln.editable = false;
						}
					}
				}
				
				
			}
			
			protected function ddiGrid_gridClickHandler(event:GridEvent):void
			{
				// TODO Auto-generated method stub
				this.ddiGrid_toggleCellEditability(event);
			}
			
			protected function cleanInvalidCharsFromText( txt:String, charset:String, maxlen:int ):String
			{
				var new_txt:String="";
				var i:int;
				var len:int;
				var invalid:Boolean = false;
				var errors:String="";
				var index:int=0;
				
				len = txt.length;
				for( i=0; i<len; i++ )
				{
					var c:String = txt.charAt(i);
					if ( charset.indexOf(c) >= 0 || charset.length==0 )
					{
						new_txt += c;
					}
					else
					{
						invalid = true;
					}
				}
				
				if ( invalid == true )
				{
					index += 1;
					errors += String(index) + ". " + "Expecting A-Z,a-z,0-9, _-, and the invalid characters in value [" + txt + "] has been cleaned. \n";
				}
				
				if ( new_txt.length > maxlen )
				{
					index += 1;
					errors += String(index) + ". " + "Maximum length is " + maxlen + ", and the value [" + new_txt + "] has been truncated to [";
					new_txt = new_txt.substr(0, maxlen);
					errors += new_txt + "]. \n";
				}
				
				/* if ( errors.length>0 )
				{
				global.msgWarning( errors );
				} */
				
				if ( index > 0 )
				{
					var errorBox:MessageDialog = new MessageDialog( errors );
				}
				
				return new_txt;
			}
			
			
			protected function CheckGridColumnValue( txt:String, charset:String, maxlen:int ):String
			{
				var errors:String="";
				var index:int=0;
				
				if ( charset == "NUMBER" && tools.isValueNumeric( txt ) == false )
				{
					index += 1;
					errors += String(index) + ". " + resourceManager.getString('default','VALIDATION__FIELD__NUMBER__NOMATCH') + " \n";
				}
				
				var blen:int = global.getTextByteLength(txt);
				if ( blen > maxlen )
				{
					index += 1;
					//errors += String(index) + ". " + "The length of [" + txt + "] has exceeded the maximum " + maxlen + ". \n";
					errors += String(index) + ". " + resourceManager.getString('default','VALIDATION__FIELD__STRING__LENGTH_BYTE') + String(blen) + resourceManager.getString('default','VALIDATION__FIELD__STRING__LENGTH_TOOLONG') + String(maxlen) + ". \n";
				}
				
				/* if ( errors.length>0 )
				{
				global.msgWarning( errors );
				} */
				
				if ( index > 0 )
				{
					var errorBox:MessageDialog = new MessageDialog( errors );
				}
				
				return txt;
			}
			
			protected function ddiGrid_gridItemEditorSessionSaveHandler(event:GridItemEditorEvent):void
			{
				/*
				ddi_line_item_num	NUMBER(6,0)
				ddi_prod_code		VARCHAR2(36 BYTE)
				ddi_unit			NUMBER(2,0)
				
				*ddi_item_cat		NUMBER(4,0)
				*ddi_cmpt_num		NUMBER(2,0)
				*ddi_qty				NUMBER(9,0)
				*ddi_excise_lic_num	NUMBER(15,0)
				*ddi_ref_doc_num		NUMBER(10,0)
				*ddi_site_capacity	NUMBER(10,0)
				
				*ddi_item_desc		VARCHAR2(36 BYTE)
				*ddi_duty_code		VARCHAR2(20 BYTE)
				*ddi_tank_code		VARCHAR2(20 BYTE)							
				*/
				
				var alphanumeric_charset:String="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789 _-";
				
				for each ( var columnSetting:Object in this.deliveryLineSettings )
				{
					if ( columnSetting['grid']=="ddiGrid" && event.column.dataField == columnSetting['column'] )
					{
						var charset:String="";
						if ( columnSetting['validation'] == "document" )
						{
							charset = "STRING";
						}
						else if ( columnSetting['validation'] == "email" )
						{
							charset = "STRING";
						}
						else if ( columnSetting['validation'] == "numeric" )
						{
							charset = "NUMBER";
						}
						else
						{
							charset = "STRING";
						}
						
						var x:Object = this.ddiGrid.dataProvider[ddiGrid.selectedIndex];
						var maxlen:int = columnSetting['length'];
						
						this.CheckGridColumnValue( x[ columnSetting['column'] ], charset, maxlen );
					}
				}
				
			}
			
			protected function ddiGrid_gridItemEditorSessionSaveHandler2(event:GridItemEditorEvent):void
			{
				/*
				ddi_line_item_num	NUMBER(6,0)
				ddi_prod_code		VARCHAR2(36 BYTE)
				ddi_unit			NUMBER(2,0)
				
				*ddi_item_cat		NUMBER(4,0)
				*ddi_cmpt_num		NUMBER(2,0)
				*ddi_qty				NUMBER(9,0)
				*ddi_excise_lic_num	NUMBER(15,0)
				*ddi_ref_doc_num		NUMBER(10,0)
				*ddi_site_capacity	NUMBER(10,0)
				
				*ddi_item_desc		VARCHAR2(36 BYTE)
				*ddi_duty_code		VARCHAR2(20 BYTE)
				*ddi_tank_code		VARCHAR2(20 BYTE)							
				*/
				
				var alphanumeric_charset:String="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789 _-";
				if (event.column.dataField == 'ddi_item_cat')
				{
					this.CheckGridColumnValue( this.ddiGrid.dataProvider[ddiGrid.selectedIndex].ddi_item_cat, 'NUMBER', 4 );
				}
				if (event.column.dataField == 'ddi_cmpt_num')
				{
					this.CheckGridColumnValue( this.ddiGrid.dataProvider[ddiGrid.selectedIndex].ddi_cmpt_num, 'NUMBER', 2 );
				}
				if (event.column.dataField == 'ddi_qty')
				{
					this.CheckGridColumnValue( this.ddiGrid.dataProvider[ddiGrid.selectedIndex].ddi_qty, 'NUMBER', 9 );
				}
				if (event.column.dataField == 'ddi_excise_lic_num')
				{
					this.CheckGridColumnValue( this.ddiGrid.dataProvider[ddiGrid.selectedIndex].ddi_excise_lic_num, 'NUMBER', 15 );
				}
				if (event.column.dataField == 'ddi_ref_doc_num')
				{
					this.CheckGridColumnValue( this.ddiGrid.dataProvider[ddiGrid.selectedIndex].ddi_ref_doc_num, 'NUMBER', 10 );
				}
				if (event.column.dataField == 'ddi_site_capacity')
				{
					this.CheckGridColumnValue( this.ddiGrid.dataProvider[ddiGrid.selectedIndex].ddi_site_capacity, 'NUMBER', 10 );
				}
				
				if (event.column.dataField == 'ddi_item_desc')
				{
					this.CheckGridColumnValue( this.ddiGrid.dataProvider[ddiGrid.selectedIndex].ddi_item_desc, 'STRING', 36 );
				}
				if (event.column.dataField == 'ddi_duty_code')
				{
					this.CheckGridColumnValue( this.ddiGrid.dataProvider[ddiGrid.selectedIndex].ddi_duty_code, 'STRING', 20 );
				}
				if (event.column.dataField == 'ddi_tank_code')
				{
					this.CheckGridColumnValue( this.ddiGrid.dataProvider[ddiGrid.selectedIndex].ddi_tank_code, 'STRING', 20 );
				}
			}
			
			
			
			public function dddGrid_toggleCellEditability(event:GridEvent):void
			{
				var i:int;
				var cln:GridColumn;
				var obj:Object;
				var msg:String;
				
				//this.toggleDeleteButton();
				
				if ( event.rowIndex < 0 || event.columnIndex < 0 || event.rowIndex > this.dddGrid.dataProviderLength-1)
				{
					trace ("***********current cell, out of range:", event.columnIndex, event.rowIndex);
					return;	
				}
				
				obj = this.dddGrid.dataProvider[event.rowIndex];
				if ( obj == null )
				{
					return;
				}
				
				trace ("***********current cell, in the range:", event.columnIndex, event.rowIndex);
				
				for ( i=0; i<this.dddGrid.columns.length; i++ )
				{
					cln = (this.dddGrid.columns.getItemAt(i) as GridColumn);
					
					//trace ("***********current row action:", event.rowIndex, ">>"+view.itemList.dataProvider[event.rowIndex].action+"<<");
					
					// if  no action is initialized, not editable
					if ( obj.hasOwnProperty( "ddd_action" ) )
					{
						if ( obj.ddd_action == "" || obj.ddd_action == " " || obj.ddd_action == "-" )
						{
							cln.editable = false;
							continue;
						}
					}
					else
					{
						cln.editable = false;
						continue;
					}
					
					
					if ( i != event.columnIndex )
					{
						cln.editable = false;
					}
					else
					{
						if ( obj.ddd_action == "+" || obj.ddd_action == "*" )
						{
							cln.editable = true;
						}
						else
						{
							cln.editable = false;
						}
					}
				}
				
				
			}
			
			protected function dddGrid_gridClickHandler(event:GridEvent):void
			{
				// do nothing
				return;
				
				// TODO Auto-generated method stub
				this.dddGrid_toggleCellEditability(event);
			}
			
			protected function dddGrid_gridItemEditorSessionSaveHandler(event:GridItemEditorEvent):void
			{
				// do nothing
				return;
				
				var alphanumeric_charset:String="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789 _-";
				if (event.column.dataField == 'db_addr_line')
				{
					var new_txt:String;
					new_txt = this.cleanInvalidCharsFromText( this.dddGrid.dataProvider[dddGrid.selectedIndex].db_addr_line, alphanumeric_charset, 120 );
					//new_txt = this.cleanInvalidCharsFromText( this.ddItemGrid.dataProvider[ddItemGrid.selectedIndex].db_addr_line, "", 120 );
					this.ddiGrid.dataProvider[ddiGrid.selectedIndex].db_addr_line = new_txt;
				}
			}
			
			
			
			public function dbGrid_toggleCellEditability(event:GridEvent):void
			{
				var i:int;
				var cln:GridColumn;
				var obj:Object;
				var msg:String;
				
				//this.toggleDeleteButton();
				
				if ( event.rowIndex < 0 || event.columnIndex < 0 || event.rowIndex > this.dbGrid.dataProviderLength-1)
				{
					trace ("***********current cell, out of range:", event.columnIndex, event.rowIndex);
					return;	
				}
				
				obj = this.dbGrid.dataProvider[event.rowIndex];
				if ( obj == null )
				{
					return;
				}
				
				trace ("***********current cell, in the range:", event.columnIndex, event.rowIndex);
				
				for ( i=0; i<this.dbGrid.columns.length; i++ )
				{
					cln = (this.dbGrid.columns.getItemAt(i) as GridColumn);
					
					//trace ("***********current row action:", event.rowIndex, ">>"+view.itemList.dataProvider[event.rowIndex].action+"<<");
					
					// if  no action is initialized, not editable
					if ( obj.hasOwnProperty( "db_action" ) )
					{
						if ( obj.db_action == "" || obj.db_action == " " || obj.db_action == "-" )
						{
							cln.editable = false;
							continue;
						}
					}
					else
					{
						cln.editable = false;
						continue;
					}
					
					
					if ( i != event.columnIndex )
					{
						cln.editable = false;
					}
					else
					{
						if ( obj.db_action == "+" || obj.db_action == "*" )
						{
							cln.editable = true;
						}
						else
						{
							cln.editable = false;
						}
					}
				}
				
				
			}
			
			protected function dbGrid_gridClickHandler(event:GridEvent):void
			{
				// do nothing
				return;
				
				// TODO Auto-generated method stub
				this.dbGrid_toggleCellEditability(event);
			}
			
			protected function dbGrid_gridItemEditorSessionSaveHandler(event:GridItemEditorEvent):void
			{
				// do nothing
				return;
				
				var alphanumeric_charset:String="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789 _-";
				if (event.column.dataField == 'db_addr_line')
				{
					var new_txt:String;
					new_txt = this.cleanInvalidCharsFromText( this.dbGrid.dataProvider[dddGrid.selectedIndex].db_addr_line, alphanumeric_charset, 120 );
					//new_txt = this.cleanInvalidCharsFromText( this.ddItemGrid.dataProvider[ddItemGrid.selectedIndex].db_addr_line, "", 120 );
					this.ddiGrid.dataProvider[ddiGrid.selectedIndex].db_addr_line = new_txt;
				}
			}
			
			
			
			public function afterClosePartnerList():void
			{
				trace("-------------------Back from PartnerList", this.partnershipPopup.popupView.dataGrid.selectedIndex);
				var obj:Object = this.partnershipPopup.popupView.partnerSelected;
				if ( obj != null && obj.hasOwnProperty( 'ACTION' ) && obj["ACTION"] == "CANCEL" )
				{
					return;
				}
				
				if ( obj != null && obj.hasOwnProperty( 'AG' ) )
				{
					this.dd_sold_to.text = obj[ "AG" ];
				}
				if ( obj != null && obj.hasOwnProperty( 'WE' ) )
				{
					this.dd_ship_to.text = obj[ "WE" ];
				}
			}
			
			protected function popupPartnerList(event:MouseEvent)
			{
				if ( this.dd_supp_code.selectedIndex < 0 )
				{
					global.msgWarning( resourceManager.getString('default','LOADSCHD.MESSAGE.REQUIRE_SUPP4PARTNER') );
					return;
				}
				
				this.partnershipPopup.popupTitle = resourceManager.getString('default','m_partnership');
				this.partnershipPopup.setSecurity( this.readOnly, this.canUpdate, this.canCreate, this.canDelete, this.hasPassword );
				
				this.partnershipPopup.parentWidth = this.width/2;
				this.partnershipPopup.parentHeight = this.height/2;
				
				trace ( "*******************Pop up a screen to manage partnership!");
				partnershipPopup.openDialog();
				
				var params:Object = new Object();
				
				if ( event.currentTarget.id == 'btn_soldto' )
				{
					params["partner_code"] = this.dd_sold_to.text;
					params["partner_type"] = "AG";
					params["partner_cmpy_code"] = this.dd_supp_code.selectedItem.cmpy_code;
					params["partner_cust_acct"] = "";
				}
				
				if ( event.currentTarget.id == 'btn_shipto' )
				{
					params["partner_code"] = this.dd_ship_to.text;
					params["partner_type"] = "WE";
					params["partner_cmpy_code"] = this.dd_supp_code.selectedItem.cmpy_code;
					params["partner_cust_acct"] = "";
				}
				
				partnershipPopup.setFilters( params ); 
			}
			
			public function setFilters( params:*=false ): void
			{
				if ( params == false )
				{
					return;
				}
				
				this.parentParams = params;
				
				currentState = "normal";
				
				trace ("...............................in setFilters");
				tools.pr( params);
				
				var po:Object=new Object();
				
				po["dd_supp_code"] = tools.getObjAttribute( params, "dd_supp_code", "" );
				po["dd_ld_type"] = tools.getObjAttribute( params, "dd_ld_type", "" );
				po["dd_tripord_no"] = tools.getObjAttribute( params, "dd_tripord_no", "" );
				po["dd_number"] = tools.getObjAttribute( params, "dd_number", "" );
				
				var fields:Object;
				var types:Object;
				
				//interruptor=false;
				pagedRecords.interruptor=false;
				
				fields = new Object();
				types = new Object();
				
				fields["dd_supp_code"] = po["dd_supp_code"];
				types["dd_supp_code"] = "EXACT_STRING";
				fields["dd_ld_type"] = po["dd_ld_type"];
				types["dd_ld_type"] = "NUMBER";
				fields["dd_tripord_no"] = po["dd_tripord_no"];
				types["dd_tripord_no"] = "NUMBER";
				fields["dd_number"] = po["dd_number"];
				types["dd_number"] = "EXACT_STRING";
				
				currentFields = fields;
				currentTypes = types;
				this.startLoadingPages();
				
				
				if ( po.hasOwnProperty( "dd_supp_code" ) )
				{
					this.fltr_supplier.selectedIndex = tools.getItemIndexFromCode( po["dd_supp_code"], supplierList, "cmpy_code");
				}
				
				if ( po.hasOwnProperty( "dd_ld_type" ) )
				{
					this.fltr_loadtype.selectedIndex = tools.getItemIndexFromCode( po["dd_ld_type"], loadTypeList, "load_type_id");
				}
				
				this.fltr_triporder.text = po["dd_tripord_no"];
				this.fltr_ddnumber.text = po["dd_number"];
				
				
				pb.values(pagedRecords.length,pagedRecords.length)
			}
			
			
			protected function btn_offline_message_clickHandler(event:MouseEvent):void
			{
				this.offlineMessagingPopup.popupTitle = resourceManager.getString('default','BUTTON__DELIVERY_DETAILS');
				//this.offlineMessagingPopup.setSecurity( this.readOnly, this.canUpdate, this.canCreate, this.canDelete, this.hasPassword );
				this.offlineMessagingPopup.setSecurity( this.readOnly, false, false, false, false );
				
				this.offlineMessagingPopup.parentWidth = this.width;
				this.offlineMessagingPopup.parentHeight = this.height;
				
				trace ( "*******************Pop up a screen to manage offline messagings!");
				offlineMessagingPopup.openDialog();
				
				var params:Object = new Object();
				
				
				params["dd_supp_code"] = fltr_supplier.selectedItem.cmpy_code;
				params["dd_tripord_no"] = fltr_triporder.text;
				params["dd_ld_type"] = fltr_loadtype.selectedItem.load_type_code;
				params["dd_number"] = fltr_ddnumber.text;
				
				offlineMessagingPopup.setFilters( params ); 
			}
			
			protected function adjustOfflineMessageEditability():void
			{
				if ( 
//					pagedRecords.totalCount <= 0
					this.dataGrid.dataProviderLength <= 0
					&& fltr_supplier.selectedIndex >= 0 
					&& fltr_loadtype.selectedIndex >= 0 
					&& StringUtil.trim(fltr_triporder.text).length >= 0
//					&& StringUtil.trim(fltr_ddnumber.text).length >= 0
				)
				{
					this.canEditOfflineMessage = true;
				}
				else
				{
					this.canEditOfflineMessage = false;
				}
				
				//this.canCreate = this.canEditOfflineMessage;
			}
			
			protected function goToDdiAdditionalInfo()
			{
				this.ddiAdditionalInfoPopup.popupTitle = resourceManager.getString('default','TITLE__DDI_ADDI_INFO');
				this.ddiAdditionalInfoPopup.setSecurity( this.readOnly, this.canUpdate, this.canCreate, this.canDelete, this.hasPassword );
				//this.ddiAdditionalInfoPopup.setSecurity( this.readOnly, false, false, false, false );
				
				this.ddiAdditionalInfoPopup.parentWidth = this.width;
				this.ddiAdditionalInfoPopup.parentHeight = this.height;
				
				trace ( "*******************Pop up a screen to manage delivery details item additional info!");
				ddiAdditionalInfoPopup.openDialog();
				
				var params:Object = new Object();
				
				params["ddi_dd_number"] = this.ddiGrid.selectedItem.ddi_dd_number;
				params["ddi_dd_supp_code"] = this.ddiGrid.selectedItem.ddi_dd_supp_code;
				params["ddi_dd_tripord_no"] = this.ddiGrid.selectedItem.ddi_dd_tripord_no;
				params["ddi_dd_ld_type"] = this.ddiGrid.selectedItem.ddi_dd_ld_type;
				params["ddi_line_item_num"] = this.ddiGrid.selectedItem.ddi_line_item_num;
				
				ddiAdditionalInfoPopup.setFilters( params ); 
			}
			
			protected function goToDddAdditionalInfo()
			{
				this.dddAdditionalInfoPopup.popupTitle = resourceManager.getString('default','TITLE__DDD_ADDI_INFO');
				this.dddAdditionalInfoPopup.setSecurity( this.readOnly, this.canUpdate, this.canCreate, this.canDelete, this.hasPassword );
				//this.dddAdditionalInfoPopup.setSecurity( this.readOnly, false, false, false, false );
				
				this.dddAdditionalInfoPopup.parentWidth = this.width;
				this.dddAdditionalInfoPopup.parentHeight = this.height;
				
				trace ( "*******************Pop up a screen to manage delivery details DN additional info!");
				dddAdditionalInfoPopup.openDialog();
				
				var params:Object = new Object();
				
				params["ddd_dd_number"] = this.dddGrid.selectedItem.ddd_dd_number;
				params["ddd_dd_supp_code"] = this.dddGrid.selectedItem.ddd_dd_supp_code;
				params["ddd_dd_tripord_no"] = this.dddGrid.selectedItem.ddd_dd_tripord_no;
				params["ddd_dd_ld_type"] = this.dddGrid.selectedItem.ddd_dd_ld_type;
				params["ddd_templ_id"] = this.dddGrid.selectedItem.ddd_templ_id;
				
				dddAdditionalInfoPopup.setFilters( params );
			}
			
		]]>
	</fx:Script>
	<fx:Declarations>
		<s:DateTimeFormatter id="dateFormatter" locale="{LocaleID.DEFAULT}" dateStyle="short" timeStyle="none"/>
		<s:DateTimeFormatter id="dateConvert" dateTimePattern="yyyy-MM-dd"/>
		<s:DateTimeFormatter id="dateConvertLong" dateTimePattern="yyyy-MM-dd HH:mm:ss"/>
		<components:ValidationGroup id="vg" action="{save_clickHandler}" defaultButton="{btn_save}" parentScreen="{this}" isProtected="{hasPassword}"/>
	</fx:Declarations>
	<s:Panel id="panel" width="100%" height="100%"
			 skinClass="skins.WidgetPanelSkin"
			 skinClass.widget="skins.NullSkin">
		<s:layout>
			<s:VerticalLayout/>
		</s:layout>
		<s:VGroup width="100%" id="toolbar"  >
			<s:HGroup gap="5" paddingBottom="2" paddingTop="2" width="100%">
				<components:DKI_DropDownList id="fltr_supplier" width="170" height="100%"
											 change="fltr_supplier_changeHandler(event)" cornerRadius="10"
											 labelField="cmpy_desc" prompt="{resourceManager.getString('default','DD_SUPPLIER')+resourceManager.getString('default','FILTER')}"
											 width.edit="182" width.widget="160" dataProvider="{supplierList}"/>
				
				<components:DKI_ValidatorInput id="fltr_triporder" validationType="search" minWidth="160" height="{labelHeight}" width="160"
											   keyUp="fltr_triporder_keyUpHandler(event)" 
											   prompt="{resourceManager.getString('default','DD_TRIPORD_NO')+resourceManager.getString('default','FILTER')}"/>
				
				<components:DKI_DropDownList id="fltr_loadtype" width="140" height="100%"
											 change="fltr_loadtype_changeHandler(event)" cornerRadius="10"
											 labelField="load_type_name" prompt="{resourceManager.getString('default','DD_LOAD_TYPENAME')+resourceManager.getString('default','FILTER')}"
											 width.edit="182" width.widget="160" dataProvider="{loadTypeList}"/>
				
				<components:DKI_ValidatorInput id="fltr_ddnumber" validationType="search" minWidth="200" height="{labelHeight}" width="200"
											   keyUp="fltr_ddnumber_keyUpHandler(event)" 
											   prompt="{resourceManager.getString('default','DD_NUMBER')+resourceManager.getString('default','FILTER')}"/>
				
				<!--<components:DKI_Button id="btn_offline_message" label="Offline Messaging" height="24" 
									   enabled="{this.canEditOfflineMessage}" type="edit" click="btn_offline_message_clickHandler(event)"/>-->

				<s:Spacer width="100%"/>
				<components:DKI_Button id="filterBtn" height="24" noLabel="false" click="filterRecords(event)"
									   type="filteron"/>
				<components:DKI_Button id="resetBtn" height="24" noLabel="false" click="refreshRecords(event)"
									   type="filteroff"/>
				<components:DKI_Button height="100%" label="{resourceManager.getString('default','RESET')+resourceManager.getString('default','FILTER')}" click="resetRecords(event)"
									   width.widget="100%" type="refresh"/>
				<components:DKI_Button id="btn_export" label="{resourceManager.getString('default','EXPORTDATA')}" type="report" click="exportCsvHandler(event)" includeIn="normal"/>
				<components:DKI_Button id="btn_create" label="{resourceManager.getString('default','CREATE')}" height="24" click="createNewRecord(event)" includeIn="normal" enabled="{this.canCreate}" visible="{this.canCreate}" includeInLayout="{this.canCreate}" type="create"/>	
			</s:HGroup>
		</s:VGroup>
			
		
		<s:DataGrid id="dataGrid" width="100%" height="100%" requestedRowCount="4"
					selectionChange="dataGrid_selectionChangeHandler(event)"
					skinClass="skins.DKI_DataGrid_Skin"
					height.widget="100%">
			<s:columns>
				<s:ArrayList>
					<s:source>
						<s:GridColumn dataField="dd_number" headerText="{resourceManager.getString('default','DD_NUMBER')}" visible="true" width="150"></s:GridColumn>
						<s:GridColumn dataField="dd_supp_code" headerText="{resourceManager.getString('default','DD_SUPP_CODE')}" visible="true" width="100"></s:GridColumn>
						<s:GridColumn dataField="dd_supp_name" headerText="{resourceManager.getString('default','DD_SUPP_NAME')}" visible="true" width="150"></s:GridColumn>
						<s:GridColumn dataField="dd_tripord_no" headerText="{resourceManager.getString('default','DD_TRIPORD_NO')}" visible="true" width="100"></s:GridColumn>
						<s:GridColumn dataField="dd_ld_type" headerText="{resourceManager.getString('default','DD_LD_TYPE')}" visible="false" width="100"></s:GridColumn>
						<s:GridColumn dataField="dd_load_typename" headerText="{resourceManager.getString('default','DD_LOAD_TYPENAME')}" visible="true" width="120"></s:GridColumn>
						<s:GridColumn dataField="dd_sold_to" headerText="{resourceManager.getString('default','DD_SOLD_TO')}" visible="true" width="100"></s:GridColumn>
						<s:GridColumn dataField="dd_sold_to_desc" headerText="{resourceManager.getString('default','DD_SOLD_TO_DESC')}" visible="true" width="150"></s:GridColumn>
						<s:GridColumn dataField="dd_ship_to" headerText="{resourceManager.getString('default','DD_SHIP_TO')}" visible="true" width="100"></s:GridColumn>
						<s:GridColumn dataField="dd_ship_to_desc" headerText="{resourceManager.getString('default','DD_SHIP_TO_DESC')}" visible="true" width="150"></s:GridColumn>
						<s:GridColumn dataField="dd_delv_type" headerText="{resourceManager.getString('default','DD_DELV_TYPENAME')}" visible="true" width="120"></s:GridColumn>
						<s:GridColumn dataField="dd_delv_typename" headerText="{resourceManager.getString('default','DD_DELV_TYPENAME')}" visible="false" width="120"></s:GridColumn>
						<s:GridColumn dataField="dd_route" headerText="{resourceManager.getString('default','DD_ROUTE')}" visible="true" width="100"></s:GridColumn>
						<s:GridColumn dataField="dd_ship_cond" headerText="{resourceManager.getString('default','DD_SHIP_COND')}" visible="true" width="150"></s:GridColumn>
						<s:GridColumn dataField="dd_veh_arr_time" headerText="{resourceManager.getString('default','DD_VEH_ARR_TIME')}" itemRenderer="renderers.DateTimeRenderer" visible="true" width="130"></s:GridColumn>
						<s:GridColumn dataField="dd_phone" headerText="{resourceManager.getString('default','DD_PHONE')}" visible="true" width="100"></s:GridColumn>
						<s:GridColumn dataField="dd_instruction" headerText="{resourceManager.getString('default','DD_INSTRUCTION')}" visible="true" width="100"></s:GridColumn>
						<s:GridColumn dataField="dd_lpg_remark" headerText="{resourceManager.getString('default','DD_LPG_REMARK')}" visible="true" width="100"></s:GridColumn>
						<s:GridColumn dataField="dd_sales_ord_num" headerText="{resourceManager.getString('default','DD_SALES_ORD_NUM')}" visible="true" width="150"></s:GridColumn>
						<s:GridColumn dataField="dd_cust_po" headerText="{resourceManager.getString('default','DD_CUST_PO')}" visible="true" width="150"></s:GridColumn>
						<s:GridColumn dataField="dd_sale_ord_type" headerText="{resourceManager.getString('default','DD_SALE_ORD_TYPE')}" visible="true" width="120"></s:GridColumn>
						<s:GridColumn dataField="dd_vat_id" headerText="{resourceManager.getString('default','DD_VAT_ID')}" visible="true" width="130"></s:GridColumn>
						<s:GridColumn dataField="dd_custom_code" headerText="{resourceManager.getString('default','DD_CUSTOM_CODE')}" visible="true" width="150"></s:GridColumn>
						<s:GridColumn dataField="dd_lpg_dest_type" headerText="{resourceManager.getString('default','DD_LPG_DEST_TYPE')}" visible="true" width="200"></s:GridColumn>
						<s:GridColumn dataField="dd_permit_num" headerText="{resourceManager.getString('default','DD_PERMIT_NUM')}" visible="true" width="200"></s:GridColumn>
						<s:GridColumn dataField="dd_sell_cmpy_code" headerText="{resourceManager.getString('default','DD_SELL_CMPY_CODE')}" visible="true" width="200"></s:GridColumn>
					</s:source>
				</s:ArrayList>
			</s:columns>
			<s:dataProvider>
				<!--s:AsyncListView id="pgList" list="{getPagedResult.lastResult}"/-->
				<s:AsyncListView id="pgList" list="{pagedRecords}"/>
			</s:dataProvider>
		</s:DataGrid>
		<s:HGroup width="100%">
			<components:Downloader id="pb" width="100%" height="18"/>
			<!--mx:ProgressBar id="pb" width="100%" height="22" visible="false" includeInLayout="false"  mode="manual" source="{this.pgList}" label="{this.currentLength} records shown from {this.currentLength} loaded out of {this.totalLength} found." labelPlacement="center"/-->
			<s:Button id="killBtn" width="18" height="18" label="" cornerRadius="12" visible="false" includeInLayout="false"
					  click="killBtn_clickHandler(event)"/>
			<s:Button id="resumeBtn" width="18" height="18" label="" cornerRadius="12" visible="false" includeInLayout="false"
					  click="resumeBtn_clickHandler(event)"/>
		</s:HGroup>
	</s:Panel>
	
	<s:Panel id="details" includeIn="edit,create,detail" width="100%" height="480"
			 itemCreationPolicy="immediate" skinClass="skins.WidgetPanelSkin">
		<s:layout>
			<s:VerticalLayout gap="8" paddingTop="5"/>
			<!--s:TileLayout/-->
		</s:layout>
		
		<s:VGroup width="100%">
			
			<s:HGroup width="100%">
				<s:HGroup>
					<s:Label width="{labelWidth}" height="{labelHeight}" text="{resourceManager.getString('default','DD_SUPPLIER')}" verticalAlign="middle"/>
					<components:DKI_ValidatorComboBox id="dd_supp_code" 
													  dataProvider="{supplierList}" 
													  labelField="cmpy_desc" 
													  selectedItem="" enabled="false" enabled.edit="false" 
													  selectedIndex.create="{this.fltr_supplier.selectedIndex}" enabled.create="false" enabled.detail="false"
													  width="{fieldWidth}" height="{fieldHeight}" change="checkDeliveryDetailKey()" 
													  prompt="{resourceManager.getString('default','SELECT')+resourceManager.getString('default','DD_SUPPLIER')}"  
													  required="true" validationGroup="{vg}" automationName="{resourceManager.getString('default','DD_SUPPLIER')}" 
													  />
				</s:HGroup>
				<s:Spacer width="{spaceWidth}" />
				<s:HGroup>
					<s:Label width="{labelWidth}" height="{labelHeight}" text="{resourceManager.getString('default','DD_TRIPORD_NO')}" verticalAlign="middle"/>
					<components:DKI_ValidatorInput id="dd_tripord_no" maxChars="9" 
												   width="{fieldWidth}" height="{fieldHeight}" 
												   text="{dataGrid.selectedItem.dd_tripord_no}" editable="false" enabled="false" editable.detail="false" enabled.detail="true"
												   text.create="{this.fltr_triporder.text}" editable.create="false" enabled.create="true" focusOut="checkDeliveryDetailKey()" 
												   required="true" validationType="integer" validationGroup="{vg}" automationName="{resourceManager.getString('default','DD_TRIPORD_NO')}" 
												   />
				</s:HGroup>
				<s:Spacer width="{spaceWidth}" />
				<s:HGroup>
					<s:Label width="{labelWidth}" height="{labelHeight}" text="{resourceManager.getString('default','DD_LOAD_TYPENAME')}" verticalAlign="middle"/>
					<components:DKI_ValidatorComboBox id="dd_ld_type" 
													  dataProvider="{loadTypeList}" 
													  labelField="load_type_name" 
													  selectedItem="{dataGrid.selectedItem.dd_load_typename}" enabled="false" enabled.edit="false"  enabled.detail="false"
													  selectedIndex.create="{this.fltr_loadtype.selectedIndex}" enabled.create="false" 
													  width="{fieldWidth}" height="{fieldHeight}" change="checkDeliveryDetailKey()" 
													  prompt="{resourceManager.getString('default','SELECT')+resourceManager.getString('default','DD_LOAD_TYPENAME')}"  
													  required="true" validationGroup="{vg}" automationName="{resourceManager.getString('default','DD_LOAD_TYPENAME')}" 
													  />
				</s:HGroup>
				<s:Spacer width="{spaceWidth}" />
				<s:HGroup>
					<s:Label width="{labelWidth}" height="{labelHeight}" text="{resourceManager.getString('default','DD_NUMBER')}" verticalAlign="middle"/>
					<components:DKI_ValidatorInput id="dd_number" maxChars="20" 
												   width="{fieldWidth}" height="{fieldHeight}" 
												   text="{dataGrid.selectedItem.dd_number}" editable="false" enabled="false" editable.detail="false" enabled.detail="true"
												   text.create="" editable.create="true" enabled.create="true" focusOut="checkDeliveryDetailKey()" 
												   required="true" validationType="alphanumeric" validationGroup="{vg}" automationName="{resourceManager.getString('default','DD_NUMBER')}" 
												   />
				</s:HGroup>
				
			</s:HGroup>
			
			<s:HGroup width="100%">
				<s:HGroup>
					<s:Label width="{labelWidth}" height="{labelHeight}" text="{resourceManager.getString('default','DD_DELV_TYPENAME')}" verticalAlign="middle"/>
					<components:DKI_ValidatorComboBox id="dd_delv_type" visible="false" includeInLayout="false" 
													  dataProvider="{deliveryTypeList}" 
													  labelField="delivery_type_name" 
													  selectedItem="{dataGrid.selectedItem.dd_delv_typename}" enabled="true" enabled.edit="true"  enabled.detail="false"
													  selectedItem.create="" selectedIndex.create="-1" enabled.create="true" 
													  width="{fieldWidth}" height="{fieldHeight}" 
													  prompt="{resourceManager.getString('default','SELECT')+resourceManager.getString('default','DD_DELV_TYPENAME')}"  
													  required="false" validationGroup="{vg}" automationName="{resourceManager.getString('default','DD_DELV_TYPENAME')}" 
													  />
					<components:DKI_ValidatorInput id="dd_delv_type_txt" maxChars="4" 
												   width="{fieldWidth}" height="{fieldHeight}" 
												   text="{dataGrid.selectedItem.dd_delv_type}" editable="{this.canUpdate}" enabled="{this.canUpdate}" 
												   text.create="" editable.create="{this.canUpdate}" enabled.create="{this.canUpdate}" editable.detail="false" enabled.detail="true" 
												   required="false" validationType="alphanumeric" validationGroup="{vg}" automationName="{resourceManager.getString('default','DD_DELV_TYPENAME')}" 
												   />
				</s:HGroup>
				<s:Spacer width="{spaceWidth}" />
				<s:HGroup>
					<s:Label width="{labelWidth}" height="{labelHeight}" text="{resourceManager.getString('default','DD_VEH_ARR_TIME')}" verticalAlign="middle"/>
					<components:DKI_DateTime id="dd_veh_arr_time" 
											 selectedDate="{convertDateToLocaleLong(dataGrid.selectedItem.dd_veh_arr_time)}" enabled="true"  enabled.detail="false"
											 selectedDate.create="{getDefaultDate()}" enabled.create="true" 
											 width="{fieldWidth}" height="{fieldHeight}" timeEnabled="true"
											 />
				</s:HGroup>
				<s:Spacer width="{spaceWidth}" />
				<s:HGroup>
					<s:Label width="{labelWidth}" height="{labelHeight}" text="{resourceManager.getString('default','DD_SOLD_TO_DESC')}" verticalAlign="middle"/>
					<components:DKI_ValidatorInput id="dd_sold_to" maxChars="20" 
												   width="{this.isPartnershipEnabled?(fieldWidth-19-5):fieldWidth}" height="{fieldHeight}" 
												   text="{dataGrid.selectedItem.dd_sold_to}" editable="true" enabled="true"
												   text.create="" editable.detail="false" enabled.detail="true" editable.edit="true" enabled.edit="true" 
												   required="true" validationType="alphanumeric" validationGroup="{vg}" automationName="{resourceManager.getString('default','DD_SOLD_TO_DESC')}"
												   />
					<components:DKI_Button id="btn_soldto" label="" width="19" height="{fieldHeight-2}" skinClass="skins.DKI_ComboBoxButton_Skin" 
										   enabled="{this.isPartnershipEnabled}" enabled.detail="false" enabled.edit="{this.isPartnershipEnabled}"
										   visible="{this.isPartnershipEnabled}" includeInLayout="{this.isPartnershipEnabled}" click="popupPartnerList(event);"/>
				</s:HGroup>
				<s:Spacer width="{spaceWidth}" />
				<s:HGroup>
					<s:Label width="{labelWidth}" height="{labelHeight}" text="{resourceManager.getString('default','DD_SHIP_TO_DESC')}" verticalAlign="middle"/>
					<components:DKI_ValidatorInput id="dd_ship_to" maxChars="20" 
												   width="{this.isPartnershipEnabled?(fieldWidth-19):fieldWidth}" height="{fieldHeight}" 
												   text="{dataGrid.selectedItem.dd_ship_to}" editable="true" enabled="true"
												   text.create="" editable.detail="false" enabled.detail="true" editable.edit="true" enabled.edit="true" 
												   required="true" validationType="alphanumeric" validationGroup="{vg}" automationName="{resourceManager.getString('default','DD_SHIP_TO_DESC')}"
												   />
					<components:DKI_Button id="btn_shipto" label="" width="19" height="{fieldHeight-2}" skinClass="skins.DKI_ComboBoxButton_Skin" 
										   enabled="{this.isPartnershipEnabled}" enabled.detail="false" enabled.edit="{this.isPartnershipEnabled}"
										   visible="{this.isPartnershipEnabled}" includeInLayout="{this.isPartnershipEnabled}" click="popupPartnerList(event);"/>
				</s:HGroup>
				
			</s:HGroup>
			
			<s:HGroup width="100%">
				<s:HGroup>
					<s:Label width="{labelWidth}" height="{labelHeight}" text="{resourceManager.getString('default','DD_INSTRUCTION')}" verticalAlign="middle"/>
					<components:DKI_ValidatorInput id="dd_instruction" maxChars="70" 
												   width="{fieldWidth*2+labelWidth+spaceWidth+18}" height="{fieldHeight}" 
												   text="{dataGrid.selectedItem.dd_instruction}" editable="true" enabled="true" editable.detail="false"
												   text.create="" editable.create="true" enabled.create="true"
												   required="false" validationType="document" validationGroup="{vg}" automationName="{resourceManager.getString('default','DD_INSTRUCTION')}" 
												   />
				</s:HGroup>
				<s:Spacer width="{spaceWidth}" />
				<s:HGroup>
					<s:Label width="{labelWidth}" height="{labelHeight}" text="{resourceManager.getString('default','DD_LPG_REMARK')}" verticalAlign="middle"/>
					<components:DKI_ValidatorInput id="dd_lpg_remark" maxChars="70" 
												   width="{fieldWidth*2+labelWidth+spaceWidth+18}" height="{fieldHeight}" 
												   text="{dataGrid.selectedItem.dd_lpg_remark}" editable="true" enabled="true" editable.detail="false"
												   text.create="" editable.create="true" enabled.create="true"
												   required="false" validationType="document" validationGroup="{vg}" automationName="{resourceManager.getString('default','DD_LPG_REMARK')}" 
												   />
				</s:HGroup>
				
			</s:HGroup>
			
			<s:HGroup width="100%">
				<s:HGroup>
					<s:Label width="{labelWidth}" height="{labelHeight}" text="{resourceManager.getString('default','DD_PHONE')}" verticalAlign="middle"/>
					<components:DKI_ValidatorInput id="dd_phone" maxChars="40" 
												   width="{fieldWidth}" height="{fieldHeight}" 
												   text="{dataGrid.selectedItem.dd_phone}" editable="true" enabled="true" editable.detail="false"
												   text.create="" editable.create="true" enabled.create="true" 
												   required="false" validationType="document" validationGroup="{vg}" automationName="{resourceManager.getString('default','DD_PHONE')}" 
												   />
				</s:HGroup>
				<s:Spacer width="{spaceWidth}" />
				<s:HGroup>
					<s:Label width="{labelWidth}" height="{labelHeight}" text="{resourceManager.getString('default','DD_SALES_ORD_NUM')}" verticalAlign="middle"/>
					<components:DKI_ValidatorInput id="dd_sales_ord_num" maxChars="20" 
												   width="{fieldWidth}" height="{fieldHeight}" 
												   text="{dataGrid.selectedItem.dd_sales_ord_num}" editable="true" enabled="true" editable.detail="false"
												   text.create="" editable.create="true" enabled.create="true"
												   required="false" validationType="numeric" validationGroup="{vg}" automationName="{resourceManager.getString('default','DD_SALES_ORD_NUM')}" 
												   />
				</s:HGroup>
				<s:Spacer width="{spaceWidth}" />
				<s:HGroup>
					<s:Label width="{labelWidth}" height="{labelHeight}" text="{resourceManager.getString('default','DD_CUST_PO')}" verticalAlign="middle"/>
					<components:DKI_ValidatorInput id="dd_cust_po" maxChars="20" 
												   width="{fieldWidth}" height="{fieldHeight}" 
												   text="{dataGrid.selectedItem.dd_cust_po}" editable="true" enabled="true" editable.detail="false"
												   text.create="" editable.create="true" enabled.create="true" 
												   required="false" validationType="alphanumeric" validationGroup="{vg}" automationName="{resourceManager.getString('default','DD_CUST_PO')}" 
												   />
				</s:HGroup>
				<s:Spacer width="{spaceWidth}" />
				<s:HGroup>
					<s:Label width="{labelWidth}" height="{labelHeight}" text="{resourceManager.getString('default','DD_SALE_ORD_TYPE')}" verticalAlign="middle"/>
					<components:DKI_ValidatorInput id="dd_sale_ord_type" maxChars="20" 
												   width="{fieldWidth}" height="{fieldHeight}" 
												   text="{dataGrid.selectedItem.dd_sale_ord_type}" editable="true" enabled="true" editable.detail="false"
												   text.create="" editable.create="true" enabled.create="true"
												   required="false" validationType="alphanumeric" validationGroup="{vg}" automationName="{resourceManager.getString('default','DD_SALE_ORD_TYPE')}" 
												   />
				</s:HGroup>
				
			</s:HGroup>
			
			<s:HGroup width="100%">
				<s:HGroup includeInLayout="true" visible="true">
					<s:Label width="{labelWidth}" height="{labelHeight}" text="{resourceManager.getString('default','DD_VAT_ID')}" verticalAlign="middle"/>
					<components:DKI_ValidatorInput id="dd_vat_id" maxChars="10" 
												   width="{fieldWidth}" height="{fieldHeight}" 
												   text="{dataGrid.selectedItem.dd_vat_id}" editable="true" enabled="true" editable.detail="false"
												   text.create="" editable.create="true" enabled.create="true"
												   required="false" validationType="alphanumeric" validationGroup="{vg}" automationName="{resourceManager.getString('default','DD_VAT_ID')}" 
												   />
				</s:HGroup>
				<s:Spacer width="{spaceWidth}" />
				<s:HGroup>
					<s:Label width="{labelWidth}" height="{labelHeight}" text="{resourceManager.getString('default','DD_ROUTE')}" verticalAlign="middle"/>
					<components:DKI_ValidatorInput id="dd_route" maxChars="128" 
												   width="{fieldWidth}" height="{fieldHeight}" 
												   text="{dataGrid.selectedItem.dd_route}" editable="true" enabled="true" editable.detail="false"
												   text.create="" editable.create="true" enabled.create="true" 
												   required="false" validationType="document" validationGroup="{vg}" automationName="{resourceManager.getString('default','DD_ROUTE')}" 
												   />
				</s:HGroup>
				<s:Spacer width="{spaceWidth}" />
				<s:HGroup>
					<s:Label width="{labelWidth}" height="{labelHeight}" text="{resourceManager.getString('default','DD_SHIP_COND')}" verticalAlign="middle"/>
					<components:DKI_ValidatorInput id="dd_ship_cond" maxChars="128" 
												   width="{fieldWidth}" height="{fieldHeight}" 
												   text="{dataGrid.selectedItem.dd_ship_cond}" editable="true" enabled="true"  editable.detail="false"
												   text.create="" editable.create="true" enabled.create="true"
												   required="false" validationType="document" validationGroup="{vg}" automationName="{resourceManager.getString('default','DD_SHIP_COND')}" 
												   />
				</s:HGroup>
				
			</s:HGroup>
			
			<s:HGroup width="100%">
				<s:HGroup includeInLayout="true" visible="true">
					<s:Label width="{labelWidth}" height="{labelHeight}" text="{resourceManager.getString('default','DD_CUSTOM_CODE')}" verticalAlign="middle"/>
					<components:DKI_ValidatorInput id="dd_custom_code" maxChars="100" 
												   width="{fieldWidth}" height="{fieldHeight}" 
												   text="{dataGrid.selectedItem.dd_custom_code}" editable="true" enabled="true" editable.detail="false"
												   text.create="" editable.create="true" enabled.create="true"
												   required="false" validationType="document" validationGroup="{vg}" automationName="{resourceManager.getString('default','DD_CUSTOM_CODE')}" 
												   />
				</s:HGroup>
				<s:Spacer width="{spaceWidth}" />
				<s:HGroup>
					<s:Label width="{labelWidth}" height="{labelHeight}" text="{resourceManager.getString('default','DD_LPG_DEST_TYPE')}" verticalAlign="middle"/>
					<components:DKI_ValidatorInput id="dd_lpg_dest_type" maxChars="210" 
												   width="{fieldWidth}" height="{fieldHeight}" 
												   text="{dataGrid.selectedItem.dd_lpg_dest_type}" editable="true" enabled="true" editable.detail="false"
												   text.create="" editable.create="true" enabled.create="true" 
												   required="false" validationType="document" validationGroup="{vg}" automationName="{resourceManager.getString('default','DD_LPG_DEST_TYPE')}" 
												   />
				</s:HGroup>
				<s:Spacer width="{spaceWidth}" />
				<s:HGroup>
					<s:Label width="{labelWidth}" height="{labelHeight}" text="{resourceManager.getString('default','DD_PERMIT_NUM')}" verticalAlign="middle"/>
					<components:DKI_ValidatorInput id="dd_permit_num" maxChars="210" 
												   width="{fieldWidth}" height="{fieldHeight}" 
												   text="{dataGrid.selectedItem.dd_permit_num}" editable="true" enabled="true"  editable.detail="false"
												   text.create="" editable.create="true" enabled.create="true"
												   required="false" validationType="document" validationGroup="{vg}" automationName="{resourceManager.getString('default','DD_PERMIT_NUM')}" 
												   />
				</s:HGroup>
				<s:Spacer width="{spaceWidth}" />
				<s:HGroup>
					<s:Label width="{labelWidth}" height="{labelHeight}" text="{resourceManager.getString('default','DD_SELL_CMPY_CODE')}" verticalAlign="middle"/>
					<components:DKI_ValidatorInput id="dd_sell_cmpy_code" maxChars="16" 
												   width="{fieldWidth}" height="{fieldHeight}" 
												   text="{dataGrid.selectedItem.dd_sell_cmpy_code}" editable="true" enabled="true"  editable.detail="false"
												   text.create="" editable.create="true" enabled.create="true"
												   required="false" validationType="document" validationGroup="{vg}" automationName="{resourceManager.getString('default','DD_SELL_CMPY_CODE')}" 
												   />
				</s:HGroup>
				
			</s:HGroup>
			
			
			<mx:HRule width="100%"/>
			
			<s:HGroup width="100%">
				<s:VGroup width="80%">
					<s:HGroup>
						<s:Label width="{(this.canUpdate||this.canDelete||this.canCreate)?labelWidth:labelWidth+100}" height="{labelHeight}" text="{resourceManager.getString('default','BUTTON__DELIVERY_DETAILS_ITEM')}" verticalAlign="middle"/>
						<components:SearchComboWithCase id="ddi_products" width="{fieldWidth*2}" height="{fieldHeight}" isTextFieldReset="false" enabled="true" visible="true"
														cornerRadius="10"
														labelField="item_desc" 
														prompt="{resourceManager.getString('default','SELECT')+resourceManager.getString('default','DDI_DELV_ITEMS')}"
														dataProvider="{ddiProductsList}"/>
						<components:DKI_Button id="btn_createLineDDI" width="32" cornerRadius="0" label="{resourceManager.getString('default','BUTTON__ADD_LINE_DDI')}" 
											   toolTip="{resourceManager.getString('default','TOOLTIP__ICON_CROSS_DDILINE')}" height="100%"
											   click="ddi_line_addHandler()" enabled="true" type="create" visible="{this.canCreate}" includeInLayout="{this.canCreate}"/>
						<components:DKI_Button id="btn_deleteLineDDI" width="32" cornerRadius="0" label="{resourceManager.getString('default','BUTTON__REMOVE_LINE_DDI')}" 
											   toolTip="{resourceManager.getString('default','TOOLTIP__ICON_TRASH_DDILINE')}" height="100%" 
											   click="ddi_line_delHandler()" enabled="false" type="delete" visible="{this.canDelete}" includeInLayout="{this.canDelete}"/>
						<components:DKI_Button id="btn_updateLineDDI" width="32" cornerRadius="0" label="{resourceManager.getString('default','BUTTON__EDIT_LINE_DDI')}" 
											   toolTip="{resourceManager.getString('default','TOOLTIP__ICON_PEN_DDILINE')}" height="100%" 
											   click="ddi_line_updHandler()" enabled="false" type="edit" visible="{this.canUpdate}" includeInLayout="{this.canUpdate}"/>
						<components:DKI_Button id="btn_manageAddiInfoDDI" width="32" cornerRadius="0" label="{resourceManager.getString('default','BUTTON__DDI_ADDI_INFO')}" 
											   toolTip="{resourceManager.getString('default','TITLE__DDI_ADDI_INFO')}" height="100%" 
											   click="goToDdiAdditionalInfo()" enabled="false" type="report" visible="{this.canCreate}" includeInLayout="{this.canCreate}"/>
					</s:HGroup>
					
					<s:HGroup width="100%" verticalAlign="middle">
						
						<s:DataGrid id="ddiGrid" width="100%" height="200" requestedRowCount="4" excludeFrom="widget,normal"
									skinClass="skins.DKI_DataGrid_Skin" visible="true" enabled="{this.dd_number.text.length>0}" selectionMode="multipleRows"
									editable="true" editable.detail="false" 
									selectionChange="ddiGrid_selectionChangeHandler(event)"
									gridClick="ddiGrid_gridClickHandler(event)"
									gridItemEditorSessionSave="ddiGrid_gridItemEditorSessionSaveHandler(event)" 
									>
							<s:columns>
								<s:ArrayList>
									<s:source>
										<s:GridColumn dataField="ddi_action" headerText="{resourceManager.getString('default','DDI_ACTION')}" visible="{this.canUpdate||this.canDelete||this.canCreate}" editable="false" width="32" itemRenderer="renderers.GridMarkRenderer"></s:GridColumn>
										<s:GridColumn dataField="ddi_dd_number" headerText="{resourceManager.getString('default','DDI_DD_NUMBER')}" visible="false" editable="false" width="150"></s:GridColumn>
										<s:GridColumn dataField="ddi_dd_supp_code" headerText="{resourceManager.getString('default','DDI_DD_SUPP_CODE')}" visible="false" editable="false" width="100"></s:GridColumn>
										<s:GridColumn dataField="ddi_dd_supp_name" headerText="{resourceManager.getString('default','DDI_DD_SUPP_NAME')}" visible="false" editable="false" width="150"></s:GridColumn>
										<s:GridColumn dataField="ddi_dd_tripord_no" headerText="{resourceManager.getString('default','DDI_DD_TRIPORD_NO')}" visible="false" editable="false" width="100"></s:GridColumn>
										<s:GridColumn dataField="ddi_dd_ld_type" headerText="{resourceManager.getString('default','DDI_DD_LD_TYPE')}" visible="false" editable="false" width="100"></s:GridColumn>
										<s:GridColumn dataField="ddi_dd_load_typename" headerText="{resourceManager.getString('default','DDI_DD_LOAD_TYPENAME')}" visible="false" editable="false" width="120"></s:GridColumn>
										<s:GridColumn dataField="ddi_line_item_num" headerText="{resourceManager.getString('default','DDI_LINE_ITEM_NUM')}" visible="true" editable="false" width="100"></s:GridColumn>
										<s:GridColumn dataField="ddi_item_cat" headerText="{resourceManager.getString('default','DDI_ITEM_CAT')}" visible="true" editable="false" width="100"></s:GridColumn>
										<s:GridColumn dataField="ddi_cmpt_num" headerText="{resourceManager.getString('default','DDI_CMPT_NUM')}" visible="true" editable="false" width="100"></s:GridColumn>
										<s:GridColumn dataField="ddi_cmpy_code" headerText="{resourceManager.getString('default','DDI_CMPY_CODE')}" visible="false" editable="false" width="100"></s:GridColumn>
										<s:GridColumn dataField="ddi_prod_cmpyname" headerText="{resourceManager.getString('default','DDI_PROD_CMPYNAME')}" visible="false" editable="false" width="100"></s:GridColumn>
										<s:GridColumn dataField="ddi_prod_code" headerText="{resourceManager.getString('default','DDI_PROD_CODE')}" visible="true" editable="false" width="100"></s:GridColumn>
										<s:GridColumn dataField="ddi_prod_name" headerText="{resourceManager.getString('default','DDI_PROD_NAME')}" visible="false" editable="false" width="160"></s:GridColumn>
										<s:GridColumn dataField="ddi_item_desc" headerText="{resourceManager.getString('default','DDI_PROD_NAME')}" visible="true" editable="false" width="160"></s:GridColumn>
										<s:GridColumn dataField="ddi_qty" headerText="{resourceManager.getString('default','DDI_QTY')}" visible="true" editable="false" width="100"></s:GridColumn>
										<s:GridColumn dataField="ddi_unit" headerText="{resourceManager.getString('default','DDI_UNIT')}" visible="true" editable="false" width="60"></s:GridColumn>
										<s:GridColumn dataField="ddi_unit_name" headerText="{resourceManager.getString('default','DDI_UNIT_NAME')}" visible="true" editable="false" width="120"></s:GridColumn>
										<s:GridColumn dataField="ddi_duty_code" headerText="{resourceManager.getString('default','DDI_DUTY_CODE')}" visible="true" editable="false" width="120"></s:GridColumn>
										<s:GridColumn dataField="ddi_excise_lic_num" headerText="{resourceManager.getString('default','DDI_EXCISE_LIC_NUM')}" visible="true" editable="false" width="120"></s:GridColumn>
										<s:GridColumn dataField="ddi_ref_doc_num" headerText="{resourceManager.getString('default','DDI_REF_DOC_NUM')}" visible="true" editable="false" width="150"></s:GridColumn>
										<s:GridColumn dataField="ddi_site_capacity" headerText="{resourceManager.getString('default','DDI_SITE_CAPACITY')}" visible="true" editable="false" width="100"></s:GridColumn>
										<s:GridColumn dataField="ddi_tank_code" headerText="{resourceManager.getString('default','DDI_TANK_CODE')}" visible="true" editable="false" width="100"></s:GridColumn>
									</s:source>
								</s:ArrayList>
							</s:columns>
						</s:DataGrid>
					</s:HGroup>
				</s:VGroup>

				<s:VGroup width="10%">
					<!--s:Label width="{(this.canUpdate||this.canDelete||this.canCreate)?labelWidth:labelWidth+100}" height="{labelHeight}" text="{resourceManager.getString('default','BUTTON__DELIVERY_DETAILS_DN')}" verticalAlign="middle"/-->
					<s:HGroup>
						<components:SearchComboWithCase id="ddd_templates" width="{(this.canUpdate||this.canDelete||this.canCreate)?fieldWidth:fieldWidth+100}" 
														height="{fieldHeight}" isTextFieldReset="false" enabled="true" visible="true"
														cornerRadius="10"
														labelField="template_name" 
														prompt="{resourceManager.getString('default','DDD_TEMPL_ID')}"
														dataProvider="{this.dnTemplateList}"/>
						<components:DKI_Button id="btn_createLineDDD" width="32" cornerRadius="0" label="{resourceManager.getString('default','BUTTON__ADD_LINE_DDD')}" 
											   toolTip="{resourceManager.getString('default','TOOLTIP__ICON_CROSS_DDDLINE')}" height="100%"
											   click="ddd_line_addHandler()" enabled="true" type="create" visible="{this.canCreate}" includeInLayout="{this.canCreate}"/>
						<components:DKI_Button id="btn_deleteLineDDD" width="32" cornerRadius="0" label="{resourceManager.getString('default','BUTTON__REMOVE_LINE_DDD')}" 
											   toolTip="{resourceManager.getString('default','TOOLTIP__ICON_TRASH_DDDLINE')}" height="100%" 
											   click="ddd_line_delHandler()" enabled="false" type="delete" visible="{this.canDelete}" includeInLayout="{this.canDelete}"/>
						<components:DKI_Button id="btn_updateLineDDD" width="32" cornerRadius="0" label="{resourceManager.getString('default','BUTTON__EDIT_LINE_DDD')}" 
											   toolTip="{resourceManager.getString('default','TOOLTIP__ICON_PEN_DDDLINE')}" height="100%" 
											   click="ddd_line_updHandler()" enabled="false" type="edit" visible="false" includeInLayout="false"/>
						<!--components:DKI_Button id="btn_updateLineDDD" width="32" cornerRadius="0" label="{resourceManager.getString('default','BUTTON__EDIT_LINE_DDD')}" 
											   toolTip="{resourceManager.getString('default','TOOLTIP__ICON_PEN_DDDLINE')}" height="100%" 
											   click="ddd_line_updHandler()" enabled="false" type="edit" visible="{this.canUpdate}" includeInLayout="{this.canUpdate}"/-->
						<components:DKI_Button id="btn_manageAddiInfoDDD" width="32" cornerRadius="0" label="{resourceManager.getString('default','BUTTON__DDD_ADDI_INFO')}" 
											   toolTip="{resourceManager.getString('default','TITLE__DDD_ADDI_INFO')}" height="100%" 
											   click="goToDddAdditionalInfo()" enabled="false" type="report" visible="{this.canCreate}" includeInLayout="{this.canCreate}"/>
					</s:HGroup>
					
					<s:HGroup width="100%" verticalAlign="middle">
						<s:DataGrid id="dddGrid" width="100%" height="200" requestedRowCount="4" excludeFrom="widget,normal"
									skinClass="skins.DKI_DataGrid_Skin" visible="true" enabled="{this.dd_number.text.length>0}" selectionMode="multipleRows"
									editable="true" editable.detail="false" 
									selectionChange="dddGrid_selectionChangeHandler(event)"
									gridClick="dddGrid_gridClickHandler(event)"
									gridItemEditorSessionSave="dddGrid_gridItemEditorSessionSaveHandler(event)"
									>
							<s:columns>
								<s:ArrayList>
									<s:source>
										<s:GridColumn dataField="ddd_action" headerText="{resourceManager.getString('default','DDD_ACTION')}" visible="{this.canUpdate||this.canDelete||this.canCreate}" editable="false" width="32" itemRenderer="renderers.GridMarkRenderer"></s:GridColumn>
										<s:GridColumn dataField="ddd_dd_number" headerText="{resourceManager.getString('default','DDD_DD_NUMBER')}" visible="false" editable="false"></s:GridColumn>
										<s:GridColumn dataField="ddd_dd_supp_code" headerText="{resourceManager.getString('default','DDD_DD_SUPP_CODE')}" visible="false" editable="false"></s:GridColumn>
										<s:GridColumn dataField="ddd_dd_supp_name" headerText="{resourceManager.getString('default','DDD_DD_SUPP_NAME')}" visible="false" editable="false"></s:GridColumn>
										<s:GridColumn dataField="ddd_dd_tripord_no" headerText="{resourceManager.getString('default','DDD_DD_TRIPORD_NO')}" visible="false" editable="false"></s:GridColumn>
										<s:GridColumn dataField="ddd_dd_ld_type" headerText="{resourceManager.getString('default','DDD_DD_LD_TYPE')}" visible="false" editable="false"></s:GridColumn>
										<s:GridColumn dataField="ddd_dd_load_typename" headerText="{resourceManager.getString('default','DDD_DD_LOAD_TYPENAME')}" visible="false" editable="false"></s:GridColumn>
										<s:GridColumn dataField="ddd_templ_id" headerText="{resourceManager.getString('default','DDD_TEMPL_ID')}" visible="true" editable="false" width="120"></s:GridColumn>
									</s:source>
								</s:ArrayList>
							</s:columns>
						</s:DataGrid>
						
					</s:HGroup>
				</s:VGroup>
				
				<s:VGroup width="10%">
					<!--s:Label width="{(this.canUpdate||this.canDelete||this.canCreate)?labelWidth:labelWidth+100}" height="{labelHeight}" text="{resourceManager.getString('default','BUTTON__DELIVERY_BOL')}" verticalAlign="middle"/-->
					<s:HGroup>
						<components:SearchComboWithCase id="ddb_templates" width="{(this.canUpdate||this.canDelete||this.canCreate)?fieldWidth:fieldWidth+100}" 
														height="{fieldHeight}" isTextFieldReset="false" enabled="true" visible="true"
														cornerRadius="10"
														labelField="template_name" 
														prompt="{resourceManager.getString('default','DB_TEMPL_ID')}"
														dataProvider="{this.bolTemplateList}"/>
						<components:DKI_Button id="btn_createLineDB" width="32" cornerRadius="0" label="{resourceManager.getString('default','BUTTON__ADD_LINE_DB')}" 
											   toolTip="{resourceManager.getString('default','TOOLTIP__ICON_CROSS_DBLINE')}" height="100%"
											   click="db_line_addHandler()" enabled="true" type="create" visible="{this.canCreate}" includeInLayout="{this.canCreate}"/>
						<components:DKI_Button id="btn_deleteLineDB" width="32" cornerRadius="0" label="{resourceManager.getString('default','BUTTON__REMOVE_LINE_DB')}" 
											   toolTip="{resourceManager.getString('default','TOOLTIP__ICON_TRASH_DBLINE')}" height="100%" 
											   click="db_line_delHandler()" enabled="false" type="delete" visible="{this.canDelete}" includeInLayout="{this.canDelete}"/>
						<components:DKI_Button id="btn_updateLineDB" width="32" cornerRadius="0" label="{resourceManager.getString('default','BUTTON__EDIT_LINE_DB')}" 
											   toolTip="{resourceManager.getString('default','TOOLTIP__ICON_PEN_DBLINE')}" height="100%" 
											   click="db_line_updHandler()" enabled="false" type="edit" visible="false" includeInLayout="false"/>
						<!-- components:DKI_Button id="btn_updateLineDB" width="32" cornerRadius="0" label="{resourceManager.getString('default','BUTTON__EDIT_LINE_DB')}" 
											   toolTip="{resourceManager.getString('default','TOOLTIP__ICON_PEN_DBLINE')}" height="100%" 
											   click="db_line_updHandler()" enabled="false" type="edit" visible="{this.canUpdate}" includeInLayout="{this.canUpdate}"/-->
					</s:HGroup>
					
					<s:HGroup width="100%" verticalAlign="middle">
						<s:DataGrid id="dbGrid" width="100%" height="200" requestedRowCount="4" excludeFrom="widget,normal"
									skinClass="skins.DKI_DataGrid_Skin" visible="true" enabled="{this.dd_number.text.length>0}" selectionMode="multipleRows"
									editable="true" editable.detail="false" 
									selectionChange="dbGrid_selectionChangeHandler(event)"
									gridClick="dbGrid_gridClickHandler(event)"
									gridItemEditorSessionSave="dbGrid_gridItemEditorSessionSaveHandler(event)"
									>
							<s:columns>
								<s:ArrayList>
									<s:source>
										<s:GridColumn dataField="db_action" headerText="{resourceManager.getString('default','DDD_ACTION')}" visible="{this.canUpdate||this.canDelete||this.canCreate}" editable="false" width="32" itemRenderer="renderers.GridMarkRenderer"></s:GridColumn>
										<s:GridColumn dataField="db_supp_code" headerText="{resourceManager.getString('default','DB_SUPP_CODE')}" visible="false" editable="false"></s:GridColumn>
										<s:GridColumn dataField="db_supp_name" headerText="{resourceManager.getString('default','DB_SUPP_NAME')}" visible="false" editable="false"></s:GridColumn>
										<s:GridColumn dataField="db_tripord_no" headerText="{resourceManager.getString('default','DB_TRIPORD_NO')}" visible="false" editable="false"></s:GridColumn>
										<s:GridColumn dataField="db_ld_type" headerText="{resourceManager.getString('default','DB_LD_TYPE')}" visible="false" editable="false"></s:GridColumn>
										<s:GridColumn dataField="db_load_typename" headerText="{resourceManager.getString('default','DB_LOAD_TYPENAME')}" visible="false" editable="false"></s:GridColumn>
										<s:GridColumn dataField="db_templ_id" headerText="{resourceManager.getString('default','DB_TEMPL_ID')}" visible="true" editable="false" width="120"></s:GridColumn>
									</s:source>
								</s:ArrayList>
							</s:columns>
						</s:DataGrid>
						
					</s:HGroup>
				</s:VGroup>
			</s:HGroup>
			
		</s:VGroup>
		
		<s:HGroup width="100%" paddingBottom="4" paddingTop="0" gap="5">
			<s:Spacer width="100%"/>
			<components:DKI_Button id="btn_delete" label="{resourceManager.getString('default','BUTTON__DELETE_DD')}" height="100%" click="doDelete()" includeIn="edit" enabled="{this.canDelete}" visible="{this.canDelete}" type="delete"/>
			<components:DKI_Button id="btn_save" label.create="{resourceManager.getString('default','BUTTON__SAVE_DD')}" label="{resourceManager.getString('default','BUTTON__UPDATE_DD')}" height="100%" 
								   includeIn="edit,create,detail" enabled.create="{this.canCreate}" enabled="{this.canUpdate}" visible.create="{this.canCreate}" visible="{this.canUpdate}" 
								   type.create="create" type="edit" focusEnabled="true" focusEnabled.create="false"/>
			<components:DKI_Button id="btn_cancel" label="{resourceManager.getString('default','CANCEL')}" height="100%" click="cancel_clickHandler()" enabled="true" type="cancel" focusEnabled="true" focusEnabled.create="false"/>
		</s:HGroup>
	</s:Panel>
	
</s:VGroup>
